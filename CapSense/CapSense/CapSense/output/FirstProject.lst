FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C21x34 microcontroller devices.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0068) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0069) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0070) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0071) ; bytes on the stack which are otherwise required for the return address. If
                                        (0072) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0073) ; release, the C compiler automatically places an infinite loop at the end
                                        (0074) ; of main, rather than a return instruction.)
                                        (0075) ;
                                        (0076) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0077) 
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ; Interrupt Vector Table
                                        (0081) ;-----------------------------------------------------------------------------
                                        (0082) ;
                                        (0083) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0084) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0085) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0086) ; vector jump targets are modified automatically according to the user
                                        (0087) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0088) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0089) ; configuration files. If you need to hard code a vector, update the
                                        (0090) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0091) ; of this file.
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) 
                                        (0094)     AREA TOP (ROM, ABS, CON)
                                        (0095) 
                                        (0096)     org   0                        ;Reset Interrupt Vector
                                        (0097) IF	(TOOLCHAIN & HITECH)
                                        (0098) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0099) ELSE
0000: 80 67    JMP   0x0068             (0100)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0101) ENDIF
                                        (0102)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0103)     ;---------------------------------------------------
                                        (0104)     ; Insert your custom code below this banner
                                        (0105)     ;---------------------------------------------------
                                        (0106) 
                                        (0107)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0108)     halt                           ;Stop execution if power falls too low
                                        (0109) 
                                        (0110)     org   08h                      ;Analog Column 0 Interrupt Vector
0008: 7D 05 0E LJMP  _CSD_CMP0_ISR      (0111)     ljmp	_CSD_CMP0_ISR
000B: 7E       RETI                     (0112)     reti
                                        (0113) 
                                        (0114)     org   0Ch                      ;Analog Column 1 Interrupt Vector
000C: 7D 05 0C LJMP  _CSD_CMP_ISR       (0115)     ljmp	_CSD_CMP_ISR
000F: 7E       RETI                     (0116)     reti
                                        (0117) 
                                        (0118)     org   18h                      ;VC3 Interrupt Vector
                                        (0119)     // call	void_handler
0018: 7E       RETI                     (0120)     reti
                                        (0121) 
                                        (0122)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0123)     // call	void_handler
001C: 7E       RETI                     (0124)     reti
                                        (0125) 
                                        (0126)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 05 09 LJMP  _CSD_CNT_ISR       (0127)     ljmp	_CSD_CNT_ISR
0023: 7E       RETI                     (0128)     reti
                                        (0129) 
                                        (0130)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0131)     // call	void_handler
0024: 7E       RETI                     (0132)     reti
                                        (0133) 
                                        (0134)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0135)     // call	void_handler
0028: 7E       RETI                     (0136)     reti
                                        (0137) 
                                        (0138)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0139)     // call	void_handler
002C: 7E       RETI                     (0140)     reti
                                        (0141) 
                                        (0142)     org   60h                      ;PSoC I2C Interrupt Vector
0060: 7D 03 92 LJMP  _EzI2Cs_ISR        (0143)     ljmp	_EzI2Cs_ISR
0063: 7E       RETI                     (0144)     reti
                                        (0145) 
                                        (0146)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0147)     // call	void_handler
0064: 7E       RETI                     (0148)     reti
0068: 71 10    OR    F,0x10             
                                        (0149)     ;---------------------------------------------------
                                        (0150)     ; Insert your custom code above this banner
                                        (0151)     ;---------------------------------------------------
                                        (0152)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0153) 
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  Start of Execution.
                                        (0156) ;-----------------------------------------------------------------------------
                                        (0157) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0158) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0159) ;
                                        (0160) 
                                        (0161) IF	(TOOLCHAIN & HITECH)
                                        (0162)  	AREA PD_startup(CODE, REL, CON)
                                        (0163) ELSE
                                        (0164)     org 68h
                                        (0165) ENDIF
                                        (0166) __Start:
                                        (0167) 
                                        (0168)     ; initialize SMP values for voltage stabilization, if required,
                                        (0169)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0170)     ; least for now. 
                                        (0171)     ;
                                        (0172)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0173)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0174)     M8C_SetBank0
                                        (0175) 
                                        (0176) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0177) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0178)     M8C_EnableWatchDog
                                        (0179) ENDIF
                                        (0180) 
0072: 41 FE FB AND   REG[0xFE],0xFB     (0181)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0182) 
                                        (0183)     ;---------------------------
                                        (0184)     ; Set up the Temporary stack
                                        (0185)     ;---------------------------
                                        (0186)     ; A temporary stack is set up for the SSC instructions.
                                        (0187)     ; The real stack start will be assigned later.
                                        (0188)     ;
                                        (0189) _stack_start:          equ 80h
0075: 50 80    MOV   A,0x80             (0190)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0191)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0192) 
                                        (0193)     ;------------------------
                                        (0194)     ; Set Power-related Trim 
                                        (0195)     ;------------------------
                                        (0196)     
                                        (0197) M8C_ClearWDTAndSleep
                                        (0198) 
                                        (0199) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0200)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0201)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0202)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V
                                        (0203)  ENDIF
                                        (0204) ENDIF ; 5.0 V Operation
                                        (0205) 
                                        (0206) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0207)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0208)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0209)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V
                                        (0210)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0211)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V
                                        (0212)  ENDIF
                                        (0213) ENDIF ; 3.3 Volt Operation
                                        (0214) 
                                        (0215) IF ( POWER_SETTING & POWER_SET_2V7_12MHZ)      ; *** 2.7 Volts / 12MHZ operation ***
                                        (0216)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0217)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_12MHZ, SSCTBL2_TRIM_BGR_2V
                                        (0218) ENDIF ; *** 2.7 Volts / 12MHZ operation ***
                                        (0219) 
                                        (0220) IF ( POWER_SETTING & POWER_SET_2V7_6MHZ)       ; *** 2.7 Volts /  6MHZ operation ***
                                        (0221)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0222)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_6MHZ,  SSCTBL2_TRIM_BGR_2V
                                        (0223) ENDIF ; *** 2.7 Volts /  6MHZ operation ***
                                        (0224) 
007B: 55 F8 00 MOV   [CapSensPush+76],0x0(0225)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [CapSensPush+77],0x0(0226)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0227) 
                                        (0228)     ;---------------------------------------
                                        (0229)     ; Initialize Crystal Oscillator and PLL
                                        (0230)     ;---------------------------------------
                                        (0231) IF ( POWER_SETTING & POWER_SET_2V7)       ; *** 2.7 Volts  ***
                                        (0232)     M8C_SetBank1
                                        (0233)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_3MHz)
                                        (0234)     M8C_SetBank0
                                        (0235)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0236) 
                                        (0237) ELSE 	 ;*** all other voltages OK for 12Mhz ***
                                        (0238)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0239)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
008B: 62 D1 01 MOV   REG[0xD1],0x1      
                                        (0240)     M8C_SetBank0
                                        (0241)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0242) 
                                        (0243) ENDIF
                                        (0244) 
                                        (0245) 	;-------------------------------------------------------
                                        (0246)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0247)     ;-------------------------------------------------------
                                        (0248) 
                                        (0249)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0250) 
                                        (0251) IF (SYSCLK_SOURCE)
                                        (0252)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0253) ENDIF
                                        (0254)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0255) 
                                        (0256) IF	(TOOLCHAIN & HITECH)
                                        (0257)     ;---------------------------------------------
                                        (0258)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0259)     ;---------------------------------------------
                                        (0260) 	global		__Lstackps
                                        (0261) 	mov     a,low __Lstackps
                                        (0262) 	swap    a,sp
                                        (0263) 
                                        (0264) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0265)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0266)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0267)     RAM_SETPAGE_CUR 0
                                        (0268)     RAM_SETPAGE_MVW 0
                                        (0269)     RAM_SETPAGE_MVR 0
                                        (0270)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0271)       or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0272)     ELSE
                                        (0273)       or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0274)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0275) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0276) ELSE
                                        (0277)     ;---------------------------------------------
                                        (0278)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0279)     ;---------------------------------------------
                                        (0280) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0281)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
008E: 50 00    MOV   A,0x0              (0282)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
0090: 4E       SWAP  SP,A               (0283)     swap  A, SP
0091: 62 D3 01 MOV   REG[0xD3],0x1      
0094: 62 D0 00 MOV   REG[0xD0],0x0      
0097: 62 D5 00 MOV   REG[0xD5],0x0      
009A: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0284)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0285)     RAM_SETPAGE_CUR 0
                                        (0286)     RAM_SETPAGE_MVW 0
                                        (0287)     RAM_SETPAGE_MVR 0
                                        (0288) 
                                        (0289)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
009D: 71 C0    OR    F,0xC0             (0290)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0291)   ELSE
                                        (0292)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0293)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0294) ELSE
                                        (0295)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0296)     swap  SP, A
                                        (0297) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0298) ENDIF ;	TOOLCHAIN
                                        (0299) 
                                        (0300)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0301)     ;---------------------------------------------------
                                        (0302)     ; Insert your custom code below this banner
                                        (0303)     ;---------------------------------------------------
                                        (0304) 
                                        (0305)     ;---------------------------------------------------
                                        (0306)     ; Insert your custom code above this banner
                                        (0307)     ;---------------------------------------------------
                                        (0308)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0309) 
                                        (0310)     ;-------------------------
                                        (0311)     ; Load Base Configuration
                                        (0312)     ;-------------------------
                                        (0313)     ; Load global parameter settings and load the user modules in the
                                        (0314)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0315)     ; to minimize start up time; (2) We may still need to play with the
                                        (0316)     ; Sleep Timer.
                                        (0317)     ;
009F: 7C 02 73 LCALL 0x0273             (0318)     lcall LoadConfigInit
                                        (0319) 
                                        (0320)     ;-----------------------------------
                                        (0321)     ; Initialize C Run-Time Environment
                                        (0322)     ;-----------------------------------
                                        (0323) IF ( C_LANGUAGE_SUPPORT )
                                        (0324) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0325)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0326)     mov  [__r0],<__bss_start
                                        (0327) BssLoop:
                                        (0328)     cmp  [__r0],<__bss_end
                                        (0329)     jz   BssDone
                                        (0330)     mvi  [__r0],A
                                        (0331)     jmp  BssLoop
                                        (0332) BssDone:
                                        (0333)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0334)     mov  X,<__idata_start
                                        (0335)     mov  [__r0],<__data_start
                                        (0336) IDataLoop:
                                        (0337)     cmp  [__r0],<__data_end
                                        (0338)     jz   C_RTE_Done
                                        (0339)     push A
                                        (0340)     romx
                                        (0341)     mvi  [__r0],A
                                        (0342)     pop  A
                                        (0343)     inc  X
                                        (0344)     adc  A,0
                                        (0345)     jmp  IDataLoop
                                        (0346) 
                                        (0347) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0348) 
                                        (0349) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00A2: 62 D0 00 MOV   REG[0xD0],0x0      (0350)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0351)                                        ; to use the Virtual Register page.
                                        (0352) 
                                        (0353)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0354)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0355)     ; text segment and may have been relocated by the Code Compressor.
                                        (0356)     ;
00A5: 50 01    MOV   A,0x1              (0357)     mov   A, >__pXIData                ; Get the address of the flash
00A7: 57 EC    MOV   X,0xEC             (0358)     mov   X, <__pXIData                ;   pointer to the xidata area.
00A9: 08       PUSH  A                  (0359)     push  A
00AA: 28       ROMX                     (0360)     romx                               ; get the MSB of xidata's address
00AB: 53 97    MOV   [__r0],A           (0361)     mov   [__r0], A
00AD: 18       POP   A                  (0362)     pop   A
00AE: 75       INC   X                  (0363)     inc   X
00AF: 09 00    ADC   A,0x0              (0364)     adc   A, 0
00B1: 28       ROMX                     (0365)     romx                               ; get the LSB of xidata's address
00B2: 4B       SWAP  A,X                (0366)     swap  A, X
00B3: 51 97    MOV   A,[__r0]           (0367)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0368)                                        ;   XIData structure list in flash
00B5: 80 04    JMP   0x00BA             (0369)     jmp   .AccessStruct
                                        (0370) 
                                        (0371)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0372)     ; values of C variables. Each structure contains 3 member elements.
                                        (0373)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0374)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0375)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0376)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0377)     ; value in the second member element, an unsigned byte:
                                        (0378)     ; (1) If the value of the second element is non-zero, it represents
                                        (0379)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0380)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0381)     ; the bytes are copied to the block of RAM.
                                        (0382)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0383)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0384)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0385) 
                                        (0386) .AccessNextStructLoop:
00B7: 75       INC   X                  (0387)     inc   X                            ; pXIData++
00B8: 09 00    ADC   A,0x0              (0388)     adc   A, 0
00BA: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0389) .AccessStruct:                         ; Entry point for first block
                                        (0390)     ;
                                        (0391)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0392)     ;
                                        (0393)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00BD: 08       PUSH  A                  (0394)     push  A
00BE: 28       ROMX                     (0395)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00BF: 60 D5    MOV   REG[0xD5],A        (0396)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00C1: 74       INC   A                  (0397)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00C2: A0 4B    JZ    0x010E             (0398)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00C4: 18       POP   A                  (0399)     pop   A                            ; restore pXIData to [A,X]
00C5: 75       INC   X                  (0400)     inc   X                            ; pXIData++
00C6: 09 00    ADC   A,0x0              (0401)     adc   A, 0
00C8: 08       PUSH  A                  (0402)     push  A
00C9: 28       ROMX                     (0403)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00CA: 53 97    MOV   [__r0],A           (0404)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00CC: 18       POP   A                  (0405)     pop   A                            ; restore pXIData to [A,X]
00CD: 75       INC   X                  (0406)     inc   X                            ; pXIData++ (point to size)
00CE: 09 00    ADC   A,0x0              (0407)     adc   A, 0
00D0: 08       PUSH  A                  (0408)     push  A
00D1: 28       ROMX                     (0409)     romx                               ; Get the size (CPU.A <- *pXIData)
00D2: A0 1C    JZ    0x00EF             (0410)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00D4: 53 96    MOV   [__r1],A           (0411)     mov   [__r1], A                    ;             else downcount in __r1
00D6: 18       POP   A                  (0412)     pop   A                            ; restore pXIData to [A,X]
                                        (0413) 
                                        (0414) .CopyNextByteLoop:
                                        (0415)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0416)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0417)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0418)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0419)     ;
00D7: 75       INC   X                  (0420)     inc   X                            ; pXIData++ (point to next data byte)
00D8: 09 00    ADC   A,0x0              (0421)     adc   A, 0
00DA: 08       PUSH  A                  (0422)     push  A
00DB: 28       ROMX                     (0423)     romx                               ; Get the data value (CPU.A <- *pXIData)
00DC: 3F 97    MVI   [__r0],A           (0424)     mvi   [__r0], A                    ; Transfer the data to RAM
00DE: 47 97 FF TST   [__r0],0xFF        (0425)     tst   [__r0], 0xff                 ; Check for page crossing
00E1: B0 06    JNZ   0x00E8             (0426)     jnz   .CopyLoopTail                ;   No crossing, keep going
00E3: 5D D5    MOV   A,REG[0xD5]        (0427)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00E5: 74       INC   A                  (0428)     inc   A
00E6: 60 D5    MOV   REG[0xD5],A        (0429)     mov   reg[ MVW_PP], A
                                        (0430) .CopyLoopTail:
00E8: 18       POP   A                  (0431)     pop   A                            ; restore pXIData to [A,X]
00E9: 7A 96    DEC   [__r1]             (0432)     dec   [__r1]                       ; End of this array in flash?
00EB: BF EB    JNZ   0x00D7             (0433)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
00ED: 8F C9    JMP   0x00B7             (0434)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0435) 
                                        (0436) .ClearRAMBlockToZero:
00EF: 18       POP   A                  (0437)     pop   A                            ; restore pXIData to [A,X]
00F0: 75       INC   X                  (0438)     inc   X                            ; pXIData++ (point to next data byte)
00F1: 09 00    ADC   A,0x0              (0439)     adc   A, 0
00F3: 08       PUSH  A                  (0440)     push  A
00F4: 28       ROMX                     (0441)     romx                               ; Get the run length (CPU.A <- *pXIData)
00F5: 53 96    MOV   [__r1],A           (0442)     mov   [__r1], A                    ; Initialize downcounter
00F7: 50 00    MOV   A,0x0              (0443)     mov   A, 0                         ; Initialize source data
                                        (0444) 
                                        (0445) .ClearRAMBlockLoop:
                                        (0446)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0447)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0448)     ;
00F9: 3F 97    MVI   [__r0],A           (0449)     mvi   [__r0], A                    ; Clear a byte
00FB: 47 97 FF TST   [__r0],0xFF        (0450)     tst   [__r0], 0xff                 ; Check for page crossing
00FE: B0 08    JNZ   0x0107             (0451)     jnz   .ClearLoopTail               ;   No crossing, keep going
0100: 5D D5    MOV   A,REG[0xD5]        (0452)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0102: 74       INC   A                  (0453)     inc   A
0103: 60 D5    MOV   REG[0xD5],A        (0454)     mov   reg[ MVW_PP], A
0105: 50 00    MOV   A,0x0              (0455)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0456) .ClearLoopTail:
0107: 7A 96    DEC   [__r1]             (0457)     dec   [__r1]                       ; Was this the last byte?
0109: BF EF    JNZ   0x00F9             (0458)     jnz   .ClearRAMBlockLoop           ;   No,  continue
010B: 18       POP   A                  (0459)     pop   A                            ;   Yes, restore pXIData to [A,X] and
010C: 8F AA    JMP   0x00B7             (0460)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0461) 
                                        (0462) .C_RTE_WrapUp:
010E: 18       POP   A                  (0463)     pop   A                            ; balance stack
010F: 71 10    OR    F,0x10             
                                        (0464) 
                                        (0465) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0466) 
                                        (0467) C_RTE_Done:
                                        (0468) 
                                        (0469) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0470) 
                                        (0471)     ;-------------------------------
                                        (0472)     ; Voltage Stabilization for SMP
                                        (0473)     ;-------------------------------
                                        (0474) 
                                        (0475) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0476) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0477)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0478)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0479)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0480)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0481)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0482)     M8C_SetBank1
                                        (0483)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0484)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0485)     M8C_SetBank0
                                        (0486)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0487)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0488) .WaitFor2ms:
                                        (0489)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0490)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0491) ENDIF ; SMP is operational
                                        (0492) ENDIF ; 5.0V Operation
                                        (0493) 
                                        (0494)     ;-------------------------------
                                        (0495)     ; Set Power-On Reset (POR) Level
                                        (0496)     ;-------------------------------
                                        (0497)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0498)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0499)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0500)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0501)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0502) 
                                        (0503)     M8C_SetBank1
                                        (0504) 
                                        (0505) IF (POWER_SETTING & POWER_SET_2V7)             ; 2.7V Operation?
                                        (0506)                                                ;  Yes, lowest trip already set
                                        (0507) ELSE                                           ;   No, must adjust POR...
                                        (0508) IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
                                        (0509)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, change to midpoint trip
                                        (0510) ELSE
                                        (0511) IF (POWER_SETTING & POWER_SET_5V0)             ; 5.0V Operation?
                                        (0512)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)       ; and Slow Mode?
                                        (0513)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, set to midpoint trip
                                        (0514)  ELSE                                          ;    No, fast mode
                                        (0515)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
0111: 43 E3 10 OR    REG[0xE3],0x10     (0516)     or   reg[VLT_CR], VLT_CR_POR_MID           ;         No, change to midpoint trip
0114: 70 EF    AND   F,0xEF             
                                        (0517)   ELSE ; 24HMz                                 ;
                                        (0518)     or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
                                        (0519)   ENDIF ; 24MHz
                                        (0520)  ENDIF ; Slow Mode
                                        (0521) ENDIF ; 5.0V Operation
                                        (0522) ENDIF ; 3.3V Operation
                                        (0523) ENDIF ; 2.7V Operation
                                        (0524) 
                                        (0525)     M8C_SetBank0
                                        (0526) 
                                        (0527)     ;----------------------------
                                        (0528)     ; Wrap up and invoke "main"
                                        (0529)     ;----------------------------
                                        (0530) 
                                        (0531)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0532)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0533)     ;
0116: 62 E0 00 MOV   REG[0xE0],0x0      (0534)     mov  reg[INT_MSK0],0
0119: 71 10    OR    F,0x10             
                                        (0535) 
                                        (0536)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0537)     ;
                                        (0538)     M8C_SetBank1
011B: 62 E0 00 MOV   REG[0xE0],0x0      (0539)     mov  reg[OSC_CR0],(SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
011E: 70 EF    AND   F,0xEF             
                                        (0540)     M8C_SetBank0
                                        (0541) 
                                        (0542)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0543)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0544)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0545)     ;
0120: 62 E2 00 MOV   REG[0xE2],0x0      (0546)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0547)                                    ; have been set during the boot process.
                                        (0548) IF	(TOOLCHAIN & HITECH)
                                        (0549) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0550) ELSE
                                        (0551) IF ENABLE_LJMP_TO_MAIN
                                        (0552)     ljmp  _main                    ; goto main (no return)
                                        (0553) ELSE
0123: 7C 14 71 LCALL _main              (0554)     lcall _main                    ; call main
                                        (0555) .Exit:
0126: 8F FF    JMP   0x0126             (0556)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0557) ENDIF
                                        (0558) ENDIF ; TOOLCHAIN
                                        (0559) 
                                        (0560)     ;---------------------------------
                                        (0561)     ; Library Access to Global Parms
                                        (0562)     ;---------------------------------
                                        (0563)     ;
                                        (0564)  bGetPowerSetting:
                                        (0565) _bGetPowerSetting:
                                        (0566)     ; Returns value of POWER_SETTING in the A register.
                                        (0567)     ; No inputs. No Side Effects.
                                        (0568)     ;
                                        (0569) IF (POWER_SETTING & POWER_SET_2V7)
                                        (0570)     mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
                                        (0571) ELSE
0128: 50 10    MOV   A,0x10             (0572)     mov   A, POWER_SETTING          ; Supply voltage and internal main osc
                                        (0573) ENDIF
012A: 7F       RET                      (0574)     ret
                                        (0575) 
                                        (0576) IF	(TOOLCHAIN & HITECH)
                                        (0577) ELSE
                                        (0578)     ;---------------------------------
                                        (0579)     ; Order Critical RAM & ROM AREAs
                                        (0580)     ;---------------------------------
                                        (0581)     ;  'TOP' is all that has been defined so far...
                                        (0582) 
                                        (0583)     ;  ROM AREAs for C CONST, static & global items
                                        (0584)     ;
                                        (0585)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0586)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0587) __idata_start:
                                        (0588) 
                                        (0589)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0590) __func_lit_start:
                                        (0591) 
                                        (0592) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0593)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0594)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0595)     ; relocated by the code compressor, but the text area may shrink and
                                        (0596)     ; that moves xidata around.
                                        (0597)     ;
                                        (0598) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0599) ENDIF
                                        (0600) 
                                        (0601)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0602)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0603) 
                                        (0604)     ; CODE segment for general use
                                        (0605)     ;
                                        (0606)     AREA text (ROM, REL, CON)
                                        (0607) __text_start:
                                        (0608) 
                                        (0609)     ; RAM area usage
                                        (0610)     ;
                                        (0611)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0612) __data_start:
                                        (0613) 
                                        (0614)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0615)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0616)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0617) __bss_start:
                                        (0618) ENDIF ; TOOLCHAIN
                                        (0619) ; end of file boot.asm
FILE: C:\Users\100050~1\Desktop\FIRSTP~1\FIRSTP~1\FIRSTP~1\capsensecontrol.c
(0001) #include "CapSenseControl.h"
(0002) #include <m8c.h>        
(0003) #include "PSoCAPI.h"    
(0004) #include <stdlib.h>
(0005) #define Interval 50
(0006) #define POS 		1
(0007) #define RWBOUNDARY	2
(0008) CapSenseControl_DataRegsStruct CapSenseControl_DataRegs;
(0009) CapSenseControl_ScanReturnStruct CapSenseControl_ScanReturn;
(0010) BOOL CapSensPush;
(0011) int fingerposition;
(0012) int loopQty; 
(0013) 
(0014) void CapSenseControl_INIT(void)
(0015) {
(0016) 	EzI2Cs_SetRamBuffer(sizeof(CapSenseControl_DataRegs), RWBOUNDARY, (BYTE *) &CapSenseControl_DataRegs);
__UserModules_end|__text_start|_CapSenseControl_INIT|_CapSenseControl_INIT:
    0EE5: 10       PUSH  X
    0EE6: 50 00    MOV   A,0x0
    0EE8: 08       PUSH  A
    0EE9: 50 A4    MOV   A,0xA4
    0EEB: 08       PUSH  A
    0EEC: 50 02    MOV   A,0x2
    0EEE: 08       PUSH  A
    0EEF: 08       PUSH  A
    0EF0: 7C 04 D0 LCALL _EzI2Cs_SetRamBuffer
    0EF3: 38 FC    ADD   SP,0xFC
(0017)     CSD_Start();   
    0EF5: 7C 0C 95 LCALL _CSD_Start
(0018) 	CSD_ScanAllSensors();   
    0EF8: 7C 0E A2 LCALL _CSD_ScanAllSensors
(0019) 	CSD_InitializeBaselines();   
    0EFB: 7C 06 C7 LCALL _CSD_InitializeBaselines
(0020) 	CSD_SetDefaultFingerThresholds();
    0EFE: 7C 06 B2 LCALL _CSD_SetDefaultFingerThresholds
(0021) 	EzI2Cs_Start();
    0F01: 7C 04 75 LCALL _EzI2Cs_Start
    0F04: 20       POP   X
(0022) 	CapSenseControl_DataRegs.led = 3;
    0F05: 62 D0 00 MOV   REG[0xD0],0x0
    0F08: 55 A4 03 MOV   [CapSenseControl_DataRegs],0x3
(0023) 	CapSenseControl_ScanReturn.action=0;
    0F0B: 62 D0 00 MOV   REG[0xD0],0x0
    0F0E: 55 A6 00 MOV   [CapSenseControl_ScanReturn],0x0
(0024) 	CapSenseControl_ScanReturn.value=0;
    0F11: 55 A7 00 MOV   [CapSenseControl_ScanReturn+1],0x0
(0025) 	CapSensPush=FALSE;
    0F14: 62 D0 00 MOV   REG[0xD0],0x0
    0F17: 55 AC 00 MOV   [CapSensPush],0x0
(0026) 	loopQty=0;
    0F1A: 62 D0 00 MOV   REG[0xD0],0x0
    0F1D: 55 9F 00 MOV   [loopQty+1],0x0
    0F20: 55 9E 00 MOV   [loopQty],0x0
(0027) 	fingerposition=0;
    0F23: 62 D0 00 MOV   REG[0xD0],0x0
    0F26: 55 A1 00 MOV   [fingerposition+1],0x0
    0F29: 55 A0 00 MOV   [fingerposition],0x0
    0F2C: 7F       RET   
(0028) }
(0029) 
(0030) void CapSenseControl_GetNewBlinkFreq(void)
(0031) {
(0032) 	
(0033) 	fingerposition = CSD_wGetCentroidPos(POS); 
_CapSenseControl_GetNewBlinkFreq:
    0F2D: 10       PUSH  X
    0F2E: 50 01    MOV   A,0x1
    0F30: 7C 07 37 LCALL _CSD_wGetCentroidPos
    0F33: 62 D0 00 MOV   REG[0xD0],0x0
    0F36: 5A 97    MOV   [__r0],X
    0F38: 20       POP   X
    0F39: 08       PUSH  A
    0F3A: 51 97    MOV   A,[__r0]
    0F3C: 62 D0 00 MOV   REG[0xD0],0x0
    0F3F: 53 A0    MOV   [fingerposition],A
    0F41: 18       POP   A
    0F42: 53 A1    MOV   [fingerposition+1],A
(0034) 	if (!CapSensPush && CapSenseControl_DataRegs.sliderPos==0)
    0F44: 62 D0 00 MOV   REG[0xD0],0x0
    0F47: 3C AC 00 CMP   [CapSensPush],0x0
    0F4A: B0 19    JNZ   0x0F64
    0F4C: 62 D0 00 MOV   REG[0xD0],0x0
    0F4F: 3C A5 00 CMP   [CapSenseControl_DataRegs+1],0x0
    0F52: B0 11    JNZ   0x0F64
(0035) 	{
(0036) 		CapSenseControl_DataRegs.sliderPos = (BYTE) fingerposition;
    0F54: 62 D0 00 MOV   REG[0xD0],0x0
    0F57: 51 A1    MOV   A,[fingerposition+1]
    0F59: 62 D0 00 MOV   REG[0xD0],0x0
    0F5C: 53 A5    MOV   [CapSenseControl_DataRegs+1],A
(0037) 		CapSensPush = TRUE;
    0F5E: 62 D0 00 MOV   REG[0xD0],0x0
    0F61: 55 AC 01 MOV   [CapSensPush],0x1
(0038) 	}
(0039) 			
(0040) 	if ( abs(CapSenseControl_DataRegs.sliderPos-fingerposition) >=10)
    0F64: 62 D0 00 MOV   REG[0xD0],0x0
    0F67: 51 A5    MOV   A,[CapSenseControl_DataRegs+1]
    0F69: 62 D0 00 MOV   REG[0xD0],0x0
    0F6C: 53 96    MOV   [__r1],A
    0F6E: 55 97 00 MOV   [__r0],0x0
    0F71: 62 D0 00 MOV   REG[0xD0],0x0
    0F74: 51 A1    MOV   A,[fingerposition+1]
    0F76: 62 D0 00 MOV   REG[0xD0],0x0
    0F79: 14 96    SUB   [__r1],A
    0F7B: 62 D0 00 MOV   REG[0xD0],0x0
    0F7E: 51 A0    MOV   A,[fingerposition]
    0F80: 62 D0 00 MOV   REG[0xD0],0x0
    0F83: 1C 97    SBB   [__r0],A
    0F85: 51 97    MOV   A,[__r0]
    0F87: 08       PUSH  A
    0F88: 51 96    MOV   A,[__r1]
    0F8A: 08       PUSH  A
    0F8B: 7C 15 CF LCALL _abs
    0F8E: 38 FE    ADD   SP,0xFE
    0F90: 62 D0 00 MOV   REG[0xD0],0x0
    0F93: 51 96    MOV   A,[__r1]
    0F95: 11 0A    SUB   A,0xA
    0F97: 51 97    MOV   A,[__r0]
    0F99: 31 80    XOR   A,0x80
    0F9B: 19 80    SBB   A,0x80
    0F9D: C1 07    JC    0x10A5
(0041) 	{
(0042) 		if (CapSenseControl_DataRegs.sliderPos-fingerposition>0 )
    0F9F: 62 D0 00 MOV   REG[0xD0],0x0
    0FA2: 51 A5    MOV   A,[CapSenseControl_DataRegs+1]
    0FA4: 62 D0 00 MOV   REG[0xD0],0x0
    0FA7: 53 96    MOV   [__r1],A
    0FA9: 55 97 00 MOV   [__r0],0x0
    0FAC: 62 D0 00 MOV   REG[0xD0],0x0
    0FAF: 51 A1    MOV   A,[fingerposition+1]
    0FB1: 62 D0 00 MOV   REG[0xD0],0x0
    0FB4: 14 96    SUB   [__r1],A
    0FB6: 62 D0 00 MOV   REG[0xD0],0x0
    0FB9: 51 A0    MOV   A,[fingerposition]
    0FBB: 62 D0 00 MOV   REG[0xD0],0x0
    0FBE: 1C 97    SBB   [__r0],A
    0FC0: 50 00    MOV   A,0x0
    0FC2: 12 96    SUB   A,[__r1]
    0FC4: 51 97    MOV   A,[__r0]
    0FC6: 31 80    XOR   A,0x80
    0FC8: 53 93    MOV   [__rX],A
    0FCA: 50 80    MOV   A,0x80
    0FCC: 1A 93    SBB   A,[__rX]
    0FCE: D0 52    JNC   0x1021
(0043) 		{					
(0044) 			CapSenseControl_ScanReturn.action = 1;
    0FD0: 62 D0 00 MOV   REG[0xD0],0x0
    0FD3: 55 A6 01 MOV   [CapSenseControl_ScanReturn],0x1
(0045) 			CapSenseControl_ScanReturn.value = abs(CapSenseControl_DataRegs.sliderPos-fingerposition)/Interval;								
    0FD6: 62 D0 00 MOV   REG[0xD0],0x0
    0FD9: 51 A5    MOV   A,[CapSenseControl_DataRegs+1]
    0FDB: 62 D0 00 MOV   REG[0xD0],0x0
    0FDE: 53 96    MOV   [__r1],A
    0FE0: 55 97 00 MOV   [__r0],0x0
    0FE3: 62 D0 00 MOV   REG[0xD0],0x0
    0FE6: 51 A1    MOV   A,[fingerposition+1]
    0FE8: 62 D0 00 MOV   REG[0xD0],0x0
    0FEB: 14 96    SUB   [__r1],A
    0FED: 62 D0 00 MOV   REG[0xD0],0x0
    0FF0: 51 A0    MOV   A,[fingerposition]
    0FF2: 62 D0 00 MOV   REG[0xD0],0x0
    0FF5: 1C 97    SBB   [__r0],A
    0FF7: 51 97    MOV   A,[__r0]
    0FF9: 08       PUSH  A
    0FFA: 51 96    MOV   A,[__r1]
    0FFC: 08       PUSH  A
    0FFD: 7C 15 CF LCALL _abs
    1000: 38 FE    ADD   SP,0xFE
    1002: 62 D0 00 MOV   REG[0xD0],0x0
    1005: 50 00    MOV   A,0x0
    1007: 08       PUSH  A
    1008: 50 32    MOV   A,0x32
    100A: 08       PUSH  A
    100B: 51 97    MOV   A,[__r0]
    100D: 08       PUSH  A
    100E: 51 96    MOV   A,[__r1]
    1010: 08       PUSH  A
    1011: 7C 15 48 LCALL 0x1548
    1014: 18       POP   A
    1015: 53 96    MOV   [__r1],A
    1017: 18       POP   A
    1018: 38 FE    ADD   SP,0xFE
    101A: 51 96    MOV   A,[__r1]
    101C: 62 D0 00 MOV   REG[0xD0],0x0
    101F: 53 A7    MOV   [CapSenseControl_ScanReturn+1],A
(0046) 		}
(0047) 		if (CapSenseControl_DataRegs.sliderPos-fingerposition<0 )
    1021: 62 D0 00 MOV   REG[0xD0],0x0
    1024: 51 A5    MOV   A,[CapSenseControl_DataRegs+1]
    1026: 62 D0 00 MOV   REG[0xD0],0x0
    1029: 53 96    MOV   [__r1],A
    102B: 55 97 00 MOV   [__r0],0x0
    102E: 62 D0 00 MOV   REG[0xD0],0x0
    1031: 51 A1    MOV   A,[fingerposition+1]
    1033: 62 D0 00 MOV   REG[0xD0],0x0
    1036: 14 96    SUB   [__r1],A
    1038: 62 D0 00 MOV   REG[0xD0],0x0
    103B: 51 A0    MOV   A,[fingerposition]
    103D: 62 D0 00 MOV   REG[0xD0],0x0
    1040: 1C 97    SBB   [__r0],A
    1042: 51 96    MOV   A,[__r1]
    1044: 11 00    SUB   A,0x0
    1046: 51 97    MOV   A,[__r0]
    1048: 31 80    XOR   A,0x80
    104A: 19 80    SBB   A,0x80
    104C: D0 52    JNC   0x109F
(0048) 		{
(0049) 			CapSenseControl_ScanReturn.action = 2;
    104E: 62 D0 00 MOV   REG[0xD0],0x0
    1051: 55 A6 02 MOV   [CapSenseControl_ScanReturn],0x2
(0050) 			CapSenseControl_ScanReturn.value = abs(CapSenseControl_DataRegs.sliderPos-fingerposition)/Interval;
    1054: 62 D0 00 MOV   REG[0xD0],0x0
    1057: 51 A5    MOV   A,[CapSenseControl_DataRegs+1]
    1059: 62 D0 00 MOV   REG[0xD0],0x0
    105C: 53 96    MOV   [__r1],A
    105E: 55 97 00 MOV   [__r0],0x0
    1061: 62 D0 00 MOV   REG[0xD0],0x0
    1064: 51 A1    MOV   A,[fingerposition+1]
    1066: 62 D0 00 MOV   REG[0xD0],0x0
    1069: 14 96    SUB   [__r1],A
    106B: 62 D0 00 MOV   REG[0xD0],0x0
    106E: 51 A0    MOV   A,[fingerposition]
    1070: 62 D0 00 MOV   REG[0xD0],0x0
    1073: 1C 97    SBB   [__r0],A
    1075: 51 97    MOV   A,[__r0]
    1077: 08       PUSH  A
    1078: 51 96    MOV   A,[__r1]
    107A: 08       PUSH  A
    107B: 7C 15 CF LCALL _abs
    107E: 38 FE    ADD   SP,0xFE
    1080: 62 D0 00 MOV   REG[0xD0],0x0
    1083: 50 00    MOV   A,0x0
    1085: 08       PUSH  A
    1086: 50 32    MOV   A,0x32
    1088: 08       PUSH  A
    1089: 51 97    MOV   A,[__r0]
    108B: 08       PUSH  A
    108C: 51 96    MOV   A,[__r1]
    108E: 08       PUSH  A
    108F: 7C 15 48 LCALL 0x1548
    1092: 18       POP   A
    1093: 53 96    MOV   [__r1],A
    1095: 18       POP   A
    1096: 38 FE    ADD   SP,0xFE
    1098: 51 96    MOV   A,[__r1]
    109A: 62 D0 00 MOV   REG[0xD0],0x0
    109D: 53 A7    MOV   [CapSenseControl_ScanReturn+1],A
(0051) 		}
(0052) 				CapSensPush = FALSE;
    109F: 62 D0 00 MOV   REG[0xD0],0x0
    10A2: 55 AC 00 MOV   [CapSensPush],0x0
(0053) 	}	
    10A5: 7F       RET   
(0054) }
(0055) 
(0056) void CapSenseControl_ChangeActiveLED(void)
(0057) {
(0058) 	loopQty++;
_CapSenseControl_ChangeActiveLED:
    10A6: 62 D0 00 MOV   REG[0xD0],0x0
    10A9: 76 9F    INC   [loopQty+1]
    10AB: 0E 9E 00 ADC   [loopQty],0x0
(0059) 	if (loopQty>=10)
    10AE: 51 9F    MOV   A,[loopQty+1]
    10B0: 11 0A    SUB   A,0xA
    10B2: 51 9E    MOV   A,[loopQty]
    10B4: 31 80    XOR   A,0x80
    10B6: 19 80    SBB   A,0x80
    10B8: C0 5E    JC    0x1117
(0060) 	{			
(0061) 		if (CapSensPush)
    10BA: 62 D0 00 MOV   REG[0xD0],0x0
    10BD: 3C AC 00 CMP   [CapSensPush],0x0
    10C0: A0 41    JZ    0x1102
(0062) 		{
(0063) 			if(fingerposition < 50 && fingerposition >=0)
    10C2: 62 D0 00 MOV   REG[0xD0],0x0
    10C5: 51 A1    MOV   A,[fingerposition+1]
    10C7: 11 32    SUB   A,0x32
    10C9: 51 A0    MOV   A,[fingerposition]
    10CB: 31 80    XOR   A,0x80
    10CD: 19 80    SBB   A,0x80
    10CF: D0 22    JNC   0x10F2
    10D1: 62 D0 00 MOV   REG[0xD0],0x0
    10D4: 51 A1    MOV   A,[fingerposition+1]
    10D6: 11 00    SUB   A,0x0
    10D8: 51 A0    MOV   A,[fingerposition]
    10DA: 31 80    XOR   A,0x80
    10DC: 19 80    SBB   A,0x80
    10DE: C0 13    JC    0x10F2
(0064) 			{
(0065) 				CapSenseControl_ScanReturn.action = 3;
    10E0: 62 D0 00 MOV   REG[0xD0],0x0
    10E3: 55 A6 03 MOV   [CapSenseControl_ScanReturn],0x3
(0066) 				CapSenseControl_ScanReturn.value = CapSenseControl_DataRegs.led;						
    10E6: 62 D0 00 MOV   REG[0xD0],0x0
    10E9: 51 A4    MOV   A,[CapSenseControl_DataRegs]
    10EB: 62 D0 00 MOV   REG[0xD0],0x0
    10EE: 53 A7    MOV   [CapSenseControl_ScanReturn+1],A
(0067) 			}
    10F0: 80 11    JMP   0x1102
(0068) 			else
(0069) 			{
(0070) 			CapSenseControl_ScanReturn.action = 4;
    10F2: 62 D0 00 MOV   REG[0xD0],0x0
    10F5: 55 A6 04 MOV   [CapSenseControl_ScanReturn],0x4
(0071) 			CapSenseControl_ScanReturn.value = CapSenseControl_DataRegs.led;						
    10F8: 62 D0 00 MOV   REG[0xD0],0x0
    10FB: 51 A4    MOV   A,[CapSenseControl_DataRegs]
    10FD: 62 D0 00 MOV   REG[0xD0],0x0
    1100: 53 A7    MOV   [CapSenseControl_ScanReturn+1],A
(0072) 			}
(0073) 		}																
(0074) 		loopQty=0;
    1102: 62 D0 00 MOV   REG[0xD0],0x0
    1105: 55 9F 00 MOV   [loopQty+1],0x0
    1108: 55 9E 00 MOV   [loopQty],0x0
(0075) 		CapSensPush = FALSE;
    110B: 62 D0 00 MOV   REG[0xD0],0x0
    110E: 55 AC 00 MOV   [CapSensPush],0x0
(0076) 		CapSenseControl_DataRegs.sliderPos = 0;
    1111: 62 D0 00 MOV   REG[0xD0],0x0
    1114: 55 A5 00 MOV   [CapSenseControl_DataRegs+1],0x0
(0077) 	}
    1117: 7F       RET   
(0078) }
(0079) 
(0080) 	
(0081) 
(0082) struct CapSenseControl_ScanReturnStruct CapSenseControl_Scan(void)
(0083) {	
_CapSenseControl_Scan:
    1118: 10       PUSH  X
    1119: 4F       MOV   X,SP
(0084) 	CapSenseControl_ScanReturn.action=0;
    111A: 62 D0 00 MOV   REG[0xD0],0x0
    111D: 55 A6 00 MOV   [CapSenseControl_ScanReturn],0x0
(0085) 	CapSenseControl_ScanReturn.value=0;
    1120: 55 A7 00 MOV   [CapSenseControl_ScanReturn+1],0x0
(0086) 	CSD_ScanAllSensors(); 
    1123: 10       PUSH  X
    1124: 7C 0E A2 LCALL _CSD_ScanAllSensors
(0087) 	CSD_UpdateAllBaselines();
    1127: 7C 07 2D LCALL _CSD_UpdateAllBaselines
(0088) 	
(0089) 	if(CSD_bIsAnySensorActive())
    112A: 7C 07 14 LCALL _CSD_bIsAnySensorActive
    112D: 20       POP   X
    112E: 62 D0 00 MOV   REG[0xD0],0x0
    1131: 39 00    CMP   A,0x0
    1133: A0 05    JZ    0x1139
(0090) 		{
(0091) 			CapSenseControl_GetNewBlinkFreq();			
    1135: 9D F6    CALL  _CapSenseControl_GetNewBlinkFreq
(0092) 		}
    1137: 80 03    JMP   0x113B
(0093) 		else
(0094) 		{
(0095) 			CapSenseControl_ChangeActiveLED();
    1139: 9F 6B    CALL  _CapSenseControl_ChangeActiveLED
(0096) 		}
(0097) 		return CapSenseControl_ScanReturn;
    113B: 62 D0 00 MOV   REG[0xD0],0x0
    113E: 55 96 A6 MOV   [__r1],0xA6
    1141: 55 97 00 MOV   [__r0],0x0
    1144: 52 FC    MOV   A,[X-4]
    1146: 53 94    MOV   [__r3],A
    1148: 52 FB    MOV   A,[X-5]
    114A: 53 95    MOV   [__r2],A
    114C: 51 97    MOV   A,[__r0]
    114E: 60 D4    MOV   REG[0xD4],A
    1150: 51 95    MOV   A,[__r2]
    1152: 60 D5    MOV   REG[0xD5],A
    1154: 3E 96    MVI   A,[__r1]
    1156: 3F 94    MVI   [__r3],A
    1158: 3E 96    MVI   A,[__r1]
    115A: 3F 94    MVI   [__r3],A
    115C: 20       POP   X
    115D: 7F       RET   
FILE: C:\Users\100050~1\Desktop\FIRSTP~1\FIRSTP~1\FIRSTP~1\ledcontrol.c
(0001) #include "LEDControl.h"
(0002) #include <m8c.h>        
(0003) #include "PSoCAPI.h"    
(0004) #include <stdlib.h>
(0005) 
(0006) #define Interval 50
(0007) #define IntervalLimit 80
(0008) #define BLUE	1
(0009) #define GREEN	2
(0010) #define RED		3
(0011) 
(0012) 
(0013) 	int LEDControl_RT = 50;
(0014) 	int LEDControl_BT = 50;
(0015) 	int LEDControl_GT = 50;
(0016) void LEDControl_INIT(void)
(0017) {
(0018) 	LED_BLUE_Start();
_LEDControl_INIT:
    115E: 10       PUSH  X
    115F: 7C 03 59 LCALL LED_BLUE_Start|LED_BLUE_Stop|_LED_BLUE_Start|_LED_BLUE_Off|LED_BLUE_Off|_LED_BLUE_Stop
(0019) 	LED_GREEN_Start();
    1162: 7C 03 1C LCALL LED_GREEN_Off|_LED_GREEN_Start|_LED_GREEN_Stop|_LED_GREEN_Off|LED_GREEN_Start|LED_GREEN_Stop
(0020) 	LED_RED_Start();
    1165: 7C 02 DF LCALL LED_RED_Off|LED_RED_Start|LED_RED_Stop|_LED_RED_Off|_LED_RED_Stop|_LED_RED_Start
(0021)     LED_RED_On();
    1168: 7C 02 DB LCALL _LED_RED_On
    116B: 20       POP   X
    116C: 7F       RET   
(0022) }
(0023) void LEDControl_ChangeState(BOOL red,BOOL green,BOOL blue)
(0024) {
_LEDControl_ChangeState:
  blue                 --> X-6
  green                --> X-5
  red                  --> X-4
    116D: 10       PUSH  X
    116E: 4F       MOV   X,SP
(0025) 	if (red)
    116F: 3D FC 00 CMP   [X-4],0x0
    1172: A0 08    JZ    0x117B
(0026) 		LED_RED_On();
    1174: 10       PUSH  X
    1175: 7C 02 DB LCALL _LED_RED_On
    1178: 20       POP   X
    1179: 80 06    JMP   0x1180
(0027) 	else
(0028) 		LED_RED_Off();
    117B: 10       PUSH  X
    117C: 7C 02 DF LCALL LED_RED_Off|LED_RED_Start|LED_RED_Stop|_LED_RED_Off|_LED_RED_Stop|_LED_RED_Start
    117F: 20       POP   X
(0029) 	if (green)
    1180: 3D FB 00 CMP   [X-5],0x0
    1183: A0 08    JZ    0x118C
(0030) 		LED_GREEN_On();
    1185: 10       PUSH  X
    1186: 7C 03 18 LCALL _LED_GREEN_On
    1189: 20       POP   X
    118A: 80 06    JMP   0x1191
(0031) 	else
(0032) 		LED_GREEN_Off();
    118C: 10       PUSH  X
    118D: 7C 03 1C LCALL LED_GREEN_Off|_LED_GREEN_Start|_LED_GREEN_Stop|_LED_GREEN_Off|LED_GREEN_Start|LED_GREEN_Stop
    1190: 20       POP   X
(0033) 	if (blue)
    1191: 3D FA 00 CMP   [X-6],0x0
    1194: A0 08    JZ    0x119D
(0034) 		LED_BLUE_On();
    1196: 10       PUSH  X
    1197: 7C 03 55 LCALL _LED_BLUE_On
    119A: 20       POP   X
    119B: 80 06    JMP   0x11A2
(0035) 	else
(0036) 		LED_BLUE_Off();
    119D: 10       PUSH  X
    119E: 7C 03 59 LCALL LED_BLUE_Start|LED_BLUE_Stop|_LED_BLUE_Start|_LED_BLUE_Off|LED_BLUE_Off|_LED_BLUE_Stop
    11A1: 20       POP   X
    11A2: 20       POP   X
    11A3: 7F       RET   
(0037) }
(0038) BYTE LEDControl_ChangeStateSwitch(BYTE led ,BOOL isASC)
(0039) {
_LEDControl_ChangeStateSwitch:
  isASC                --> X-5
  led                  --> X-4
    11A4: 10       PUSH  X
    11A5: 4F       MOV   X,SP
    11A6: 38 02    ADD   SP,0x2
(0040) 	
(0041) 	switch (led)
    11A8: 52 FC    MOV   A,[X-4]
    11AA: 54 01    MOV   [X+1],A
    11AC: 56 00 00 MOV   [X+0],0x0
    11AF: 3D 00 00 CMP   [X+0],0x0
    11B2: B0 06    JNZ   0x11B9
    11B4: 3D 01 00 CMP   [X+1],0x0
    11B7: A0 21    JZ    0x11D9
    11B9: 3D 00 00 CMP   [X+0],0x0
    11BC: B0 06    JNZ   0x11C3
    11BE: 3D 01 01 CMP   [X+1],0x1
    11C1: A0 69    JZ    0x122B
    11C3: 3D 00 00 CMP   [X+0],0x0
    11C6: B0 06    JNZ   0x11CD
    11C8: 3D 01 02 CMP   [X+1],0x2
    11CB: A0 36    JZ    0x1202
    11CD: 3D 00 00 CMP   [X+0],0x0
    11D0: B0 06    JNZ   0x11D7
    11D2: 3D 01 03 CMP   [X+1],0x3
    11D5: A0 80    JZ    0x1256
    11D7: 80 A9    JMP   0x1281
(0042) 				{
(0043) 					case 0:
(0044) 						if(isASC)
    11D9: 3D FB 00 CMP   [X-5],0x0
    11DC: A0 13    JZ    0x11F0
(0045) 						{
(0046) 						LEDControl_ChangeState(TRUE,FALSE,FALSE);	
    11DE: 50 00    MOV   A,0x0
    11E0: 08       PUSH  A
    11E1: 08       PUSH  A
    11E2: 50 01    MOV   A,0x1
    11E4: 08       PUSH  A
    11E5: 9F 86    CALL  _LEDControl_ChangeState
    11E7: 38 FD    ADD   SP,0xFD
(0047) 						return RED;
    11E9: 62 D0 00 MOV   REG[0xD0],0x0
    11EC: 50 03    MOV   A,0x3
    11EE: 80 97    JMP   0x1286
(0048) 						}
(0049) 						else 
(0050) 						{
(0051) 						LEDControl_ChangeState(FALSE,FALSE,TRUE);	
    11F0: 50 01    MOV   A,0x1
    11F2: 08       PUSH  A
    11F3: 50 00    MOV   A,0x0
    11F5: 08       PUSH  A
    11F6: 08       PUSH  A
    11F7: 9F 74    CALL  _LEDControl_ChangeState
    11F9: 38 FD    ADD   SP,0xFD
(0052) 						return BLUE;
    11FB: 62 D0 00 MOV   REG[0xD0],0x0
    11FE: 50 01    MOV   A,0x1
    1200: 80 85    JMP   0x1286
(0053) 						}
(0054) 						break;
(0055) 					case GREEN:
(0056) 						if(isASC)
    1202: 3D FB 00 CMP   [X-5],0x0
    1205: A0 13    JZ    0x1219
(0057) 						{
(0058) 						LEDControl_ChangeState(FALSE,FALSE,TRUE);			
    1207: 50 01    MOV   A,0x1
    1209: 08       PUSH  A
    120A: 50 00    MOV   A,0x0
    120C: 08       PUSH  A
    120D: 08       PUSH  A
    120E: 9F 5D    CALL  _LEDControl_ChangeState
    1210: 38 FD    ADD   SP,0xFD
(0059) 						return BLUE;
    1212: 62 D0 00 MOV   REG[0xD0],0x0
    1215: 50 01    MOV   A,0x1
    1217: 80 6E    JMP   0x1286
(0060) 						}
(0061) 						else 
(0062) 						{
(0063) 						LEDControl_ChangeState(TRUE,FALSE,FALSE);	
    1219: 50 00    MOV   A,0x0
    121B: 08       PUSH  A
    121C: 08       PUSH  A
    121D: 50 01    MOV   A,0x1
    121F: 08       PUSH  A
    1220: 9F 4B    CALL  _LEDControl_ChangeState
    1222: 38 FD    ADD   SP,0xFD
(0064) 						return RED;
    1224: 62 D0 00 MOV   REG[0xD0],0x0
    1227: 50 03    MOV   A,0x3
    1229: 80 5C    JMP   0x1286
(0065) 						}
(0066) 						break;
(0067) 					case BLUE:
(0068) 						if(isASC)
    122B: 3D FB 00 CMP   [X-5],0x0
    122E: A0 13    JZ    0x1242
(0069) 						{
(0070) 						LEDControl_ChangeState(TRUE,FALSE,FALSE);		
    1230: 50 00    MOV   A,0x0
    1232: 08       PUSH  A
    1233: 08       PUSH  A
    1234: 50 01    MOV   A,0x1
    1236: 08       PUSH  A
    1237: 9F 34    CALL  _LEDControl_ChangeState
    1239: 38 FD    ADD   SP,0xFD
(0071) 						return RED;
    123B: 62 D0 00 MOV   REG[0xD0],0x0
    123E: 50 03    MOV   A,0x3
    1240: 80 45    JMP   0x1286
(0072) 						}
(0073) 						else 
(0074) 						{
(0075) 						LEDControl_ChangeState(FALSE,TRUE,FALSE);	
    1242: 50 00    MOV   A,0x0
    1244: 08       PUSH  A
    1245: 50 01    MOV   A,0x1
    1247: 08       PUSH  A
    1248: 50 00    MOV   A,0x0
    124A: 08       PUSH  A
    124B: 9F 20    CALL  _LEDControl_ChangeState
    124D: 38 FD    ADD   SP,0xFD
(0076) 						return GREEN;
    124F: 62 D0 00 MOV   REG[0xD0],0x0
    1252: 50 02    MOV   A,0x2
    1254: 80 31    JMP   0x1286
(0077) 						}
(0078) 						break;
(0079) 					case RED:
(0080) 						if(isASC)
    1256: 3D FB 00 CMP   [X-5],0x0
    1259: A0 15    JZ    0x126F
(0081) 						{
(0082) 						LEDControl_ChangeState(FALSE,TRUE,FALSE);			
    125B: 50 00    MOV   A,0x0
    125D: 08       PUSH  A
    125E: 50 01    MOV   A,0x1
    1260: 08       PUSH  A
    1261: 50 00    MOV   A,0x0
    1263: 08       PUSH  A
    1264: 9F 07    CALL  _LEDControl_ChangeState
    1266: 38 FD    ADD   SP,0xFD
(0083) 						return GREEN;
    1268: 62 D0 00 MOV   REG[0xD0],0x0
    126B: 50 02    MOV   A,0x2
    126D: 80 18    JMP   0x1286
(0084) 						}
(0085) 						else 
(0086) 						{
(0087) 						LEDControl_ChangeState(FALSE,FALSE,TRUE);	
    126F: 50 01    MOV   A,0x1
    1271: 08       PUSH  A
    1272: 50 00    MOV   A,0x0
    1274: 08       PUSH  A
    1275: 08       PUSH  A
    1276: 9E F5    CALL  _LEDControl_ChangeState
    1278: 38 FD    ADD   SP,0xFD
(0088) 						return BLUE;
    127A: 62 D0 00 MOV   REG[0xD0],0x0
    127D: 50 01    MOV   A,0x1
    127F: 80 06    JMP   0x1286
(0089) 						}
(0090) 						break;
(0091) 					default:
(0092) 						return 0;
    1281: 62 D0 00 MOV   REG[0xD0],0x0
    1284: 50 00    MOV   A,0x0
(0093) 						break;
    1286: 38 FE    ADD   SP,0xFE
    1288: 20       POP   X
    1289: 7F       RET   
(0094) 				}
(0095) 			
(0096) }
(0097) void LEDControl_ChangeFrequency(BYTE led,int value,BYTE isAdd)
(0098) {
_LEDControl_ChangeFrequency:
  isAdd                --> X-7
  value                --> X-6
  led                  --> X-4
    128A: 10       PUSH  X
    128B: 4F       MOV   X,SP
    128C: 38 02    ADD   SP,0x2
(0099) 	switch (led)
    128E: 52 FC    MOV   A,[X-4]
    1290: 54 01    MOV   [X+1],A
    1292: 56 00 00 MOV   [X+0],0x0
    1295: 3D 00 00 CMP   [X+0],0x0
    1298: B0 06    JNZ   0x129F
    129A: 3D 01 01 CMP   [X+1],0x1
    129D: A0 67    JZ    0x1305
    129F: 3D 00 00 CMP   [X+0],0x0
    12A2: B0 06    JNZ   0x12A9
    12A4: 3D 01 02 CMP   [X+1],0x2
    12A7: A0 AD    JZ    0x1355
    12A9: 3D 00 00 CMP   [X+0],0x0
    12AC: B0 06    JNZ   0x12B3
    12AE: 3D 01 03 CMP   [X+1],0x3
    12B1: A0 03    JZ    0x12B5
    12B3: 80 EF    JMP   0x13A3
(0100) 		{
(0101) 			case RED:
(0102) 				if (isAdd)
    12B5: 3D F9 00 CMP   [X-7],0x0
    12B8: A0 2A    JZ    0x12E3
(0103) 				{
(0104) 					LEDControl_RT=LEDControl_RT+value;
    12BA: 62 D0 00 MOV   REG[0xD0],0x0
    12BD: 52 FB    MOV   A,[X-5]
    12BF: 04 A9    ADD   [LEDControl_RT+1],A
    12C1: 52 FA    MOV   A,[X-6]
    12C3: 0C A8    ADC   [LEDControl_RT],A
(0105) 					if(LEDControl_RT>IntervalLimit)
    12C5: 50 50    MOV   A,0x50
    12C7: 12 A9    SUB   A,[LEDControl_RT+1]
    12C9: 51 A8    MOV   A,[LEDControl_RT]
    12CB: 31 80    XOR   A,0x80
    12CD: 62 D0 00 MOV   REG[0xD0],0x0
    12D0: 53 93    MOV   [__rX],A
    12D2: 50 80    MOV   A,0x80
    12D4: 1A 93    SBB   A,[__rX]
    12D6: D0 CC    JNC   0x13A3
(0106) 					LEDControl_RT=IntervalLimit;
    12D8: 62 D0 00 MOV   REG[0xD0],0x0
    12DB: 55 A9 50 MOV   [LEDControl_RT+1],0x50
    12DE: 55 A8 00 MOV   [LEDControl_RT],0x0
(0107) 				}
    12E1: 80 C1    JMP   0x13A3
(0108) 				else 
(0109) 				{
(0110) 					LEDControl_RT=LEDControl_RT-value;	
    12E3: 62 D0 00 MOV   REG[0xD0],0x0
    12E6: 52 FB    MOV   A,[X-5]
    12E8: 14 A9    SUB   [LEDControl_RT+1],A
    12EA: 52 FA    MOV   A,[X-6]
    12EC: 1C A8    SBB   [LEDControl_RT],A
(0111) 					if(LEDControl_RT<0)
    12EE: 51 A9    MOV   A,[LEDControl_RT+1]
    12F0: 11 00    SUB   A,0x0
    12F2: 51 A8    MOV   A,[LEDControl_RT]
    12F4: 31 80    XOR   A,0x80
    12F6: 19 80    SBB   A,0x80
    12F8: D0 AA    JNC   0x13A3
(0112) 						LEDControl_RT=0;
    12FA: 62 D0 00 MOV   REG[0xD0],0x0
    12FD: 55 A9 00 MOV   [LEDControl_RT+1],0x0
    1300: 55 A8 00 MOV   [LEDControl_RT],0x0
(0113) 				}
(0114) 				break;
    1303: 80 9F    JMP   0x13A3
(0115) 			case BLUE:
(0116) 				if (isAdd)
    1305: 3D F9 00 CMP   [X-7],0x0
    1308: A0 2A    JZ    0x1333
(0117) 				{
(0118) 					LEDControl_BT=LEDControl_BT+value;
    130A: 62 D0 00 MOV   REG[0xD0],0x0
    130D: 52 FB    MOV   A,[X-5]
    130F: 04 A3    ADD   [LEDControl_BT+1],A
    1311: 52 FA    MOV   A,[X-6]
    1313: 0C A2    ADC   [LEDControl_BT],A
(0119) 					if(LEDControl_BT>IntervalLimit)
    1315: 50 50    MOV   A,0x50
    1317: 12 A3    SUB   A,[LEDControl_BT+1]
    1319: 51 A2    MOV   A,[LEDControl_BT]
    131B: 31 80    XOR   A,0x80
    131D: 62 D0 00 MOV   REG[0xD0],0x0
    1320: 53 93    MOV   [__rX],A
    1322: 50 80    MOV   A,0x80
    1324: 1A 93    SBB   A,[__rX]
    1326: D0 7C    JNC   0x13A3
(0120) 					LEDControl_BT=IntervalLimit;
    1328: 62 D0 00 MOV   REG[0xD0],0x0
    132B: 55 A3 50 MOV   [LEDControl_BT+1],0x50
    132E: 55 A2 00 MOV   [LEDControl_BT],0x0
(0121) 				}
    1331: 80 71    JMP   0x13A3
(0122) 				else 
(0123) 				{
(0124) 					LEDControl_BT=LEDControl_BT-value;	
    1333: 62 D0 00 MOV   REG[0xD0],0x0
    1336: 52 FB    MOV   A,[X-5]
    1338: 14 A3    SUB   [LEDControl_BT+1],A
    133A: 52 FA    MOV   A,[X-6]
    133C: 1C A2    SBB   [LEDControl_BT],A
(0125) 					if(LEDControl_BT<0)
    133E: 51 A3    MOV   A,[LEDControl_BT+1]
    1340: 11 00    SUB   A,0x0
    1342: 51 A2    MOV   A,[LEDControl_BT]
    1344: 31 80    XOR   A,0x80
    1346: 19 80    SBB   A,0x80
    1348: D0 5A    JNC   0x13A3
(0126) 					LEDControl_BT=0;
    134A: 62 D0 00 MOV   REG[0xD0],0x0
    134D: 55 A3 00 MOV   [LEDControl_BT+1],0x0
    1350: 55 A2 00 MOV   [LEDControl_BT],0x0
(0127) 				}
(0128) 				break;
    1353: 80 4F    JMP   0x13A3
(0129) 			case GREEN:
(0130) 				if (isAdd)
    1355: 3D F9 00 CMP   [X-7],0x0
    1358: A0 2A    JZ    0x1383
(0131) 				{
(0132) 					LEDControl_GT=LEDControl_GT+value;
    135A: 62 D0 00 MOV   REG[0xD0],0x0
    135D: 52 FB    MOV   A,[X-5]
    135F: 04 AB    ADD   [LEDControl_GT+1],A
    1361: 52 FA    MOV   A,[X-6]
    1363: 0C AA    ADC   [LEDControl_GT],A
(0133) 					if(LEDControl_GT>IntervalLimit)
    1365: 50 50    MOV   A,0x50
    1367: 12 AB    SUB   A,[LEDControl_GT+1]
    1369: 51 AA    MOV   A,[LEDControl_GT]
    136B: 31 80    XOR   A,0x80
    136D: 62 D0 00 MOV   REG[0xD0],0x0
    1370: 53 93    MOV   [__rX],A
    1372: 50 80    MOV   A,0x80
    1374: 1A 93    SBB   A,[__rX]
    1376: D0 2C    JNC   0x13A3
(0134) 					LEDControl_GT=IntervalLimit;
    1378: 62 D0 00 MOV   REG[0xD0],0x0
    137B: 55 AB 50 MOV   [LEDControl_GT+1],0x50
    137E: 55 AA 00 MOV   [LEDControl_GT],0x0
(0135) 				}
    1381: 80 21    JMP   0x13A3
(0136) 				else 
(0137) 				{
(0138) 					LEDControl_GT=LEDControl_GT-value;	
    1383: 62 D0 00 MOV   REG[0xD0],0x0
    1386: 52 FB    MOV   A,[X-5]
    1388: 14 AB    SUB   [LEDControl_GT+1],A
    138A: 52 FA    MOV   A,[X-6]
    138C: 1C AA    SBB   [LEDControl_GT],A
(0139) 					if(LEDControl_GT<0)
    138E: 51 AB    MOV   A,[LEDControl_GT+1]
    1390: 11 00    SUB   A,0x0
    1392: 51 AA    MOV   A,[LEDControl_GT]
    1394: 31 80    XOR   A,0x80
    1396: 19 80    SBB   A,0x80
    1398: D0 0A    JNC   0x13A3
(0140) 					LEDControl_GT=0;
    139A: 62 D0 00 MOV   REG[0xD0],0x0
    139D: 55 AB 00 MOV   [LEDControl_GT+1],0x0
    13A0: 55 AA 00 MOV   [LEDControl_GT],0x0
(0141) 				}
(0142) 				break;
(0143) 			default:
(0144) 				break; 
    13A3: 38 FE    ADD   SP,0xFE
    13A5: 20       POP   X
    13A6: 7F       RET   
(0145) 		}
(0146) }
(0147) int LEDControl_Blink(BYTE led, int blinkLoop)
(0148) {
_LEDControl_Blink:
  blinkLoop            --> X-6
  led                  --> X-4
    13A7: 10       PUSH  X
    13A8: 4F       MOV   X,SP
    13A9: 38 02    ADD   SP,0x2
(0149) 	switch (led)
    13AB: 52 FC    MOV   A,[X-4]
    13AD: 54 01    MOV   [X+1],A
    13AF: 56 00 00 MOV   [X+0],0x0
    13B2: 3D 00 00 CMP   [X+0],0x0
    13B5: B0 06    JNZ   0x13BC
    13B7: 3D 01 01 CMP   [X+1],0x1
    13BA: A0 47    JZ    0x1402
    13BC: 3D 00 00 CMP   [X+0],0x0
    13BF: B0 06    JNZ   0x13C6
    13C1: 3D 01 02 CMP   [X+1],0x2
    13C4: A0 6D    JZ    0x1432
    13C6: 3D 00 00 CMP   [X+0],0x0
    13C9: B0 06    JNZ   0x13D0
    13CB: 3D 01 03 CMP   [X+1],0x3
    13CE: A0 03    JZ    0x13D2
    13D0: 80 91    JMP   0x1462
(0150) 		{
(0151) 			case RED:
(0152) 				if (blinkLoop>=LEDControl_RT)
    13D2: 62 D0 00 MOV   REG[0xD0],0x0
    13D5: 52 FB    MOV   A,[X-5]
    13D7: 12 A9    SUB   A,[LEDControl_RT+1]
    13D9: 51 A8    MOV   A,[LEDControl_RT]
    13DB: 31 80    XOR   A,0x80
    13DD: 62 D0 00 MOV   REG[0xD0],0x0
    13E0: 53 93    MOV   [__rX],A
    13E2: 52 FA    MOV   A,[X-6]
    13E4: 31 80    XOR   A,0x80
    13E6: 1A 93    SBB   A,[__rX]
    13E8: C0 0C    JC    0x13F5
(0153) 				{
(0154) 					LED_RED_Invert();
    13EA: 10       PUSH  X
    13EB: 7C 02 F9 LCALL _LED_RED_Invert
    13EE: 20       POP   X
(0155) 					blinkLoop = 0;
    13EF: 56 FB 00 MOV   [X-5],0x0
    13F2: 56 FA 00 MOV   [X-6],0x0
(0156) 				}
(0157) 				return blinkLoop;
    13F5: 62 D0 00 MOV   REG[0xD0],0x0
    13F8: 52 FB    MOV   A,[X-5]
    13FA: 53 96    MOV   [__r1],A
    13FC: 52 FA    MOV   A,[X-6]
    13FE: 53 97    MOV   [__r0],A
    1400: 80 6C    JMP   0x146D
(0158) 				break;
(0159) 			case BLUE:
(0160) 				if (blinkLoop>=LEDControl_BT)
    1402: 62 D0 00 MOV   REG[0xD0],0x0
    1405: 52 FB    MOV   A,[X-5]
    1407: 12 A3    SUB   A,[LEDControl_BT+1]
    1409: 51 A2    MOV   A,[LEDControl_BT]
    140B: 31 80    XOR   A,0x80
    140D: 62 D0 00 MOV   REG[0xD0],0x0
    1410: 53 93    MOV   [__rX],A
    1412: 52 FA    MOV   A,[X-6]
    1414: 31 80    XOR   A,0x80
    1416: 1A 93    SBB   A,[__rX]
    1418: C0 0C    JC    0x1425
(0161) 				{
(0162) 					LED_BLUE_Invert();
    141A: 10       PUSH  X
    141B: 7C 03 73 LCALL _LED_BLUE_Invert
    141E: 20       POP   X
(0163) 					blinkLoop = 0;
    141F: 56 FB 00 MOV   [X-5],0x0
    1422: 56 FA 00 MOV   [X-6],0x0
(0164) 				}
(0165) 				return blinkLoop;
    1425: 62 D0 00 MOV   REG[0xD0],0x0
    1428: 52 FB    MOV   A,[X-5]
    142A: 53 96    MOV   [__r1],A
    142C: 52 FA    MOV   A,[X-6]
    142E: 53 97    MOV   [__r0],A
    1430: 80 3C    JMP   0x146D
(0166) 				break;
(0167) 			case GREEN:
(0168) 				if (blinkLoop>=LEDControl_GT)
    1432: 62 D0 00 MOV   REG[0xD0],0x0
    1435: 52 FB    MOV   A,[X-5]
    1437: 12 AB    SUB   A,[LEDControl_GT+1]
    1439: 51 AA    MOV   A,[LEDControl_GT]
    143B: 31 80    XOR   A,0x80
    143D: 62 D0 00 MOV   REG[0xD0],0x0
    1440: 53 93    MOV   [__rX],A
    1442: 52 FA    MOV   A,[X-6]
    1444: 31 80    XOR   A,0x80
    1446: 1A 93    SBB   A,[__rX]
    1448: C0 0C    JC    0x1455
(0169) 				{
(0170) 					LED_GREEN_Invert();
    144A: 10       PUSH  X
    144B: 7C 03 36 LCALL _LED_GREEN_Invert
    144E: 20       POP   X
(0171) 					blinkLoop = 0;
    144F: 56 FB 00 MOV   [X-5],0x0
    1452: 56 FA 00 MOV   [X-6],0x0
(0172) 				}
(0173) 				return blinkLoop;
    1455: 62 D0 00 MOV   REG[0xD0],0x0
    1458: 52 FB    MOV   A,[X-5]
    145A: 53 96    MOV   [__r1],A
    145C: 52 FA    MOV   A,[X-6]
    145E: 53 97    MOV   [__r0],A
    1460: 80 0C    JMP   0x146D
(0174) 				break;
(0175) 			default:
(0176) 			return blinkLoop;
    1462: 62 D0 00 MOV   REG[0xD0],0x0
    1465: 52 FB    MOV   A,[X-5]
    1467: 53 96    MOV   [__r1],A
    1469: 52 FA    MOV   A,[X-6]
    146B: 53 97    MOV   [__r0],A
(0177) 				break; 
    146D: 38 FE    ADD   SP,0xFE
(0178) 		}
(0179) }
FILE: C:\Users\100050~1\Desktop\FIRSTP~1\FIRSTP~1\FIRSTP~1\main.c
(0001) #include <m8c.h>        
(0002) #include "PSoCAPI.h"    
(0003) #include <stdlib.h>
(0004) #include "LEDControl.h"
(0005) #include "CapSenseControl.h"
(0006) 
(0007) void main(void)
(0008) {	
_main:
  CSC_SRS              --> X+2
  blinkLoop            --> X+0
    1471: 10       PUSH  X
    1472: 4F       MOV   X,SP
    1473: 38 06    ADD   SP,0x6
(0009) 	int blinkLoop=0;	 		
    1475: 56 01 00 MOV   [X+1],0x0
    1478: 56 00 00 MOV   [X+0],0x0
(0010) 	M8C_EnableGInt ;   /* Enabling the Global Interrupts */	
    147B: 71 01    OR    F,0x1
(0011) 	LEDControl_INIT();
    147D: 7C 11 5E LCALL _LEDControl_INIT
(0012) 	CapSenseControl_INIT();
    1480: 7C 0E E5 LCALL __UserModules_end|__text_start|_CapSenseControl_INIT|_CapSenseControl_INIT
    1483: 80 BD    JMP   0x1541
(0013) 	while(1) /*Infinite loop */
(0014) 	{	
(0015) 		CapSenseControl_ScanReturnStruct CSC_SRS;
(0016) 		
(0017) 		blinkLoop++;
    1485: 77 01    INC   [X+1]
    1487: 0F 00 00 ADC   [X+0],0x0
(0018) 		blinkLoop=LEDControl_Blink(CapSenseControl_DataRegs.led,blinkLoop);
    148A: 52 00    MOV   A,[X+0]
    148C: 08       PUSH  A
    148D: 52 01    MOV   A,[X+1]
    148F: 08       PUSH  A
    1490: 62 D0 00 MOV   REG[0xD0],0x0
    1493: 51 A4    MOV   A,[CapSenseControl_DataRegs]
    1495: 08       PUSH  A
    1496: 7C 13 A7 LCALL _LEDControl_Blink
    1499: 62 D0 00 MOV   REG[0xD0],0x0
    149C: 51 96    MOV   A,[__r1]
    149E: 54 01    MOV   [X+1],A
    14A0: 51 97    MOV   A,[__r0]
    14A2: 54 00    MOV   [X+0],A
(0019) 		
(0020) 		CSC_SRS = CapSenseControl_Scan();
    14A4: 5A 96    MOV   [__r1],X
    14A6: 06 96 02 ADD   [__r1],0x2
    14A9: 50 01    MOV   A,0x1
    14AB: 08       PUSH  A
    14AC: 51 96    MOV   A,[__r1]
    14AE: 08       PUSH  A
    14AF: 7C 11 18 LCALL _CapSenseControl_Scan
    14B2: 38 FB    ADD   SP,0xFB
(0021) 		switch (CSC_SRS.action)
    14B4: 52 02    MOV   A,[X+2]
    14B6: 54 05    MOV   [X+5],A
    14B8: 56 04 00 MOV   [X+4],0x0
    14BB: 3D 04 00 CMP   [X+4],0x0
    14BE: B0 06    JNZ   0x14C5
    14C0: 3D 05 01 CMP   [X+5],0x1
    14C3: A0 21    JZ    0x14E5
    14C5: 3D 04 00 CMP   [X+4],0x0
    14C8: B0 06    JNZ   0x14CF
    14CA: 3D 05 02 CMP   [X+5],0x2
    14CD: A0 34    JZ    0x1502
    14CF: 3D 04 00 CMP   [X+4],0x0
    14D2: B0 06    JNZ   0x14D9
    14D4: 3D 05 03 CMP   [X+5],0x3
    14D7: A0 47    JZ    0x151F
    14D9: 3D 04 00 CMP   [X+4],0x0
    14DC: B0 06    JNZ   0x14E3
    14DE: 3D 05 04 CMP   [X+5],0x4
    14E1: A0 4F    JZ    0x1531
    14E3: 80 5D    JMP   0x1541
(0022) 			{
(0023) 			case 1:
(0024) 				LEDControl_ChangeFrequency(CapSenseControl_DataRegs.led,CSC_SRS.value,FALSE);	
    14E5: 50 00    MOV   A,0x0
    14E7: 08       PUSH  A
    14E8: 62 D0 00 MOV   REG[0xD0],0x0
    14EB: 52 03    MOV   A,[X+3]
    14ED: 53 96    MOV   [__r1],A
    14EF: 50 00    MOV   A,0x0
    14F1: 08       PUSH  A
    14F2: 51 96    MOV   A,[__r1]
    14F4: 08       PUSH  A
    14F5: 62 D0 00 MOV   REG[0xD0],0x0
    14F8: 51 A4    MOV   A,[CapSenseControl_DataRegs]
    14FA: 08       PUSH  A
    14FB: 7C 12 8A LCALL _LEDControl_ChangeFrequency
    14FE: 38 FC    ADD   SP,0xFC
(0025) 				break;
    1500: 80 40    JMP   0x1541
(0026) 			case 2:
(0027) 				LEDControl_ChangeFrequency(CapSenseControl_DataRegs.led,CSC_SRS.value,TRUE);
    1502: 50 01    MOV   A,0x1
    1504: 08       PUSH  A
    1505: 62 D0 00 MOV   REG[0xD0],0x0
    1508: 52 03    MOV   A,[X+3]
    150A: 53 96    MOV   [__r1],A
    150C: 50 00    MOV   A,0x0
    150E: 08       PUSH  A
    150F: 51 96    MOV   A,[__r1]
    1511: 08       PUSH  A
    1512: 62 D0 00 MOV   REG[0xD0],0x0
    1515: 51 A4    MOV   A,[CapSenseControl_DataRegs]
    1517: 08       PUSH  A
    1518: 7C 12 8A LCALL _LEDControl_ChangeFrequency
    151B: 38 FC    ADD   SP,0xFC
(0028) 				break;
    151D: 80 23    JMP   0x1541
(0029) 			case 3:		
(0030) 				CapSenseControl_DataRegs.led = LEDControl_ChangeStateSwitch(CSC_SRS.value,TRUE);
    151F: 50 01    MOV   A,0x1
    1521: 08       PUSH  A
    1522: 52 03    MOV   A,[X+3]
    1524: 08       PUSH  A
    1525: 7C 11 A4 LCALL _LEDControl_ChangeStateSwitch
    1528: 38 FE    ADD   SP,0xFE
    152A: 62 D0 00 MOV   REG[0xD0],0x0
    152D: 53 A4    MOV   [CapSenseControl_DataRegs],A
(0031) 				break;
    152F: 80 11    JMP   0x1541
(0032) 			case 4:		
(0033) 				CapSenseControl_DataRegs.led = LEDControl_ChangeStateSwitch(CSC_SRS.value,FALSE);
    1531: 50 00    MOV   A,0x0
    1533: 08       PUSH  A
    1534: 52 03    MOV   A,[X+3]
    1536: 08       PUSH  A
    1537: 7C 11 A4 LCALL _LEDControl_ChangeStateSwitch
    153A: 38 FE    ADD   SP,0xFE
    153C: 62 D0 00 MOV   REG[0xD0],0x0
    153F: 53 A4    MOV   [CapSenseControl_DataRegs],A
(0034) 				break;
(0035) 			default:
(0036) 				break; 
(0037) 		}	
(0038) 	}
    1541: 8F 43    JMP   0x1485
(0039) }
    1543: 38 FA    ADD   SP,0xFA
    1545: 20       POP   X
    1546: 8F FF    JMP   0x1546
_abs:
    15CF: 10       PUSH  X
    15D0: 4F       MOV   X,SP
    15D1: 38 02    ADD   SP,0x2
    15D3: 52 FC    MOV   A,[X-4]
    15D5: 11 00    SUB   A,0x0
    15D7: 52 FB    MOV   A,[X-5]
    15D9: 31 80    XOR   A,0x80
    15DB: 19 80    SBB   A,0x80
    15DD: C0 0B    JC    0x15E9
    15DF: 52 FC    MOV   A,[X-4]
    15E1: 54 01    MOV   [X+1],A
    15E3: 52 FB    MOV   A,[X-5]
    15E5: 54 00    MOV   [X+0],A
    15E7: 80 0F    JMP   0x15F7
    15E9: 52 FC    MOV   A,[X-4]
    15EB: 73       CPL   A
    15EC: 11 FF    SUB   A,0xFF
    15EE: 54 01    MOV   [X+1],A
    15F0: 52 FB    MOV   A,[X-5]
    15F2: 73       CPL   A
    15F3: 19 FF    SBB   A,0xFF
    15F5: 54 00    MOV   [X+0],A
    15F7: 62 D0 00 MOV   REG[0xD0],0x0
    15FA: 52 01    MOV   A,[X+1]
    15FC: 53 96    MOV   [__r1],A
    15FE: 52 00    MOV   A,[X+0]
    1600: 53 97    MOV   [__r0],A
    1602: 38 FE    ADD   SP,0xFE
    1604: 20       POP   X
    1605: 7F       RET   
