FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C21x34 microcontroller devices.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0068) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0069) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0070) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0071) ; bytes on the stack which are otherwise required for the return address. If
                                        (0072) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0073) ; release, the C compiler automatically places an infinite loop at the end
                                        (0074) ; of main, rather than a return instruction.)
                                        (0075) ;
                                        (0076) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0077) 
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ; Interrupt Vector Table
                                        (0081) ;-----------------------------------------------------------------------------
                                        (0082) ;
                                        (0083) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0084) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0085) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0086) ; vector jump targets are modified automatically according to the user
                                        (0087) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0088) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0089) ; configuration files. If you need to hard code a vector, update the
                                        (0090) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0091) ; of this file.
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) 
                                        (0094)     AREA TOP (ROM, ABS, CON)
                                        (0095) 
                                        (0096)     org   0                        ;Reset Interrupt Vector
                                        (0097) IF	(TOOLCHAIN & HITECH)
                                        (0098) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0099) ELSE
0000: 80 67    JMP   0x0068             (0100)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0101) ENDIF
                                        (0102)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0103)     ;---------------------------------------------------
                                        (0104)     ; Insert your custom code below this banner
                                        (0105)     ;---------------------------------------------------
                                        (0106) 
                                        (0107)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0108)     halt                           ;Stop execution if power falls too low
                                        (0109) 
                                        (0110)     org   08h                      ;Analog Column 0 Interrupt Vector
0008: 7D 03 B7 LJMP  _CSD_CMP0_ISR      (0111)     ljmp	_CSD_CMP0_ISR
000B: 7E       RETI                     (0112)     reti
                                        (0113) 
                                        (0114)     org   0Ch                      ;Analog Column 1 Interrupt Vector
000C: 7D 03 B5 LJMP  _CSD_CMP_ISR       (0115)     ljmp	_CSD_CMP_ISR
000F: 7E       RETI                     (0116)     reti
                                        (0117) 
                                        (0118)     org   18h                      ;VC3 Interrupt Vector
                                        (0119)     // call	void_handler
0018: 7E       RETI                     (0120)     reti
                                        (0121) 
                                        (0122)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0123)     // call	void_handler
001C: 7E       RETI                     (0124)     reti
                                        (0125) 
                                        (0126)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 03 B2 LJMP  _CSD_CNT_ISR       (0127)     ljmp	_CSD_CNT_ISR
0023: 7E       RETI                     (0128)     reti
                                        (0129) 
                                        (0130)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0131)     // call	void_handler
0024: 7E       RETI                     (0132)     reti
                                        (0133) 
                                        (0134)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0135)     // call	void_handler
0028: 7E       RETI                     (0136)     reti
                                        (0137) 
                                        (0138)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0139)     // call	void_handler
002C: 7E       RETI                     (0140)     reti
                                        (0141) 
                                        (0142)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0143)     // call	void_handler
0060: 7E       RETI                     (0144)     reti
                                        (0145) 
                                        (0146)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0147)     // call	void_handler
0064: 7E       RETI                     (0148)     reti
0068: 71 10    OR    F,0x10             
                                        (0149)     ;---------------------------------------------------
                                        (0150)     ; Insert your custom code above this banner
                                        (0151)     ;---------------------------------------------------
                                        (0152)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0153) 
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  Start of Execution.
                                        (0156) ;-----------------------------------------------------------------------------
                                        (0157) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0158) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0159) ;
                                        (0160) 
                                        (0161) IF	(TOOLCHAIN & HITECH)
                                        (0162)  	AREA PD_startup(CODE, REL, CON)
                                        (0163) ELSE
                                        (0164)     org 68h
                                        (0165) ENDIF
                                        (0166) __Start:
                                        (0167) 
                                        (0168)     ; initialize SMP values for voltage stabilization, if required,
                                        (0169)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0170)     ; least for now. 
                                        (0171)     ;
                                        (0172)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0173)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0174)     M8C_SetBank0
                                        (0175) 
                                        (0176) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0177) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0178)     M8C_EnableWatchDog
                                        (0179) ENDIF
                                        (0180) 
0072: 41 FE FB AND   REG[0xFE],0xFB     (0181)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0182) 
                                        (0183)     ;---------------------------
                                        (0184)     ; Set up the Temporary stack
                                        (0185)     ;---------------------------
                                        (0186)     ; A temporary stack is set up for the SSC instructions.
                                        (0187)     ; The real stack start will be assigned later.
                                        (0188)     ;
                                        (0189) _stack_start:          equ 80h
0075: 50 80    MOV   A,0x80             (0190)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0191)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0192) 
                                        (0193)     ;------------------------
                                        (0194)     ; Set Power-related Trim 
                                        (0195)     ;------------------------
                                        (0196)     
                                        (0197) M8C_ClearWDTAndSleep
                                        (0198) 
                                        (0199) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0200)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0201)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0202)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V
                                        (0203)  ENDIF
                                        (0204) ENDIF ; 5.0 V Operation
                                        (0205) 
                                        (0206) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0207)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0208)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0209)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V
                                        (0210)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0211)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V
                                        (0212)  ENDIF
                                        (0213) ENDIF ; 3.3 Volt Operation
                                        (0214) 
                                        (0215) IF ( POWER_SETTING & POWER_SET_2V7_12MHZ)      ; *** 2.7 Volts / 12MHZ operation ***
                                        (0216)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0217)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_12MHZ, SSCTBL2_TRIM_BGR_2V
                                        (0218) ENDIF ; *** 2.7 Volts / 12MHZ operation ***
                                        (0219) 
                                        (0220) IF ( POWER_SETTING & POWER_SET_2V7_6MHZ)       ; *** 2.7 Volts /  6MHZ operation ***
                                        (0221)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0222)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_6MHZ,  SSCTBL2_TRIM_BGR_2V
                                        (0223) ENDIF ; *** 2.7 Volts /  6MHZ operation ***
                                        (0224) 
007B: 55 F8 00 MOV   [CapSensPush+84],0x0(0225)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [CapSensPush+85],0x0(0226)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0227) 
                                        (0228)     ;---------------------------------------
                                        (0229)     ; Initialize Crystal Oscillator and PLL
                                        (0230)     ;---------------------------------------
                                        (0231) IF ( POWER_SETTING & POWER_SET_2V7)       ; *** 2.7 Volts  ***
                                        (0232)     M8C_SetBank1
                                        (0233)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_3MHz)
                                        (0234)     M8C_SetBank0
                                        (0235)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0236) 
                                        (0237) ELSE 	 ;*** all other voltages OK for 12Mhz ***
                                        (0238)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0239)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
008B: 62 D1 01 MOV   REG[0xD1],0x1      
                                        (0240)     M8C_SetBank0
                                        (0241)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0242) 
                                        (0243) ENDIF
                                        (0244) 
                                        (0245) 	;-------------------------------------------------------
                                        (0246)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0247)     ;-------------------------------------------------------
                                        (0248) 
                                        (0249)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0250) 
                                        (0251) IF (SYSCLK_SOURCE)
                                        (0252)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0253) ENDIF
                                        (0254)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0255) 
                                        (0256) IF	(TOOLCHAIN & HITECH)
                                        (0257)     ;---------------------------------------------
                                        (0258)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0259)     ;---------------------------------------------
                                        (0260) 	global		__Lstackps
                                        (0261) 	mov     a,low __Lstackps
                                        (0262) 	swap    a,sp
                                        (0263) 
                                        (0264) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0265)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0266)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0267)     RAM_SETPAGE_CUR 0
                                        (0268)     RAM_SETPAGE_MVW 0
                                        (0269)     RAM_SETPAGE_MVR 0
                                        (0270)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0271)       or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0272)     ELSE
                                        (0273)       or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0274)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0275) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0276) ELSE
                                        (0277)     ;---------------------------------------------
                                        (0278)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0279)     ;---------------------------------------------
                                        (0280) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0281)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
008E: 50 00    MOV   A,0x0              (0282)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
0090: 4E       SWAP  SP,A               (0283)     swap  A, SP
0091: 62 D3 01 MOV   REG[0xD3],0x1      
0094: 62 D0 00 MOV   REG[0xD0],0x0      
0097: 62 D5 00 MOV   REG[0xD5],0x0      
009A: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0284)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0285)     RAM_SETPAGE_CUR 0
                                        (0286)     RAM_SETPAGE_MVW 0
                                        (0287)     RAM_SETPAGE_MVR 0
                                        (0288) 
                                        (0289)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
009D: 71 C0    OR    F,0xC0             (0290)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0291)   ELSE
                                        (0292)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0293)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0294) ELSE
                                        (0295)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0296)     swap  SP, A
                                        (0297) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0298) ENDIF ;	TOOLCHAIN
                                        (0299) 
                                        (0300)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0301)     ;---------------------------------------------------
                                        (0302)     ; Insert your custom code below this banner
                                        (0303)     ;---------------------------------------------------
                                        (0304) 
                                        (0305)     ;---------------------------------------------------
                                        (0306)     ; Insert your custom code above this banner
                                        (0307)     ;---------------------------------------------------
                                        (0308)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0309) 
                                        (0310)     ;-------------------------
                                        (0311)     ; Load Base Configuration
                                        (0312)     ;-------------------------
                                        (0313)     ; Load global parameter settings and load the user modules in the
                                        (0314)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0315)     ; to minimize start up time; (2) We may still need to play with the
                                        (0316)     ; Sleep Timer.
                                        (0317)     ;
009F: 7C 02 73 LCALL 0x0273             (0318)     lcall LoadConfigInit
                                        (0319) 
                                        (0320)     ;-----------------------------------
                                        (0321)     ; Initialize C Run-Time Environment
                                        (0322)     ;-----------------------------------
                                        (0323) IF ( C_LANGUAGE_SUPPORT )
                                        (0324) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0325)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0326)     mov  [__r0],<__bss_start
                                        (0327) BssLoop:
                                        (0328)     cmp  [__r0],<__bss_end
                                        (0329)     jz   BssDone
                                        (0330)     mvi  [__r0],A
                                        (0331)     jmp  BssLoop
                                        (0332) BssDone:
                                        (0333)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0334)     mov  X,<__idata_start
                                        (0335)     mov  [__r0],<__data_start
                                        (0336) IDataLoop:
                                        (0337)     cmp  [__r0],<__data_end
                                        (0338)     jz   C_RTE_Done
                                        (0339)     push A
                                        (0340)     romx
                                        (0341)     mvi  [__r0],A
                                        (0342)     pop  A
                                        (0343)     inc  X
                                        (0344)     adc  A,0
                                        (0345)     jmp  IDataLoop
                                        (0346) 
                                        (0347) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0348) 
                                        (0349) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00A2: 62 D0 00 MOV   REG[0xD0],0x0      (0350)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0351)                                        ; to use the Virtual Register page.
                                        (0352) 
                                        (0353)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0354)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0355)     ; text segment and may have been relocated by the Code Compressor.
                                        (0356)     ;
00A5: 50 01    MOV   A,0x1              (0357)     mov   A, >__pXIData                ; Get the address of the flash
00A7: 57 EC    MOV   X,0xEC             (0358)     mov   X, <__pXIData                ;   pointer to the xidata area.
00A9: 08       PUSH  A                  (0359)     push  A
00AA: 28       ROMX                     (0360)     romx                               ; get the MSB of xidata's address
00AB: 53 8F    MOV   [__r0],A           (0361)     mov   [__r0], A
00AD: 18       POP   A                  (0362)     pop   A
00AE: 75       INC   X                  (0363)     inc   X
00AF: 09 00    ADC   A,0x0              (0364)     adc   A, 0
00B1: 28       ROMX                     (0365)     romx                               ; get the LSB of xidata's address
00B2: 4B       SWAP  A,X                (0366)     swap  A, X
00B3: 51 8F    MOV   A,[__r0]           (0367)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0368)                                        ;   XIData structure list in flash
00B5: 80 04    JMP   0x00BA             (0369)     jmp   .AccessStruct
                                        (0370) 
                                        (0371)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0372)     ; values of C variables. Each structure contains 3 member elements.
                                        (0373)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0374)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0375)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0376)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0377)     ; value in the second member element, an unsigned byte:
                                        (0378)     ; (1) If the value of the second element is non-zero, it represents
                                        (0379)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0380)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0381)     ; the bytes are copied to the block of RAM.
                                        (0382)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0383)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0384)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0385) 
                                        (0386) .AccessNextStructLoop:
00B7: 75       INC   X                  (0387)     inc   X                            ; pXIData++
00B8: 09 00    ADC   A,0x0              (0388)     adc   A, 0
00BA: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0389) .AccessStruct:                         ; Entry point for first block
                                        (0390)     ;
                                        (0391)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0392)     ;
                                        (0393)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00BD: 08       PUSH  A                  (0394)     push  A
00BE: 28       ROMX                     (0395)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00BF: 60 D5    MOV   REG[0xD5],A        (0396)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00C1: 74       INC   A                  (0397)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00C2: A0 4B    JZ    0x010E             (0398)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00C4: 18       POP   A                  (0399)     pop   A                            ; restore pXIData to [A,X]
00C5: 75       INC   X                  (0400)     inc   X                            ; pXIData++
00C6: 09 00    ADC   A,0x0              (0401)     adc   A, 0
00C8: 08       PUSH  A                  (0402)     push  A
00C9: 28       ROMX                     (0403)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00CA: 53 8F    MOV   [__r0],A           (0404)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00CC: 18       POP   A                  (0405)     pop   A                            ; restore pXIData to [A,X]
00CD: 75       INC   X                  (0406)     inc   X                            ; pXIData++ (point to size)
00CE: 09 00    ADC   A,0x0              (0407)     adc   A, 0
00D0: 08       PUSH  A                  (0408)     push  A
00D1: 28       ROMX                     (0409)     romx                               ; Get the size (CPU.A <- *pXIData)
00D2: A0 1C    JZ    0x00EF             (0410)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00D4: 53 8E    MOV   [__r1],A           (0411)     mov   [__r1], A                    ;             else downcount in __r1
00D6: 18       POP   A                  (0412)     pop   A                            ; restore pXIData to [A,X]
                                        (0413) 
                                        (0414) .CopyNextByteLoop:
                                        (0415)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0416)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0417)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0418)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0419)     ;
00D7: 75       INC   X                  (0420)     inc   X                            ; pXIData++ (point to next data byte)
00D8: 09 00    ADC   A,0x0              (0421)     adc   A, 0
00DA: 08       PUSH  A                  (0422)     push  A
00DB: 28       ROMX                     (0423)     romx                               ; Get the data value (CPU.A <- *pXIData)
00DC: 3F 8F    MVI   [__r0],A           (0424)     mvi   [__r0], A                    ; Transfer the data to RAM
00DE: 47 8F FF TST   [__r0],0xFF        (0425)     tst   [__r0], 0xff                 ; Check for page crossing
00E1: B0 06    JNZ   0x00E8             (0426)     jnz   .CopyLoopTail                ;   No crossing, keep going
00E3: 5D D5    MOV   A,REG[0xD5]        (0427)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00E5: 74       INC   A                  (0428)     inc   A
00E6: 60 D5    MOV   REG[0xD5],A        (0429)     mov   reg[ MVW_PP], A
                                        (0430) .CopyLoopTail:
00E8: 18       POP   A                  (0431)     pop   A                            ; restore pXIData to [A,X]
00E9: 7A 8E    DEC   [__r1]             (0432)     dec   [__r1]                       ; End of this array in flash?
00EB: BF EB    JNZ   0x00D7             (0433)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
00ED: 8F C9    JMP   0x00B7             (0434)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0435) 
                                        (0436) .ClearRAMBlockToZero:
00EF: 18       POP   A                  (0437)     pop   A                            ; restore pXIData to [A,X]
00F0: 75       INC   X                  (0438)     inc   X                            ; pXIData++ (point to next data byte)
00F1: 09 00    ADC   A,0x0              (0439)     adc   A, 0
00F3: 08       PUSH  A                  (0440)     push  A
00F4: 28       ROMX                     (0441)     romx                               ; Get the run length (CPU.A <- *pXIData)
00F5: 53 8E    MOV   [__r1],A           (0442)     mov   [__r1], A                    ; Initialize downcounter
00F7: 50 00    MOV   A,0x0              (0443)     mov   A, 0                         ; Initialize source data
                                        (0444) 
                                        (0445) .ClearRAMBlockLoop:
                                        (0446)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0447)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0448)     ;
00F9: 3F 8F    MVI   [__r0],A           (0449)     mvi   [__r0], A                    ; Clear a byte
00FB: 47 8F FF TST   [__r0],0xFF        (0450)     tst   [__r0], 0xff                 ; Check for page crossing
00FE: B0 08    JNZ   0x0107             (0451)     jnz   .ClearLoopTail               ;   No crossing, keep going
0100: 5D D5    MOV   A,REG[0xD5]        (0452)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0102: 74       INC   A                  (0453)     inc   A
0103: 60 D5    MOV   REG[0xD5],A        (0454)     mov   reg[ MVW_PP], A
0105: 50 00    MOV   A,0x0              (0455)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0456) .ClearLoopTail:
0107: 7A 8E    DEC   [__r1]             (0457)     dec   [__r1]                       ; Was this the last byte?
0109: BF EF    JNZ   0x00F9             (0458)     jnz   .ClearRAMBlockLoop           ;   No,  continue
010B: 18       POP   A                  (0459)     pop   A                            ;   Yes, restore pXIData to [A,X] and
010C: 8F AA    JMP   0x00B7             (0460)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0461) 
                                        (0462) .C_RTE_WrapUp:
010E: 18       POP   A                  (0463)     pop   A                            ; balance stack
010F: 71 10    OR    F,0x10             
                                        (0464) 
                                        (0465) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0466) 
                                        (0467) C_RTE_Done:
                                        (0468) 
                                        (0469) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0470) 
                                        (0471)     ;-------------------------------
                                        (0472)     ; Voltage Stabilization for SMP
                                        (0473)     ;-------------------------------
                                        (0474) 
                                        (0475) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0476) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0477)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0478)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0479)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0480)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0481)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0482)     M8C_SetBank1
                                        (0483)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0484)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0485)     M8C_SetBank0
                                        (0486)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0487)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0488) .WaitFor2ms:
                                        (0489)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0490)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0491) ENDIF ; SMP is operational
                                        (0492) ENDIF ; 5.0V Operation
                                        (0493) 
                                        (0494)     ;-------------------------------
                                        (0495)     ; Set Power-On Reset (POR) Level
                                        (0496)     ;-------------------------------
                                        (0497)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0498)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0499)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0500)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0501)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0502) 
                                        (0503)     M8C_SetBank1
                                        (0504) 
                                        (0505) IF (POWER_SETTING & POWER_SET_2V7)             ; 2.7V Operation?
                                        (0506)                                                ;  Yes, lowest trip already set
                                        (0507) ELSE                                           ;   No, must adjust POR...
                                        (0508) IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
                                        (0509)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, change to midpoint trip
                                        (0510) ELSE
                                        (0511) IF (POWER_SETTING & POWER_SET_5V0)             ; 5.0V Operation?
                                        (0512)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)       ; and Slow Mode?
                                        (0513)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, set to midpoint trip
                                        (0514)  ELSE                                          ;    No, fast mode
                                        (0515)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
0111: 43 E3 10 OR    REG[0xE3],0x10     (0516)     or   reg[VLT_CR], VLT_CR_POR_MID           ;         No, change to midpoint trip
0114: 70 EF    AND   F,0xEF             
                                        (0517)   ELSE ; 24HMz                                 ;
                                        (0518)     or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
                                        (0519)   ENDIF ; 24MHz
                                        (0520)  ENDIF ; Slow Mode
                                        (0521) ENDIF ; 5.0V Operation
                                        (0522) ENDIF ; 3.3V Operation
                                        (0523) ENDIF ; 2.7V Operation
                                        (0524) 
                                        (0525)     M8C_SetBank0
                                        (0526) 
                                        (0527)     ;----------------------------
                                        (0528)     ; Wrap up and invoke "main"
                                        (0529)     ;----------------------------
                                        (0530) 
                                        (0531)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0532)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0533)     ;
0116: 62 E0 00 MOV   REG[0xE0],0x0      (0534)     mov  reg[INT_MSK0],0
0119: 71 10    OR    F,0x10             
                                        (0535) 
                                        (0536)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0537)     ;
                                        (0538)     M8C_SetBank1
011B: 62 E0 00 MOV   REG[0xE0],0x0      (0539)     mov  reg[OSC_CR0],(SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
011E: 70 EF    AND   F,0xEF             
                                        (0540)     M8C_SetBank0
                                        (0541) 
                                        (0542)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0543)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0544)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0545)     ;
0120: 62 E2 00 MOV   REG[0xE2],0x0      (0546)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0547)                                    ; have been set during the boot process.
                                        (0548) IF	(TOOLCHAIN & HITECH)
                                        (0549) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0550) ELSE
                                        (0551) IF ENABLE_LJMP_TO_MAIN
                                        (0552)     ljmp  _main                    ; goto main (no return)
                                        (0553) ELSE
0123: 7C 12 EA LCALL _main              (0554)     lcall _main                    ; call main
                                        (0555) .Exit:
0126: 8F FF    JMP   0x0126             (0556)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0557) ENDIF
                                        (0558) ENDIF ; TOOLCHAIN
                                        (0559) 
                                        (0560)     ;---------------------------------
                                        (0561)     ; Library Access to Global Parms
                                        (0562)     ;---------------------------------
                                        (0563)     ;
                                        (0564)  bGetPowerSetting:
                                        (0565) _bGetPowerSetting:
                                        (0566)     ; Returns value of POWER_SETTING in the A register.
                                        (0567)     ; No inputs. No Side Effects.
                                        (0568)     ;
                                        (0569) IF (POWER_SETTING & POWER_SET_2V7)
                                        (0570)     mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
                                        (0571) ELSE
0128: 50 10    MOV   A,0x10             (0572)     mov   A, POWER_SETTING          ; Supply voltage and internal main osc
                                        (0573) ENDIF
012A: 7F       RET                      (0574)     ret
                                        (0575) 
                                        (0576) IF	(TOOLCHAIN & HITECH)
                                        (0577) ELSE
                                        (0578)     ;---------------------------------
                                        (0579)     ; Order Critical RAM & ROM AREAs
                                        (0580)     ;---------------------------------
                                        (0581)     ;  'TOP' is all that has been defined so far...
                                        (0582) 
                                        (0583)     ;  ROM AREAs for C CONST, static & global items
                                        (0584)     ;
                                        (0585)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0586)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0587) __idata_start:
                                        (0588) 
                                        (0589)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0590) __func_lit_start:
                                        (0591) 
                                        (0592) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0593)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0594)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0595)     ; relocated by the code compressor, but the text area may shrink and
                                        (0596)     ; that moves xidata around.
                                        (0597)     ;
                                        (0598) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0599) ENDIF
                                        (0600) 
                                        (0601)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0602)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0603) 
                                        (0604)     ; CODE segment for general use
                                        (0605)     ;
                                        (0606)     AREA text (ROM, REL, CON)
                                        (0607) __text_start:
                                        (0608) 
                                        (0609)     ; RAM area usage
                                        (0610)     ;
                                        (0611)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0612) __data_start:
                                        (0613) 
                                        (0614)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0615)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0616)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0617) __bss_start:
                                        (0618) ENDIF ; TOOLCHAIN
                                        (0619) ; end of file boot.asm
FILE: D:\Studia\PSOC\CapSense\CapSense\CapSense\capsensecontrol.c
(0001) // Dodanie naglowka bilbioteki
(0002) #include "CapSenseControl.h"
(0003) 
(0004) // Biblioteka zawierająca typy danych, stale etc.
(0005) #include <m8c.h>   
(0006) // Biblioteka zaweriajace funkcje dla peryferiów    
(0007) #include "PSoCAPI.h"   
(0008) // Biblioteka udostepniajaca funkcje abs()
(0009) #include <stdlib.h>
(0010) 
(0011) // Deklaracja dzielnika
(0012) #define Ratio 50
(0013) 
(0014) 
(0015) CapSenseControl_DataStruct CapSenseControl_Data;
(0016) CapSenseControl_ScanStruct CapSenseControl_Scan;
(0017) 
(0018) // Zmienna dzieki ktorej mozliwe jest rozróżnienie
(0019) // Nacisniecia i gestu na suwaku
(0020) BOOL CapSensPush;
(0021) int fingerposition;
(0022) int loopQty; 
(0023) 
(0024) /// <summary>
(0025) /// Funkcja inicjalizująca suwak CapSense
(0026) /// </summary>
(0027) /// <remarks> 
(0028) /// <para> CSD_Start() - inicjalizuje moduł CSD</para>
(0029) /// <para>CSD_InitializeBaselines() - Załadowanie tablicy 
(0030) /// czujników CapSense</para>
(0031) /// <para>CSD_SetDefaultFingerThresholds() - aktywacja kalibracji 
(0032) /// modulu</para>
(0033) /// </remarks>
(0034) 
(0035) void CapSenseControl_INIT(void)
(0036) {
(0037)     CSD_Start();   
__UserModules_end|__text_start|_CapSenseControl_INIT|_CapSenseControl_INIT:
    0D8E: 10       PUSH  X
    0D8F: 7C 0B 3E LCALL _CSD_Start
(0038) 	CSD_ScanAllSensors();   
    0D92: 7C 0D 4B LCALL _CSD_ScanAllSensors
(0039) 	CSD_InitializeBaselines();   
    0D95: 7C 05 70 LCALL _CSD_InitializeBaselines
(0040) 	CSD_SetDefaultFingerThresholds();
    0D98: 7C 05 5B LCALL _CSD_SetDefaultFingerThresholds
    0D9B: 20       POP   X
(0041) 	CapSenseControl_Data.led = 3;
    0D9C: 62 D0 00 MOV   REG[0xD0],0x0
    0D9F: 55 9E 03 MOV   [CapSenseControl_Data],0x3
(0042) 	CapSenseControl_Scan.action=0;
    0DA2: 62 D0 00 MOV   REG[0xD0],0x0
    0DA5: 55 9C 00 MOV   [CapSenseControl_Scan],0x0
(0043) 	CapSenseControl_Scan.value=0;
    0DA8: 55 9D 00 MOV   [CapSenseControl_Scan+1],0x0
(0044) 	CapSensPush=FALSE;
    0DAB: 62 D0 00 MOV   REG[0xD0],0x0
    0DAE: 55 A4 00 MOV   [CapSensPush],0x0
(0045) 	loopQty=0;
    0DB1: 62 D0 00 MOV   REG[0xD0],0x0
    0DB4: 55 97 00 MOV   [loopQty+1],0x0
    0DB7: 55 96 00 MOV   [loopQty],0x0
(0046) 	fingerposition=0;
    0DBA: 62 D0 00 MOV   REG[0xD0],0x0
    0DBD: 55 99 00 MOV   [fingerposition+1],0x0
    0DC0: 55 98 00 MOV   [fingerposition],0x0
    0DC3: 7F       RET   
(0047) }
(0048) 
(0049) 
(0050) /// <summary>
(0051) /// Funkcja ustawia nowa wartosc czestotliwosci migania diody
(0052) /// </summary>
(0053) /// <remarks> 
(0054) /// <para> CSD_Start() - inicjalizuje moduł CSD</para>
(0055) /// <para>CSD_InitializeBaselines() - Załadowanie tablicy 
(0056) /// czujników CapSense</para>
(0057) /// <para>CSD_SetDefaultFingerThresholds() - aktywacja kalibracji 
(0058) /// modulu</para>
(0059) /// </remarks>
(0060) void CapSenseControl_GetNewBlinkFreq(void)
(0061) {
_CapSenseControl_GetNewBlinkFreq:
    0DC4: 10       PUSH  X
    0DC5: 4F       MOV   X,SP
    0DC6: 38 02    ADD   SP,0x2
(0062) 	// Pobranie pozycji palca 1 tryb pracy - suwak
(0063) 	fingerposition = CSD_wGetCentroidPos(1); 
    0DC8: 10       PUSH  X
    0DC9: 50 01    MOV   A,0x1
    0DCB: 7C 05 E0 LCALL _CSD_wGetCentroidPos
    0DCE: 62 D0 00 MOV   REG[0xD0],0x0
    0DD1: 5A 8F    MOV   [__r0],X
    0DD3: 20       POP   X
    0DD4: 08       PUSH  A
    0DD5: 51 8F    MOV   A,[__r0]
    0DD7: 62 D0 00 MOV   REG[0xD0],0x0
    0DDA: 53 98    MOV   [fingerposition],A
    0DDC: 18       POP   A
    0DDD: 53 99    MOV   [fingerposition+1],A
(0064) 	
(0065) 	// Wyzerowanie pozycji palca oraz ustawienie trybu push
(0066) 	if (!CapSensPush && CapSenseControl_Data.sliderPos==0)
    0DDF: 62 D0 00 MOV   REG[0xD0],0x0
    0DE2: 3C A4 00 CMP   [CapSensPush],0x0
    0DE5: B0 19    JNZ   0x0DFF
    0DE7: 62 D0 00 MOV   REG[0xD0],0x0
    0DEA: 3C 9F 00 CMP   [CapSenseControl_Data+1],0x0
    0DED: B0 11    JNZ   0x0DFF
(0067) 	{
(0068) 		CapSenseControl_Data.sliderPos = (BYTE) fingerposition;
    0DEF: 62 D0 00 MOV   REG[0xD0],0x0
    0DF2: 51 99    MOV   A,[fingerposition+1]
    0DF4: 62 D0 00 MOV   REG[0xD0],0x0
    0DF7: 53 9F    MOV   [CapSenseControl_Data+1],A
(0069) 		CapSensPush = TRUE;
    0DF9: 62 D0 00 MOV   REG[0xD0],0x0
    0DFC: 55 A4 01 MOV   [CapSensPush],0x1
(0070) 	}
(0071) 	
(0072) 	// Jeśli różnica miedzy aktualny pomiarem a poprzednim wieksza niz 10
(0073) 	// Wykrycie wykonania gestu
(0074) 	if ( abs(CapSenseControl_Data.sliderPos-fingerposition) >=10)
    0DFF: 62 D0 00 MOV   REG[0xD0],0x0
    0E02: 51 9F    MOV   A,[CapSenseControl_Data+1]
    0E04: 62 D0 00 MOV   REG[0xD0],0x0
    0E07: 53 8E    MOV   [__r1],A
    0E09: 55 8F 00 MOV   [__r0],0x0
    0E0C: 62 D0 00 MOV   REG[0xD0],0x0
    0E0F: 51 99    MOV   A,[fingerposition+1]
    0E11: 62 D0 00 MOV   REG[0xD0],0x0
    0E14: 14 8E    SUB   [__r1],A
    0E16: 62 D0 00 MOV   REG[0xD0],0x0
    0E19: 51 98    MOV   A,[fingerposition]
    0E1B: 62 D0 00 MOV   REG[0xD0],0x0
    0E1E: 1C 8F    SBB   [__r0],A
    0E20: 51 8F    MOV   A,[__r0]
    0E22: 08       PUSH  A
    0E23: 51 8E    MOV   A,[__r1]
    0E25: 08       PUSH  A
    0E26: 7C 14 78 LCALL _abs
    0E29: 38 FE    ADD   SP,0xFE
    0E2B: 62 D0 00 MOV   REG[0xD0],0x0
    0E2E: 51 8E    MOV   A,[__r1]
    0E30: 11 0A    SUB   A,0xA
    0E32: 51 8F    MOV   A,[__r0]
    0E34: 31 80    XOR   A,0x80
    0E36: 19 80    SBB   A,0x80
    0E38: C0 98    JC    0x0ED1
(0075) 	{
(0076) 		// Gest w prawo 1 w lewo 2
(0077) 		// Ustawienie trybu na gest
(0078) 		CapSenseControl_Scan.action = CapSenseControl_Data.sliderPos-fingerposition>0 ? 1 : 2;
    0E3A: 62 D0 00 MOV   REG[0xD0],0x0
    0E3D: 51 9F    MOV   A,[CapSenseControl_Data+1]
    0E3F: 62 D0 00 MOV   REG[0xD0],0x0
    0E42: 53 8E    MOV   [__r1],A
    0E44: 55 8F 00 MOV   [__r0],0x0
    0E47: 62 D0 00 MOV   REG[0xD0],0x0
    0E4A: 51 99    MOV   A,[fingerposition+1]
    0E4C: 62 D0 00 MOV   REG[0xD0],0x0
    0E4F: 14 8E    SUB   [__r1],A
    0E51: 62 D0 00 MOV   REG[0xD0],0x0
    0E54: 51 98    MOV   A,[fingerposition]
    0E56: 62 D0 00 MOV   REG[0xD0],0x0
    0E59: 1C 8F    SBB   [__r0],A
    0E5B: 50 00    MOV   A,0x0
    0E5D: 12 8E    SUB   A,[__r1]
    0E5F: 51 8F    MOV   A,[__r0]
    0E61: 31 80    XOR   A,0x80
    0E63: 53 8B    MOV   [__rX],A
    0E65: 50 80    MOV   A,0x80
    0E67: 1A 8B    SBB   A,[__rX]
    0E69: D0 09    JNC   0x0E73
    0E6B: 56 01 01 MOV   [X+1],0x1
    0E6E: 56 00 00 MOV   [X+0],0x0
    0E71: 80 07    JMP   0x0E79
    0E73: 56 01 02 MOV   [X+1],0x2
    0E76: 56 00 00 MOV   [X+0],0x0
    0E79: 52 01    MOV   A,[X+1]
    0E7B: 62 D0 00 MOV   REG[0xD0],0x0
    0E7E: 53 9C    MOV   [CapSenseControl_Scan],A
(0079) 		CapSenseControl_Scan.value = abs(CapSenseControl_Data.sliderPos-fingerposition)/Ratio;
    0E80: 62 D0 00 MOV   REG[0xD0],0x0
    0E83: 51 9F    MOV   A,[CapSenseControl_Data+1]
    0E85: 62 D0 00 MOV   REG[0xD0],0x0
    0E88: 53 8E    MOV   [__r1],A
    0E8A: 55 8F 00 MOV   [__r0],0x0
    0E8D: 62 D0 00 MOV   REG[0xD0],0x0
    0E90: 51 99    MOV   A,[fingerposition+1]
    0E92: 62 D0 00 MOV   REG[0xD0],0x0
    0E95: 14 8E    SUB   [__r1],A
    0E97: 62 D0 00 MOV   REG[0xD0],0x0
    0E9A: 51 98    MOV   A,[fingerposition]
    0E9C: 62 D0 00 MOV   REG[0xD0],0x0
    0E9F: 1C 8F    SBB   [__r0],A
    0EA1: 51 8F    MOV   A,[__r0]
    0EA3: 08       PUSH  A
    0EA4: 51 8E    MOV   A,[__r1]
    0EA6: 08       PUSH  A
    0EA7: 7C 14 78 LCALL _abs
    0EAA: 38 FE    ADD   SP,0xFE
    0EAC: 62 D0 00 MOV   REG[0xD0],0x0
    0EAF: 50 00    MOV   A,0x0
    0EB1: 08       PUSH  A
    0EB2: 50 32    MOV   A,0x32
    0EB4: 08       PUSH  A
    0EB5: 51 8F    MOV   A,[__r0]
    0EB7: 08       PUSH  A
    0EB8: 51 8E    MOV   A,[__r1]
    0EBA: 08       PUSH  A
    0EBB: 7C 13 C1 LCALL 0x13C1
    0EBE: 18       POP   A
    0EBF: 53 8E    MOV   [__r1],A
    0EC1: 18       POP   A
    0EC2: 38 FE    ADD   SP,0xFE
    0EC4: 51 8E    MOV   A,[__r1]
    0EC6: 62 D0 00 MOV   REG[0xD0],0x0
    0EC9: 53 9D    MOV   [CapSenseControl_Scan+1],A
(0080) 		CapSensPush = FALSE;
    0ECB: 62 D0 00 MOV   REG[0xD0],0x0
    0ECE: 55 A4 00 MOV   [CapSensPush],0x0
(0081) 	}	
    0ED1: 38 FE    ADD   SP,0xFE
    0ED3: 20       POP   X
    0ED4: 7F       RET   
(0082) }
(0083) 
(0084) /// <summary>
(0085) /// Funkcja determinuje czy po nacisnieciu ma zostac wlaczona
(0086) /// nastepna czy poprzednia dioda.
(0087) /// </summary>
(0088) /// <remarks> 
(0089) /// <para> loopQty - Zabezpieczenie, przez 10 wywolan funkcji
(0090) /// nalezy trzymac palec w tej samej pozycji na suwaku</para>
(0091) /// </remarks>
(0092) void CapSenseControl_ChangeActiveLED(void)
(0093) {
(0094) 	loopQty++;
_CapSenseControl_ChangeActiveLED:
    0ED5: 62 D0 00 MOV   REG[0xD0],0x0
    0ED8: 76 97    INC   [loopQty+1]
    0EDA: 0E 96 00 ADC   [loopQty],0x0
(0095) 	if (loopQty>=10)
    0EDD: 51 97    MOV   A,[loopQty+1]
    0EDF: 11 0A    SUB   A,0xA
    0EE1: 51 96    MOV   A,[loopQty]
    0EE3: 31 80    XOR   A,0x80
    0EE5: 19 80    SBB   A,0x80
    0EE7: C0 5E    JC    0x0F46
(0096) 	{			
(0097) 		if (CapSensPush)
    0EE9: 62 D0 00 MOV   REG[0xD0],0x0
    0EEC: 3C A4 00 CMP   [CapSensPush],0x0
    0EEF: A0 41    JZ    0x0F31
(0098) 		{
(0099) 			if(fingerposition < 50 && fingerposition >=0)
    0EF1: 62 D0 00 MOV   REG[0xD0],0x0
    0EF4: 51 99    MOV   A,[fingerposition+1]
    0EF6: 11 32    SUB   A,0x32
    0EF8: 51 98    MOV   A,[fingerposition]
    0EFA: 31 80    XOR   A,0x80
    0EFC: 19 80    SBB   A,0x80
    0EFE: D0 22    JNC   0x0F21
    0F00: 62 D0 00 MOV   REG[0xD0],0x0
    0F03: 51 99    MOV   A,[fingerposition+1]
    0F05: 11 00    SUB   A,0x0
    0F07: 51 98    MOV   A,[fingerposition]
    0F09: 31 80    XOR   A,0x80
    0F0B: 19 80    SBB   A,0x80
    0F0D: C0 13    JC    0x0F21
(0100) 			{
(0101) 				CapSenseControl_Scan.action = 3;
    0F0F: 62 D0 00 MOV   REG[0xD0],0x0
    0F12: 55 9C 03 MOV   [CapSenseControl_Scan],0x3
(0102) 				CapSenseControl_Scan.value = CapSenseControl_Data.led;						
    0F15: 62 D0 00 MOV   REG[0xD0],0x0
    0F18: 51 9E    MOV   A,[CapSenseControl_Data]
    0F1A: 62 D0 00 MOV   REG[0xD0],0x0
    0F1D: 53 9D    MOV   [CapSenseControl_Scan+1],A
(0103) 			}
    0F1F: 80 11    JMP   0x0F31
(0104) 			else
(0105) 			{
(0106) 			CapSenseControl_Scan.action = 4;
    0F21: 62 D0 00 MOV   REG[0xD0],0x0
    0F24: 55 9C 04 MOV   [CapSenseControl_Scan],0x4
(0107) 			CapSenseControl_Scan.value = CapSenseControl_Data.led;						
    0F27: 62 D0 00 MOV   REG[0xD0],0x0
    0F2A: 51 9E    MOV   A,[CapSenseControl_Data]
    0F2C: 62 D0 00 MOV   REG[0xD0],0x0
    0F2F: 53 9D    MOV   [CapSenseControl_Scan+1],A
(0108) 			}
(0109) 		}																
(0110) 		loopQty=0;
    0F31: 62 D0 00 MOV   REG[0xD0],0x0
    0F34: 55 97 00 MOV   [loopQty+1],0x0
    0F37: 55 96 00 MOV   [loopQty],0x0
(0111) 		CapSensPush = FALSE;
    0F3A: 62 D0 00 MOV   REG[0xD0],0x0
    0F3D: 55 A4 00 MOV   [CapSensPush],0x0
(0112) 		CapSenseControl_Data.sliderPos = 0;
    0F40: 62 D0 00 MOV   REG[0xD0],0x0
    0F43: 55 9F 00 MOV   [CapSenseControl_Data+1],0x0
(0113) 	}
    0F46: 7F       RET   
(0114) }
(0115) 
(0116) /// <summary>
(0117) /// Glowna funkcja skanujaca suwak
(0118) /// </summary>
(0119) CapSenseControl_ScanStruct CapSenseControl_DoScan(void)
(0120) {	
_CapSenseControl_DoScan:
    0F47: 10       PUSH  X
    0F48: 4F       MOV   X,SP
(0121) 	CapSenseControl_Scan.action=0;
    0F49: 62 D0 00 MOV   REG[0xD0],0x0
    0F4C: 55 9C 00 MOV   [CapSenseControl_Scan],0x0
(0122) 	CapSenseControl_Scan.value=0;
    0F4F: 55 9D 00 MOV   [CapSenseControl_Scan+1],0x0
(0123) 	CSD_ScanAllSensors(); 
    0F52: 10       PUSH  X
    0F53: 7C 0D 4B LCALL _CSD_ScanAllSensors
(0124) 	CSD_UpdateAllBaselines();
    0F56: 7C 05 D6 LCALL _CSD_UpdateAllBaselines
(0125) 	
(0126) 	CSD_bIsAnySensorActive() ? CapSenseControl_GetNewBlinkFreq() : CapSenseControl_ChangeActiveLED();
    0F59: 7C 05 BD LCALL _CSD_bIsAnySensorActive
    0F5C: 20       POP   X
    0F5D: 62 D0 00 MOV   REG[0xD0],0x0
    0F60: 39 00    CMP   A,0x0
    0F62: A0 05    JZ    0x0F68
    0F64: 9E 5E    CALL  _CapSenseControl_GetNewBlinkFreq
    0F66: 80 03    JMP   0x0F6A
    0F68: 9F 6B    CALL  _CapSenseControl_ChangeActiveLED
(0127) 	return CapSenseControl_Scan;
    0F6A: 62 D0 00 MOV   REG[0xD0],0x0
    0F6D: 55 8E 9C MOV   [__r1],0x9C
    0F70: 55 8F 00 MOV   [__r0],0x0
    0F73: 52 FC    MOV   A,[X-4]
    0F75: 53 8C    MOV   [__r3],A
    0F77: 52 FB    MOV   A,[X-5]
    0F79: 53 8D    MOV   [__r2],A
    0F7B: 51 8F    MOV   A,[__r0]
    0F7D: 60 D4    MOV   REG[0xD4],A
    0F7F: 51 8D    MOV   A,[__r2]
    0F81: 60 D5    MOV   REG[0xD5],A
    0F83: 3E 8E    MVI   A,[__r1]
    0F85: 3F 8C    MVI   [__r3],A
    0F87: 3E 8E    MVI   A,[__r1]
    0F89: 3F 8C    MVI   [__r3],A
    0F8B: 20       POP   X
    0F8C: 7F       RET   
FILE: D:\Studia\PSOC\CapSense\CapSense\CapSense\ledcontrol.c
(0001) #include "LEDControl.h" // Dodanie naglowka bilbioteki
(0002) #include <m8c.h>        // Biblioteka zawierająca typy danych, stale etc.
(0003) #include "PSoCAPI.h"    // Biblioteka zaweriajace funkcje dla peryferiów
(0004) 
(0005) //Definiowanie stalej dla maksymalnej wartosci interwalu
(0006) #define IntervalLimit 80
(0007) 
(0008) //Deklaracja stalych dla kolorow diod
(0009) enum LED{NONE, BLUE, GREEN,RED};
(0010) 
(0011) 
(0012) //Inicjalizacja wartosci czestotliwosci migania diod
(0013) LEDControl_RT = 50;
(0014) LEDControl_BT = 50;
(0015) LEDControl_GT = 50;
(0016) 
(0017) /// <summary>
(0018) /// Funkcja inicjalizująca diody
(0019) /// </summary>
(0020) /// <remarks> 
(0021) /// <para>[nazwa modulu]_Start() - w praktyce to samo dzialanie co _Stop, inicjalizuje modul oraz 
(0022) /// wylacza wybrana diode niezależnie od stanu ustawionego w module</para>
(0023) /// <para>LED_RED_On() - wlacza diode czerwona</para>
(0024) /// </remarks>
(0025) void LEDControl_INIT(void)
(0026) {
(0027)   LED_BLUE_Start(); 
_LEDControl_INIT:
    0F8D: 10       PUSH  X
    0F8E: 7C 03 59 LCALL LED_BLUE_Stop|_LED_BLUE_Off|LED_BLUE_Off|_LED_BLUE_Start|LED_BLUE_Start|_LED_BLUE_Stop
(0028)   LED_GREEN_Start();
    0F91: 7C 03 1C LCALL LED_GREEN_Start|LED_GREEN_Stop|_LED_GREEN_Stop|_LED_GREEN_Start|LED_GREEN_Off|_LED_GREEN_Off
(0029)   LED_RED_Start();
    0F94: 7C 02 DF LCALL _LED_RED_Stop|LED_RED_Start|_LED_RED_Start|LED_RED_Stop|LED_RED_Off|_LED_RED_Off
(0030)   LED_RED_On();
    0F97: 7C 02 DB LCALL _LED_RED_On
    0F9A: 20       POP   X
    0F9B: 7F       RET   
(0031) }
(0032) 
(0033) /// <summary>
(0034) /// Funkcja służy do bezpośredniego sterowania diodami.
(0035) /// </summary>
(0036) /// <remarks>
(0037) /// <para>Funkcja przyjmuje 3 paramatry TRUE/FALSE. TRUE wlacza dioda, FALSE wylacza</para>
(0038) /// <para>[nazwa modulu]_On() wlaczenie diody</para>
(0039) /// <para>[nazwa modulu]_Off() wylaczenie diody</para>
(0040) /// </remarks>
(0041) /// <param name="red">Dioda czerwona</param>
(0042) /// <param name="green">Dioda zielona</param>
(0043) /// <param name="blue">Dioda niebieska</param>
(0044) 
(0045) void LEDControl_ChangeState(BOOL red,BOOL green,BOOL blue)
(0046) {
_LEDControl_ChangeState:
  blue                 --> X-6
  green                --> X-5
  red                  --> X-4
    0F9C: 10       PUSH  X
    0F9D: 4F       MOV   X,SP
(0047) 	red ? LED_RED_On() : LED_RED_Off();
    0F9E: 3D FC 00 CMP   [X-4],0x0
    0FA1: A0 08    JZ    0x0FAA
    0FA3: 10       PUSH  X
    0FA4: 7C 02 DB LCALL _LED_RED_On
    0FA7: 20       POP   X
    0FA8: 80 06    JMP   0x0FAF
    0FAA: 10       PUSH  X
    0FAB: 7C 02 DF LCALL _LED_RED_Stop|LED_RED_Start|_LED_RED_Start|LED_RED_Stop|LED_RED_Off|_LED_RED_Off
    0FAE: 20       POP   X
(0048) 	green ? LED_GREEN_On() : LED_GREEN_Off();
    0FAF: 3D FB 00 CMP   [X-5],0x0
    0FB2: A0 08    JZ    0x0FBB
    0FB4: 10       PUSH  X
    0FB5: 7C 03 18 LCALL _LED_GREEN_On
    0FB8: 20       POP   X
    0FB9: 80 06    JMP   0x0FC0
    0FBB: 10       PUSH  X
    0FBC: 7C 03 1C LCALL LED_GREEN_Start|LED_GREEN_Stop|_LED_GREEN_Stop|_LED_GREEN_Start|LED_GREEN_Off|_LED_GREEN_Off
    0FBF: 20       POP   X
(0049) 	blue ? LED_BLUE_On() : LED_BLUE_Off();
    0FC0: 3D FA 00 CMP   [X-6],0x0
    0FC3: A0 08    JZ    0x0FCC
    0FC5: 10       PUSH  X
    0FC6: 7C 03 55 LCALL _LED_BLUE_On
    0FC9: 20       POP   X
    0FCA: 80 06    JMP   0x0FD1
    0FCC: 10       PUSH  X
    0FCD: 7C 03 59 LCALL LED_BLUE_Stop|_LED_BLUE_Off|LED_BLUE_Off|_LED_BLUE_Start|LED_BLUE_Start|_LED_BLUE_Stop
    0FD0: 20       POP   X
    0FD1: 20       POP   X
    0FD2: 7F       RET   
(0050) }
(0051) 
(0052) /// <summary>
(0053) /// Funkcja zmienia aktualnie swiecaca diode oraz zwraca jej numer
(0054) /// </summary>
(0055) /// <returns>
(0056) /// Zwraca wartość 0,1,2 lub 3, zgodna z ENUM[BLUE,GREEN,RED] oraz wykorzystuje funkcje <c>LEDControl_ChangeState()</c>
(0057) /// </returns>
(0058) /// <param name="led">Zmienna do której przekazujemy aktualnie aktywną diode ENUM[BLUE,GREEN,RED]</param>
(0059) /// <param name="isASC">Jesli isASC: TRUE - kolejność od lewej do prawej, False - kolejność od prawej do lewej</param>
(0060) BYTE LEDControl_ChangeStateSwitch(BYTE led ,BOOL isASC)
(0061) {
_LEDControl_ChangeStateSwitch:
  isASC                --> X-5
  led                  --> X-4
    0FD3: 10       PUSH  X
    0FD4: 4F       MOV   X,SP
    0FD5: 38 0A    ADD   SP,0xA
(0062)   switch (led)
    0FD7: 52 FC    MOV   A,[X-4]
    0FD9: 54 01    MOV   [X+1],A
    0FDB: 56 00 00 MOV   [X+0],0x0
    0FDE: 3D 00 00 CMP   [X+0],0x0
    0FE1: B0 06    JNZ   0x0FE8
    0FE3: 3D 01 00 CMP   [X+1],0x0
    0FE6: A0 21    JZ    0x1008
    0FE8: 3D 00 00 CMP   [X+0],0x0
    0FEB: B0 06    JNZ   0x0FF2
    0FED: 3D 01 01 CMP   [X+1],0x1
    0FF0: A0 85    JZ    0x1076
    0FF2: 3D 00 00 CMP   [X+0],0x0
    0FF5: B0 06    JNZ   0x0FFC
    0FF7: 3D 01 02 CMP   [X+1],0x2
    0FFA: A0 44    JZ    0x103F
    0FFC: 3D 00 00 CMP   [X+0],0x0
    0FFF: B0 06    JNZ   0x1006
    1001: 3D 01 03 CMP   [X+1],0x3
    1004: A0 AA    JZ    0x10AF
    1006: 80 E1    JMP   0x10E8
(0063)   {
(0064)     case 0:
(0065)       isASC ? LEDControl_ChangeState(TRUE,FALSE,FALSE) : LEDControl_ChangeState(FALSE,FALSE,TRUE);
    1008: 3D FB 00 CMP   [X-5],0x0
    100B: A0 0E    JZ    0x101A
    100D: 50 00    MOV   A,0x0
    100F: 08       PUSH  A
    1010: 08       PUSH  A
    1011: 50 01    MOV   A,0x1
    1013: 08       PUSH  A
    1014: 9F 86    CALL  _LEDControl_ChangeState
    1016: 38 FD    ADD   SP,0xFD
    1018: 80 0C    JMP   0x1025
    101A: 50 01    MOV   A,0x1
    101C: 08       PUSH  A
    101D: 50 00    MOV   A,0x0
    101F: 08       PUSH  A
    1020: 08       PUSH  A
    1021: 9F 79    CALL  _LEDControl_ChangeState
    1023: 38 FD    ADD   SP,0xFD
(0066) 	  return isASC ? RED : BLUE;
    1025: 3D FB 00 CMP   [X-5],0x0
    1028: A0 09    JZ    0x1032
    102A: 56 03 03 MOV   [X+3],0x3
    102D: 56 02 00 MOV   [X+2],0x0
    1030: 80 07    JMP   0x1038
    1032: 56 03 01 MOV   [X+3],0x1
    1035: 56 02 00 MOV   [X+2],0x0
    1038: 62 D0 00 MOV   REG[0xD0],0x0
    103B: 52 03    MOV   A,[X+3]
    103D: 80 AF    JMP   0x10ED
(0067)       break;
(0068)     case GREEN:
(0069) 	  isASC ? LEDControl_ChangeState(FALSE,FALSE,TRUE) : LEDControl_ChangeState(TRUE,FALSE,FALSE);
    103F: 3D FB 00 CMP   [X-5],0x0
    1042: A0 0E    JZ    0x1051
    1044: 50 01    MOV   A,0x1
    1046: 08       PUSH  A
    1047: 50 00    MOV   A,0x0
    1049: 08       PUSH  A
    104A: 08       PUSH  A
    104B: 9F 4F    CALL  _LEDControl_ChangeState
    104D: 38 FD    ADD   SP,0xFD
    104F: 80 0C    JMP   0x105C
    1051: 50 00    MOV   A,0x0
    1053: 08       PUSH  A
    1054: 08       PUSH  A
    1055: 50 01    MOV   A,0x1
    1057: 08       PUSH  A
    1058: 9F 42    CALL  _LEDControl_ChangeState
    105A: 38 FD    ADD   SP,0xFD
(0070)       return isASC ? BLUE : RED;      
    105C: 3D FB 00 CMP   [X-5],0x0
    105F: A0 09    JZ    0x1069
    1061: 56 05 01 MOV   [X+5],0x1
    1064: 56 04 00 MOV   [X+4],0x0
    1067: 80 07    JMP   0x106F
    1069: 56 05 03 MOV   [X+5],0x3
    106C: 56 04 00 MOV   [X+4],0x0
    106F: 62 D0 00 MOV   REG[0xD0],0x0
    1072: 52 05    MOV   A,[X+5]
    1074: 80 78    JMP   0x10ED
(0071)       break;
(0072)     case BLUE:
(0073) 	  isASC ? LEDControl_ChangeState(TRUE,FALSE,FALSE) : LEDControl_ChangeState(FALSE,TRUE,FALSE);
    1076: 3D FB 00 CMP   [X-5],0x0
    1079: A0 0E    JZ    0x1088
    107B: 50 00    MOV   A,0x0
    107D: 08       PUSH  A
    107E: 08       PUSH  A
    107F: 50 01    MOV   A,0x1
    1081: 08       PUSH  A
    1082: 9F 18    CALL  _LEDControl_ChangeState
    1084: 38 FD    ADD   SP,0xFD
    1086: 80 0E    JMP   0x1095
    1088: 50 00    MOV   A,0x0
    108A: 08       PUSH  A
    108B: 50 01    MOV   A,0x1
    108D: 08       PUSH  A
    108E: 50 00    MOV   A,0x0
    1090: 08       PUSH  A
    1091: 9F 09    CALL  _LEDControl_ChangeState
    1093: 38 FD    ADD   SP,0xFD
(0074)       return isASC ? RED : GREEN;		
    1095: 3D FB 00 CMP   [X-5],0x0
    1098: A0 09    JZ    0x10A2
    109A: 56 07 03 MOV   [X+7],0x3
    109D: 56 06 00 MOV   [X+6],0x0
    10A0: 80 07    JMP   0x10A8
    10A2: 56 07 02 MOV   [X+7],0x2
    10A5: 56 06 00 MOV   [X+6],0x0
    10A8: 62 D0 00 MOV   REG[0xD0],0x0
    10AB: 52 07    MOV   A,[X+7]
    10AD: 80 3F    JMP   0x10ED
(0075)       break;
(0076)     case RED:
(0077) 	  isASC ? LEDControl_ChangeState(FALSE,TRUE,FALSE) : LEDControl_ChangeState(FALSE,FALSE,TRUE);
    10AF: 3D FB 00 CMP   [X-5],0x0
    10B2: A0 10    JZ    0x10C3
    10B4: 50 00    MOV   A,0x0
    10B6: 08       PUSH  A
    10B7: 50 01    MOV   A,0x1
    10B9: 08       PUSH  A
    10BA: 50 00    MOV   A,0x0
    10BC: 08       PUSH  A
    10BD: 9E DD    CALL  _LEDControl_ChangeState
    10BF: 38 FD    ADD   SP,0xFD
    10C1: 80 0C    JMP   0x10CE
    10C3: 50 01    MOV   A,0x1
    10C5: 08       PUSH  A
    10C6: 50 00    MOV   A,0x0
    10C8: 08       PUSH  A
    10C9: 08       PUSH  A
    10CA: 9E D0    CALL  _LEDControl_ChangeState
    10CC: 38 FD    ADD   SP,0xFD
(0078)       return isASC ? GREEN : BLUE;
    10CE: 3D FB 00 CMP   [X-5],0x0
    10D1: A0 09    JZ    0x10DB
    10D3: 56 09 02 MOV   [X+9],0x2
    10D6: 56 08 00 MOV   [X+8],0x0
    10D9: 80 07    JMP   0x10E1
    10DB: 56 09 01 MOV   [X+9],0x1
    10DE: 56 08 00 MOV   [X+8],0x0
    10E1: 62 D0 00 MOV   REG[0xD0],0x0
    10E4: 52 09    MOV   A,[X+9]
    10E6: 80 06    JMP   0x10ED
(0079)       break;
(0080)     default:
(0081)       return 0;
    10E8: 62 D0 00 MOV   REG[0xD0],0x0
    10EB: 50 00    MOV   A,0x0
(0082)       break;
    10ED: 38 F6    ADD   SP,0xF6
    10EF: 20       POP   X
    10F0: 7F       RET   
(0083)   }      
(0084) }
(0085) 
(0086) /// <summary>
(0087) /// Funkcja waliduje wartosc czestotliwosci migania diody
(0088) /// </summary>
(0089) /// <remarks>
(0090) /// <para>Funkcja dodaje liczbe addValue która może być ujemna do wartosci podanej w pierwszym parametrze</para>
(0091) /// </remarks>
(0092) /// <returns>
(0093) /// <para>Jeśli wartość jest mniejsza od 0 to zwraca zero w przeciwnym wypadku</para>
(0094) /// <para>Jeśli wartość jest wieksza od stalej <c>IntervalLimit</c> to zwraca wartosc <c>IntervalLimit</c></para>
(0095) /// <para>W przeciwnym wypadku zwraca obliczona wartosc</para>
(0096) /// </returns>
(0097) /// <param name="sourceValue">Wartosc modyfikowana</param>
(0098) /// <param name="addValue">Wartosc o ktora bedzie modyfikowana wartosc zrodlowa</param>
(0099) int LEDControl_ValueValidation(int sourceValue, int addValue)
(0100) {
_LEDControl_ValueValidation:
  addValue             --> X-7
  sourceValue          --> X-5
    10F1: 10       PUSH  X
    10F2: 4F       MOV   X,SP
    10F3: 38 04    ADD   SP,0x4
(0101)   sourceValue += addValue;
    10F5: 52 FA    MOV   A,[X-6]
    10F7: 05 FC    ADD   [X-4],A
    10F9: 52 F9    MOV   A,[X-7]
    10FB: 0D FB    ADC   [X-5],A
(0102)   sourceValue = sourceValue < 0 ? 0 : sourceValue > IntervalLimit ? IntervalLimit : sourceValue;
    10FD: 52 FC    MOV   A,[X-4]
    10FF: 11 00    SUB   A,0x0
    1101: 52 FB    MOV   A,[X-5]
    1103: 31 80    XOR   A,0x80
    1105: 19 80    SBB   A,0x80
    1107: D0 09    JNC   0x1111
    1109: 56 01 00 MOV   [X+1],0x0
    110C: 56 00 00 MOV   [X+0],0x0
    110F: 80 2C    JMP   0x113C
    1111: 50 50    MOV   A,0x50
    1113: 13 FC    SUB   A,[X-4]
    1115: 52 FB    MOV   A,[X-5]
    1117: 31 80    XOR   A,0x80
    1119: 62 D0 00 MOV   REG[0xD0],0x0
    111C: 53 8B    MOV   [__rX],A
    111E: 50 80    MOV   A,0x80
    1120: 1A 8B    SBB   A,[__rX]
    1122: D0 09    JNC   0x112C
    1124: 56 03 50 MOV   [X+3],0x50
    1127: 56 02 00 MOV   [X+2],0x0
    112A: 80 09    JMP   0x1134
    112C: 52 FC    MOV   A,[X-4]
    112E: 54 03    MOV   [X+3],A
    1130: 52 FB    MOV   A,[X-5]
    1132: 54 02    MOV   [X+2],A
    1134: 52 03    MOV   A,[X+3]
    1136: 54 01    MOV   [X+1],A
    1138: 52 02    MOV   A,[X+2]
    113A: 54 00    MOV   [X+0],A
    113C: 52 01    MOV   A,[X+1]
    113E: 54 FC    MOV   [X-4],A
    1140: 52 00    MOV   A,[X+0]
    1142: 54 FB    MOV   [X-5],A
(0103)   return sourceValue;
    1144: 62 D0 00 MOV   REG[0xD0],0x0
    1147: 52 FC    MOV   A,[X-4]
    1149: 53 8E    MOV   [__r1],A
    114B: 52 FB    MOV   A,[X-5]
    114D: 53 8F    MOV   [__r0],A
    114F: 38 FC    ADD   SP,0xFC
    1151: 20       POP   X
    1152: 7F       RET   
(0104) }
(0105) 
(0106) /// <summary>
(0107) /// Funkcja zmienia wartosc czestotliwosc migania diody
(0108) /// </summary>
(0109) /// <remarks>
(0110) /// <para>Funkcja dodaje liczbe addValue która może być ujemna do wartosci podanej w pierwszym parametrze</para>
(0111) /// </remarks>
(0112) /// <param name="led">Wartość 0,1,2 lub 3, zgodna z ENUM[BLUE,GREEN,RED] do zmiany czestotliwosci</param>
(0113) /// <param name="value">Wartosc zmiany czestotliwosci</param>
(0114) /// <param name="isAdd">Zmienna Bool determinuje zwiekszanie lub zmniejszanie czestotliowosci</param>
(0115) void LEDControl_ChangeFrequency(BYTE led,int value,BYTE isAdd)
(0116) {
_LEDControl_ChangeFrequency:
  isAdd                --> X-7
  value                --> X-6
  led                  --> X-4
    1153: 10       PUSH  X
    1154: 4F       MOV   X,SP
    1155: 38 04    ADD   SP,0x4
(0117)   value = isAdd ? value : value * -1;	
    1157: 3D F9 00 CMP   [X-7],0x0
    115A: A0 0B    JZ    0x1166
    115C: 52 FB    MOV   A,[X-5]
    115E: 54 01    MOV   [X+1],A
    1160: 52 FA    MOV   A,[X-6]
    1162: 54 00    MOV   [X+0],A
    1164: 80 1B    JMP   0x1180
    1166: 52 FA    MOV   A,[X-6]
    1168: 08       PUSH  A
    1169: 52 FB    MOV   A,[X-5]
    116B: 08       PUSH  A
    116C: 50 FF    MOV   A,0xFF
    116E: 08       PUSH  A
    116F: 08       PUSH  A
    1170: 62 D0 00 MOV   REG[0xD0],0x0
    1173: 7C 14 48 LCALL 0x1448
    1176: 38 FC    ADD   SP,0xFC
    1178: 51 8B    MOV   A,[__rX]
    117A: 54 01    MOV   [X+1],A
    117C: 51 8A    MOV   A,[__rY]
    117E: 54 00    MOV   [X+0],A
    1180: 52 01    MOV   A,[X+1]
    1182: 54 FB    MOV   [X-5],A
    1184: 52 00    MOV   A,[X+0]
    1186: 54 FA    MOV   [X-6],A
(0118)   switch (led)
    1188: 52 FC    MOV   A,[X-4]
    118A: 54 03    MOV   [X+3],A
    118C: 56 02 00 MOV   [X+2],0x0
    118F: 3D 02 00 CMP   [X+2],0x0
    1192: B0 06    JNZ   0x1199
    1194: 3D 03 01 CMP   [X+3],0x1
    1197: A0 3C    JZ    0x11D4
    1199: 3D 02 00 CMP   [X+2],0x0
    119C: B0 06    JNZ   0x11A3
    119E: 3D 03 02 CMP   [X+3],0x2
    11A1: A0 57    JZ    0x11F9
    11A3: 3D 02 00 CMP   [X+2],0x0
    11A6: B0 06    JNZ   0x11AD
    11A8: 3D 03 03 CMP   [X+3],0x3
    11AB: A0 03    JZ    0x11AF
    11AD: 80 6E    JMP   0x121C
(0119)   {
(0120)     case RED:
(0121)       LEDControl_RT = LEDControl_ValueValidation(LEDControl_RT, value);
    11AF: 52 FA    MOV   A,[X-6]
    11B1: 08       PUSH  A
    11B2: 52 FB    MOV   A,[X-5]
    11B4: 08       PUSH  A
    11B5: 62 D0 00 MOV   REG[0xD0],0x0
    11B8: 51 A0    MOV   A,[LEDControl_RT]
    11BA: 08       PUSH  A
    11BB: 51 A1    MOV   A,[LEDControl_RT+1]
    11BD: 08       PUSH  A
    11BE: 9F 31    CALL  _LEDControl_ValueValidation
    11C0: 38 FC    ADD   SP,0xFC
    11C2: 62 D0 00 MOV   REG[0xD0],0x0
    11C5: 51 8E    MOV   A,[__r1]
    11C7: 08       PUSH  A
    11C8: 51 8F    MOV   A,[__r0]
    11CA: 62 D0 00 MOV   REG[0xD0],0x0
    11CD: 53 A0    MOV   [LEDControl_RT],A
    11CF: 18       POP   A
    11D0: 53 A1    MOV   [LEDControl_RT+1],A
(0122)       break;
    11D2: 80 49    JMP   0x121C
(0123)     case BLUE:
(0124) 	  LEDControl_BT = LEDControl_ValueValidation(LEDControl_BT, value);
    11D4: 52 FA    MOV   A,[X-6]
    11D6: 08       PUSH  A
    11D7: 52 FB    MOV   A,[X-5]
    11D9: 08       PUSH  A
    11DA: 62 D0 00 MOV   REG[0xD0],0x0
    11DD: 51 9A    MOV   A,[LEDControl_BT]
    11DF: 08       PUSH  A
    11E0: 51 9B    MOV   A,[LEDControl_BT+1]
    11E2: 08       PUSH  A
    11E3: 9F 0C    CALL  _LEDControl_ValueValidation
    11E5: 38 FC    ADD   SP,0xFC
    11E7: 62 D0 00 MOV   REG[0xD0],0x0
    11EA: 51 8E    MOV   A,[__r1]
    11EC: 08       PUSH  A
    11ED: 51 8F    MOV   A,[__r0]
    11EF: 62 D0 00 MOV   REG[0xD0],0x0
    11F2: 53 9A    MOV   [LEDControl_BT],A
    11F4: 18       POP   A
    11F5: 53 9B    MOV   [LEDControl_BT+1],A
(0125)       break;
    11F7: 80 24    JMP   0x121C
(0126)     case GREEN:
(0127) 	  LEDControl_GT = LEDControl_ValueValidation(LEDControl_GT, value);
    11F9: 52 FA    MOV   A,[X-6]
    11FB: 08       PUSH  A
    11FC: 52 FB    MOV   A,[X-5]
    11FE: 08       PUSH  A
    11FF: 62 D0 00 MOV   REG[0xD0],0x0
    1202: 51 A2    MOV   A,[LEDControl_GT]
    1204: 08       PUSH  A
    1205: 51 A3    MOV   A,[LEDControl_GT+1]
    1207: 08       PUSH  A
    1208: 9E E7    CALL  _LEDControl_ValueValidation
    120A: 38 FC    ADD   SP,0xFC
    120C: 62 D0 00 MOV   REG[0xD0],0x0
    120F: 51 8E    MOV   A,[__r1]
    1211: 08       PUSH  A
    1212: 51 8F    MOV   A,[__r0]
    1214: 62 D0 00 MOV   REG[0xD0],0x0
    1217: 53 A2    MOV   [LEDControl_GT],A
    1219: 18       POP   A
    121A: 53 A3    MOV   [LEDControl_GT+1],A
(0128)       break;
(0129)     default:
(0130)       break; 
    121C: 38 FC    ADD   SP,0xFC
    121E: 20       POP   X
    121F: 7F       RET   
(0131)   }
(0132) }
(0133) 
(0134) /// <summary>
(0135) /// Funkcja zmieniajaca stan diod w zaleznosci od licznika cykli petli
(0136) /// </summary>
(0137) /// <remarks>
(0138) /// <para>Funkcja powinna byc umieszczona w petli, a jej licznik powinien byc przekazany jako parametr</para>
(0139) /// <para>Gdy limit cykli LEDControl_RT,LEDControl_GT,LEDControl_BT zostanie osiagniety nastepuje zmiana stanu diody</para>
(0140) /// <para>Rownoczesnie nastepuje wyzerowanie licznika petli i zwrocenie jego wartosci</para>
(0141) /// </remarks>
(0142) /// <param name="led">Wartość 0,1,2 lub 3, zgodna z ENUM[BLUE,GREEN,RED]</param>
(0143) /// <param name="blinkLoop">Licznik petli</param>
(0144) int LEDControl_Blink(BYTE led, int blinkLoop)
(0145) {
_LEDControl_Blink:
  blinkLoop            --> X-6
  led                  --> X-4
    1220: 10       PUSH  X
    1221: 4F       MOV   X,SP
    1222: 38 02    ADD   SP,0x2
(0146)   switch (led)
    1224: 52 FC    MOV   A,[X-4]
    1226: 54 01    MOV   [X+1],A
    1228: 56 00 00 MOV   [X+0],0x0
    122B: 3D 00 00 CMP   [X+0],0x0
    122E: B0 06    JNZ   0x1235
    1230: 3D 01 01 CMP   [X+1],0x1
    1233: A0 47    JZ    0x127B
    1235: 3D 00 00 CMP   [X+0],0x0
    1238: B0 06    JNZ   0x123F
    123A: 3D 01 02 CMP   [X+1],0x2
    123D: A0 6D    JZ    0x12AB
    123F: 3D 00 00 CMP   [X+0],0x0
    1242: B0 06    JNZ   0x1249
    1244: 3D 01 03 CMP   [X+1],0x3
    1247: A0 03    JZ    0x124B
    1249: 80 91    JMP   0x12DB
(0147)   {
(0148)     case RED:
(0149)       if (blinkLoop>=LEDControl_RT)
    124B: 62 D0 00 MOV   REG[0xD0],0x0
    124E: 52 FB    MOV   A,[X-5]
    1250: 12 A1    SUB   A,[LEDControl_RT+1]
    1252: 51 A0    MOV   A,[LEDControl_RT]
    1254: 31 80    XOR   A,0x80
    1256: 62 D0 00 MOV   REG[0xD0],0x0
    1259: 53 8B    MOV   [__rX],A
    125B: 52 FA    MOV   A,[X-6]
    125D: 31 80    XOR   A,0x80
    125F: 1A 8B    SBB   A,[__rX]
    1261: C0 0C    JC    0x126E
(0150)         {
(0151)           LED_RED_Invert();
    1263: 10       PUSH  X
    1264: 7C 02 F9 LCALL _LED_RED_Invert
    1267: 20       POP   X
(0152)           blinkLoop = 0;
    1268: 56 FB 00 MOV   [X-5],0x0
    126B: 56 FA 00 MOV   [X-6],0x0
(0153)         }
(0154)         return blinkLoop;
    126E: 62 D0 00 MOV   REG[0xD0],0x0
    1271: 52 FB    MOV   A,[X-5]
    1273: 53 8E    MOV   [__r1],A
    1275: 52 FA    MOV   A,[X-6]
    1277: 53 8F    MOV   [__r0],A
    1279: 80 6C    JMP   0x12E6
(0155)         break;
(0156)     case BLUE:
(0157)       if (blinkLoop>=LEDControl_BT)
    127B: 62 D0 00 MOV   REG[0xD0],0x0
    127E: 52 FB    MOV   A,[X-5]
    1280: 12 9B    SUB   A,[LEDControl_BT+1]
    1282: 51 9A    MOV   A,[LEDControl_BT]
    1284: 31 80    XOR   A,0x80
    1286: 62 D0 00 MOV   REG[0xD0],0x0
    1289: 53 8B    MOV   [__rX],A
    128B: 52 FA    MOV   A,[X-6]
    128D: 31 80    XOR   A,0x80
    128F: 1A 8B    SBB   A,[__rX]
    1291: C0 0C    JC    0x129E
(0158)       {
(0159)         LED_BLUE_Invert();
    1293: 10       PUSH  X
    1294: 7C 03 73 LCALL _LED_BLUE_Invert
    1297: 20       POP   X
(0160)         blinkLoop = 0;
    1298: 56 FB 00 MOV   [X-5],0x0
    129B: 56 FA 00 MOV   [X-6],0x0
(0161)       }
(0162)       return blinkLoop;
    129E: 62 D0 00 MOV   REG[0xD0],0x0
    12A1: 52 FB    MOV   A,[X-5]
    12A3: 53 8E    MOV   [__r1],A
    12A5: 52 FA    MOV   A,[X-6]
    12A7: 53 8F    MOV   [__r0],A
    12A9: 80 3C    JMP   0x12E6
(0163)       break;
(0164)     case GREEN:
(0165)       if (blinkLoop>=LEDControl_GT)
    12AB: 62 D0 00 MOV   REG[0xD0],0x0
    12AE: 52 FB    MOV   A,[X-5]
    12B0: 12 A3    SUB   A,[LEDControl_GT+1]
    12B2: 51 A2    MOV   A,[LEDControl_GT]
    12B4: 31 80    XOR   A,0x80
    12B6: 62 D0 00 MOV   REG[0xD0],0x0
    12B9: 53 8B    MOV   [__rX],A
    12BB: 52 FA    MOV   A,[X-6]
    12BD: 31 80    XOR   A,0x80
    12BF: 1A 8B    SBB   A,[__rX]
    12C1: C0 0C    JC    0x12CE
(0166)       {
(0167)         LED_GREEN_Invert();
    12C3: 10       PUSH  X
    12C4: 7C 03 36 LCALL _LED_GREEN_Invert
    12C7: 20       POP   X
(0168)         blinkLoop = 0;
    12C8: 56 FB 00 MOV   [X-5],0x0
    12CB: 56 FA 00 MOV   [X-6],0x0
(0169)       }
(0170)       return blinkLoop;
    12CE: 62 D0 00 MOV   REG[0xD0],0x0
    12D1: 52 FB    MOV   A,[X-5]
    12D3: 53 8E    MOV   [__r1],A
    12D5: 52 FA    MOV   A,[X-6]
    12D7: 53 8F    MOV   [__r0],A
    12D9: 80 0C    JMP   0x12E6
(0171)       break;
(0172)     default:
(0173)       return blinkLoop;
    12DB: 62 D0 00 MOV   REG[0xD0],0x0
    12DE: 52 FB    MOV   A,[X-5]
    12E0: 53 8E    MOV   [__r1],A
    12E2: 52 FA    MOV   A,[X-6]
    12E4: 53 8F    MOV   [__r0],A
(0174)       break; 
    12E6: 38 FE    ADD   SP,0xFE
(0175)   }
(0176) }FILE: D:\Studia\PSOC\CapSense\CapSense\CapSense\main.c
(0001) // Biblioteka zawierająca typy danych, stale etc.
(0002) #include <m8c.h>    
(0003) // Biblioteka zaweriajace funkcje dla peryferiów    
(0004) #include "PSoCAPI.h"  
(0005) // Biblioteka do obsługi diod LED
(0006) #include "LEDControl.h"
(0007) // Biblioteka do obsługi paska CapSense
(0008) #include "CapSenseControl.h"
(0009) 
(0010) void main(void)
(0011) {	
_main:
  CSC_SRS              --> X+2
  blinkLoop            --> X+0
    12EA: 10       PUSH  X
    12EB: 4F       MOV   X,SP
    12EC: 38 06    ADD   SP,0x6
(0012)   //Deklaracja oraz inicjalizacja
(0013)   //licznika petli
(0014)   int blinkLoop=0;
    12EE: 56 01 00 MOV   [X+1],0x0
    12F1: 56 00 00 MOV   [X+0],0x0
(0015) 	
(0016)   // Inicjalizacja przerwań globalnych, 
(0017)   // konieczne dla ADC
(0018)   M8C_EnableGInt ; 
    12F4: 71 01    OR    F,0x1
(0019) 	
(0020)   // Inicjalizacja biblioteki do
(0021)   // obsługi diod Led
(0022)   LEDControl_INIT();
    12F6: 7C 0F 8D LCALL _LEDControl_INIT
(0023) 	
(0024)   // Inicjalizacja biblioteki do
(0025)   // obsługi czujnika zbliżeniowego	
(0026)   CapSenseControl_INIT();
    12F9: 7C 0D 8E LCALL __UserModules_end|__text_start|_CapSenseControl_INIT|_CapSenseControl_INIT
    12FC: 80 BD    JMP   0x13BA
(0027)   while(1)
(0028)   {	
(0029) 	// Deklaracja zmiennej
(0030)     CapSenseControl_ScanStruct CSC_SRS;
(0031)     // Inkrementacja licznika petli
(0032)     blinkLoop++;
    12FE: 77 01    INC   [X+1]
    1300: 0F 00 00 ADC   [X+0],0x0
(0033) 	
(0034) 	// Zmiana stanu aktywnej diody jeśli 
(0035) 	// Wymagana liczba cykli zostala osiagnieta
(0036) 	// Jeśli tak to zmienna blinkLoop jest zerowana
(0037)     blinkLoop=LEDControl_Blink(CapSenseControl_Data.led,blinkLoop);
    1303: 52 00    MOV   A,[X+0]
    1305: 08       PUSH  A
    1306: 52 01    MOV   A,[X+1]
    1308: 08       PUSH  A
    1309: 62 D0 00 MOV   REG[0xD0],0x0
    130C: 51 9E    MOV   A,[CapSenseControl_Data]
    130E: 08       PUSH  A
    130F: 7C 12 20 LCALL _LEDControl_Blink
    1312: 62 D0 00 MOV   REG[0xD0],0x0
    1315: 51 8E    MOV   A,[__r1]
    1317: 54 01    MOV   [X+1],A
    1319: 51 8F    MOV   A,[__r0]
    131B: 54 00    MOV   [X+0],A
(0038) 	
(0039) 	// Sprawdzenie czy oraz jaki gest zostal wykonany na suwaku	
(0040)     CSC_SRS = CapSenseControl_DoScan();
    131D: 5A 8E    MOV   [__r1],X
    131F: 06 8E 02 ADD   [__r1],0x2
    1322: 50 01    MOV   A,0x1
    1324: 08       PUSH  A
    1325: 51 8E    MOV   A,[__r1]
    1327: 08       PUSH  A
    1328: 7C 0F 47 LCALL _CapSenseControl_DoScan
    132B: 38 FB    ADD   SP,0xFB
(0041) 	
(0042) 	/* Interpretacja gestu w zaleznosci od wyniku
(0043) 	1 - Ruch w prawo, zmniejszenie czestotliwosc migania
(0044) 	2 - Ruch w lewo, zwiekszenie czestotliwosc migania
(0045) 	3 - Klikniecie lewj czesci, poprzednia dioda
(0046) 	4 - Klikniecie lewj czesci, nastepna dioda
(0047) 	*/ 
(0048)     switch (CSC_SRS.action)
    132D: 52 02    MOV   A,[X+2]
    132F: 54 05    MOV   [X+5],A
    1331: 56 04 00 MOV   [X+4],0x0
    1334: 3D 04 00 CMP   [X+4],0x0
    1337: B0 06    JNZ   0x133E
    1339: 3D 05 01 CMP   [X+5],0x1
    133C: A0 21    JZ    0x135E
    133E: 3D 04 00 CMP   [X+4],0x0
    1341: B0 06    JNZ   0x1348
    1343: 3D 05 02 CMP   [X+5],0x2
    1346: A0 34    JZ    0x137B
    1348: 3D 04 00 CMP   [X+4],0x0
    134B: B0 06    JNZ   0x1352
    134D: 3D 05 03 CMP   [X+5],0x3
    1350: A0 47    JZ    0x1398
    1352: 3D 04 00 CMP   [X+4],0x0
    1355: B0 06    JNZ   0x135C
    1357: 3D 05 04 CMP   [X+5],0x4
    135A: A0 4F    JZ    0x13AA
    135C: 80 5D    JMP   0x13BA
(0049)     {
(0050)       case 1:
(0051)         LEDControl_ChangeFrequency(CapSenseControl_Data.led,CSC_SRS.value,FALSE);	
    135E: 50 00    MOV   A,0x0
    1360: 08       PUSH  A
    1361: 62 D0 00 MOV   REG[0xD0],0x0
    1364: 52 03    MOV   A,[X+3]
    1366: 53 8E    MOV   [__r1],A
    1368: 50 00    MOV   A,0x0
    136A: 08       PUSH  A
    136B: 51 8E    MOV   A,[__r1]
    136D: 08       PUSH  A
    136E: 62 D0 00 MOV   REG[0xD0],0x0
    1371: 51 9E    MOV   A,[CapSenseControl_Data]
    1373: 08       PUSH  A
    1374: 7C 11 53 LCALL _LEDControl_ChangeFrequency
    1377: 38 FC    ADD   SP,0xFC
(0052)         break;
    1379: 80 40    JMP   0x13BA
(0053)       case 2:
(0054)         LEDControl_ChangeFrequency(CapSenseControl_Data.led,CSC_SRS.value,TRUE);
    137B: 50 01    MOV   A,0x1
    137D: 08       PUSH  A
    137E: 62 D0 00 MOV   REG[0xD0],0x0
    1381: 52 03    MOV   A,[X+3]
    1383: 53 8E    MOV   [__r1],A
    1385: 50 00    MOV   A,0x0
    1387: 08       PUSH  A
    1388: 51 8E    MOV   A,[__r1]
    138A: 08       PUSH  A
    138B: 62 D0 00 MOV   REG[0xD0],0x0
    138E: 51 9E    MOV   A,[CapSenseControl_Data]
    1390: 08       PUSH  A
    1391: 7C 11 53 LCALL _LEDControl_ChangeFrequency
    1394: 38 FC    ADD   SP,0xFC
(0055)         break;
    1396: 80 23    JMP   0x13BA
(0056)       case 3:		
(0057)         CapSenseControl_Data.led = LEDControl_ChangeStateSwitch(CSC_SRS.value,TRUE);
    1398: 50 01    MOV   A,0x1
    139A: 08       PUSH  A
    139B: 52 03    MOV   A,[X+3]
    139D: 08       PUSH  A
    139E: 7C 0F D3 LCALL _LEDControl_ChangeStateSwitch
    13A1: 38 FE    ADD   SP,0xFE
    13A3: 62 D0 00 MOV   REG[0xD0],0x0
    13A6: 53 9E    MOV   [CapSenseControl_Data],A
(0058)         break;
    13A8: 80 11    JMP   0x13BA
(0059)       case 4:		
(0060)         CapSenseControl_Data.led = LEDControl_ChangeStateSwitch(CSC_SRS.value,FALSE);
    13AA: 50 00    MOV   A,0x0
    13AC: 08       PUSH  A
    13AD: 52 03    MOV   A,[X+3]
    13AF: 08       PUSH  A
    13B0: 7C 0F D3 LCALL _LEDControl_ChangeStateSwitch
    13B3: 38 FE    ADD   SP,0xFE
    13B5: 62 D0 00 MOV   REG[0xD0],0x0
    13B8: 53 9E    MOV   [CapSenseControl_Data],A
(0061)         break;
(0062)       default:
(0063)         break; 
(0064)     }	
(0065)   }
    13BA: 8F 43    JMP   0x12FE
(0066) }
    13BC: 38 FA    ADD   SP,0xFA
    13BE: 20       POP   X
    13BF: 8F FF    JMP   0x13BF
_abs:
    1478: 10       PUSH  X
    1479: 4F       MOV   X,SP
    147A: 38 02    ADD   SP,0x2
    147C: 52 FC    MOV   A,[X-4]
    147E: 11 00    SUB   A,0x0
    1480: 52 FB    MOV   A,[X-5]
    1482: 31 80    XOR   A,0x80
    1484: 19 80    SBB   A,0x80
    1486: C0 0B    JC    0x1492
    1488: 52 FC    MOV   A,[X-4]
    148A: 54 01    MOV   [X+1],A
    148C: 52 FB    MOV   A,[X-5]
    148E: 54 00    MOV   [X+0],A
    1490: 80 0F    JMP   0x14A0
    1492: 52 FC    MOV   A,[X-4]
    1494: 73       CPL   A
    1495: 11 FF    SUB   A,0xFF
    1497: 54 01    MOV   [X+1],A
    1499: 52 FB    MOV   A,[X-5]
    149B: 73       CPL   A
    149C: 19 FF    SBB   A,0xFF
    149E: 54 00    MOV   [X+0],A
    14A0: 62 D0 00 MOV   REG[0xD0],0x0
    14A3: 52 01    MOV   A,[X+1]
    14A5: 53 8E    MOV   [__r1],A
    14A7: 52 00    MOV   A,[X+0]
    14A9: 53 8F    MOV   [__r0],A
    14AB: 38 FE    ADD   SP,0xFE
    14AD: 20       POP   X
    14AE: 7F       RET   
