                ;;*****************************************************************************
                ;;  FILENAME: CSDHL.asm
                ;;  Version: 2.00, Updated on 2015/3/4 at 22:23:59
                ;;  Generated by PSoC Designer 5.4.3191
                ;;
                ;;  DESCRIPTION: CSD User Module high level software
                ;;-----------------------------------------------------------------------------
                ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                ;;*****************************************************************************
                ;;*****************************************************************************
                
 00C0           FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
 0000           FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
 0040           FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
 0080           FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
 00C0           FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
 0000           FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
 0040           FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
 0080           FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
 00C0           FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
 0010           FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
 0008           FLAG_SUPER:        equ 08h     ; Supervisor Mode
 0004           FLAG_CARRY:        equ 04h     ; Carry Condition Flag
 0002           FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
 0001           FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0061           AMUX_CFG:      equ 61h          ; Analog MUX Configuration
 0030           AMUX_CFG_INTCAP:       equ 30h    ;
 000E           AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
 0001           AMUX_CFG_EN:		  	  equ 01h	 ;
 0000           
 0000           ; old declarations DO NOT USE
 0061           AMUXCFG:      equ 61h          ; Analog MUX Configuration
 0030           AMUXCFG_INTCAP:       equ 30h    ;
 000E           AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
 0001           AMUXCFG_EN:		  	  equ 01h	 ;
 0000           
 0062           PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
 0038           PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
 0006           PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
 0001           PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0020           CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
 0010           CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
 0000           
 0068           ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
 0080           ADC0_CR_CMPST:        equ 80h    ;
 0040           ADC0_CR_LOREN:        equ 40h    ;
 0020           ADC0_CR_SHEN:         equ 20h    ;
 0008           ADC0_CR_CBSRC:        equ 08h    ;
 0004           ADC0_CR_ADCM:         equ 04h    ;
 0001           ADC0_CR_EN:	          equ 01h    ;
 0000           
 0069           ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
 0080           ADC1_CR_CMPST:        equ 80h    ;
 0040           ADC1_CR_LOREN:        equ 40h    ;
 0020           ADC1_CR_SHEN:         equ 20h    ;
 0008           ADC1_CR_CBSRC:        equ 08h    ;
 0004           ADC1_CR_ADCM:         equ 04h    ;
 0001           ADC1_CR_EN:	          equ 01h    ;
 0000           
 0000           ; Continuous Time PSoC block Type E Row 0 Col 0
 0072           ACE00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACE00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type E Row 0 Col 1
 0076           ACE01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACE01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType E Row 1 Col 0
 0080           ASE10CR0:     equ 80h          ; Control register 0                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType E Row 1 Col 1
 0084           ASE11CR0:     equ 84h          ; Control register 0                       (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global General Purpose Data Registers
 0000           ;-----------------------------------------------
 006C           TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
 006D           TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
 006E           TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
 006F           TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Ram Page Pointers
 0000           ;-----------------------------------------------
 00D0           CUR_PP:      equ 0D0h           ; Current   Page Pointer
 00D1           STK_PP:      equ 0D1h           ; Stack     Page Pointer
 00D3           IDX_PP:      equ 0D3h           ; Index     Page Pointer
 00D4           MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
 00D5           MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Control Registers
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FD           DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0018           CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
 0003           CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
 0000           
 0003           CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 000F           AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
 0000           
 0064           CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
 0080           CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
 0040           CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
 0030           CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
 0008           CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
 0004           CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
 0003           CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 000F           AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 006B           CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
 0040           CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
 0030           CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
 0004           CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
 0003           CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Analog Mux Bus Port Enable Bits
 0000           ;------------------------------------------------
 00D8           MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
 00D9           MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
 00DA           MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
 00DB           MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0008           VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E5           ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
 00E6           ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
 0000           
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
 0000           
 00FA           FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
 0003           FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
 0000           
 00FD           DAC_CR:       equ 0FDh          ; Analog Mux DAC Control Register
 0008           DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
 0006           DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
 0001           DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0001           SYSTEM_STACK_PAGE: equ 1   
 0000           SYSTEM_STACK_BASE_ADDR: equ 0h   
 0001           SYSTEM_LARGE_MEMORY_MODEL: equ 1   
 0000           SYSTEM_SMALL_MEMORY_MODEL: equ 0   
 0001           IMAGECRAFT: equ 1   
 0002           HITECH: equ 2   
 0001           TOOLCHAIN: equ IMAGECRAFT   
 0001           SYSTEM_TOOLS: equ 1   
 0001           SYSTEM_IDXPG_TRACKS_STK_PP: equ 1   
 0000           SYSTEM_IDXPG_TRACKS_IDX_PP: equ 0   
 0000           SYSTEM_MULTIPAGE_STACK: equ 0 
 0000           
 0000           
 0000           ;  ******* Function Class Definitions *******
 0000           ;
 0000           ;  These definitions are used to describe RAM access patterns. They provide
 0000           ;  documentation and they control prologue and epilogue macros that perform
 0000           ;  the necessary housekeeping functions for large memory model devices like
 0000           ;  the CY8C21030.
 0000           
 0001           RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
 0002           RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
 0004           RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
 0008           RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
 0000           
 0000           ; ******* Hi Tech Specific *******
 0000           ; Turn on the expansion of all macros by default
                IF (TOOLCHAIN & HITECH)
                OPT EXPAND
                ENDIF
                ;  ******* Page Pointer Manipulation Macros *******
                ;
                ;  Most of the following macros are conditionally compiled so they only
                ;  produce code if the large memory model is selected.
                
                   ;-----------------------------------------------
                   ;  Set Stack Page Macro
                   ;-----------------------------------------------
                   ;
                   ;  DESC: Modify STK_PP in the large or small memory Models.
                   ;
                   ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
                   ;        which stack operations like PUSH and POP store and retrieve their
                   ;        data
                   ;
                   ;  COST: 8 instruction cycles (in LMM only)
                
 0000              macro RAM_SETPAGE_STK( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[STK_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_CUR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[CUR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[IDX_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVW( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVW_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX2STK
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 IF ( SYSTEM_MULTIPAGE_STACK )
 0000                    mov   A, reg[STK_PP]
 0000                    mov   reg[IDX_PP], A
 0000                 ELSE
 0000                    RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
 0000                 ENDIF
 0000              ENDIF
 0000              macro RAM_CHANGE_PAGE_MODE( MODE )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0000                 or    F,  FLAG_PGMODE_MASK & @MODE
 0000              ENDIF
 0000              macro RAM_SET_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_RESTORE_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_STACKPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 or   F, FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_INDEXPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and  F, ~FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_PROLOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                    RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                    RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro RAM_EPILOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro REG_PRESERVE( IOReg )
 0000              mov   A, reg[ @IOReg ]
 0000              push  A
 0000              macro REG_RESTORE( IOReg )
 0000              pop   A
 0000              mov   reg[ @IOReg ], A
 0000              macro ISR_PRESERVE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_PRESERVE CUR_PP
 0000                 REG_PRESERVE IDX_PP
 0000                 REG_PRESERVE MVR_PP
 0000                 REG_PRESERVE MVW_PP
 0000              ENDIF
 0000              macro ISR_RESTORE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_RESTORE MVW_PP
 0000                 REG_RESTORE MVR_PP
 0000                 REG_RESTORE IDX_PP
 0000                 REG_RESTORE CUR_PP
 0000              ENDIF
 0000           macro PRESERVE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_PRESERVE_PAGE_POINTERS
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             MOV A, [__r0]
 0000             PUSH A
 0000             MOV A, [__r1]
 0000             PUSH A
 0000             MOV A, [__r2]
 0000             PUSH A
 0000             MOV A, [__r3]
 0000             PUSH A
 0000             MOV A, [__r4]
 0000             PUSH A
 0000             MOV A, [__r5]
 0000             PUSH A
 0000             MOV A, [__r6]
 0000             PUSH A
 0000             MOV A, [__r7]
 0000             PUSH A
 0000             MOV A, [__r8]
 0000             PUSH A
 0000             MOV A, [__r9]
 0000             PUSH A
 0000             MOV A, [__r10]
 0000             PUSH A
 0000             MOV A, [__r11]
 0000             PUSH A
 0000             MOV A, [__rX]
 0000             PUSH A
 0000             MOV A, [__rY]
 0000             PUSH A
 0000             MOV A, [__rZ]
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               MOV REG[CUR_PP], 0
 0000             ENDIF
 0000           ENDIF
 0000           macro RESTORE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             POP A
 0000             MOV [__rZ], A
 0000             POP A
 0000             MOV [__rY], A
 0000             POP A
 0000             MOV [__rX], A
 0000             POP A
 0000             MOV [__r11], A
 0000             POP A
 0000             MOV [__r10], A
 0000             POP A
 0000             MOV [__r9], A
 0000             POP A
 0000             MOV [__r8], A
 0000             POP A
 0000             MOV [__r7], A
 0000             POP A
 0000             MOV [__r6], A
 0000             POP A
 0000             MOV [__r5], A
 0000             POP A
 0000             MOV [__r4], A
 0000             POP A
 0000             MOV [__r3], A
 0000             POP A
 0000             MOV [__r2], A
 0000             POP A
 0000             MOV [__r1], A
 0000             POP A
 0000             MOV [__r0], A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_RESTORE_PAGE_POINTERS
 0000               AND F, FLAG_PGMODE_0
 0000             ENDIF
 0000             POP A
 0000           ENDIF
 0001           CSD_WIZARD_PROCESSED:                      equ 1
                IF CSD_WIZARD_PROCESSED^1
                "Wizard_was_not_called_after_place_rename_configuration_change_or_update_Open_Chip_Editor_open_Wizard_press_OK_button_and_generate_project"
                ENDIF
                
 0000           CSD_WITH_PWM:                          equ 0h
 0002           CSD_REF_VALUE:                         equ 0x2
 0000           
 0002           CSD_RB_PIN_MASK:                       equ 0x02
 000C           CSD_RB_PORT_DR:                        equ PRT3DR
 000C           CSD_RB_PORT_DM0:                       equ PRT3DM0
 000D           CSD_RB_PORT_DM1:                       equ PRT3DM1
 000F           CSD_RB_PORT_DM2:                       equ PRT3DM2
 0000           
 0001           CSD_FEEDBACK_PIN:                      equ 0x1
 0000           CSD_FEEDBACK_P1_1:                     equ 0x00
 0001           CSD_FEEDBACK_P3_1:                     equ 0x01
 0002           CSD_FEEDBACK_P1_5:                     equ 0x02
 0004           CSD_FEEDBACK_P1_4:                     equ 0x04
 0008           CSD_FEEDBACK_P1_0:                     equ 0x08
 0010           CSD_FEEDBACK_P3_0:                     equ 0x10
 0000           
 0001           CSD_CAPACITOR_PIN:                     equ 1
 0001           CSD_CAPACITOR_P0_1:                    equ 1
 0002           CSD_CAPACITOR_P0_3:                    equ 2
 0000           
 0001           CSD_AUTORESET:                         equ 1
 0000           
 0000           ;--------------------------------------------------
 0000           ; Constants for Scan Speed values
 0000           ;--------------------------------------------------
 0000           CSD_ULTRA_FAST_SPEED:                  equ 0x00
 0001           CSD_FAST_SPEED:                        equ 0x01
 0002           CSD_NORMAL_SPEED:                      equ 0x02
 0003           CSD_SLOW_SPEED:                        equ 0x03
 0000           
 0000           ;--------------------------------------------------
 0000           ; Constants for Resolution values
 0000           ;--------------------------------------------------
 0009           CSD_MIN_RESOLUTION:                    equ 9
 0009           CSD_9_BIT_RESOLUTION:                  equ 9
 000A           CSD_10_BIT_RESOLUTION:                 equ 10
 000B           CSD_11_BIT_RESOLUTION:                 equ 11
 000C           CSD_12_BIT_RESOLUTION:                 equ 12
 000D           CSD_13_BIT_RESOLUTION:                 equ 13
 000E           CSD_14_BIT_RESOLUTION:                 equ 14
 000F           CSD_15_BIT_RESOLUTION:                 equ 15
 0010           CSD_16_BIT_RESOLUTION:                 equ 16
 0010           CSD_MAX_RESOLUTION:                    equ 16
 0000           
 0000           ;--------------------------------------------------
 0000           ; Constants for CSD API's
 0000           ;--------------------------------------------------
 0000           
 0000           CSD_ButtonCount:                       equ 0h
 0001           CSD_SliderCount:                       equ 1h  + 0h
 0008           CSD_TotalSensorCount:                  equ 8h
 0000           
 0000           CSD_BUTTONS_EXIST:                     equ 0h
 0001           CSD_SLIDERS_EXIST:                     equ 1h | 0h
 0000           
 000A           CSD_HYSTERESIS:                                  equ ah
 0003           CSD_Debounce:                                    equ 3h
 0032           CSD_LowBaselineReset:                            equ 32h
 0000           
 0028           CSD_FINGER_THRESHOLD:                            equ 28h
 0014           CSD_NOISE_THRESHOLD:                             equ 14h
 0014           CSD_NEGATIVE_NOISE_THRESHOLD:                    equ 14h
 00C8           CSD_BASELINE_UPDATE_THRESHOLD:                   equ c8h
 0000           
 0000           CSD_DiplexUsed:                        equ 0
 0000           
 0000           ;--------------------------------------------------
 0000           ; Registers Address Constants for CSD
 0000           ;--------------------------------------------------
 0000           
 0020           CSD_CNT_FUNC_REG:                      equ 20h              ; CNT Function Reg
 0021           CSD_CNT_IN_REG:                        equ 21h              ; CNT Input Reg
 0022           CSD_CNT_OUT_REG:                       equ 22h              ; CNT Output Reg
 0020           CSD_CNT_COUNTER_REG:                   equ 20h              ; CNT Counter Reg
 0021           CSD_CNT_PERIOD_REG:                    equ 21h              ; CNT Period Reg
 0022           CSD_CNT_COMPARE_REG:                   equ 22h              ; CNT Compare Reg
 0023           CSD_CNT_CONTROL_REG:                   equ 23h              ; CNT Control Reg
 0000           
 0024           CSD_PRS_FUNC_LSB_REG:                  equ 24h              ; PRS LSB Function Reg
 0025           CSD_PRS_IN_LSB_REG:                    equ 25h              ; PRS LSB Input Reg
 0026           CSD_PRS_OUT_LSB_REG:                   equ 26h              ; PRS LSB Output Reg
 0027           CSD_PRS_CONTROL_LSB_REG:               equ 27h              ; PRS LSB Control Reg
 0024           CSD_PRS_SHIFT_LSB_REG:                 equ 24h              ; PRS LSB Shift Reg
 0025           CSD_PRS_POLY_LSB_REG:                  equ 25h              ; PRS LSB Polynomial Reg
 0026           CSD_PRS_SEED_LSB_REG:                  equ 26h              ; PRS LSB Seed Reg
 0000           
 0028           CSD_PRS_FUNC_MSB_REG:                  equ 28h              ; PRS MSB Function Reg
 0029           CSD_PRS_IN_MSB_REG:                    equ 29h              ; PRS MSB Input Reg
 002A           CSD_PRS_OUT_MSB_REG:                   equ 2ah              ; PRS MSB Output Reg
 002B           CSD_PRS_CONTROL_MSB_REG:               equ 2bh              ; PRS MSB Control Reg
 0028           CSD_PRS_SHIFT_MSB_REG:                 equ 28h              ; PRS MSB Shift Reg
 0029           CSD_PRS_POLY_MSB_REG:                  equ 29h              ; PRS MSB Polynimial Reg
 002A           CSD_PRS_SEED_MSB_REG:                  equ 2ah              ; PRS MSB Seed Reg
 0000           
 0076           CSD_ACE_CONTROL1_REG:                  equ 76h              ; CMP Control Reg
 0077           CSD_ACE_CONTROL2_REG:                  equ 77h              ; CMP Control Reg
 0000           
 0084           CSD_ASE_CONTROL_REG:                   equ 84h              ; CMP_REF Conrol Reg
 00E6           CSD_ADC_TRIM_REG:                      equ e6h              ; ADC Trim Register
 0069           CSD_ADC_CONTROL_REG:                   equ 69h              ; ADC Control Reg
 0000           
 0061           CSD_AMUX_CFG_REG:                      equ AMUX_CFG        ; Analog Mux Configuration Register
 0000           
 0000           DR_OFFSET:                             equ 00h
 0000           DM0_OFFSET:                            equ 00h              ; Bank 1
 0001           DM1_OFFSET:                            equ 01h              ; Bank 1
 0003           DM2_OFFSET:                            equ 03h              ; Bank 0
 00D8           MUX_OFFSET:                            equ MUX_CR0          ; Bank 1
 0000           
 0000           ;--------------------------------------------------
 0000           ; CSD Macro 'Functions'
 0000           ;--------------------------------------------------
 0000           
 0000           macro CSD_Counter_Start_M
 0000              or    reg[CSD_CNT_CONTROL_REG],  CSD_CNT_CONTROL_REG_START_BIT
 0000           macro CSD_Counter_Stop_M
 0000              and   reg[CSD_CNT_CONTROL_REG], ~CSD_CNT_CONTROL_REG_START_BIT
 0000           macro CSD_Counter_EnableInt_M
 0000              M8C_EnableIntMask CSD_CNT_INT_REG, CSD_CNT_INT_MASK
 0000           macro CSD_Counter_DisableInt_M
 0000              M8C_DisableIntMask CSD_CNT_INT_REG, CSD_CNT_INT_MASK
 00E0           CSD_CMP_CMPIntReg:                     equ  0e0h
 0004           CSD_CMP_CMPIntMask:                    equ  04h
 0000           
 0000           CSD_CMP_OFF:                           equ  0
 0001           CSD_CMP_ON:                            equ  1
 0000           
 0000           ;--------------------------------------------------
 0000           ; Constants for CSD_Counter API's.
 0000           ;--------------------------------------------------
 0000           
 0001           CSD_CNT_CONTROL_REG_START_BIT:         equ 0x01             ; Control register start bit
 00E1           CSD_CNT_INT_REG:                       equ 0x0e1
 0001           CSD_CNT_INT_MASK:                      equ 0x01
 0000           
 0000           ;--------------------------------------------------
 0000           ; Constants for CSD_Counter user defined values
 0000           ;--------------------------------------------------
 0000           
 00FF           CSD_CNT_PERIOD:                        equ 0xff
 0000           CSD_CNT_COMPARE_VALUE:                 equ 0x00
 0000           
 0000           ; end of file CSD.inc
 0000           
 0000           ;-----------------------------------------------
 0000           ; Global Symbols
 0000           ;-----------------------------------------------
 0000           
                export _CSD_UpdateSensorBaseline
                export  CSD_UpdateSensorBaseline
                export _CSD_InitializeSensorBaseline
                export  CSD_InitializeSensorBaseline
                export _CSD_bIsSensorActive
                export  CSD_bIsSensorActive
                export _CSD_bIsAnySensorActive
                export  CSD_bIsAnySensorActive
                export _CSD_SetDefaultFingerThresholds
                export  CSD_SetDefaultFingerThresholds
                export _CSD_InitializeBaselines
                export  CSD_InitializeBaselines
                export _CSD_UpdateAllBaselines
                export  CSD_UpdateAllBaselines
                export  CSD_baSnsDebounce
                IF CSD_SLIDERS_EXIST
                export _CSD_wGetCentroidPos
                export  CSD_wGetCentroidPos
                export _CSD_wGetRadialPos
                export  CSD_wGetRadialPos
                export _CSD_wGetRadialInc
                export  CSD_wGetRadialInc
                ENDIF
                
                
                ;-----------------------------------------------
                ; Variable Allocation
                ;-----------------------------------------------
                AREA InterruptRAM (RAM, REL, CON)
                
 0000           _CSD_bNoiseThreshold:
 0000            CSD_bNoiseThreshold:                   BLK  1
 0001           _CSD_bNegativeNoiseThreshold:
 0001            CSD_bNegativeNoiseThreshold:           BLK  1
 0002           _CSD_bBaselineUpdateThreshold:
 0002            CSD_bBaselineUpdateThreshold:          BLK  1
 0003           _CSD_bHysteresis:
 0003            CSD_bHysteresis:                       BLK  1
 0004           _CSD_bDebounce:
 0004            CSD_bDebounce:                         BLK  1
 0005           _CSD_bLowBaselineReset:
 0005            CSD_bLowBaselineReset:                 BLK  1
 0006           
                export _CSD_bNoiseThreshold
                export  CSD_bNoiseThreshold
                export _CSD_bNegativeNoiseThreshold
                export  CSD_bNegativeNoiseThreshold
                export _CSD_bBaselineUpdateThreshold
                export  CSD_bBaselineUpdateThreshold
                export _CSD_bHysteresis
                export  CSD_bHysteresis
                export _CSD_bDebounce
                export  CSD_bDebounce
                export _CSD_bLowBaselineReset
                export  CSD_bLowBaselineReset
                export  CSD_baLowBaselineReset
                
                ; Local variables
 0006           _CSD_bEndOfArray:                               ; Temp pointer variable
 0006            CSD_bEndOfArray:                       BLK  1
 0007           _CSD_fIsPressed:                                ; Temp variable for if any sensor is pressed
 0007            CSD_fIsPressed:                        BLK  1
 0008           _CSD_bCurPos:                                   ; Temp position variable
 0008            CSD_bCurPos:                           BLK  1
 0009           _CSD_bSnsMaskPtr:                               ; Temp sensor mask pointer used in centroid calculation
 0009            CSD_bSnsMaskPtr:                       BLK  1
 000A           _CSD_bStartIndex:                               ; Temp Start index
 000A            CSD_bStartIndex:                            BLK  1
 000B           _CSD_wTmpBtnFThreshold:                         ; Temp Difference
 000B            CSD_wTmpBtnFThreshold:                 BLK  2
 000D           
                IF CSD_SLIDERS_EXIST
                ; Local slider variables
 000D           _CSD_wDenom:                                    ; Denominator is also the Ctrd Pos
 000D            CSD_wDenom:                            BLK  2
 000F           _CSD_dNumer:                                    ; Numerator also contains the Ctrd Pos
 000F            CSD_dNumer:                            BLK  2
 0011           _CSD_wCtrdPos:                                  ; Ctrd Pos is LMSB and LLSB of the numerator
 0011            CSD_wCtrdPos:                          BLK  2
 0013           _CSD_dMultTempX:                                ; Temp multiplication register
 0013            CSD_dMultTempX:                        BLK  4
 0017           _CSD_dMultTempY:                                ; Temp multiplication register
 0017            CSD_dMultTempY:                        BLK  4
 001B           _CSD_bCurSlider:
 001B            CSD_bCurSlider:                        BLK  1
 001C           _CSD_bCurCtrdStartPos:                          ; Temp current centroid start position
 001C            CSD_bCurCtrdStartPos:                  BLK  1
 001D           _CSD_bCurCtrdSize:                              ; Temp current centroid size
 001D            CSD_bCurCtrdSize:                      BLK  1
 001E           _CSD_bBiggestCtrdStartPos:                      ; Temp biggest centroid start position
 001E            CSD_bBiggestCtrdStartPos:              BLK  1
 001F           _CSD_bBiggestCtrdSize:                          ; Temp biggest centroid size
 001F            CSD_bBiggestCtrdSize:                  BLK  1
 0020           _CSD_wCurPkValue:                               ; Temp current peak
 0020            CSD_wCurPkValue:                       BLK  2
 0022           _CSD_bCurPkPos:                                 ; Temp current slider pointer
 0022            CSD_bCurPkPos:                         BLK  1
 0023           _CSD_bDiplexInfo:                               ; Temp flag for diplex of current group
 0023            CSD_bDiplexInfo:                       BLK  1
 0024           _CSD_bDiplexMSB:                                ; Temp that contains the address of the rom diplex table
 0024            CSD_bDiplexMSB:                        BLK  1
 0025           _CSD_bDiplexLSB:
 0025            CSD_bDiplexLSB:                        BLK  1
 0026           _CSD_wDivBtwSns:                                ; Temp divisions between sensors
 0026            CSD_wDivBtwSns:                        BLK  2
 0028           _CSD_waCentroid:                                 ;array of Centroid and  two adjacent values (word array)
 0028            CSD_waCentroid:                        BLK  6
                ENDIF
                
                AREA ram1 (RAM, REL, CON)
                ; Global variables
 0000           _CSD_waSnsBaseline:                     ; Baseline, one entry for each sensor
 0000            CSD_waSnsBaseline:                     BLK  (2*CSD_TotalSensorCount)
 0010           _CSD_waSnsDiff:                         ; ABS Diff of raw and and baseline, one entry for each sensor
 0010            CSD_waSnsDiff:                         BLK  (2*CSD_TotalSensorCount)
                AREA ram2 (RAM, REL, CON)
 0000           _CSD_baSnsBucket:                       ; Baseline difference accumulator, one entry for each sensor
 0000            CSD_baSnsBucket:                       BLK  CSD_TotalSensorCount
 0008           _CSD_baBtnFThreshold:                   ; Containing variable finger threshold for each button
 0008            CSD_baBtnFThreshold:                   BLK  CSD_TotalSensorCount
 0010           _CSD_baSnsOnMask:                       ; Sensor mask array containing on/off state of sensors
                IF (CSD_TotalSensorCount)
 0010            CSD_baSnsOnMask:                       BLK  ((CSD_TotalSensorCount-1)/8)+1
                ELSE
                 CSD_baSnsOnMask:                       BLK  1
                ENDIF
 0011           _CSD_baSnsDebounce:
 0011            CSD_baSnsDebounce:                     BLK  CSD_TotalSensorCount
 0019           _CSD_baLowBaselineReset:
 0019            CSD_baLowBaselineReset:                BLK  CSD_TotalSensorCount
 0021           
                AREA bss
                IF CSD_SLIDERS_EXIST
 0000           _CSD_waCtrdPkValue:                     ; Array containing peak value of centroid
 0000            CSD_waCtrdPkValue:                     BLK  (2*CSD_SliderCount)
 0002           _CSD_waSliderPrevPos:                     ;
 0002            CSD_waSliderPrevPos:                   BLK  (2*CSD_SliderCount)
 0004           _CSD_waSliderCurrPos:                     ;
 0004            CSD_waSliderCurrPos:                   BLK  (2*CSD_SliderCount)
                ENDIF
                
                ; Global variables
                export _CSD_waSnsBaseline
                export  CSD_waSnsBaseline
                export _CSD_waSnsDiff
                export  CSD_waSnsDiff
                export _CSD_baBtnFThreshold
                export  CSD_baBtnFThreshold
                export _CSD_baSnsOnMask
                export  CSD_baSnsOnMask
                
                ; Local variables
                export _CSD_fIsPressed
                export  CSD_fIsPressed
                export _CSD_bEndOfArray
                export  CSD_bEndOfArray
                export _CSD_bCurPos
                export  CSD_bCurPos
                export _CSD_bSnsMaskPtr
                export  CSD_bSnsMaskPtr
                
                IF CSD_SLIDERS_EXIST
                ; Local slider variables
                export _CSD_wDenom
                export  CSD_wDenom
                export _CSD_wCtrdPos
                export  CSD_wCtrdPos
                export _CSD_dNumer
                export  CSD_dNumer
                export _CSD_dMultTempX
                export  CSD_dMultTempX
                export _CSD_dMultTempY
                export  CSD_dMultTempY
                export _CSD_bCurCtrdStartPos
                export  CSD_bCurCtrdStartPos
                export _CSD_bCurCtrdSize
                export  CSD_bCurCtrdSize
                export _CSD_bBiggestCtrdStartPos
                export  CSD_bBiggestCtrdStartPos
                export _CSD_bBiggestCtrdSize
                export  CSD_bBiggestCtrdSize
                export _CSD_wCurPkValue
                export  CSD_wCurPkValue
                export _CSD_bCurPkPos
                export  CSD_bCurPkPos
                export _CSD_bDiplexMSB
                export  CSD_bDiplexMSB
                export _CSD_bDiplexLSB
                export  CSD_bDiplexLSB
                export _CSD_wDivBtwSns
                export  CSD_wDivBtwSns
                export _CSD_waSliderPrevPos
                export  CSD_waSliderPrevPos
                export _CSD_waSliderCurrPos
                export  CSD_waSliderCurrPos
                ENDIF
                
                ;@PSoC_UserCode_INIT@ (Do not change this line.)
                ;---------------------------------------------------
                ; Insert your custom declarations below this banner
                ;---------------------------------------------------
                
                ;------------------------
                ; User Includes
                ;------------------------
                
                
                ;------------------------
                ; User Constant Definitions
                ;------------------------
                
                
                ;------------------------
                ; User Variable Allocation
                ;------------------------
                
                
                ;---------------------------------------------------
                ; Insert your custom declarations above this banner
                ;---------------------------------------------------
                ;@PSoC_UserCode_END@ (Do not change this line.)
                
                ;------------------------
                ;  Constant Definitions
                ;------------------------
                AREA UserModules (ROM, REL, CON)
                
                ; For using two byte variables
 0001           LSB:  equ  1
 0000           MSB:  equ  0
 0000           
 0000           ; For using four byte variables
 0000           MMSB: equ 0
 0001           MLSB: equ 1
 0002           LMSB: equ 2
 0003           LLSB: equ 3
 0000           
 0000           
 0000           .SECTION
 0000           ;-----------------------------------------------------------------------------
 0000           ;  FUNCTION NAME: CSD_UpdateSensorBaseline(BYTE bSensorNum)
 0000           ;
 0000           ;  DESCRIPTION:
 0000           ;      Update baseline for one sensor. The algorithm is as follows:
 0000           ;        If difference count is negative baseline become raw count
 0000           ;        If difference count is above noise threshold do not update
 0000           ;        Else difference count is positive and within noise threshold so
 0000           ;        difference is halved and added to the bucket. When the bucket
 0000           ;        reaches the threshold the baseline increments and the bucket resets
 0000           ;-----------------------------------------------------------------------------
 0000           ;  STACK USAGE: 0 BYTES
 0000           ;
 0000           ;  ARGUMENTS:
 0000           ;      A => Sensor Number
 0000           ;
 0000           ;  RETURNS:
 0000           ;      Nothing
 0000           ;
 0000           ;  SIDE EFFECTS:
 0000           ;    The A and X registers may be modified by this or future implementations
 0000           ;    of this function.  The same is true for all RAM page pointer registers in
 0000           ;    the Large Memory Model.  When necessary, it is the calling function's
 0000           ;    responsibility to perserve their values across calls to fastcall16
 0000           ;    functions.
 0000           ;
 0000            CSD_UpdateSensorBaseline:
 0000           _CSD_UpdateSensorBaseline:
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000 70BF            and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0002 62D000          mov reg[CUR_PP], 0
                   ENDIF
                
 0005 5300         mov [CSD_bSensorNum], A                                                     ; Save sensor index
 0007 64           asl A
 0008 5C           mov X,A
 0009           
 0009              ; Get the difference counts
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0009 62D300          mov reg[IDX_PP], >CSD_waSnsResult
                   ENDIF
 000C 5201         mov A, [X+CSD_waSnsResult+LSB]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 000E 62D300          mov reg[IDX_PP], >CSD_waSnsBaseline
                   ENDIF
 0011 1301         sub A, [X+CSD_waSnsBaseline+LSB]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0013 62D310          mov reg[IDX_PP], >CSD_waSnsDiff
                   ENDIF
 0016 5411         mov [X+CSD_waSnsDiff+LSB], A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0018 62D300          mov reg[IDX_PP], >CSD_waSnsResult
                   ENDIF
 001B 5200         mov A, [X+CSD_waSnsResult+MSB]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 001D 62D300          mov reg[IDX_PP], >CSD_waSnsBaseline
                   ENDIF
 0020 1B00         sbb A, [X+CSD_waSnsBaseline+MSB]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0022 62D310          mov reg[IDX_PP], >CSD_waSnsDiff
                   ENDIF
 0025 5410         mov [X+CSD_waSnsDiff+MSB], A                                  
 0027 C043         jc  .IsNegative                                                             ; Is difference negative?
 0029           
                IF (CSD_AUTORESET)
 0029 3D1000       cmp [X+CSD_waSnsDiff+MSB], 0
 002C A005         jz   .AddBucketLSB
 002E 50FF         mov  A, 255
 0030 8003         jmp  .AddBucketConst
                ELSE
                   ; Compare to Noise Threshold
                   cmp [X+CSD_waSnsDiff+MSB], 0
                   jnz  .InitLowBaselineReset
                   mov A, [CSD_bNoiseThreshold]
                   cmp A, [X+CSD_waSnsDiff+LSB]
                   jc   .InitLowBaselineReset
                ENDIF
                
                   ; Add to the Bucket
 0032           .AddBucketLSB:
 0032 5211         mov A, [X+CSD_waSnsDiff+LSB]
 0034           .AddBucketConst:
 0034 5800         mov X, [CSD_bSensorNum]
 0036 0100         add A, 0
 0038 6D           rrc A                                                                                                                                                                                ; For slower tracking
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0039 62D300          mov reg[IDX_PP], >CSD_baSnsBucket
                   ENDIF
 003C 0500         add [X+CSD_baSnsBucket], A
 003E C009         jc  .DoInc
 0040 5102         mov A, [CSD_bBaselineUpdateThreshold]
 0042 3B00         cmp A, [X+CSD_baSnsBucket]
 0044 D012         jnc .EndBucket
 0046 A010         jz  .EndBucket
 0048           .DoInc:
 0048              ; Increment Baseline
 0048 560000       mov [X+CSD_baSnsBucket], 0
 004B 5B           mov A, X
 004C 64           asl A
 004D 5C           mov X, A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 004E 62D300          mov reg[IDX_PP], >CSD_waSnsBaseline
                   ENDIF
 0051 070101       add [X+CSD_waSnsBaseline+LSB], 1
 0054 0F0000       adc [X+CSD_waSnsBaseline+MSB], 0
 0057           
 0057           .EndBucket:
                IF (CSD_AUTORESET)
 0057 5100         mov  A, [CSD_bSensorNum]
 0059 64           asl  A
 005A 5C           mov  X, A
 005B              ; Compare to Noise Threshold
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 005B 62D310          mov reg[IDX_PP], >CSD_waSnsDiff
                   ENDIF
 005E 3D1000       cmp [X+CSD_waSnsDiff+MSB], 0
 0061 B056         jnz  .InitLowBaselineReset
 0063 5100         mov A, [CSD_bNoiseThreshold]
 0065 3B11         cmp A, [X+CSD_waSnsDiff+LSB]
 0067 C050         jc   .InitLowBaselineReset
                ELSE
                ENDIF
 0069 8041         jmp .SetDifferenceToZero
 006B           
 006B           .IsNegative:
 006B              ; Compare to Negative Noise Threshold
 006B 3D10FF       cmp [X+CSD_waSnsDiff+MSB], FFh
 006E B009         jnz  .CheckLowBaseline
 0070 50FF         mov A, FFh
 0072 1201         sub A, [CSD_bNegativeNoiseThreshold]
 0074 3B11         cmp A, [X+CSD_waSnsDiff+LSB]
 0076 C020         jc   .LowerBaseline
 0078           .CheckLowBaseline:
 0078              ; Set difference to zero
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0078 62D310          mov reg[IDX_PP], >CSD_waSnsDiff
                   ENDIF
 007B 561100       mov [X+CSD_waSnsDiff+LSB], 0
 007E 561000       mov [X+CSD_waSnsDiff+MSB], 0
 0081              ; Check Low Baseline Reset
 0081 5B           mov A, X
 0082 67           asr A
 0083 5C           mov X, A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0084 62D319          mov reg[IDX_PP], >CSD_baLowBaselineReset
                   ENDIF
 0087 5219         mov A, [X+CSD_baLowBaselineReset]
 0089 78           dec A
 008A D003         jnc .Gt0
 008C 5000         mov  A, 0
 008E           .Gt0:
 008E 5419         mov [X+CSD_baLowBaselineReset], A
 0090 08           push A
 0091 5B           mov A, X
 0092 64           asl A
 0093 5C           mov X, A
 0094 18           pop A
 0095 B02C         jnz .EndofUpdateSensorBaseline
 0097           
 0097           .LowerBaseline:
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0097 62D300          mov reg[IDX_PP], >CSD_waSnsResult
                   ENDIF
 009A 5201         mov A, [X+CSD_waSnsResult+LSB]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 009C 62D300          mov reg[IDX_PP], >CSD_waSnsBaseline
                   ENDIF
 009F 5401         mov [X+CSD_waSnsBaseline+LSB], A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00A1 62D300          mov reg[IDX_PP], >CSD_waSnsResult
                   ENDIF
 00A4 5200         mov A, [X+CSD_waSnsResult+MSB]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00A6 62D300          mov reg[IDX_PP], >CSD_waSnsBaseline
                   ENDIF
 00A9 5400         mov [X+CSD_waSnsBaseline+MSB], A
 00AB           
 00AB           .SetDifferenceToZero:
 00AB              ; Set difference to zero
 00AB 5100         mov A, [CSD_bSensorNum]
 00AD 64           asl A
 00AE 5C           mov X,A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00AF 62D310          mov reg[IDX_PP], >CSD_waSnsDiff
                   ENDIF
 00B2 561100       mov [X+CSD_waSnsDiff+LSB], 0
 00B5 561000       mov [X+CSD_waSnsDiff+MSB], 0
 00B8           .InitLowBaselineReset:
 00B8 5B           mov A, X
 00B9 67           asr A
 00BA 5C           mov X, A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00BB 62D319          mov reg[IDX_PP], >CSD_baLowBaselineReset
                   ENDIF
 00BE 5105         mov A, [CSD_bLowBaselineReset]
 00C0 5419         mov [X+CSD_baLowBaselineReset], A
 00C2           
 00C2           .EndofUpdateSensorBaseline:
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00C2 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 00C4 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 00C6 7F           ret
 00C7           
 00C7           .ENDSECTION
 00C7           
 00C7           .SECTION
 00C7           ;-----------------------------------------------------------------------------
 00C7           ;  FUNCTION NAME: CSD_bIsSensorActive(BYTE bSensorNum)
 00C7           ;
 00C7           ;  DESCRIPTION:
 00C7           ;      Returns state of one sensor.     Updates the baSnsOnMask array.
 00C7           ;      Implements hysteresis based on the Hysteresis parameter.
 00C7           ;-----------------------------------------------------------------------------
 00C7           ;  STACK USAGE: 3 BYTES
 00C7           ;
 00C7           ;  ARGUMENTS:
 00C7           ;      A => sensor index
 00C7           ;
 00C7           ;  RETURNS:
 00C7           ;      A => 1 if sensor is active, 0 otherwise
 00C7           ;
 00C7           ;  SIDE EFFECTS:
 00C7           ;    The A and X registers may be modified by this or future implementations
 00C7           ;    of this function.  The same is true for all RAM page pointer registers in
 00C7           ;    the Large Memory Model.  When necessary, it is the calling function's
 00C7           ;    responsibility to perserve their values across calls to fastcall16
 00C7           ;    functions.
 00C7           ;
 00C7            CSD_bIsSensorActive:
 00C7           _CSD_bIsSensorActive:
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00C7 70BF            and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00C9 62D000          mov reg[CUR_PP], 0
                   ENDIF
                
 00CC 08           push A
 00CD 5C           mov X,A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00CE 62D308          mov reg[IDX_PP], >CSD_baBtnFThreshold
                   ENDIF
 00D1 5208         mov A, [X+CSD_baBtnFThreshold]
 00D3 530C         mov [CSD_wTmpBtnFThreshold+LSB], A
 00D5 550B00       mov [CSD_wTmpBtnFThreshold+MSB], 0
 00D8           
 00D8 18           pop A
 00D9 08           push A
 00DA 907E         call CSD_GetOnMask
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00DC 62D310          mov reg[IDX_PP], >CSD_baSnsOnMask
                   ENDIF
 00DF 2310         and A, [X+CSD_baSnsOnMask]
 00E1 B02C         jnz .WasOn
 00E3           
 00E3           .WasOff:
 00E3              ; Check the difference counts against the threshold
 00E3 5103         mov A, [CSD_bHysteresis]
 00E5 040C         add [CSD_wTmpBtnFThreshold+LSB], A
 00E7 0E0B00       adc [CSD_wTmpBtnFThreshold+MSB], 0
 00EA 18           pop A
 00EB 64           asl A
 00EC 5C           mov X, A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00ED 62D310          mov reg[IDX_PP], >CSD_waSnsDiff
                   ENDIF
 00F0 5211         mov A, [X+CSD_waSnsDiff+LSB]
 00F2 120C         sub A, [CSD_wTmpBtnFThreshold+LSB]
 00F4 5210         mov A, [X+CSD_waSnsDiff+MSB]
 00F6 1A0B         sbb A, [CSD_wTmpBtnFThreshold+MSB]
 00F8 C039         jc .NotActive
 00FA 5B           mov A, X
 00FB 67           asr A
 00FC 5C           mov X, A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00FD 62D311          mov reg[IDX_PP], >CSD_baSnsDebounce
                   ENDIF
 0100 5211         mov A, [X+CSD_baSnsDebounce]
 0102 78           dec A
 0103 5411         mov [X+CSD_baSnsDebounce], A
 0105 08           push A
 0106 5B           mov A, X
 0107 64           asl A
 0108 5C           mov X, A
 0109 18           pop A
 010A B03E         jnz .NotActiveDebouncing
 010C 8018         jmp .Active
 010E           
 010E           .WasOn:
 010E              ; Check the difference counts against the threshold
 010E 5103         mov A, [CSD_bHysteresis]
 0110 140C         sub [CSD_wTmpBtnFThreshold+LSB], A
 0112 1E0B00       sbb [CSD_wTmpBtnFThreshold+MSB], 0
 0115 18           pop A
 0116 64           asl A
 0117 5C           mov X, A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0118 62D310          mov reg[IDX_PP], >CSD_waSnsDiff
                   ENDIF
 011B 5211         mov A, [X+CSD_waSnsDiff+LSB]
 011D 120C         sub A, [CSD_wTmpBtnFThreshold+LSB]
 011F 5210         mov A, [X+CSD_waSnsDiff+MSB]
 0121 1A0B         sbb A, [CSD_wTmpBtnFThreshold+MSB]
 0123 C00E         jc .NotActive
 0125           
 0125           .Active:
 0125 5B           mov A, X
 0126 67           asr A
 0127 9031         call CSD_GetOnMask
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0129 62D310          mov reg[IDX_PP], >CSD_baSnsOnMask
                   ENDIF
 012C 2D10         or [X+CSD_baSnsOnMask], A
 012E 5001         mov A, 1
 0130 8024         jmp .EndIsSensorActive
 0132           .NotActive:
 0132 5B           mov A, X
 0133 67           asr A
 0134 08           push A
 0135 9023         call CSD_GetOnMask
 0137 73           cpl A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0138 62D310          mov reg[IDX_PP], >CSD_baSnsOnMask
                   ENDIF
 013B 2510         and [X+CSD_baSnsOnMask], A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 013D 62D311          mov reg[IDX_PP], >CSD_baSnsDebounce
                   ENDIF
 0140 20           pop X
 0141 5104         mov A, [CSD_bDebounce]
 0143 5411         mov [X+CSD_baSnsDebounce], A
 0145 5000         mov A, 0
 0147 800D         jmp .EndIsSensorActive
 0149           .NotActiveDebouncing:
 0149 5B           mov A, X
 014A 67           asr A
 014B 900D         call CSD_GetOnMask
 014D 73           cpl A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 014E 62D310          mov reg[IDX_PP], >CSD_baSnsOnMask
                   ENDIF
 0151 2510         and [X+CSD_baSnsOnMask], A
 0153 5000         mov A, 0
 0155           .EndIsSensorActive:
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0155 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0157 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0159 7F           ret
 015A           
 015A           .ENDSECTION
 015A           
 015A            CSD_GetOnMask:
 015A           _CSD_GetOnMask:
 015A 08           push A
 015B 67           asr A
 015C 67           asr A
 015D 67           asr A
 015E 5C           mov X, A
 015F 18           pop A
 0160 2107         and A, 7h
 0162 F001         index CSD_bitlookup
 0164 7F           ret
 0165           
 0165           .LITERAL
 0165           CSD_bitlookup:
 0165 0102040810204080  db 01h, 02h, 04h, 08h, 10h, 20h, 40h, 80h
 016D           .ENDLITERAL
 016D           
 016D           
 016D           .SECTION
 016D           ;-----------------------------------------------------------------------------
 016D           ;  FUNCTION NAME: CSD_SetDefaultFingerThresholds(void)
 016D           ;
 016D           ;  DESCRIPTION:
 016D           ;    Sets the FingerThreshold RAM array to the user module parameter value
 016D           ;
 016D           ;-----------------------------------------------------------------------------
 016D           ;
 016D           ;  ARGUMENTS:    None.
 016D           ;  RETURNS:      None
 016D           ;  SIDE EFFECTS:
 016D           ;    The A and X registers may be modified by this or future implementations
 016D           ;    of this function.  The same is true for all RAM page pointer registers in
 016D           ;    the Large Memory Model.  When necessary, it is the calling function's
 016D           ;    responsibility to perserve their values across calls to fastcall16
 016D           ;    functions.
 016D           ;
 016D            CSD_SetDefaultFingerThresholds:
 016D           _CSD_SetDefaultFingerThresholds:
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 016D 70BF            and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 016F 62D308          mov reg[IDX_PP], >CSD_baBtnFThreshold
                   ENDIF
                
 0172 5007         mov   A, (CSD_TotalSensorCount - 1)                ; Check if key value in range.
 0174           .ThresholdLoop:                                       ; Loop through all sensors and scan
 0174 08           push  A
 0175 5C           mov   X, A
 0176 560828       mov   [X+CSD_baBtnFThreshold], CSD_FINGER_THRESHOLD
 0179 18           pop   A
 017A 78           dec   A
 017B DFF8         jnc   .ThresholdLoop
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 017D 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 017F 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0181 7F           ret
 0182           .ENDSECTION
 0182           
 0182           .SECTION
 0182           ;-----------------------------------------------------------------------------
 0182           ;  FUNCTION NAME: CSD_InitializeBaselines(void)
 0182           ;
 0182           ;  DESCRIPTION:
 0182           ;    Scans all sensors to find their initial raw count values and loads these
 0182           ;    into the baseline
 0182           ;
 0182           ;-----------------------------------------------------------------------------
 0182           ;
 0182           ;  ARGUMENTS:    None.
 0182           ;  RETURNS:      None
 0182           ;  SIDE EFFECTS:
 0182           ;    The A and X registers may be modified by this or future implementations
 0182           ;    of this function.  The same is true for all RAM page pointer registers in
 0182           ;    the Large Memory Model.  When necessary, it is the calling function's
 0182           ;    responsibility to perserve their values across calls to fastcall16
 0182           ;    functions.
 0182           ;
 0182            CSD_InitializeBaselines:
 0182           _CSD_InitializeBaselines:
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0182 70BF            and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 0184 5007         mov   A, (CSD_TotalSensorCount - 1)                ; Get sensor num
 0186           .BaselineLoop:                                        ; Loop through all sensors and scan
 0186 08           push  A
 0187 9000         call  CSD_ScanSensor
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0189 70BF            and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 018B 18           pop   A
 018C 08           push  A
 018D 64           asl   A
 018E 5C           mov   X, A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 018F 62D300          mov reg[IDX_PP], >CSD_waSnsResult
                   ENDIF
 0192 5201         mov A, [X+CSD_waSnsResult+LSB]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0194 62D300          mov reg[IDX_PP], >CSD_waSnsBaseline
                   ENDIF
 0197 5401         mov [X+CSD_waSnsBaseline+LSB], A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0199 62D300          mov reg[IDX_PP], >CSD_waSnsResult
                   ENDIF
 019C 5200         mov A, [X+CSD_waSnsResult+MSB]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 019E 62D300          mov reg[IDX_PP], >CSD_waSnsBaseline
                   ENDIF
 01A1 5400         mov [X+CSD_waSnsBaseline+MSB], A
 01A3 18           pop   A
 01A4 78           dec   A
 01A5 DFE0         jnc   .BaselineLoop
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 01A7 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 01A9 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01AB 7F           ret
 01AC           .ENDSECTION
 01AC           
 01AC           .SECTION
 01AC           ;-----------------------------------------------------------------------------
 01AC           ;  FUNCTION NAME: CSD_InitializeSensorBaseline(BYTE bSensorNum)
 01AC           ;
 01AC           ;  DESCRIPTION:
 01AC           ;    Scans all sensors to find their initial raw count values and loads these
 01AC           ;    into the baseline
 01AC           ;
 01AC           ;-----------------------------------------------------------------------------
 01AC           ;
 01AC           ;  ARGUMENTS:    None.
 01AC           ;  RETURNS:      None
 01AC           ;  SIDE EFFECTS:
 01AC           ;    The A and X registers may be modified by this or future implementations
 01AC           ;    of this function.  The same is true for all RAM page pointer registers in
 01AC           ;    the Large Memory Model.  When necessary, it is the calling function's
 01AC           ;    responsibility to perserve their values across calls to fastcall16
 01AC           ;    functions.
 01AC           ;
 01AC            CSD_InitializeSensorBaseline:
 01AC           _CSD_InitializeSensorBaseline:
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 01AC 70BF            and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01AE 08           push  A
 01AF 9000         call  CSD_ScanSensor
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 01B1 70BF            and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 01B3 18           pop A
 01B4 64           asl   A
 01B5 5C           mov   X, A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 01B6 62D300          mov reg[IDX_PP], >CSD_waSnsResult
                   ENDIF
 01B9 5201         mov A, [X+CSD_waSnsResult+LSB]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 01BB 62D300          mov reg[IDX_PP], >CSD_waSnsBaseline
                   ENDIF
 01BE 5401         mov [X+CSD_waSnsBaseline+LSB], A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 01C0 62D300          mov reg[IDX_PP], >CSD_waSnsResult
                   ENDIF
 01C3 5200         mov A, [X+CSD_waSnsResult+MSB]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 01C5 62D300          mov reg[IDX_PP], >CSD_waSnsBaseline
                   ENDIF
 01C8 5400         mov [X+CSD_waSnsBaseline+MSB], A
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 01CA 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 01CC 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01CE 7F           ret
 01CF           .ENDSECTION
 01CF           
 01CF           .SECTION
 01CF           ;-----------------------------------------------------------------------------
 01CF           ;  FUNCTION NAME: CSD_bIsAnySensorActive(void)
 01CF           ;
 01CF           ;  DESCRIPTION:
 01CF           ;    Checks to see if any sensor is currently active
 01CF           ;
 01CF           ;-----------------------------------------------------------------------------
 01CF           ;
 01CF           ;  ARGUMENTS:    None.
 01CF           ;  RETURNS:      1 if any active, 0 if none active
 01CF           ;  SIDE EFFECTS:
 01CF           ;    The A and X registers may be modified by this or future implementations
 01CF           ;    of this function.  The same is true for all RAM page pointer registers in
 01CF           ;    the Large Memory Model.  When necessary, it is the calling function's
 01CF           ;    responsibility to perserve their values across calls to fastcall16
 01CF           ;    functions.
 01CF           ;
 01CF            CSD_bIsAnySensorActive:
 01CF           _CSD_bIsAnySensorActive:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 01CF 62D000          mov reg[CUR_PP], 0
                   ENDIF
                
 01D2 550700       mov [CSD_fIsPressed], 0
 01D5 5007         mov   A, (CSD_TotalSensorCount - 1)
 01D7           .ThresholdLoop:                                       ; Loop through all sensors
 01D7 08           push  A
 01D8 9EED         call  CSD_bIsSensorActive
 01DA 3901         cmp   A, 1
 01DC B004         jnz    .NotActive
 01DE 550701       mov [CSD_fIsPressed], 1
 01E1           .NotActive:
 01E1 18           pop   A
 01E2 78           dec   A
 01E3 DFF3         jnc   .ThresholdLoop
 01E5 5107         mov   A, [CSD_fIsPressed]
 01E7           
 01E7           .NoneActive:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01E7 7F           ret
 01E8           .ENDSECTION
 01E8           
 01E8           .SECTION
 01E8           ;-----------------------------------------------------------------------------
 01E8           ;  FUNCTION NAME: CSD_UpdateAllBaselines(void)
 01E8           ;
 01E8           ;  DESCRIPTION:
 01E8           ;    Scans all sensors to find their raw count values
 01E8           ;
 01E8           ;-----------------------------------------------------------------------------
 01E8           ;
 01E8           ;  ARGUMENTS:    None.
 01E8           ;  RETURNS:      None
 01E8           ;  SIDE EFFECTS:
 01E8           ;    The A and X registers may be modified by this or future implementations
 01E8           ;    of this function.  The same is true for all RAM page pointer registers in
 01E8           ;    the Large Memory Model.  When necessary, it is the calling function's
 01E8           ;    responsibility to perserve their values across calls to fastcall16
 01E8           ;    functions.
 01E8           ;
 01E8            CSD_UpdateAllBaselines:
 01E8           _CSD_UpdateAllBaselines:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 01E8 5007         mov   A, (CSD_TotalSensorCount - 1)
 01EA           .ThresholdLoop:                                       ; Loop through all sensors
 01EA 08           push  A
 01EB 9E13         call  CSD_UpdateSensorBaseline
 01ED 18           pop   A
 01EE 78           dec   A
 01EF DFFA         jnc   .ThresholdLoop
 01F1           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01F1 7F           ret
 01F2           .ENDSECTION
 01F2           
                IF CSD_SLIDERS_EXIST
 01F2           .SECTION
 01F2           ;-----------------------------------------------------------------------------
 01F2           ;  FUNCTION NAME: CSD_wGetCentroidPos(BYTE bSnsGroup)
 01F2           ;
 01F2           ;  DESCRIPTION:
 01F2           ;      Checks the difference array for a centroid.  If one exists, the offset
 01F2           ;      (within the whole difference arrary) and length are placed in the
 01F2           ;      bCentroidLength and bCentroidStart variables.
 01F2           ;
 01F2           ;      Then the function finds and returns the position of the centroid in the
 01F2           ;      difference array.
 01F2           ;
 01F2           ;-----------------------------------------------------------------------------
 01F2           ;
 01F2           ;  ARGUMENTS:
 01F2           ;       A => Sensor Group
 01F2           ;       Sensor Group = 0 for the independent sensors group
 01F2           ;       Sensor Group = 1 for the first slider group
 01F2           ;       Sensor Group = 2 for the second slider group
 01F2           ;
 01F2           ;  RETURNS:
 01F2           ;      iCtrdPos -> position of the centroid
 01F2           ;
 01F2           ;  SIDE EFFECTS:
 01F2           ;    The A and X registers may be modified by this or future implementations
 01F2           ;    of this function.  The same is true for all RAM page pointer registers in
 01F2           ;    the Large Memory Model.  When necessary, it is the calling function's
 01F2           ;    responsibility to perserve their values across calls to fastcall16
 01F2           ;    functions.
 01F2           ;
 01F2            CSD_wGetCentroidPos:
 01F2           _CSD_wGetCentroidPos:
 01F2           ; Legacy function name labels below, do not use for new designs
 01F2            CSD_bGetCentroidPos:
 01F2           _CSD_bGetCentroidPos:
 01F2            CSD_iGetCentroidPos:
 01F2           _CSD_iGetCentroidPos:
 01F2           ; End legacy function names
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 01F2 70BF            and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 01F4 62D000          mov reg[CUR_PP], 0
                   ENDIF
                
                ; First get the starting location and size of this sensor group
 01F7 64           asl A ; multiply by two to get diplex
 01F8 5C           mov X, A
 01F9 F000         index CSD_Diplex_Table ; get the diplex table MSB and LSB
 01FB 5324         mov [CSD_bDiplexMSB], A
 01FD 5B           mov A, X
 01FE 74           inc A
 01FF F000         index CSD_Diplex_Table
 0201 5325         mov [CSD_bDiplexLSB], A
 0203 5B           mov A, X
 0204 530A         mov [CSD_bStartIndex], A ; Use bStartIndex as a temp storage byte
 0206 64           asl A
 0207 040A         add [CSD_bStartIndex], A
 0209 510A         mov A, [CSD_bStartIndex] ; A now has slider offset multiplied by six
 020B 5C           mov X, A
 020C F000         index CSD_Group_Table ; get first sensor index
 020E 5306         mov [CSD_bEndOfArray], A
 0210 5308         mov [CSD_bCurPos], A
 0212 530A         mov [CSD_bStartIndex], A
 0214 5B           mov A, X
 0215 74           inc A
 0216 F000         index CSD_Group_Table ; get size of group
 0218 0406         add [CSD_bEndOfArray], A ; Store for later
 021A 5B           mov A, X
 021B 0102         add A, 2
 021D F000         index CSD_Group_Table ; get if diplexed or not and max size of centroid (data = 0 if not diplexed)
 021F 5323         mov [CSD_bDiplexInfo], A ; Store for later
 0221 5B           mov A, X
 0222 0103         add A, 3
 0224 5309         mov [CSD_bSnsMaskPtr], A ; Store starting position in an unused temp CSD_bSnsMaskPtr
 0226           
 0226           ; First find the starting location and size of the largest centroid
 0226 551E00       mov [CSD_bBiggestCtrdStartPos], 0
 0229 551F00       mov [CSD_bBiggestCtrdSize], 0
 022C 551C00       mov [CSD_bCurCtrdStartPos], 0
 022F 551D00       mov [CSD_bCurCtrdSize], 0
 0232           
 0232 510A         mov A, [CSD_bStartIndex]
 0234 64           asl A ; multiply by two because we are using ints
 0235 5C           mov X, A
 0236           
 0236           .LocateCtrd:
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0236 62D310          mov reg[IDX_PP], >CSD_waSnsDiff
                   ENDIF
 0239 5210         mov A, [X+CSD_waSnsDiff]
 023B B018         jnz .DiffIsNotZero
 023D 5211         mov A, [X+CSD_waSnsDiff+1]
 023F B014         jnz .DiffIsNotZero
 0241           ; The difference is zero, we either just ended a centroid or are between centroids
 0241           ; First check the Current Size, if zero, we are in the middle of zeros, else, we just ended
 0241           .DifferenceIsZero:
 0241 511D         mov A, [CSD_bCurCtrdSize]
 0243 A01A         jz .LocateCtrdNextSensor
 0245           ; A centroid just ended.  Is it the largest centroid?
 0245 3A1F         cmp A, [CSD_bBiggestCtrdSize]
 0247 C007         jc .ClearCurCtrdSize
 0249           ; It is the biggest so far, store as biggest
 0249 5F1F1D       mov [CSD_bBiggestCtrdSize], [CSD_bCurCtrdSize]
 024C 5F1E1C       mov [CSD_bBiggestCtrdStartPos], [CSD_bCurCtrdStartPos]
 024F           .ClearCurCtrdSize:
 024F 551D00       mov [CSD_bCurCtrdSize], 0
 0252 800B         jmp .LocateCtrdNextSensor
 0254           
 0254           ;The difference is not zero, we either just started, or are in the middle of a centroid
 0254           .DiffIsNotZero:
 0254 511D         mov A, [CSD_bCurCtrdSize]
 0256 B005         jnz .IncCtrdSize
 0258           ; Centroid just began, store the start pos
 0258 5108         mov A, [CSD_bCurPos]
 025A 531C         mov [CSD_bCurCtrdStartPos], A
 025C           .IncCtrdSize:
 025C 761D         inc [CSD_bCurCtrdSize]
 025E           ; Find out the next position
 025E           .LocateCtrdNextSensor:
 025E 75           inc X
 025F 75           inc X
 0260 7608         inc [CSD_bCurPos]
 0262 5108         mov A, [CSD_bCurPos]
 0264 3A06         cmp A, [CSD_bEndOfArray] ; Check for the end of the array
 0266 CFCF         jc .LocateCtrd
 0268           ; Either at end of array, or diplexed
 0268 4723FF       tst [CSD_bDiplexInfo], 0xff ; check if diplexed
 026B A01B         jz .EndOfLocateCtrd
 026D           ; Diplexed, so now find out if at end
 026D 1206         sub A, [CSD_bEndOfArray] ; subtract the size of the array
 026F 020A         add A, [CSD_bStartIndex] ; for comparison
 0271 3A06         cmp A, [CSD_bEndOfArray] ; Check for the end of the array
 0273 D013         jnc .EndOfLocateCtrd
 0275           ; Not the end of the diplexed array, find out offset of next position
 0275 5108         mov A, [CSD_bCurPos]
 0277 120A         sub A, [CSD_bStartIndex]
 0279 0225         add A, [CSD_bDiplexLSB]
 027B 5C           mov X, A
 027C 5124         mov A, [CSD_bDiplexMSB]
 027E 0900         adc A, 0 ; check if carry
 0280 28           romx ; get the offset from the start
 0281 020A         add A, [CSD_bStartIndex]
 0283 64           asl A ; because using ints
 0284 5C           mov X, A
 0285 8FB0         jmp .LocateCtrd
 0287           .EndOfLocateCtrd:
 0287           ; Need to check if the current centroid is biggest
 0287 511D         mov A, [CSD_bCurCtrdSize]
 0289 A00B         jz .CalculateCtrd
 028B           ; There was a centroid at the end, is it biggest?
 028B 3A1F         cmp A, [CSD_bBiggestCtrdSize]
 028D C007         jc .CalculateCtrd ; if two are the same size, last one wins
 028F           ; It is the biggest so far, store as biggest
 028F 5F1F1D       mov [CSD_bBiggestCtrdSize], [CSD_bCurCtrdSize]
 0292 5F1E1C       mov [CSD_bBiggestCtrdStartPos], [CSD_bCurCtrdStartPos]
 0295           
 0295           .CalculateCtrd:
 0295 511F         mov A, [CSD_bBiggestCtrdSize]
 0297 A10B         jz .COM_Error
 0299 5123         mov A, [CSD_bDiplexInfo] ; check if diplexed
 029B A00A         jz .COM_Init
 029D 3C1F02       cmp [CSD_bBiggestCtrdSize], 2
 02A0 C102         jc .COM_Error ; for diplexing, one or less is too small
 02A2 3A1F         cmp A, [CSD_bBiggestCtrdSize]
 02A4 C0FE         jc .COM_Error ; for diplexing, check if centroid is too large
 02A6           
 02A6           .COM_Init:
 02A6 511E         mov A, [CSD_bBiggestCtrdStartPos] ; Use for current position, may be diplexed
 02A8 5308         mov [CSD_bCurPos], A
 02AA 550D00       mov [CSD_wDenom+MSB], 0 ; Clear the numerator and denominator
 02AD 550E00       mov [CSD_wDenom+LSB], 0
 02B0 550F00       mov [CSD_dNumer+MMSB], 0
 02B3 551000       mov [CSD_dNumer+MLSB], 0
 02B6 551100       mov [CSD_dNumer+LMSB], 0
 02B9 551200       mov [CSD_dNumer+LLSB], 0
 02BC           
 02BC           .COM_NextPosition:
 02BC 5108         mov A, [CSD_bCurPos]
 02BE 3A06         cmp A, [CSD_bEndOfArray]
 02C0 D005         jnc .COM_CheckDiplex
 02C2 64           asl A
 02C3 5C           mov X, A
 02C4 8016         jmp .COM_AddElement
 02C6           ; Must be diplexed, check for safe measure
 02C6           .COM_CheckDiplex:
 02C6 4723FF       tst [CSD_bDiplexInfo], 0xff ; check if diplexed
 02C9 A040         jz .COM_Compute
 02CB           ; Find out offset of next position
 02CB 5108         mov A, [CSD_bCurPos]
 02CD 120A         sub A, [CSD_bStartIndex]
 02CF 0225         add A, [CSD_bDiplexLSB]
 02D1 5C           mov X, A
 02D2 5124         mov A, [CSD_bDiplexMSB]
 02D4 0900         adc A, 0 ; check if carry
 02D6 28           romx ; get the offset from the start
 02D7 020A         add A, [CSD_bStartIndex]
 02D9 64           asl A ; because using ints
 02DA 5C           mov X, A
 02DB           .COM_AddElement:
 02DB           ; Subtract the noise from the difference, this will yield a more accurate result
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 02DB 62D310          mov reg[IDX_PP], >CSD_waSnsDiff
                   ENDIF
 02DE 5100         mov A, [CSD_bNoiseThreshold]
 02E0 1511         sub [X+CSD_waSnsDiff+LSB], A
 02E2 1F1000       sbb [X+CSD_waSnsDiff+MSB], 0
 02E5           ; Store a copy of the sensor difference in CSD_dMultTempX
 02E5 5211         mov A, [X+CSD_waSnsDiff+LSB]
 02E7 5316         mov [CSD_dMultTempX+LLSB], A
 02E9           ; Add LSB to denominator
 02E9 040E         add [CSD_wDenom+LSB], A
 02EB 5210         mov A, [X+CSD_waSnsDiff]
 02ED 5315         mov [CSD_dMultTempX+LMSB], A
 02EF 551400       mov [CSD_dMultTempX+MLSB], 0
 02F2 551300       mov [CSD_dMultTempX+MMSB], 0
 02F5           ; Add MSB to denominator
 02F5 0C0D         adc [CSD_wDenom], A
 02F7 5108         mov A, [CSD_bCurPos]
 02F9 120A         sub A, [CSD_bStartIndex] ; we need offset from beginning of group
 02FB 552600       mov [CSD_wDivBtwSns+MSB], 0
 02FE 5327         mov [CSD_wDivBtwSns+LSB], A
 0300           
 0300 90AA         call .MultiplyNumeratorWhole
 0302           
 0302 7608         inc [CSD_bCurPos]
 0304 7A1F         dec [CSD_bBiggestCtrdSize]
 0306 A003         jz .COM_Compute
 0308 8FB3         jmp .COM_NextPosition
 030A           
 030A           .COM_Compute:
 030A 5112         mov A, [CSD_dNumer+LLSB] ; Move numerator to temp
 030C 5316         mov [CSD_dMultTempX+LLSB], A
 030E 531A         mov [CSD_dMultTempY+LLSB], A
 0310 5111         mov A, [CSD_dNumer+LMSB]
 0312 5315         mov [CSD_dMultTempX+LMSB], A
 0314 5319         mov [CSD_dMultTempY+LMSB], A
 0316 5110         mov A, [CSD_dNumer+MLSB]
 0318 5314         mov [CSD_dMultTempX+MLSB], A
 031A 5318         mov [CSD_dMultTempY+MLSB], A
 031C 510F         mov A, [CSD_dNumer+MMSB]
 031E 5313         mov [CSD_dMultTempX+MMSB], A
 0320 5317         mov [CSD_dMultTempY+MMSB], A
 0322           
 0322 550F00       mov [CSD_dNumer+MMSB], 0 ; Clear numerator
 0325 551000       mov [CSD_dNumer+MLSB], 0
 0328 551100       mov [CSD_dNumer+LMSB], 0
 032B 551200       mov [CSD_dNumer+LLSB], 0
 032E           
 032E 5109         mov A, [CSD_bSnsMaskPtr] ; Retrieve starting position in index of the DivBtwSns
 0330 08           push A
 0331 F000         index CSD_Group_Table ; get MSB of whole multiplier
 0333 5326         mov [CSD_wDivBtwSns+MSB], A
 0335 18           pop A
 0336 74           inc A
 0337 08           push A
 0338 F000         index CSD_Group_Table ; get LSB of whole multiplier
 033A 5327         mov [CSD_wDivBtwSns+LSB], A
 033C 906E         call .MultiplyNumeratorWhole ; Multiplies by whole part
 033E 18           pop A
 033F 74           inc A
 0340 F000         index CSD_Group_Table ; get byte of fractional multiplier
 0342 5327         mov [CSD_wDivBtwSns+LSB], A
 0344 90B1         call .MultiplyNumeratorFraction ; Multiplies by fractional part
 0346           
 0346           ; Now do the division of the numerator and denominator
 0346           
 0346           ; Round up the temp by half of the denominator (0.5 gets 1)
 0346 510D         mov A, [CSD_wDenom+MSB]
 0348 5313         mov [CSD_dMultTempX+MSB], A
 034A 510E         mov A, [CSD_wDenom+LSB]
 034C 5314         mov [CSD_dMultTempX+LSB], A
 034E 70FB         and F, ~0x04 ; Clear carry bit if set
 0350 6E13         rrc [CSD_dMultTempX+MSB] ; divide denominator by 2
 0352 6E14         rrc [CSD_dMultTempX+LSB]
 0354 5114         mov A, [CSD_dMultTempX+LSB]
 0356 0412         add [CSD_dNumer+LLSB], A ; add 1/2 denominator
 0358 5113         mov A, [CSD_dMultTempX+MSB]
 035A 0C11         adc [CSD_dNumer+LMSB], A
 035C 0E1000       adc [CSD_dNumer+MLSB], 0
 035F 0E0F00       adc [CSD_dNumer+MMSB], 0
 0362           
 0362           ; Compute the division of numerator divided by denominator
 0362 6512         asl [CSD_dNumer+LLSB]
 0364 6B11         rlc [CSD_dNumer+LMSB]
 0366 6B10         rlc [CSD_dNumer+MLSB]
 0368 6B0F         rlc [CSD_dNumer+MMSB]
 036A 5710         mov X, 16
 036C           .DivideLoop:
 036C           ; Subtract the divisor or denominator from the MMSB MLSB dividend or numerator
 036C 510E         mov A, [CSD_wDenom+LSB]
 036E 1410         sub [CSD_dNumer+MLSB], A
 0370 510D         mov A, [CSD_wDenom+MSB]
 0372 1C0F         sbb [CSD_dNumer+MMSB], A
 0374           ; Check if less than zero
 0374 D016         jnc .SetLSbToOneAndShift
 0376           .AddBackSetLSbToZeroAndShift:
 0376           ; Less than zero so add back to dividend and shift a zero into the dividend
 0376 510E         mov A, [CSD_wDenom+LSB]
 0378 0410         add [CSD_dNumer+MLSB], A
 037A 510D         mov A, [CSD_wDenom+MSB]
 037C 0C0F         adc [CSD_dNumer+MMSB], A
 037E 6512         asl [CSD_dNumer+LLSB]
 0380 6B11         rlc [CSD_dNumer+LMSB]
 0382 6B10         rlc [CSD_dNumer+MLSB]
 0384 6B0F         rlc [CSD_dNumer+MMSB]
 0386 79           dec X
 0387 BFE4         jnz .DivideLoop
 0389 800F         jmp .EndOfDivide
 038B           .SetLSbToOneAndShift:
 038B 6512         asl [CSD_dNumer+LLSB]
 038D 2E1201       or [CSD_dNumer+LLSB], 0x01
 0390 6B11         rlc [CSD_dNumer+LMSB]
 0392 6B10         rlc [CSD_dNumer+MLSB]
 0394 6B0F         rlc [CSD_dNumer+MMSB]
 0396 79           dec X
 0397 BFD4         jnz .DivideLoop
 0399           .EndOfDivide:
 0399           ; MMSB and MLSB have carry after shifted right once
 0399 6E0F         rrc [CSD_dNumer+MMSB]
 039B 6E10         rrc [CSD_dNumer+MLSB]
 039D           ; Load return value
 039D 5811         mov X, [CSD_wCtrdPos+MSB]
 039F 5112         mov A, [CSD_wCtrdPos+LSB]
 03A1 8005         jmp .EndGetCtrdPos
 03A3           .COM_Error:
 03A3           ; Load error return value
 03A3 50FF         mov A, 0xff
 03A5 57FF         mov X, 0xff
 03A7           .EndGetCtrdPos:
 03A7           ; Algorithm is finished, position is in [CSD_wCtrdPos]
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 03A7 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 03A9 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 03AB 7F           ret
 03AC           
 03AC           ; Multiplication algorithm (for whole numbers)
 03AC           .MultiplyNumeratorWhole:
 03AC 5001         mov A, 0x01
 03AE           .CheckToAddNext2xLSB:
 03AE 08           push A
 03AF 2227         and A, [CSD_wDivBtwSns+LSB] ; See if current 2^x needs added
 03B1 A011         jz .SkipAddAndShiftLeftLSB
 03B3 5116         mov A, [CSD_dMultTempX+LLSB]
 03B5 0412         add [CSD_dNumer+LLSB], A
 03B7 5115         mov A, [CSD_dMultTempX+LMSB]
 03B9 0C11         adc [CSD_dNumer+LMSB], A
 03BB 5114         mov A, [CSD_dMultTempX+MLSB]
 03BD 0C10         adc [CSD_dNumer+MLSB], A
 03BF 5113         mov A, [CSD_dMultTempX+MMSB]
 03C1 0C0F         adc [CSD_dNumer+MMSB], A
 03C3           .SkipAddAndShiftLeftLSB:
 03C3 6516         asl [CSD_dMultTempX+LLSB]
 03C5 6B15         rlc [CSD_dMultTempX+LMSB]
 03C7 6B14         rlc [CSD_dMultTempX+MLSB]
 03C9 6B13         rlc [CSD_dMultTempX+MMSB]
 03CB 18           pop A
 03CC 64           asl A
 03CD DFE0         jnc .CheckToAddNext2xLSB
 03CF 5126         mov A, [CSD_wDivBtwSns+MSB]
 03D1 A024         jz .EndMultiplyNumeratorWhole ; only multiply by MSB if needed
 03D3 5001         mov A, 0x01
 03D5           .CheckToAddNext2xMSB:
 03D5 08           push A
 03D6 2226         and A, [CSD_wDivBtwSns+MSB] ; See if current 2^x needs added
 03D8 A011         jz .SkipAddAndShiftLeftMSB
 03DA 5116         mov A, [CSD_dMultTempX+LLSB]
 03DC 0412         add [CSD_dNumer+LLSB], A
 03DE 5115         mov A, [CSD_dMultTempX+LMSB]
 03E0 0C11         adc [CSD_dNumer+LMSB], A
 03E2 5114         mov A, [CSD_dMultTempX+MLSB]
 03E4 0C10         adc [CSD_dNumer+MLSB], A
 03E6 5113         mov A, [CSD_dMultTempX+MMSB]
 03E8 0C0F         adc [CSD_dNumer+MMSB], A
 03EA           .SkipAddAndShiftLeftMSB:
 03EA 6516         asl [CSD_dMultTempX+LLSB]
 03EC 6B15         rlc [CSD_dMultTempX+LMSB]
 03EE 6B14         rlc [CSD_dMultTempX+MLSB]
 03F0 6B13         rlc [CSD_dMultTempX+MMSB]
 03F2 18           pop A
 03F3 64           asl A
 03F4 DFE0         jnc .CheckToAddNext2xMSB
 03F6           .EndMultiplyNumeratorWhole:
 03F6 7F           ret
 03F7           
 03F7           ; Multiplication algorithm (for fractional numbers)
 03F7           .MultiplyNumeratorFraction:
 03F7 70FB         and F, ~0x04 ; clear carry bit if set
 03F9 6E17         rrc [CSD_dMultTempY+MMSB]
 03FB 6E18         rrc [CSD_dMultTempY+MLSB]
 03FD 6E19         rrc [CSD_dMultTempY+LMSB]
 03FF 6E1A         rrc [CSD_dMultTempY+LLSB]
 0401 5080         mov A, 0x80
 0403           .CheckToAddNextHalf:
 0403 08           push A
 0404 2227         and A, [CSD_wDivBtwSns+LSB]
 0406 A011         jz .SkipAddAndShiftRight
 0408 511A         mov A, [CSD_dMultTempY+LLSB]
 040A 0412         add [CSD_dNumer+LLSB], A
 040C 5119         mov A, [CSD_dMultTempY+LMSB]
 040E 0C11         adc [CSD_dNumer+LMSB], A
 0410 5118         mov A, [CSD_dMultTempY+MLSB]
 0412 0C10         adc [CSD_dNumer+MLSB], A
 0414 5117         mov A, [CSD_dMultTempY+MMSB]
 0416 0C0F         adc [CSD_dNumer+MMSB], A
 0418           .SkipAddAndShiftRight:
 0418 6817         asr [CSD_dMultTempY+MMSB]
 041A 6E18         rrc [CSD_dMultTempY+MLSB]
 041C 6E19         rrc [CSD_dMultTempY+LMSB]
 041E 6E1A         rrc [CSD_dMultTempY+LLSB]
 0420 18           pop A
 0421 70FB         and F, ~0x04 ; clear carry bit if set
 0423 6D           rrc A
 0424 DFDE         jnc .CheckToAddNextHalf
 0426 7F           ret
 0427           
 0427           .ENDSECTION
 0427           
 0427           .LITERAL
 0427           CSD_SLIDER_RESOLUTION_TABLE:
 0427 0064      dw 0x64
 0429           
 0429           .ENDLITERAL
 0429           
 0429           .SECTION
 0429           ;-----------------------------------------------------------------------------
 0429           ;  FUNCTION NAME: CSD_wGetRadialInc(BYTE bSnsGroup)
 0429           ;  DESCRIPTION:
 0429           ;
 0429           ;-----------------------------------------------------------------------------
 0429           ;  ARGUMENTS:
 0429           ;       A => Sensor Group
 0429           ;       Sensor Group = 0 for the independent sensors group
 0429           ;       Sensor Group = 1 for the first slider group
 0429           ;       Sensor Group = 2 for the second slider group
 0429           ;  RETURNS:
 0429           ;      result - offset (positive or negative)  through X and A
 0429           ;-----------------------------------------------------------------------------
 0429           ;  SIDE EFFECTS:
 0429           ;    The A and X registers may be modified by this or future implementations
 0429           ;    of this function.  The same is true for all RAM page pointer registers in
 0429           ;    the Large Memory Model.  When necessary, it is the calling function's
 0429           ;    responsibility to perserve their values across calls to fastcall16
 0429           ;    functions.
 0429           ;-----------------------------------------------------------------------------
 0429           
 0429            CSD_wGetRadialInc:
 0429           _CSD_wGetRadialInc:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0429 70BF            and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 042B 62D000          mov reg[CUR_PP], 0
                   ENDIF
                
 042E 531D         mov [CSD_bCurCtrdSize], A  ;saves slider number
 0430 7A1D         dec [CSD_bCurCtrdSize]
 0432 651D         asl [CSD_bCurCtrdSize]
 0434           
 0434 581D         mov X, [CSD_bCurCtrdSize]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0436 62D302          mov reg[IDX_PP], >CSD_waSliderPrevPos
                   ENDIF
 0439 3D02FF       cmp [X + CSD_waSliderPrevPos + 0], FFh
 043C B00C         jnz .CurrCheck
 043E 3D03FF       cmp [X + CSD_waSliderPrevPos + 1], FFh
 0441 B007         jnz .CurrCheck
 0443           
 0443 5700         mov X, 00h
 0445 5000         mov A, 00h
 0447 8097         jmp .Done
 0449           
 0449           .CurrCheck:
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0449 62D304          mov reg[IDX_PP], >CSD_waSliderCurrPos
                   ENDIF
 044C 3D04FF       cmp [X + CSD_waSliderCurrPos + 0], FFh
 044F B00C         jnz .Calculations
 0451 3D05FF       cmp [X + CSD_waSliderCurrPos + 1], FFh
 0454 B007         jnz .Calculations
 0456           
 0456 5700         mov X, 00h
 0458 5000         mov A, 00h
 045A 8084         jmp .Done
 045C           
 045C           .Calculations:
 045C              ;getting A*6
 045C 511D         mov A,  [CSD_bCurCtrdSize]
 045E FFC7         index CSD_SLIDER_RESOLUTION_TABLE
 0460 5320         mov [CSD_wCurPkValue + 0], A
 0462 511D         mov A,  [CSD_bCurCtrdSize]
 0464 74           inc A
 0465 FFC0         index CSD_SLIDER_RESOLUTION_TABLE
 0467 5321         mov [CSD_wCurPkValue + 1], A
 0469           
 0469              ;wDenom = Resolution/2
 0469 5120         mov A, [CSD_wCurPkValue + 0]
 046B 67           asr A
 046C 530D         mov [CSD_wDenom + 0], A
 046E 5121         mov A, [CSD_wCurPkValue + 1]
 0470 6D           rrc A
 0471 530E         mov [CSD_wDenom + 1], A
 0473           
 0473 581D         mov X, [CSD_bCurCtrdSize]
 0475           
 0475              ;detect direction of the motion
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0475 62D304          mov reg[IDX_PP], >CSD_waSliderCurrPos
                   ENDIF
 0478 5205         mov A, [X + CSD_waSliderCurrPos + 1]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 047A 62D302          mov reg[IDX_PP], >CSD_waSliderPrevPos
                   ENDIF
 047D 1303         sub A, [X + CSD_waSliderPrevPos + 1]
 047F 5318         mov [CSD_dMultTempY + 1], A
 0481           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0481 62D304          mov reg[IDX_PP], >CSD_waSliderCurrPos
                   ENDIF
 0484 5204         mov A, [X + CSD_waSliderCurrPos + 0]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0486 62D302          mov reg[IDX_PP], >CSD_waSliderPrevPos
                   ENDIF
 0489 1B02         sbb A, [X + CSD_waSliderPrevPos + 0]
 048B 5317         mov [CSD_dMultTempY + 0], A
 048D           
 048D 471780       tst [CSD_dMultTempY + 0], 80h
 0490 B023         jnz .DiffIsNegative ;negative
 0492           
 0492              ;positive
 0492 5117         mov A, [CSD_dMultTempY + 0]
 0494 3A0D         cmp A, [CSD_wDenom + 0]
 0496 C00B         jc .LessThenAHalfOfResol1
 0498 B00F         jnz .GreaterThenAHalfOfResol1
 049A           
 049A 5118         mov A, [CSD_dMultTempY + 1]
 049C 3A0E         cmp A, [CSD_wDenom + 1]
 049E C003         jc .LessThenAHalfOfResol1
 04A0 8007         jmp .GreaterThenAHalfOfResol1
 04A2           
 04A2           .LessThenAHalfOfResol1:
 04A2              ;Less than a half of resolution
 04A2 5817         mov X, [CSD_dMultTempY + 0]
 04A4 5118         mov A, [CSD_dMultTempY + 1]
 04A6 8038         jmp .Done
 04A8           
 04A8           .GreaterThenAHalfOfResol1:
 04A8 5118         mov A, [CSD_dMultTempY + 1]
 04AA 1221         sub A, [CSD_wCurPkValue + 1]
 04AC 5C           mov X, A
 04AD 5117         mov A, [CSD_dMultTempY + 0]
 04AF 1A20         sbb A, [CSD_wCurPkValue + 0]
 04B1 4B           swap A, X
 04B2 802C         jmp .Done
 04B4           
 04B4           .DiffIsNegative:
 04B4 5118         mov A, [CSD_dMultTempY + 1]
 04B6 73           cpl A
 04B7 74           inc A
 04B8 5314         mov [CSD_dMultTempX + 1], A
 04BA 5117         mov A, [CSD_dMultTempY + 0]
 04BC 73           cpl A
 04BD 0900         adc A, 0
 04BF           
 04BF 3A0D         cmp A, [CSD_wDenom + 0]
 04C1 C00B         jc .LessThenAHalfOfResol2
 04C3 B00F         jnz .GreaterThenAHalfOfResol2
 04C5           
 04C5 5114         mov A, [CSD_dMultTempX + 1]
 04C7 3A0E         cmp A, [CSD_wDenom + 1]
 04C9 C003         jc .LessThenAHalfOfResol2
 04CB 8007         jmp .GreaterThenAHalfOfResol2
 04CD           
 04CD           .LessThenAHalfOfResol2:  ;!!!!!!need optimization
 04CD              ;Less than a half of resolution
 04CD 5817         mov X, [CSD_dMultTempY + 0]
 04CF 5118         mov A, [CSD_dMultTempY + 1]
 04D1 800D         jmp .Done
 04D3           
 04D3           .GreaterThenAHalfOfResol2:
 04D3 5118         mov A, [CSD_dMultTempY + 1]
 04D5 0421         add [CSD_wCurPkValue + 1], A
 04D7 5117         mov A, [CSD_dMultTempY + 0]
 04D9 0C20         adc [CSD_wCurPkValue + 0], A
 04DB 5820         mov X, [CSD_wCurPkValue + 0]
 04DD 5121         mov A, [CSD_wCurPkValue + 1]
 04DF           
 04DF           .Done:
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 04DF 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 04E1 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 04E3 7F           ret
 04E4           .ENDSECTION
 04E4           
 04E4           .LITERAL
 04E4           CSD_RADIAL_SLIDER_RESOLUTION_MULTIPLIER_TABLE:
                IF (8h)
 04E4 0C80        dw 64h * 256 / 8h
                ENDIF 
                 
                IF (1h)
 04E6 0100        dw 1h * 256 / 1h
                ENDIF  
                
                IF (1h)
 04E8 0100        dw 1h * 256 / 1h
                ENDIF  
                
                IF (1h)
 04EA 0100        dw 1h * 256 / 1h
                ENDIF  
                
                IF (1h)
 04EC 0100        dw 1h * 256 / 1h
                ENDIF  
                
                IF (1h)
 04EE 0100        dw 1h * 256 / 1h
                ENDIF  
                
                IF (1h)
 04F0 0100        dw 1h * 256 / 1h
                ENDIF  
                
                IF (1h)
 04F2 0100        dw 1h * 256 / 1h
                ENDIF  
                
                IF (1h)
 04F4 0100        dw 1h * 256 / 1h
                ENDIF  
                
                IF (1h)
 04F6 0100        dw 1h * 256 / 1h
                ENDIF  
                
                IF (1h)
 04F8 0100        dw 1h * 256 / 1h
                ENDIF  
                  
                IF (CSD_SliderCount - 12)
                ELSE
                  IF (1h)
                      dw 1h * 256 / 1h
                  ENDIF  
                ENDIF
                
                IF (CSD_SliderCount - 13)
                ELSE
                  IF (1h)
                      dw 1h * 256 / 1h
                  ENDIF  
                ENDIF
 04FA           .ENDLITERAL
 04FA           
 04FA           .SECTION
 04FA           ;-----------------------------------------------------------------------------
 04FA           ;  FUNCTION NAME: CSD_wGetRadialPos(BYTE bSnsGroup)
 04FA           ;  DESCRIPTION:
 04FA           ;      The function finds and returns the position of the centroid in the
 04FA           ;      difference array.
 04FA           ;-----------------------------------------------------------------------------
 04FA           ;  ARGUMENTS:
 04FA           ;       A => Sensor Group
 04FA           ;       Sensor Group = 0 for the independent sensors group
 04FA           ;       Sensor Group = 1 for the first slider group
 04FA           ;       Sensor Group = 2 for the second slider group
 04FA           ;  RETURNS:
 04FA           ;      result - centroid position (through X and A)
 04FA           ;-----------------------------------------------------------------------------
 04FA           ;  SIDE EFFECTS:
 04FA           ;    The A and X registers may be modified by this or future implementations
 04FA           ;    of this function.  The same is true for all RAM page pointer registers in
 04FA           ;    the Large Memory Model.  When necessary, it is the calling function's
 04FA           ;    responsibility to perserve their values across calls to fastcall16
 04FA           ;    functions.
 04FA           ;-----------------------------------------------------------------------------
 04FA           
 04FA            CSD_wGetRadialPos:
 04FA           _CSD_wGetRadialPos:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 04FA 70BF            and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 04FC 62D000          mov reg[CUR_PP], 0
                   ENDIF
 04FF 531D         mov [CSD_bCurCtrdSize], A  ;saves slider number
 0501 7A1D         dec [CSD_bCurCtrdSize]
 0503 651D         asl [CSD_bCurCtrdSize]
 0505           
 0505              ;getting A*6
 0505 64           asl   A       ; A*2
 0506 531B         mov  [CSD_bCurSlider], A ;temporary saving A*2
 0508 64           asl   A       ;A*4
 0509 041B         add  [CSD_bCurSlider], A ;A*6
 050B 511B         mov  A, [CSD_bCurSlider] ;now A points on bSnsgroup offset in Group table
 050D F000         index CSD_Group_Table
 050F 530A         mov [CSD_bStartIndex], A ;getting desired slider offset for waSnsDiff array
 0511 5306         mov [CSD_bEndOfArray], A
 0513 511B         mov  A, [CSD_bCurSlider]
 0515 74           inc A
 0516 F000         index CSD_Group_Table
 0518 0406         add [CSD_bEndOfArray], A ;getting final index in waSnsDiff for desired slider
 051A           
 051A 511D         mov A, [CSD_bCurCtrdSize]
 051C FFC6         index CSD_RADIAL_SLIDER_RESOLUTION_MULTIPLIER_TABLE
 051E 5320         mov [CSD_wCurPkValue + 0], A
 0520 511D         mov A, [CSD_bCurCtrdSize]
 0522 74           inc A
 0523 FFBF         index CSD_RADIAL_SLIDER_RESOLUTION_MULTIPLIER_TABLE
 0525 5321         mov [CSD_wCurPkValue + 1], A
 0527           
 0527 6506         asl [CSD_bEndOfArray]    ;*2 because we operating with WORDs
 0529 650A         asl [CSD_bStartIndex]    ;*2 because we operating with WORDs
 052B 160602       sub [CSD_bEndOfArray], 2 ;now it points on the last element
 052E           
 052E              ;These two variables contain required maximum
 052E 551F00       mov [CSD_bBiggestCtrdSize], 0        ;MSB
 0531 551E00       mov [CSD_bBiggestCtrdStartPos], 0    ;LSB
 0534           
 0534 550800       mov [CSD_bCurPos], 0                 ;this variable saves maximum position
 0537 580A         mov X, [CSD_bStartIndex]             ;X - current position; access  will be performed through X (base+offset)
 0539           
 0539           .IdentifyCtrd:
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0539 62D310          mov reg[IDX_PP], >CSD_waSnsDiff
                   ENDIF
 053C 5210         mov A, [X + CSD_waSnsDiff]
 053E B01A         jnz .CheckIfMaximum
 0540 5211         mov A, [X + CSD_waSnsDiff + 1]
 0542 B003         jnz .DiffIsNotZero
 0544           
 0544           ;Difference is zero:
 0544 802E         jmp .CheckNextSensor
 0546           
 0546           .DiffIsNotZero:
 0546 10           push X
 0547 5B           mov A, X
 0548 67           asr A
 0549 5C           mov X, A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 054A 62D308          mov reg[IDX_PP], >CSD_baBtnFThreshold
                   ENDIF
 054D 5208         mov A, [X + CSD_baBtnFThreshold]
 054F 20           pop X
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0550 62D310          mov reg[IDX_PP], >CSD_waSnsDiff
                   ENDIF
 0553 3B11         cmp A, [X + CSD_waSnsDiff + 1] ;Compare With FThreshold
 0555 D01D         jnc .CheckNextSensor
 0557 A01B         jz .CheckNextSensor
 0559           
 0559           ;waSnsDiff is greater than threshold
 0559           .CheckIfMaximum:
 0559              ;Compare MSBs
 0559 5210         mov A, [X + CSD_waSnsDiff]
 055B 3A1F         cmp A, [CSD_bBiggestCtrdSize]
 055D C015         jc .CheckNextSensor
 055F B009         jnz .StoreNewMaximum
 0561           
 0561              ;Compare LSBs
 0561 5211         mov A, [X + CSD_waSnsDiff + 1]
 0563 3A1E         cmp A, [CSD_bBiggestCtrdStartPos]
 0565 C00D         jc .CheckNextSensor
 0567 A00B         jz .CheckNextSensor
 0569           
 0569           ;waSnsDiff is greater then stored maximum; saving new maximum
 0569           .StoreNewMaximum:
 0569 5210         mov A, [X + CSD_waSnsDiff]
 056B 531F         mov [CSD_bBiggestCtrdSize], A
 056D 5211         mov A, [X + CSD_waSnsDiff + 1]
 056F 531E         mov [CSD_bBiggestCtrdStartPos], A
 0571 5A08         mov [CSD_bCurPos], X ;this is a new maximum position
 0573           
 0573           ; Find out the next position
 0573           .CheckNextSensor:
 0573 75           inc X
 0574 75           inc X
 0575 5B           mov A, X
 0576 3A06         cmp A, [CSD_bEndOfArray] ; Check for the end of the array
 0578 CFC0         jc .IdentifyCtrd
 057A AFBE         jz .IdentifyCtrd
 057C           
 057C           ;---------Centroid calculation---------
 057C           
 057C              ;if there is no finger touch then return FFFFh
 057C 511F         mov A, [CSD_bBiggestCtrdSize]
 057E B02A         jnz .FillCentroidArray
 0580           
 0580 511E         mov A, [CSD_bBiggestCtrdStartPos]
 0582 B026         jnz .FillCentroidArray
 0584           
 0584              ;There was no finger present: return FFFFh value through X, A
 0584              ;and save the same in CSD_waSliderCurrPos
 0584 581D         mov X, [CSD_bCurCtrdSize]
 0586           
 0586              ;Copy CSD_waSliderCurrPos to CSD_waSliderPrevPos
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0586 62D304          mov reg[IDX_PP], >CSD_waSliderCurrPos
                   ENDIF
 0589 5204         mov A, [X + CSD_waSliderCurrPos]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 058B 62D302          mov reg[IDX_PP], >CSD_waSliderPrevPos
                   ENDIF
 058E 5402         mov [X + CSD_waSliderPrevPos], A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0590 62D304          mov reg[IDX_PP], >CSD_waSliderCurrPos
                   ENDIF
 0593 5205         mov A, [X + CSD_waSliderCurrPos + 1]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0595 62D302          mov reg[IDX_PP], >CSD_waSliderPrevPos
                   ENDIF
 0598 5403         mov [X + CSD_waSliderPrevPos + 1], A
 059A           
 059A              ;set CSD_waSliderCurrPos to FFFFh
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 059A 62D304          mov reg[IDX_PP], >CSD_waSliderCurrPos
                   ENDIF
 059D 5604FF       mov [X + CSD_waSliderCurrPos], FFh
 05A0 5605FF       mov [X + CSD_waSliderCurrPos + 1], FFh
 05A3           
 05A3           .SetResultToFFFFh:
 05A3 50FF         mov A, FFh
 05A5 57FF         mov X, FFh
 05A7 808D         jmp .Done
 05A9           
 05A9           .FillCentroidArray:
 05A9              ;There was a finger present
 05A9              ;Fill waCentroid array with elements : centroid and its left and right adjacent values
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 05A9 62D310          mov reg[IDX_PP], >CSD_waSnsDiff
                   ENDIF
                
                   ;waCentroid[3] - array of three values: left adjacent, centroid, right adjacent
                   ;waCentroid + 0  MSB of left adjacent
                   ;waCentroid + 1  LSB of left adjacent
                   ;waCentroid + 2  MSB of centroid
                   ;waCentroid + 3  LSB of centroid
                   ;waCentroid + 4  MSB of right adjacent
                   ;waCentroid + 5  LSB of right adjacent
                
                   ;1) left adjacent
 05AC 5108         mov A, [CSD_bCurPos]
 05AE 3A0A         cmp A, [CSD_bStartIndex]
 05B0 B005         jnz .CentriodIsNotInFirstPos
 05B2           
 05B2              ;Centroid is at first position
 05B2 5806         mov X, [CSD_bEndOfArray] ;left adjacent(i-1)
 05B4 8005         jmp .CopyingLeft
 05B6           
 05B6           .CentriodIsNotInFirstPos:
 05B6 5808         mov X, [CSD_bCurPos] ;left adjacent(i-1)
 05B8 79           dec X
 05B9 79           dec X
 05BA           
 05BA           .CopyingLeft:
 05BA 5211         mov A, [X + CSD_waSnsDiff + LSB]
 05BC 5329         mov [CSD_waCentroid + 1], A
 05BE 5210         mov A, [X + CSD_waSnsDiff + MSB]
 05C0 5328         mov [CSD_waCentroid + 0], A
 05C2           
 05C2              ;2) Maximum
 05C2 5808         mov X, [CSD_bCurPos] ;maximum(i)
 05C4           
 05C4           .CopyingMaximum:
 05C4 5211         mov A, [X + CSD_waSnsDiff + LSB]
 05C6 532B         mov [CSD_waCentroid + 3], A
 05C8 5210         mov A, [X + CSD_waSnsDiff + MSB]
 05CA 532A         mov [CSD_waCentroid + 2], A
 05CC           
 05CC              ;3) right adjacent
 05CC 5108         mov A, [CSD_bCurPos]
 05CE 3A06         cmp A, [CSD_bEndOfArray]
 05D0 B005         jnz .CentriodIsNotInLastPos
 05D2           
 05D2              ;Centroid is at last position
 05D2 580A         mov X, [CSD_bStartIndex] ;right adjacent(i+1)
 05D4 8005         jmp .CopyingRight
 05D6           
 05D6           .CentriodIsNotInLastPos:
 05D6 5808         mov X, [CSD_bCurPos] ;right adjacent(i+1)
 05D8 75           inc X
 05D9 75           inc X
 05DA           
 05DA           .CopyingRight:
 05DA 5211         mov A, [X + CSD_waSnsDiff + LSB]
 05DC 532D         mov [CSD_waCentroid + 5], A
 05DE 5210         mov A, [X + CSD_waSnsDiff + MSB]
 05E0 532C         mov [CSD_waCentroid + 4], A
 05E2           
 05E2 5100         mov A, [CSD_bNoiseThreshold]
 05E4           .SubstractNoise0:
 05E4 1429         sub [CSD_waCentroid + 1], A
 05E6 1E2800       sbb [CSD_waCentroid + 0], 0
 05E9 D007         jnc .SubstractNoise1
 05EB           
 05EB 552900       mov [CSD_waCentroid + 1], 0
 05EE 552800       mov [CSD_waCentroid + 0], 0
 05F1           
 05F1           .SubstractNoise1:
 05F1 142B         sub [CSD_waCentroid + 3], A
 05F3 1E2A00       sbb [CSD_waCentroid + 2], 0
 05F6 D007         jnc .SubstractNoise2
 05F8           
 05F8 552B00       mov [CSD_waCentroid + 3], 0
 05FB 552A00       mov [CSD_waCentroid + 2], 0
 05FE           
 05FE           .SubstractNoise2:
 05FE 142D         sub [CSD_waCentroid + 5], A
 0600 1E2C00       sbb [CSD_waCentroid + 4], 0
 0603 D007         jnc .RestoreX
 0605           
 0605 552D00       mov [CSD_waCentroid + 5], 0
 0608 552C00       mov [CSD_waCentroid + 4], 0
 060B           
 060B           .RestoreX:
 060B 5808         mov X, [CSD_bCurPos]
 060D           
 060D 902B         call CalcCentroid
 060F              ;result is now in dMultTempY variable
 060F           
 060F 581D         mov X, [CSD_bCurCtrdSize]
 0611           
 0611              ;there was finger presence before (during last function call)
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0611 62D304          mov reg[IDX_PP], >CSD_waSliderCurrPos
                   ENDIF
 0614 5204         mov A, [X + CSD_waSliderCurrPos]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0616 62D302          mov reg[IDX_PP], >CSD_waSliderPrevPos
                   ENDIF
 0619 5402         mov [X + CSD_waSliderPrevPos], A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 061B 62D304          mov reg[IDX_PP], >CSD_waSliderCurrPos
                   ENDIF
 061E 5205         mov A, [X + CSD_waSliderCurrPos + 1]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0620 62D302          mov reg[IDX_PP], >CSD_waSliderPrevPos
                   ENDIF
 0623 5403         mov [X + CSD_waSliderPrevPos + 1], A
 0625           
 0625 5117         mov A, [CSD_dMultTempY + 0];MSB of result
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0627 62D304          mov reg[IDX_PP], >CSD_waSliderCurrPos
                   ENDIF
 062A 5404         mov [X + CSD_waSliderCurrPos], A
 062C           
 062C 5118         mov A, [CSD_dMultTempY + 1];LSB of result
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 062E 62D304          mov reg[IDX_PP], >CSD_waSliderCurrPos
                   ENDIF
 0631 5405         mov [X + CSD_waSliderCurrPos + 1], A
 0633           
 0633 5817         mov X, [CSD_dMultTempY + 0]
 0635           
 0635           .Done:
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0635 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0637 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0639 7F           ret
 063A           .ENDSECTION
 063A           
 063A           .SECTION
 063A           ;-----------------------------------------------------------------------------
 063A           ;  FUNCTION NAME: void CalcCentroid(WORD result)
 063A           ;  DESCRIPTION:
 063A           ;    Calculates touch position using centroid algorithm basing on 3 signals
 063A           ;    (local maximum and adjacent)
 063A           ;-----------------------------------------------------------------------------
 063A           ;  ARGUMENTS:
 063A           ;    None, signal values are taken from waCentroid global array
 063A           ;  RETURNS:
 063A           ;   calculated touch position
 063A           ;-----------------------------------------------------------------------------
 063A            CalcCentroid:
 063A           _CalcCentroid:
 063A              ;Zeroing
 063A 5000         mov   A, 0
 063C 5313         mov   [CSD_dMultTempX + 0], A
 063E 5314         mov   [CSD_dMultTempX + 1], A
 0640 5316         mov   [CSD_dMultTempX + 3], A
 0642 530D         mov   [CSD_wDenom + 0], A
 0644           
 0644              ;---calculate denominator: (i- 1 ) + i + (i+1)
 0644 5129         mov   A, [CSD_waCentroid + 1]                 ;LSB(i-1)
 0646 022B         add   A, [CSD_waCentroid + 3]                 ;add LSB(i)
 0648 0E0D00       adc   [CSD_wDenom + 0], 0                     ;save carry
 064B 022D         add   A, [CSD_waCentroid + 5]                 ;add LSB(i + 1)
 064D 0E0D00       adc   [CSD_wDenom + 0], 0                     ;save carry
 0650 530E         mov   [CSD_wDenom + 1], A                     ;save result
 0652           
 0652 5128         mov   A, [CSD_waCentroid + 0]                 ;MSB(i-1)
 0654 022A         add   A, [CSD_waCentroid + 2]                 ;add MSB(i)
 0656 022C         add   A, [CSD_waCentroid + 4]                 ;add MSB(i + 1)
 0658 040D         add   [CSD_wDenom + 0], A                     ;save result
 065A           
 065A              ;----- calculate numerator (i+1) - (i-1)
 065A 512D         mov   A, [CSD_waCentroid + 5]                 ;LSB(i+1)
 065C 1229         sub   A, [CSD_waCentroid + 1]                 ;sub LSB(i-1)
 065E 1E1400       sbb   [CSD_dMultTempX + 1], 0                 ;save borrow
 0661 5315         mov   [CSD_dMultTempX + 2], A                 ;save result
 0663           
 0663 512C         mov   A, [CSD_waCentroid + 4]                 ;MSB(i+1)
 0665 1228         sub   A, [CSD_waCentroid + 0]                 ;sub MSB(i-1)
 0667 0414         add   [CSD_dMultTempX + 1], A                 ;save result
 0669           
 0669 901B         call  CSD_div_24_16_24                        ; calculate Sum(Si*i)/Sum(Si)
 066B 5B           mov   A, X
 066C 120A         sub   A, [CSD_bStartIndex]
 066E 67           asr   A
 066F 0415         add   [CSD_dMultTempX + 2], A                 ;
 0671           
 0671 471580       tst   [CSD_dMultTempX + 2], 80h
 0674 A009         jz .Mult
 0676           
 0676 5106         mov   A, [CSD_bEndOfArray]
 0678 120A         sub   A, [CSD_bStartIndex]
 067A 67           asr   A
 067B 74           inc   A
 067C 0415         add   [CSD_dMultTempX + 2], A                 ;
 067E           
 067E           .Mult:
 067E 906C         call  CSD_mul_16x16_32                       ; dMultTempY contains calculated coordinate (two MSB)
 0680           
 0680 5117         mov    A, [CSD_dMultTempY]                    ; Returns result through X an d A
 0682 5C           mov    X, A
 0683 5118         mov    A, [CSD_dMultTempY+1]
 0685           
 0685 7F           ret
 0686           .ENDSECTION
 0686           
 0686           .SECTION
 0686           ;-----------------------------------------------------------------------------
 0686           ;  FUNCTION NAME: CSD_div_24_16_24
 0686           ;  DESCRIPTION:
 0686           ;  Applies 24-bit signed result of 24-bit signed operands division
 0686           ;-----------------------------------------------------------------------------
 0686           ;  ARGUMENTS:
 0686           ;   (MSB)[dMultTempX+1][dMultTempX+2][dMultTempX+3](LSB) - first 24-bit signed operand of division
 0686           ;                                    (dividend)
 0686           ;   (MSB)[wDenom][wDenom+1](LSB) - second 16-bit unsigned operand of division
 0686           ;                                     (divisor)
 0686           ;  RETURNS:   (MSB)[dMultTempX+1][dMultTempX+2][dMultTempX+3](LSB) - 24-bit signed operand of division
 0686           ;                                    (dividend)
 0686           ;-----------------------------------------------------------------------------
 0686            CSD_div_24_16_24:
 0686           _CSD_div_24_16_24:
 0686 50FF          mov   A,0xFF
 0688 3C1480        cmp   [CSD_dMultTempX + 1],0x80
 068B C011          jc    .L1                         ;check sign of operand 1
 068D 3416          xor   [CSD_dMultTempX + 3],A            ;unsigned convertation of operand 1 (inversion + 1)
 068F 7616          inc   [CSD_dMultTempX + 3]
 0691 3415          xor   [CSD_dMultTempX + 2],A
 0693 0E1500        adc   [CSD_dMultTempX + 2],0x00
 0696 3414          xor   [CSD_dMultTempX + 1],A
 0698 0E1400        adc   [CSD_dMultTempX + 1],0x00
 069B 5313          mov   [CSD_dMultTempX + 0], A
 069D           
 069D           .L1:
 069D 5000          mov   A,0x00
 069F 5317          mov   [CSD_dMultTempY + 0],A  ;additional temporary memory for calculations
 06A1 5318          mov   [CSD_dMultTempY + 1],A
 06A3 5319          mov   [CSD_dMultTempY + 2],A
 06A5 531A          mov   [CSD_dMultTempY + 3],A
 06A7           
 06A7 552218        mov   [CSD_bCurPkPos], 24          ;amount of cycles divider procedure
 06AA           
 06AA                   ;Begin of divider procedure
 06AA           j4_1:
 06AA 6516          asl   [CSD_dMultTempX + 3]
 06AC 6B15          rlc   [CSD_dMultTempX + 2]
 06AE 6B14          rlc   [CSD_dMultTempX + 1]
 06B0           
 06B0 6B1A          rlc   [CSD_dMultTempY + 3]
 06B2 6B19          rlc   [CSD_dMultTempY + 2]
 06B4 6B18          rlc   [CSD_dMultTempY + 1]
 06B6           
 06B6 511A          mov   A,[CSD_dMultTempY + 3]
 06B8 1A0E          sbb   A,[CSD_wDenom + 1]
 06BA 5119          mov   A,[CSD_dMultTempY + 2]
 06BC 1A0D          sbb   A,[CSD_wDenom + 0]
 06BE 5118          mov   A,[CSD_dMultTempY + 1]
 06C0 1900          sbb   A, 0
 06C2 C00D          jc    j4_2
 06C4 5318          mov   [CSD_dMultTempY + 1],A
 06C6 510E          mov   A,[CSD_wDenom + 1]
 06C8 141A          sub   [CSD_dMultTempY + 3],A
 06CA 510D          mov   A,[CSD_wDenom + 0]
 06CC 1C19          sbb   [CSD_dMultTempY + 2],A
 06CE 7616          inc   [CSD_dMultTempX + 3]
 06D0           j4_2:
 06D0 7A22          dec   [CSD_bCurPkPos]
 06D2 BFD7          jnz   j4_1
 06D4           
 06D4               ;End of divider procedure
 06D4 50FF          mov    A, 0xFF
 06D6 3C1380        cmp   [CSD_dMultTempX + 0],0x80
 06D9 C011          jc    .L2                         ;check sign of result
 06DB 3416          xor   [CSD_dMultTempX + 3],A            ;unsigned convertation of operand 1
 06DD 7616          inc   [CSD_dMultTempX + 3]
 06DF 3415          xor   [CSD_dMultTempX + 2],A
 06E1 0E1500        adc   [CSD_dMultTempX + 2],0x00
 06E4 3414          xor   [CSD_dMultTempX + 1],A
 06E6 0E1400        adc   [CSD_dMultTempX + 1],0x00
 06E9 3413          xor   [CSD_dMultTempX + 0],A
 06EB           .L2:
 06EB           
 06EB 7F            ret
 06EC           .ENDSECTION
 06EC           
 06EC           .SECTION
 06EC           ;-----------------------------------------------------------------------------
 06EC           ;  FRAGMENT NAME: CSD_mul_16x16_32
 06EC           ;  DESCRIPTION:
 06EC           ;      Ancillary fragment for integer fastcall16 functions. Applies 32-bit
 06EC           ;      unsigned result of two 16-bit unsigned operands multiplication
 06EC           ;-----------------------------------------------------------------------------
 06EC           ;  ARGUMENTS:
 06EC           ;      (MSB)[dMultTempX+2][dMultTempX+3](LSB) - 16-bit unsigned multiplier (first operand)
 06EC           ;     wCurPkValue - 16-bit unsigned multiplicand (second operand)
 06EC           ;  RETURNS:
 06EC           ;      (MSB)[dMultTempY][dMultTempY+1][wCurPkValue + 0][wCurPkValue + 1](LSB) - 32-bit unsigned multiplication result
 06EC           ;-----------------------------------------------------------------------------
 06EC            CSD_mul_16x16_32:
 06EC           _CSD_mul_16x16_32:
 06EC 5000          mov   A,0x00
 06EE 5317          mov   [CSD_dMultTempY + 0],A                 ; clear LSB of result
 06F0 5318          mov   [CSD_dMultTempY + 1],A               ; clear MSB of result
 06F2           
 06F2 0110          add   A,0x10                   ;clear CARRY-bit and
 06F4 5322          mov   [CSD_bCurPkPos],A                 ;init loop counter
 06F6           
 06F6           .jLab2:
 06F6 472101        tst   [CSD_wCurPkValue + 1],0x01
 06F9 A009          jz    .jLab1
 06FB 5116          mov   A,[CSD_dMultTempX+3]               ;if [wTmp2+LSB].0=1 then result+=first operand
 06FD 0418          add   [CSD_dMultTempY+1],A
 06FF 5115          mov   A,[CSD_dMultTempX+2]
 0701 0C17          adc   [CSD_dMultTempY],A
 0703           .jLab1:
 0703 6E17          rrc   [CSD_dMultTempY]                 ; 1-bit right shift of second operand
 0705 6E18          rrc   [CSD_dMultTempY+1]
 0707 6E20          rrc   [CSD_wCurPkValue + 0]               ; 1-bit left shift of first operand
 0709 6E21          rrc   [CSD_wCurPkValue + 1]
 070B 7A22          dec   [CSD_bCurPkPos]               ; decrement loop counter
 070D BFE8          jnz   .jLab2
 070F           
 070F 7F            ret
 0710           .ENDSECTION
 0710           
                ENDIF
