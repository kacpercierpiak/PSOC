FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C21x34 microcontroller devices.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0068) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0069) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0070) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0071) ; bytes on the stack which are otherwise required for the return address. If
                                        (0072) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0073) ; release, the C compiler automatically places an infinite loop at the end
                                        (0074) ; of main, rather than a return instruction.)
                                        (0075) ;
                                        (0076) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0077) 
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ; Interrupt Vector Table
                                        (0081) ;-----------------------------------------------------------------------------
                                        (0082) ;
                                        (0083) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0084) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0085) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0086) ; vector jump targets are modified automatically according to the user
                                        (0087) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0088) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0089) ; configuration files. If you need to hard code a vector, update the
                                        (0090) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0091) ; of this file.
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) 
                                        (0094)     AREA TOP (ROM, ABS, CON)
                                        (0095) 
                                        (0096)     org   0                        ;Reset Interrupt Vector
                                        (0097) IF	(TOOLCHAIN & HITECH)
                                        (0098) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0099) ELSE
0000: 80 67    JMP   0x0068             (0100)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0101) ENDIF
                                        (0102)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0103)     ;---------------------------------------------------
                                        (0104)     ; Insert your custom code below this banner
                                        (0105)     ;---------------------------------------------------
                                        (0106) 
                                        (0107)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0108)     halt                           ;Stop execution if power falls too low
                                        (0109) 
                                        (0110)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0111)     // call	void_handler
0008: 7E       RETI                     (0112)     reti
                                        (0113) 
                                        (0114)     org   0Ch                      ;Analog Column 1 Interrupt Vector
000C: 7D 04 36 LJMP  _ADC10_ADC_ISR     (0115)     ljmp	_ADC10_ADC_ISR
000F: 7E       RETI                     (0116)     reti
                                        (0117) 
                                        (0118)     org   18h                      ;VC3 Interrupt Vector
                                        (0119)     // call	void_handler
0018: 7E       RETI                     (0120)     reti
                                        (0121) 
                                        (0122)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0123)     // call	void_handler
001C: 7E       RETI                     (0124)     reti
                                        (0125) 
                                        (0126)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 04 69 LJMP  _ADC10_CNT_ISR     (0127)     ljmp	_ADC10_CNT_ISR
0023: 7E       RETI                     (0128)     reti
                                        (0129) 
                                        (0130)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0131)     // call	void_handler
0024: 7E       RETI                     (0132)     reti
                                        (0133) 
                                        (0134)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0135)     // call	void_handler
0028: 7E       RETI                     (0136)     reti
                                        (0137) 
                                        (0138)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0139)     // call	void_handler
002C: 7E       RETI                     (0140)     reti
                                        (0141) 
                                        (0142)     org   60h                      ;PSoC I2C Interrupt Vector
0060: 7D 03 53 LJMP  _EzI2Cs_ISR        (0143)     ljmp	_EzI2Cs_ISR
0063: 7E       RETI                     (0144)     reti
                                        (0145) 
                                        (0146)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0147)     // call	void_handler
0064: 7E       RETI                     (0148)     reti
0068: 71 10    OR    F,0x10             
                                        (0149)     ;---------------------------------------------------
                                        (0150)     ; Insert your custom code above this banner
                                        (0151)     ;---------------------------------------------------
                                        (0152)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0153) 
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  Start of Execution.
                                        (0156) ;-----------------------------------------------------------------------------
                                        (0157) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0158) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0159) ;
                                        (0160) 
                                        (0161) IF	(TOOLCHAIN & HITECH)
                                        (0162)  	AREA PD_startup(CODE, REL, CON)
                                        (0163) ELSE
                                        (0164)     org 68h
                                        (0165) ENDIF
                                        (0166) __Start:
                                        (0167) 
                                        (0168)     ; initialize SMP values for voltage stabilization, if required,
                                        (0169)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0170)     ; least for now. 
                                        (0171)     ;
                                        (0172)     M8C_SetBank1
006A: 62 E3 83 MOV   REG[0xE3],0x83     (0173)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0174)     M8C_SetBank0
                                        (0175) 
                                        (0176) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0177) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0178)     M8C_EnableWatchDog
                                        (0179) ENDIF
                                        (0180) 
0072: 41 FE FB AND   REG[0xFE],0xFB     (0181)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0182) 
                                        (0183)     ;---------------------------
                                        (0184)     ; Set up the Temporary stack
                                        (0185)     ;---------------------------
                                        (0186)     ; A temporary stack is set up for the SSC instructions.
                                        (0187)     ; The real stack start will be assigned later.
                                        (0188)     ;
                                        (0189) _stack_start:          equ 80h
0075: 50 80    MOV   A,0x80             (0190)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0191)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
007B: 5D D0    MOV   A,REG[0xD0]        
007D: 08       PUSH  A                  
007E: 62 D0 00 MOV   REG[0xD0],0x0      
0081: 55 FA 01 MOV   [LEDControl_RT+220],0x1
0084: 4F       MOV   X,SP               
0085: 5B       MOV   A,X                
0086: 01 03    ADD   A,0x3              
0088: 53 F9    MOV   [LEDControl_RT+219],A
008A: 55 F8 3A MOV   [LEDControl_RT+218],0x3A
008D: 50 06    MOV   A,0x6              
008F: 00       SWI                      
0090: 71 10    OR    F,0x10             
0092: 51 F9    MOV   A,[LEDControl_RT+219]
0094: 60 E8    MOV   REG[0xE8],A        
0096: 51 F8    MOV   A,[LEDControl_RT+218]
0098: 60 EA    MOV   REG[0xEA],A        
009A: 70 EF    AND   F,0xEF             
009C: 18       POP   A                  
009D: 60 D0    MOV   REG[0xD0],A        
                                        (0192) 
                                        (0193)     ;------------------------
                                        (0194)     ; Set Power-related Trim 
                                        (0195)     ;------------------------
                                        (0196)     
                                        (0197) M8C_ClearWDTAndSleep
                                        (0198) 
                                        (0199) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0200)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0201)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0202)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V
                                        (0203)  ENDIF
                                        (0204) ENDIF ; 5.0 V Operation
                                        (0205) 
                                        (0206) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0207)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0208)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0209)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V
                                        (0210)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0211)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V
                                        (0212)  ENDIF
                                        (0213) ENDIF ; 3.3 Volt Operation
                                        (0214) 
                                        (0215) IF ( POWER_SETTING & POWER_SET_2V7_12MHZ)      ; *** 2.7 Volts / 12MHZ operation ***
                                        (0216)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0217)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_12MHZ, SSCTBL2_TRIM_BGR_2V
                                        (0218) ENDIF ; *** 2.7 Volts / 12MHZ operation ***
                                        (0219) 
                                        (0220) IF ( POWER_SETTING & POWER_SET_2V7_6MHZ)       ; *** 2.7 Volts /  6MHZ operation ***
                                        (0221)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0222)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_6MHZ,  SSCTBL2_TRIM_BGR_2V
                                        (0223) ENDIF ; *** 2.7 Volts /  6MHZ operation ***
                                        (0224) 
009F: 55 F8 00 MOV   [LEDControl_RT+218],0x0(0225)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
00A2: 55 F9 00 MOV   [LEDControl_RT+219],0x0(0226)     mov  [bSSC_KEYSP], 0
00A5: 71 10    OR    F,0x10             
                                        (0227) 
                                        (0228)     ;---------------------------------------
                                        (0229)     ; Initialize Crystal Oscillator and PLL
                                        (0230)     ;---------------------------------------
                                        (0231) IF ( POWER_SETTING & POWER_SET_2V7)       ; *** 2.7 Volts  ***
                                        (0232)     M8C_SetBank1
                                        (0233)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_3MHz)
                                        (0234)     M8C_SetBank0
                                        (0235)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0236) 
                                        (0237) ELSE 	 ;*** all other voltages OK for 12Mhz ***
                                        (0238)     M8C_SetBank1
00A7: 62 E0 02 MOV   REG[0xE0],0x2      (0239)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
00AA: 70 EF    AND   F,0xEF             
00AC: 62 E3 38 MOV   REG[0xE3],0x38     
00AF: 62 D1 01 MOV   REG[0xD1],0x1      
                                        (0240)     M8C_SetBank0
                                        (0241)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0242) 
                                        (0243) ENDIF
                                        (0244) 
                                        (0245) 	;-------------------------------------------------------
                                        (0246)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0247)     ;-------------------------------------------------------
                                        (0248) 
                                        (0249)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0250) 
                                        (0251) IF (SYSCLK_SOURCE)
                                        (0252)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0253) ENDIF
                                        (0254)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0255) 
                                        (0256) IF	(TOOLCHAIN & HITECH)
                                        (0257)     ;---------------------------------------------
                                        (0258)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0259)     ;---------------------------------------------
                                        (0260) 	global		__Lstackps
                                        (0261) 	mov     a,low __Lstackps
                                        (0262) 	swap    a,sp
                                        (0263) 
                                        (0264) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0265)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0266)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0267)     RAM_SETPAGE_CUR 0
                                        (0268)     RAM_SETPAGE_MVW 0
                                        (0269)     RAM_SETPAGE_MVR 0
                                        (0270)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0271)       or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0272)     ELSE
                                        (0273)       or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0274)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0275) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0276) ELSE
                                        (0277)     ;---------------------------------------------
                                        (0278)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0279)     ;---------------------------------------------
                                        (0280) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0281)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00B2: 50 00    MOV   A,0x0              (0282)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00B4: 4E       SWAP  SP,A               (0283)     swap  A, SP
00B5: 62 D3 01 MOV   REG[0xD3],0x1      
00B8: 62 D0 00 MOV   REG[0xD0],0x0      
00BB: 62 D5 00 MOV   REG[0xD5],0x0      
00BE: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0284)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0285)     RAM_SETPAGE_CUR 0
                                        (0286)     RAM_SETPAGE_MVW 0
                                        (0287)     RAM_SETPAGE_MVR 0
                                        (0288) 
                                        (0289)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00C1: 71 C0    OR    F,0xC0             (0290)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0291)   ELSE
                                        (0292)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0293)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0294) ELSE
                                        (0295)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0296)     swap  SP, A
                                        (0297) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0298) ENDIF ;	TOOLCHAIN
                                        (0299) 
                                        (0300)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0301)     ;---------------------------------------------------
                                        (0302)     ; Insert your custom code below this banner
                                        (0303)     ;---------------------------------------------------
                                        (0304) 
                                        (0305)     ;---------------------------------------------------
                                        (0306)     ; Insert your custom code above this banner
                                        (0307)     ;---------------------------------------------------
                                        (0308)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0309) 
                                        (0310)     ;-------------------------
                                        (0311)     ; Load Base Configuration
                                        (0312)     ;-------------------------
                                        (0313)     ; Load global parameter settings and load the user modules in the
                                        (0314)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0315)     ; to minimize start up time; (2) We may still need to play with the
                                        (0316)     ; Sleep Timer.
                                        (0317)     ;
00C3: 7C 02 37 LCALL 0x0237             (0318)     lcall LoadConfigInit
                                        (0319) 
                                        (0320)     ;-----------------------------------
                                        (0321)     ; Initialize C Run-Time Environment
                                        (0322)     ;-----------------------------------
                                        (0323) IF ( C_LANGUAGE_SUPPORT )
                                        (0324) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0325)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0326)     mov  [__r0],<__bss_start
                                        (0327) BssLoop:
                                        (0328)     cmp  [__r0],<__bss_end
                                        (0329)     jz   BssDone
                                        (0330)     mvi  [__r0],A
                                        (0331)     jmp  BssLoop
                                        (0332) BssDone:
                                        (0333)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0334)     mov  X,<__idata_start
                                        (0335)     mov  [__r0],<__data_start
                                        (0336) IDataLoop:
                                        (0337)     cmp  [__r0],<__data_end
                                        (0338)     jz   C_RTE_Done
                                        (0339)     push A
                                        (0340)     romx
                                        (0341)     mvi  [__r0],A
                                        (0342)     pop  A
                                        (0343)     inc  X
                                        (0344)     adc  A,0
                                        (0345)     jmp  IDataLoop
                                        (0346) 
                                        (0347) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0348) 
                                        (0349) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00C6: 62 D0 00 MOV   REG[0xD0],0x0      (0350)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0351)                                        ; to use the Virtual Register page.
                                        (0352) 
                                        (0353)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0354)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0355)     ; text segment and may have been relocated by the Code Compressor.
                                        (0356)     ;
00C9: 50 01    MOV   A,0x1              (0357)     mov   A, >__pXIData                ; Get the address of the flash
00CB: 57 B0    MOV   X,0xB0             (0358)     mov   X, <__pXIData                ;   pointer to the xidata area.
00CD: 08       PUSH  A                  (0359)     push  A
00CE: 28       ROMX                     (0360)     romx                               ; get the MSB of xidata's address
00CF: 53 11    MOV   [__r0],A           (0361)     mov   [__r0], A
00D1: 18       POP   A                  (0362)     pop   A
00D2: 75       INC   X                  (0363)     inc   X
00D3: 09 00    ADC   A,0x0              (0364)     adc   A, 0
00D5: 28       ROMX                     (0365)     romx                               ; get the LSB of xidata's address
00D6: 4B       SWAP  A,X                (0366)     swap  A, X
00D7: 51 11    MOV   A,[__r0]           (0367)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0368)                                        ;   XIData structure list in flash
00D9: 80 04    JMP   0x00DE             (0369)     jmp   .AccessStruct
                                        (0370) 
                                        (0371)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0372)     ; values of C variables. Each structure contains 3 member elements.
                                        (0373)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0374)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0375)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0376)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0377)     ; value in the second member element, an unsigned byte:
                                        (0378)     ; (1) If the value of the second element is non-zero, it represents
                                        (0379)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0380)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0381)     ; the bytes are copied to the block of RAM.
                                        (0382)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0383)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0384)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0385) 
                                        (0386) .AccessNextStructLoop:
00DB: 75       INC   X                  (0387)     inc   X                            ; pXIData++
00DC: 09 00    ADC   A,0x0              (0388)     adc   A, 0
00DE: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0389) .AccessStruct:                         ; Entry point for first block
                                        (0390)     ;
                                        (0391)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0392)     ;
                                        (0393)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00E1: 08       PUSH  A                  (0394)     push  A
00E2: 28       ROMX                     (0395)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00E3: 60 D5    MOV   REG[0xD5],A        (0396)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00E5: 74       INC   A                  (0397)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00E6: A0 4B    JZ    0x0132             (0398)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00E8: 18       POP   A                  (0399)     pop   A                            ; restore pXIData to [A,X]
00E9: 75       INC   X                  (0400)     inc   X                            ; pXIData++
00EA: 09 00    ADC   A,0x0              (0401)     adc   A, 0
00EC: 08       PUSH  A                  (0402)     push  A
00ED: 28       ROMX                     (0403)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00EE: 53 11    MOV   [__r0],A           (0404)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00F0: 18       POP   A                  (0405)     pop   A                            ; restore pXIData to [A,X]
00F1: 75       INC   X                  (0406)     inc   X                            ; pXIData++ (point to size)
00F2: 09 00    ADC   A,0x0              (0407)     adc   A, 0
00F4: 08       PUSH  A                  (0408)     push  A
00F5: 28       ROMX                     (0409)     romx                               ; Get the size (CPU.A <- *pXIData)
00F6: A0 1C    JZ    0x0113             (0410)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00F8: 53 10    MOV   [__r1],A           (0411)     mov   [__r1], A                    ;             else downcount in __r1
00FA: 18       POP   A                  (0412)     pop   A                            ; restore pXIData to [A,X]
                                        (0413) 
                                        (0414) .CopyNextByteLoop:
                                        (0415)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0416)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0417)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0418)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0419)     ;
00FB: 75       INC   X                  (0420)     inc   X                            ; pXIData++ (point to next data byte)
00FC: 09 00    ADC   A,0x0              (0421)     adc   A, 0
00FE: 08       PUSH  A                  (0422)     push  A
00FF: 28       ROMX                     (0423)     romx                               ; Get the data value (CPU.A <- *pXIData)
0100: 3F 11    MVI   [__r0],A           (0424)     mvi   [__r0], A                    ; Transfer the data to RAM
0102: 47 11 FF TST   [__r0],0xFF        (0425)     tst   [__r0], 0xff                 ; Check for page crossing
0105: B0 06    JNZ   0x010C             (0426)     jnz   .CopyLoopTail                ;   No crossing, keep going
0107: 5D D5    MOV   A,REG[0xD5]        (0427)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0109: 74       INC   A                  (0428)     inc   A
010A: 60 D5    MOV   REG[0xD5],A        (0429)     mov   reg[ MVW_PP], A
                                        (0430) .CopyLoopTail:
010C: 18       POP   A                  (0431)     pop   A                            ; restore pXIData to [A,X]
010D: 7A 10    DEC   [__r1]             (0432)     dec   [__r1]                       ; End of this array in flash?
010F: BF EB    JNZ   0x00FB             (0433)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0111: 8F C9    JMP   0x00DB             (0434)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0435) 
                                        (0436) .ClearRAMBlockToZero:
0113: 18       POP   A                  (0437)     pop   A                            ; restore pXIData to [A,X]
0114: 75       INC   X                  (0438)     inc   X                            ; pXIData++ (point to next data byte)
0115: 09 00    ADC   A,0x0              (0439)     adc   A, 0
0117: 08       PUSH  A                  (0440)     push  A
0118: 28       ROMX                     (0441)     romx                               ; Get the run length (CPU.A <- *pXIData)
0119: 53 10    MOV   [__r1],A           (0442)     mov   [__r1], A                    ; Initialize downcounter
011B: 50 00    MOV   A,0x0              (0443)     mov   A, 0                         ; Initialize source data
                                        (0444) 
                                        (0445) .ClearRAMBlockLoop:
                                        (0446)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0447)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0448)     ;
011D: 3F 11    MVI   [__r0],A           (0449)     mvi   [__r0], A                    ; Clear a byte
011F: 47 11 FF TST   [__r0],0xFF        (0450)     tst   [__r0], 0xff                 ; Check for page crossing
0122: B0 08    JNZ   0x012B             (0451)     jnz   .ClearLoopTail               ;   No crossing, keep going
0124: 5D D5    MOV   A,REG[0xD5]        (0452)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0126: 74       INC   A                  (0453)     inc   A
0127: 60 D5    MOV   REG[0xD5],A        (0454)     mov   reg[ MVW_PP], A
0129: 50 00    MOV   A,0x0              (0455)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0456) .ClearLoopTail:
012B: 7A 10    DEC   [__r1]             (0457)     dec   [__r1]                       ; Was this the last byte?
012D: BF EF    JNZ   0x011D             (0458)     jnz   .ClearRAMBlockLoop           ;   No,  continue
012F: 18       POP   A                  (0459)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0130: 8F AA    JMP   0x00DB             (0460)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0461) 
                                        (0462) .C_RTE_WrapUp:
0132: 18       POP   A                  (0463)     pop   A                            ; balance stack
0133: 71 10    OR    F,0x10             
                                        (0464) 
                                        (0465) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0466) 
                                        (0467) C_RTE_Done:
                                        (0468) 
                                        (0469) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0470) 
                                        (0471)     ;-------------------------------
                                        (0472)     ; Voltage Stabilization for SMP
                                        (0473)     ;-------------------------------
                                        (0474) 
                                        (0475) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0476) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0477)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0478)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0479)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0480)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0481)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0482)     M8C_SetBank1
                                        (0483)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0484)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0485)     M8C_SetBank0
                                        (0486)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0487)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0488) .WaitFor2ms:
                                        (0489)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0490)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0491) ENDIF ; SMP is operational
                                        (0492) ENDIF ; 5.0V Operation
                                        (0493) 
                                        (0494)     ;-------------------------------
                                        (0495)     ; Set Power-On Reset (POR) Level
                                        (0496)     ;-------------------------------
                                        (0497)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0498)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0499)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0500)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0501)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0502) 
                                        (0503)     M8C_SetBank1
                                        (0504) 
                                        (0505) IF (POWER_SETTING & POWER_SET_2V7)             ; 2.7V Operation?
                                        (0506)                                                ;  Yes, lowest trip already set
                                        (0507) ELSE                                           ;   No, must adjust POR...
                                        (0508) IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
0135: 43 E3 10 OR    REG[0xE3],0x10     (0509)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, change to midpoint trip
0138: 70 EF    AND   F,0xEF             
                                        (0510) ELSE
                                        (0511) IF (POWER_SETTING & POWER_SET_5V0)             ; 5.0V Operation?
                                        (0512)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)       ; and Slow Mode?
                                        (0513)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, set to midpoint trip
                                        (0514)  ELSE                                          ;    No, fast mode
                                        (0515)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
                                        (0516)     or   reg[VLT_CR], VLT_CR_POR_MID           ;         No, change to midpoint trip
                                        (0517)   ELSE ; 24HMz                                 ;
                                        (0518)     or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
                                        (0519)   ENDIF ; 24MHz
                                        (0520)  ENDIF ; Slow Mode
                                        (0521) ENDIF ; 5.0V Operation
                                        (0522) ENDIF ; 3.3V Operation
                                        (0523) ENDIF ; 2.7V Operation
                                        (0524) 
                                        (0525)     M8C_SetBank0
                                        (0526) 
                                        (0527)     ;----------------------------
                                        (0528)     ; Wrap up and invoke "main"
                                        (0529)     ;----------------------------
                                        (0530) 
                                        (0531)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0532)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0533)     ;
013A: 62 E0 00 MOV   REG[0xE0],0x0      (0534)     mov  reg[INT_MSK0],0
013D: 71 10    OR    F,0x10             
                                        (0535) 
                                        (0536)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0537)     ;
                                        (0538)     M8C_SetBank1
013F: 62 E0 02 MOV   REG[0xE0],0x2      (0539)     mov  reg[OSC_CR0],(SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0142: 70 EF    AND   F,0xEF             
                                        (0540)     M8C_SetBank0
                                        (0541) 
                                        (0542)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0543)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0544)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0545)     ;
0144: 62 E2 00 MOV   REG[0xE2],0x0      (0546)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0547)                                    ; have been set during the boot process.
                                        (0548) IF	(TOOLCHAIN & HITECH)
                                        (0549) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0550) ELSE
                                        (0551) IF ENABLE_LJMP_TO_MAIN
                                        (0552)     ljmp  _main                    ; goto main (no return)
                                        (0553) ELSE
0147: 7C 09 53 LCALL _main              (0554)     lcall _main                    ; call main
                                        (0555) .Exit:
014A: 8F FF    JMP   0x014A             (0556)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0557) ENDIF
                                        (0558) ENDIF ; TOOLCHAIN
                                        (0559) 
                                        (0560)     ;---------------------------------
                                        (0561)     ; Library Access to Global Parms
                                        (0562)     ;---------------------------------
                                        (0563)     ;
                                        (0564)  bGetPowerSetting:
                                        (0565) _bGetPowerSetting:
                                        (0566)     ; Returns value of POWER_SETTING in the A register.
                                        (0567)     ; No inputs. No Side Effects.
                                        (0568)     ;
                                        (0569) IF (POWER_SETTING & POWER_SET_2V7)
                                        (0570)     mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
                                        (0571) ELSE
014C: 50 08    MOV   A,0x8              (0572)     mov   A, POWER_SETTING          ; Supply voltage and internal main osc
                                        (0573) ENDIF
014E: 7F       RET                      (0574)     ret
                                        (0575) 
                                        (0576) IF	(TOOLCHAIN & HITECH)
                                        (0577) ELSE
                                        (0578)     ;---------------------------------
                                        (0579)     ; Order Critical RAM & ROM AREAs
                                        (0580)     ;---------------------------------
                                        (0581)     ;  'TOP' is all that has been defined so far...
                                        (0582) 
                                        (0583)     ;  ROM AREAs for C CONST, static & global items
                                        (0584)     ;
                                        (0585)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0586)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0587) __idata_start:
                                        (0588) 
                                        (0589)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0590) __func_lit_start:
                                        (0591) 
                                        (0592) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0593)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0594)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0595)     ; relocated by the code compressor, but the text area may shrink and
                                        (0596)     ; that moves xidata around.
                                        (0597)     ;
                                        (0598) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0599) ENDIF
                                        (0600) 
                                        (0601)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0602)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0603) 
                                        (0604)     ; CODE segment for general use
                                        (0605)     ;
                                        (0606)     AREA text (ROM, REL, CON)
                                        (0607) __text_start:
                                        (0608) 
                                        (0609)     ; RAM area usage
                                        (0610)     ;
                                        (0611)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0612) __data_start:
                                        (0613) 
                                        (0614)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0615)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0616)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0617) __bss_start:
                                        (0618) ENDIF ; TOOLCHAIN
                                        (0619) ; end of file boot.asm
_ADC10_iCal:
    04E9: 62 D0 00 MOV   REG[0xD0],0x0
    04EC: 4F       MOV   X,SP
    04ED: 50 00    MOV   A,0x0
    04EF: 08       PUSH  A
    04F0: 08       PUSH  A
    04F1: 5D 76    MOV   A,REG[0x76]
    04F3: 08       PUSH  A
    04F4: 5D 60    MOV   A,REG[0x60]
    04F6: 08       PUSH  A
    04F7: 71 10    OR    F,0x10
    04F9: 5D 62    MOV   A,REG[0x62]
    04FB: 70 EF    AND   F,0xEF
    04FD: 08       PUSH  A
    04FE: 90 65    CALL  0x0565
    0500: 71 10    OR    F,0x10
    0502: 62 E6 00 MOV   REG[0xE6],0x0
    0505: 70 EF    AND   F,0xEF
    0507: 56 FB 80 MOV   [X-5],0x80
    050A: 71 10    OR    F,0x10
    050C: 5D E6    MOV   A,REG[0xE6]
    050E: 33 FB    XOR   A,[X-5]
    0510: 60 E6    MOV   REG[0xE6],A
    0512: 70 EF    AND   F,0xEF
    0514: 9F 84    CALL  _ADC10_StartADC
    0516: 47 0C FF TST   [0xC],0xFF
    0519: AF FC    JZ    0x0516
    051B: 51 0A    MOV   A,[0xA]
    051D: 3B FC    CMP   A,[X-4]
    051F: C0 15    JC    0x0535
    0521: B0 1F    JNZ   0x0541
    0523: 51 0B    MOV   A,[0xB]
    0525: 3B FD    CMP   A,[X-3]
    0527: C0 0D    JC    0x0535
    0529: B0 17    JNZ   0x0541
    052B: 51 0B    MOV   A,[0xB]
    052D: 54 01    MOV   [X+1],A
    052F: 51 0A    MOV   A,[0xA]
    0531: 54 00    MOV   [X+0],A
    0533: 80 1B    JMP   0x054F
    0535: 71 10    OR    F,0x10
    0537: 5D E6    MOV   A,REG[0xE6]
    0539: 33 FB    XOR   A,[X-5]
    053B: 60 E6    MOV   REG[0xE6],A
    053D: 70 EF    AND   F,0xEF
    053F: 80 09    JMP   0x0549
    0541: 51 0B    MOV   A,[0xB]
    0543: 54 01    MOV   [X+1],A
    0545: 51 0A    MOV   A,[0xA]
    0547: 54 00    MOV   [X+0],A
    0549: 01 00    ADD   A,0x0
    054B: 6F FB    RRC   [X-5]
    054D: BF BC    JNZ   0x050A
    054F: 9F 6A    CALL  _ADC10_StopADC
    0551: 18       POP   A
    0552: 71 10    OR    F,0x10
    0554: 60 62    MOV   REG[0x62],A
    0556: 70 EF    AND   F,0xEF
    0558: 18       POP   A
    0559: 60 60    MOV   REG[0x60],A
    055B: 18       POP   A
    055C: 60 76    MOV   REG[0x76],A
    055E: 18       POP   A
    055F: 20       POP   X
    0560: 70 3F    AND   F,0x3F
    0562: 71 C0    OR    F,0xC0
    0564: 7F       RET   
    0565: 5D 76    MOV   A,REG[0x76]
    0567: 21 F8    AND   A,0xF8
    0569: 48 FB 10 TST   [X-5],0x10
    056C: B0 06    JNZ   0x0573
    056E: 2B FB    OR    A,[X-5]
    0570: 60 76    MOV   REG[0x76],A
    0572: 7F       RET   
    0573: 29 01    OR    A,0x1
    0575: 60 76    MOV   REG[0x76],A
    0577: 50 76    MOV   A,0x76
    0579: 21 04    AND   A,0x4
    057B: A0 19    JZ    0x0595
    057D: 48 FB 00 TST   [X-5],0x0
    0580: B0 0D    JNZ   0x058E
    0582: 27 FB 0C AND   [X-5],0xC
    0585: 5D 60    MOV   A,REG[0x60]
    0587: 21 F3    AND   A,0xF3
    0589: 2B FB    OR    A,[X-5]
    058B: 60 60    MOV   REG[0x60],A
    058D: 7F       RET   
    058E: 71 10    OR    F,0x10
    0590: 43 62 80 OR    REG[0x62],0x80
    0593: 70 EF    AND   F,0xEF
    0595: 27 FB 03 AND   [X-5],0x3
    0598: 5D 60    MOV   A,REG[0x60]
    059A: 21 FC    AND   A,0xFC
    059C: 2B FB    OR    A,[X-5]
    059E: 60 60    MOV   REG[0x60],A
    05A0: 7F       RET   
FILE: D:\Studia\PSOC\MF_LIGHT\MF_LIGHT\MF_LIGHT\ledcontrol.c
(0001) #include "LEDControl.h"
(0002) #include <m8c.h>        
(0003) #include "PSoCAPI.h"    
(0004) #include <stdlib.h>
(0005) 
(0006) #define Interval 50
(0007) #define IntervalLimit 80
(0008) #define BLUE	1
(0009) #define GREEN	2
(0010) #define RED		3
(0011) 
(0012) 
(0013) 	int LEDControl_RT = 50;
(0014) 	int LEDControl_BT = 50;
(0015) 	int LEDControl_GT = 50;
(0016) void LEDControl_INIT(void)
(0017) {
(0018) 	LED_BLUE_Start();
__UserModules_end|_LEDControl_INIT|__text_start|_LEDControl_INIT:
    05A1: 10       PUSH  X
    05A2: 7C 03 1A LCALL LED_BLUE_Off|_LED_BLUE_Start|LED_BLUE_Start|_LED_BLUE_Stop|LED_BLUE_Stop|_LED_BLUE_Off
(0019) 	LED_GREEN_Start();
    05A5: 7C 02 DD LCALL _LED_GREEN_Off|LED_GREEN_Stop|LED_GREEN_Start|_LED_GREEN_Start|_LED_GREEN_Stop
(0020) 	LED_RED_Start();
    05A8: 7C 02 A0 LCALL _LED_RED_Start|_LED_RED_Off|_LED_RED_Stop|LED_RED_Start|LED_RED_Off|LED_RED_Stop
(0021)     LED_RED_On();
    05AB: 7C 02 9C LCALL _LED_RED_On
    05AE: 20       POP   X
    05AF: 7F       RET   
(0022) }
(0023) void LEDControl_ChangeState(BOOL red,BOOL green,BOOL blue)
(0024) {
_LEDControl_ChangeState:
  blue                 --> X-6
  green                --> X-5
  red                  --> X-4
    05B0: 10       PUSH  X
    05B1: 4F       MOV   X,SP
(0025) 	if (red)
    05B2: 3D FC 00 CMP   [X-4],0x0
    05B5: A0 08    JZ    0x05BE
(0026) 		LED_RED_On();
    05B7: 10       PUSH  X
    05B8: 7C 02 9C LCALL _LED_RED_On
    05BB: 20       POP   X
    05BC: 80 06    JMP   0x05C3
(0027) 	else
(0028) 		LED_RED_Off();
    05BE: 10       PUSH  X
    05BF: 7C 02 A0 LCALL _LED_RED_Start|_LED_RED_Off|_LED_RED_Stop|LED_RED_Start|LED_RED_Off|LED_RED_Stop
    05C2: 20       POP   X
(0029) 	if (green)
    05C3: 3D FB 00 CMP   [X-5],0x0
    05C6: A0 08    JZ    0x05CF
(0030) 		LED_GREEN_On();
    05C8: 10       PUSH  X
    05C9: 7C 02 D9 LCALL _LED_GREEN_On
    05CC: 20       POP   X
    05CD: 80 06    JMP   0x05D4
(0031) 	else
(0032) 		LED_GREEN_Off();
    05CF: 10       PUSH  X
    05D0: 7C 02 DD LCALL _LED_GREEN_Off|LED_GREEN_Stop|LED_GREEN_Start|_LED_GREEN_Start|_LED_GREEN_Stop
    05D3: 20       POP   X
(0033) 	if (blue)
    05D4: 3D FA 00 CMP   [X-6],0x0
    05D7: A0 08    JZ    0x05E0
(0034) 		LED_BLUE_On();
    05D9: 10       PUSH  X
    05DA: 7C 03 16 LCALL _LED_BLUE_On
    05DD: 20       POP   X
    05DE: 80 06    JMP   0x05E5
(0035) 	else
(0036) 		LED_BLUE_Off();
    05E0: 10       PUSH  X
    05E1: 7C 03 1A LCALL LED_BLUE_Off|_LED_BLUE_Start|LED_BLUE_Start|_LED_BLUE_Stop|LED_BLUE_Stop|_LED_BLUE_Off
    05E4: 20       POP   X
    05E5: 20       POP   X
    05E6: 7F       RET   
(0037) }
(0038) BYTE LEDControl_ChangeStateSwitch(BYTE led ,BOOL isASC)
(0039) {
_LEDControl_ChangeStateSwitch:
  isASC                --> X-5
  led                  --> X-4
    05E7: 10       PUSH  X
    05E8: 4F       MOV   X,SP
    05E9: 10       PUSH  X
(0040) 	
(0041) 	switch (led)
    05EA: 3D FC 00 CMP   [X-4],0x0
    05ED: A0 12    JZ    0x0600
    05EF: 3D FC 01 CMP   [X-4],0x1
    05F2: A0 5F    JZ    0x0652
    05F4: 3D FC 02 CMP   [X-4],0x2
    05F7: A0 31    JZ    0x0629
    05F9: 3D FC 03 CMP   [X-4],0x3
    05FC: A0 80    JZ    0x067D
    05FE: 80 A9    JMP   0x06A8
(0042) 				{
(0043) 					case 0:
(0044) 						if(isASC)
    0600: 3D FB 00 CMP   [X-5],0x0
    0603: A0 13    JZ    0x0617
(0045) 						{
(0046) 						LEDControl_ChangeState(TRUE,FALSE,FALSE);	
    0605: 50 00    MOV   A,0x0
    0607: 08       PUSH  A
    0608: 08       PUSH  A
    0609: 50 01    MOV   A,0x1
    060B: 08       PUSH  A
    060C: 9F A2    CALL  _LEDControl_ChangeState
    060E: 38 FD    ADD   SP,0xFD
(0047) 						return RED;
    0610: 62 D0 00 MOV   REG[0xD0],0x0
    0613: 50 03    MOV   A,0x3
    0615: 80 97    JMP   0x06AD
(0048) 						}
(0049) 						else 
(0050) 						{
(0051) 						LEDControl_ChangeState(FALSE,FALSE,TRUE);	
    0617: 50 01    MOV   A,0x1
    0619: 08       PUSH  A
    061A: 50 00    MOV   A,0x0
    061C: 08       PUSH  A
    061D: 08       PUSH  A
    061E: 9F 90    CALL  _LEDControl_ChangeState
    0620: 38 FD    ADD   SP,0xFD
(0052) 						return BLUE;
    0622: 62 D0 00 MOV   REG[0xD0],0x0
    0625: 50 01    MOV   A,0x1
    0627: 80 85    JMP   0x06AD
(0053) 						}
(0054) 						break;
(0055) 					case GREEN:
(0056) 						if(isASC)
    0629: 3D FB 00 CMP   [X-5],0x0
    062C: A0 13    JZ    0x0640
(0057) 						{
(0058) 						LEDControl_ChangeState(FALSE,FALSE,TRUE);			
    062E: 50 01    MOV   A,0x1
    0630: 08       PUSH  A
    0631: 50 00    MOV   A,0x0
    0633: 08       PUSH  A
    0634: 08       PUSH  A
    0635: 9F 79    CALL  _LEDControl_ChangeState
    0637: 38 FD    ADD   SP,0xFD
(0059) 						return BLUE;
    0639: 62 D0 00 MOV   REG[0xD0],0x0
    063C: 50 01    MOV   A,0x1
    063E: 80 6E    JMP   0x06AD
(0060) 						}
(0061) 						else 
(0062) 						{
(0063) 						LEDControl_ChangeState(TRUE,FALSE,FALSE);	
    0640: 50 00    MOV   A,0x0
    0642: 08       PUSH  A
    0643: 08       PUSH  A
    0644: 50 01    MOV   A,0x1
    0646: 08       PUSH  A
    0647: 9F 67    CALL  _LEDControl_ChangeState
    0649: 38 FD    ADD   SP,0xFD
(0064) 						return RED;
    064B: 62 D0 00 MOV   REG[0xD0],0x0
    064E: 50 03    MOV   A,0x3
    0650: 80 5C    JMP   0x06AD
(0065) 						}
(0066) 						break;
(0067) 					case BLUE:
(0068) 						if(isASC)
    0652: 3D FB 00 CMP   [X-5],0x0
    0655: A0 13    JZ    0x0669
(0069) 						{
(0070) 						LEDControl_ChangeState(TRUE,FALSE,FALSE);		
    0657: 50 00    MOV   A,0x0
    0659: 08       PUSH  A
    065A: 08       PUSH  A
    065B: 50 01    MOV   A,0x1
    065D: 08       PUSH  A
    065E: 9F 50    CALL  _LEDControl_ChangeState
    0660: 38 FD    ADD   SP,0xFD
(0071) 						return RED;
    0662: 62 D0 00 MOV   REG[0xD0],0x0
    0665: 50 03    MOV   A,0x3
    0667: 80 45    JMP   0x06AD
(0072) 						}
(0073) 						else 
(0074) 						{
(0075) 						LEDControl_ChangeState(FALSE,TRUE,FALSE);	
    0669: 50 00    MOV   A,0x0
    066B: 08       PUSH  A
    066C: 50 01    MOV   A,0x1
    066E: 08       PUSH  A
    066F: 50 00    MOV   A,0x0
    0671: 08       PUSH  A
    0672: 9F 3C    CALL  _LEDControl_ChangeState
    0674: 38 FD    ADD   SP,0xFD
(0076) 						return GREEN;
    0676: 62 D0 00 MOV   REG[0xD0],0x0
    0679: 50 02    MOV   A,0x2
    067B: 80 31    JMP   0x06AD
(0077) 						}
(0078) 						break;
(0079) 					case RED:
(0080) 						if(isASC)
    067D: 3D FB 00 CMP   [X-5],0x0
    0680: A0 15    JZ    0x0696
(0081) 						{
(0082) 						LEDControl_ChangeState(FALSE,TRUE,FALSE);			
    0682: 50 00    MOV   A,0x0
    0684: 08       PUSH  A
    0685: 50 01    MOV   A,0x1
    0687: 08       PUSH  A
    0688: 50 00    MOV   A,0x0
    068A: 08       PUSH  A
    068B: 9F 23    CALL  _LEDControl_ChangeState
    068D: 38 FD    ADD   SP,0xFD
(0083) 						return GREEN;
    068F: 62 D0 00 MOV   REG[0xD0],0x0
    0692: 50 02    MOV   A,0x2
    0694: 80 18    JMP   0x06AD
(0084) 						}
(0085) 						else 
(0086) 						{
(0087) 						LEDControl_ChangeState(FALSE,FALSE,TRUE);	
    0696: 50 01    MOV   A,0x1
    0698: 08       PUSH  A
    0699: 50 00    MOV   A,0x0
    069B: 08       PUSH  A
    069C: 08       PUSH  A
    069D: 9F 11    CALL  _LEDControl_ChangeState
    069F: 38 FD    ADD   SP,0xFD
(0088) 						return BLUE;
    06A1: 62 D0 00 MOV   REG[0xD0],0x0
    06A4: 50 01    MOV   A,0x1
    06A6: 80 06    JMP   0x06AD
(0089) 						}
(0090) 						break;
(0091) 					default:
(0092) 						return 0;
    06A8: 62 D0 00 MOV   REG[0xD0],0x0
    06AB: 50 00    MOV   A,0x0
(0093) 						break;
    06AD: 20       POP   X
    06AE: 20       POP   X
    06AF: 7F       RET   
(0094) 				}
(0095) 			
(0096) }
(0097) void LEDControl_ChangeFrequency(BYTE led,int value,BYTE isAdd)
(0098) {
_LEDControl_ChangeFrequency:
  isAdd                --> X-7
  value                --> X-6
  led                  --> X-4
    06B0: 10       PUSH  X
    06B1: 4F       MOV   X,SP
    06B2: 10       PUSH  X
(0099) 	switch (led)
    06B3: 3D FC 01 CMP   [X-4],0x1
    06B6: A0 51    JZ    0x0708
    06B8: 3D FC 02 CMP   [X-4],0x2
    06BB: A0 92    JZ    0x074E
    06BD: 3D FC 03 CMP   [X-4],0x3
    06C0: B0 D1    JNZ   0x0792
(0100) 		{
(0101) 			case RED:
(0102) 				if (isAdd)
    06C2: 3D F9 00 CMP   [X-7],0x0
    06C5: A0 2A    JZ    0x06F0
(0103) 				{
(0104) 					LEDControl_RT=LEDControl_RT+value;
    06C7: 62 D0 00 MOV   REG[0xD0],0x0
    06CA: 52 FB    MOV   A,[X-5]
    06CC: 04 1F    ADD   [LEDControl_RT+1],A
    06CE: 52 FA    MOV   A,[X-6]
    06D0: 0C 1E    ADC   [LEDControl_RT],A
(0105) 					if(LEDControl_RT>IntervalLimit)
    06D2: 50 50    MOV   A,0x50
    06D4: 12 1F    SUB   A,[LEDControl_RT+1]
    06D6: 51 1E    MOV   A,[LEDControl_RT]
    06D8: 31 80    XOR   A,0x80
    06DA: 62 D0 00 MOV   REG[0xD0],0x0
    06DD: 53 0F    MOV   [__rX],A
    06DF: 50 80    MOV   A,0x80
    06E1: 1A 0F    SBB   A,[__rX]
    06E3: D0 AE    JNC   0x0792
(0106) 					LEDControl_RT=IntervalLimit;
    06E5: 62 D0 00 MOV   REG[0xD0],0x0
    06E8: 55 1F 50 MOV   [LEDControl_RT+1],0x50
    06EB: 55 1E 00 MOV   [LEDControl_RT],0x0
(0107) 				}
    06EE: 80 A3    JMP   0x0792
(0108) 				else 
(0109) 				{
(0110) 					LEDControl_RT=LEDControl_RT-value;	
    06F0: 62 D0 00 MOV   REG[0xD0],0x0
    06F3: 52 FB    MOV   A,[X-5]
    06F5: 14 1F    SUB   [LEDControl_RT+1],A
    06F7: 52 FA    MOV   A,[X-6]
    06F9: 1C 1E    SBB   [LEDControl_RT],A
(0111) 					if(LEDControl_RT<0)
    06FB: 47 1E 80 TST   [LEDControl_RT],0x80
    06FE: A0 93    JZ    0x0792
(0112) 						LEDControl_RT=0;
    0700: 55 1F 00 MOV   [LEDControl_RT+1],0x0
    0703: 55 1E 00 MOV   [LEDControl_RT],0x0
(0113) 				}
(0114) 				break;
    0706: 80 8B    JMP   0x0792
(0115) 			case BLUE:
(0116) 				if (isAdd)
    0708: 3D F9 00 CMP   [X-7],0x0
    070B: A0 2A    JZ    0x0736
(0117) 				{
(0118) 					LEDControl_BT=LEDControl_BT+value;
    070D: 62 D0 00 MOV   REG[0xD0],0x0
    0710: 52 FB    MOV   A,[X-5]
    0712: 04 1D    ADD   [LEDControl_BT+1],A
    0714: 52 FA    MOV   A,[X-6]
    0716: 0C 1C    ADC   [LEDControl_BT],A
(0119) 					if(LEDControl_BT>IntervalLimit)
    0718: 50 50    MOV   A,0x50
    071A: 12 1D    SUB   A,[LEDControl_BT+1]
    071C: 51 1C    MOV   A,[LEDControl_BT]
    071E: 31 80    XOR   A,0x80
    0720: 62 D0 00 MOV   REG[0xD0],0x0
    0723: 53 0F    MOV   [__rX],A
    0725: 50 80    MOV   A,0x80
    0727: 1A 0F    SBB   A,[__rX]
    0729: D0 68    JNC   0x0792
(0120) 					LEDControl_BT=IntervalLimit;
    072B: 62 D0 00 MOV   REG[0xD0],0x0
    072E: 55 1D 50 MOV   [LEDControl_BT+1],0x50
    0731: 55 1C 00 MOV   [LEDControl_BT],0x0
(0121) 				}
    0734: 80 5D    JMP   0x0792
(0122) 				else 
(0123) 				{
(0124) 					LEDControl_BT=LEDControl_BT-value;	
    0736: 62 D0 00 MOV   REG[0xD0],0x0
    0739: 52 FB    MOV   A,[X-5]
    073B: 14 1D    SUB   [LEDControl_BT+1],A
    073D: 52 FA    MOV   A,[X-6]
    073F: 1C 1C    SBB   [LEDControl_BT],A
(0125) 					if(LEDControl_BT<0)
    0741: 47 1C 80 TST   [LEDControl_BT],0x80
    0744: A0 4D    JZ    0x0792
(0126) 					LEDControl_BT=0;
    0746: 55 1D 00 MOV   [LEDControl_BT+1],0x0
    0749: 55 1C 00 MOV   [LEDControl_BT],0x0
(0127) 				}
(0128) 				break;
    074C: 80 45    JMP   0x0792
(0129) 			case GREEN:
(0130) 				if (isAdd)
    074E: 3D F9 00 CMP   [X-7],0x0
    0751: A0 2A    JZ    0x077C
(0131) 				{
(0132) 					LEDControl_GT=LEDControl_GT+value;
    0753: 62 D0 00 MOV   REG[0xD0],0x0
    0756: 52 FB    MOV   A,[X-5]
    0758: 04 1B    ADD   [LEDControl_GT+1],A
    075A: 52 FA    MOV   A,[X-6]
    075C: 0C 1A    ADC   [LEDControl_GT],A
(0133) 					if(LEDControl_GT>IntervalLimit)
    075E: 50 50    MOV   A,0x50
    0760: 12 1B    SUB   A,[LEDControl_GT+1]
    0762: 51 1A    MOV   A,[LEDControl_GT]
    0764: 31 80    XOR   A,0x80
    0766: 62 D0 00 MOV   REG[0xD0],0x0
    0769: 53 0F    MOV   [__rX],A
    076B: 50 80    MOV   A,0x80
    076D: 1A 0F    SBB   A,[__rX]
    076F: D0 22    JNC   0x0792
(0134) 					LEDControl_GT=IntervalLimit;
    0771: 62 D0 00 MOV   REG[0xD0],0x0
    0774: 55 1B 50 MOV   [LEDControl_GT+1],0x50
    0777: 55 1A 00 MOV   [LEDControl_GT],0x0
(0135) 				}
    077A: 80 17    JMP   0x0792
(0136) 				else 
(0137) 				{
(0138) 					LEDControl_GT=LEDControl_GT-value;	
    077C: 62 D0 00 MOV   REG[0xD0],0x0
    077F: 52 FB    MOV   A,[X-5]
    0781: 14 1B    SUB   [LEDControl_GT+1],A
    0783: 52 FA    MOV   A,[X-6]
    0785: 1C 1A    SBB   [LEDControl_GT],A
(0139) 					if(LEDControl_GT<0)
    0787: 47 1A 80 TST   [LEDControl_GT],0x80
    078A: A0 07    JZ    0x0792
(0140) 					LEDControl_GT=0;
    078C: 55 1B 00 MOV   [LEDControl_GT+1],0x0
    078F: 55 1A 00 MOV   [LEDControl_GT],0x0
(0141) 				}
(0142) 				break;
(0143) 			default:
(0144) 				break; 
    0792: 20       POP   X
    0793: 20       POP   X
    0794: 7F       RET   
(0145) 		}
(0146) }
(0147) int LEDControl_Blink(BYTE led, int blinkLoop)
(0148) {
_LEDControl_Blink:
  blinkLoop            --> X-6
  led                  --> X-4
    0795: 10       PUSH  X
    0796: 4F       MOV   X,SP
    0797: 10       PUSH  X
(0149) 	switch (led)
    0798: 3D FC 01 CMP   [X-4],0x1
    079B: A0 3B    JZ    0x07D7
    079D: 3D FC 02 CMP   [X-4],0x2
    07A0: A0 66    JZ    0x0807
    07A2: 3D FC 03 CMP   [X-4],0x3
    07A5: B0 91    JNZ   0x0837
(0150) 		{
(0151) 			case RED:
(0152) 				if (blinkLoop>=LEDControl_RT)
    07A7: 62 D0 00 MOV   REG[0xD0],0x0
    07AA: 52 FB    MOV   A,[X-5]
    07AC: 12 1F    SUB   A,[LEDControl_RT+1]
    07AE: 51 1E    MOV   A,[LEDControl_RT]
    07B0: 31 80    XOR   A,0x80
    07B2: 62 D0 00 MOV   REG[0xD0],0x0
    07B5: 53 0F    MOV   [__rX],A
    07B7: 52 FA    MOV   A,[X-6]
    07B9: 31 80    XOR   A,0x80
    07BB: 1A 0F    SBB   A,[__rX]
    07BD: C0 0C    JC    0x07CA
(0153) 				{
(0154) 					LED_RED_Invert();
    07BF: 10       PUSH  X
    07C0: 7C 02 BA LCALL _LED_RED_Invert
    07C3: 20       POP   X
(0155) 					blinkLoop = 0;
    07C4: 56 FB 00 MOV   [X-5],0x0
    07C7: 56 FA 00 MOV   [X-6],0x0
(0156) 				}
(0157) 				return blinkLoop;
    07CA: 62 D0 00 MOV   REG[0xD0],0x0
    07CD: 52 FB    MOV   A,[X-5]
    07CF: 53 10    MOV   [__r1],A
    07D1: 52 FA    MOV   A,[X-6]
    07D3: 53 11    MOV   [__r0],A
    07D5: 80 6C    JMP   0x0842
(0158) 				break;
(0159) 			case BLUE:
(0160) 				if (blinkLoop>=LEDControl_BT)
    07D7: 62 D0 00 MOV   REG[0xD0],0x0
    07DA: 52 FB    MOV   A,[X-5]
    07DC: 12 1D    SUB   A,[LEDControl_BT+1]
    07DE: 51 1C    MOV   A,[LEDControl_BT]
    07E0: 31 80    XOR   A,0x80
    07E2: 62 D0 00 MOV   REG[0xD0],0x0
    07E5: 53 0F    MOV   [__rX],A
    07E7: 52 FA    MOV   A,[X-6]
    07E9: 31 80    XOR   A,0x80
    07EB: 1A 0F    SBB   A,[__rX]
    07ED: C0 0C    JC    0x07FA
(0161) 				{
(0162) 					LED_BLUE_Invert();
    07EF: 10       PUSH  X
    07F0: 7C 03 34 LCALL _LED_BLUE_Invert
    07F3: 20       POP   X
(0163) 					blinkLoop = 0;
    07F4: 56 FB 00 MOV   [X-5],0x0
    07F7: 56 FA 00 MOV   [X-6],0x0
(0164) 				}
(0165) 				return blinkLoop;
    07FA: 62 D0 00 MOV   REG[0xD0],0x0
    07FD: 52 FB    MOV   A,[X-5]
    07FF: 53 10    MOV   [__r1],A
    0801: 52 FA    MOV   A,[X-6]
    0803: 53 11    MOV   [__r0],A
    0805: 80 3C    JMP   0x0842
(0166) 				break;
(0167) 			case GREEN:
(0168) 				if (blinkLoop>=LEDControl_GT)
    0807: 62 D0 00 MOV   REG[0xD0],0x0
    080A: 52 FB    MOV   A,[X-5]
    080C: 12 1B    SUB   A,[LEDControl_GT+1]
    080E: 51 1A    MOV   A,[LEDControl_GT]
    0810: 31 80    XOR   A,0x80
    0812: 62 D0 00 MOV   REG[0xD0],0x0
    0815: 53 0F    MOV   [__rX],A
    0817: 52 FA    MOV   A,[X-6]
    0819: 31 80    XOR   A,0x80
    081B: 1A 0F    SBB   A,[__rX]
    081D: C0 0C    JC    0x082A
(0169) 				{
(0170) 					LED_GREEN_Invert();
    081F: 10       PUSH  X
    0820: 7C 02 F7 LCALL _LED_GREEN_Invert
    0823: 20       POP   X
(0171) 					blinkLoop = 0;
    0824: 56 FB 00 MOV   [X-5],0x0
    0827: 56 FA 00 MOV   [X-6],0x0
(0172) 				}
(0173) 				return blinkLoop;
    082A: 62 D0 00 MOV   REG[0xD0],0x0
    082D: 52 FB    MOV   A,[X-5]
    082F: 53 10    MOV   [__r1],A
    0831: 52 FA    MOV   A,[X-6]
    0833: 53 11    MOV   [__r0],A
    0835: 80 0C    JMP   0x0842
(0174) 				break;
(0175) 			default:
(0176) 			return blinkLoop;
    0837: 62 D0 00 MOV   REG[0xD0],0x0
    083A: 52 FB    MOV   A,[X-5]
    083C: 53 10    MOV   [__r1],A
    083E: 52 FA    MOV   A,[X-6]
    0840: 53 11    MOV   [__r0],A
(0177) 				break; 
    0842: 20       POP   X
(0178) 		}
(0179) }
    0843: 20       POP   X
    0844: 7F       RET   
FILE: D:\Studia\PSOC\MF_LIGHT\MF_LIGHT\MF_LIGHT\lightcontrol.c
(0001) #include "LightControl.h"
(0002) #include <m8c.h>        
(0003) #include "PSoCAPI.h"    
(0004) #include <stdlib.h>
(0005) #define ADC_RESOLUTION 10
(0006) long value;
(0007) long v1;
(0008) void LightControl_INIT(void)
(0009) {
(0010) 	ADC10_Start(ADC10_FULLRANGE);
_LightControl_INIT:
    0845: 10       PUSH  X
    0846: 50 03    MOV   A,0x3
    0848: 7C 04 6C LCALL _ADC10_Start
(0011) 	ADC10_iCal(0x1FF, ADC10_CAL_VBG);  // Calibrate the ADC so 1.3V = 0x01FF  	
    084B: 50 03    MOV   A,0x3
    084D: 08       PUSH  A
    084E: 50 01    MOV   A,0x1
    0850: 08       PUSH  A
    0851: 50 FF    MOV   A,0xFF
    0853: 08       PUSH  A
    0854: 7C 04 E9 LCALL _ADC10_iCal
    0857: 38 FD    ADD   SP,0xFD
    0859: 62 D0 00 MOV   REG[0xD0],0x0
(0012) 	ADC10_StartADC(); 
    085C: 7C 04 9A LCALL _ADC10_StartADC
    085F: 20       POP   X
    0860: 7F       RET   
(0013) }
(0014) 
(0015) int LightControl_Scan( void )
(0016) {
_LightControl_Scan:
  b                    --> X+0
    0861: 10       PUSH  X
    0862: 4F       MOV   X,SP
    0863: 38 02    ADD   SP,0x2
(0017)     int b = 0;
    0865: 56 01 00 MOV   [X+1],0x0
    0868: 56 00 00 MOV   [X+0],0x0
(0018) 	while(ADC10_fIsDataAvailable() == 0){};  /*checking for the availability of data */
    086B: 10       PUSH  X
    086C: 7C 04 C8 LCALL _ADC10_fIsDataAvailable
    086F: 20       POP   X
    0870: 62 D0 00 MOV   REG[0xD0],0x0
    0873: 39 00    CMP   A,0x0
    0875: AF F5    JZ    0x086B
(0019) 		{
(0020) 			value = ADC10_iGetData();   /*Get Data and deduce the appropriate value between 0 - 100 */
    0877: 10       PUSH  X
    0878: 7C 04 D4 LCALL _ADC10_iGetData
    087B: 62 D0 00 MOV   REG[0xD0],0x0
    087E: 5A 11    MOV   [__r0],X
    0880: 20       POP   X
    0881: 62 D0 00 MOV   REG[0xD0],0x0
    0884: 53 19    MOV   [value+3],A
    0886: 62 D0 00 MOV   REG[0xD0],0x0
    0889: 51 11    MOV   A,[__r0]
    088B: 62 D0 00 MOV   REG[0xD0],0x0
    088E: 53 18    MOV   [value+2],A
    0890: 47 18 80 TST   [value+2],0x80
    0893: A0 09    JZ    0x089D
    0895: 55 17 FF MOV   [value+1],0xFF
    0898: 55 16 FF MOV   [value],0xFF
    089B: 80 0A    JMP   0x08A6
    089D: 62 D0 00 MOV   REG[0xD0],0x0
    08A0: 55 17 00 MOV   [value+1],0x0
    08A3: 55 16 00 MOV   [value],0x0
(0021) 			v1 = (long) value * 101;
    08A6: 62 D0 00 MOV   REG[0xD0],0x0
    08A9: 51 16    MOV   A,[value]
    08AB: 08       PUSH  A
    08AC: 51 17    MOV   A,[value+1]
    08AE: 08       PUSH  A
    08AF: 51 18    MOV   A,[value+2]
    08B1: 08       PUSH  A
    08B2: 51 19    MOV   A,[value+3]
    08B4: 08       PUSH  A
    08B5: 50 00    MOV   A,0x0
    08B7: 08       PUSH  A
    08B8: 08       PUSH  A
    08B9: 08       PUSH  A
    08BA: 50 65    MOV   A,0x65
    08BC: 08       PUSH  A
    08BD: 62 D0 00 MOV   REG[0xD0],0x0
    08C0: 7C 0A 96 LCALL 0x0A96
    08C3: 38 FC    ADD   SP,0xFC
    08C5: 18       POP   A
    08C6: 62 D0 00 MOV   REG[0xD0],0x0
    08C9: 53 15    MOV   [v1+3],A
    08CB: 18       POP   A
    08CC: 53 14    MOV   [v1+2],A
    08CE: 18       POP   A
    08CF: 53 13    MOV   [v1+1],A
    08D1: 18       POP   A
    08D2: 53 12    MOV   [v1],A
(0022) 			v1 = v1 / (1 << ADC_RESOLUTION);	/* Divide the value with the max value based on ADC resolution */
    08D4: 50 00    MOV   A,0x0
    08D6: 08       PUSH  A
    08D7: 08       PUSH  A
    08D8: 50 04    MOV   A,0x4
    08DA: 08       PUSH  A
    08DB: 50 00    MOV   A,0x0
    08DD: 08       PUSH  A
    08DE: 51 12    MOV   A,[v1]
    08E0: 08       PUSH  A
    08E1: 51 13    MOV   A,[v1+1]
    08E3: 08       PUSH  A
    08E4: 51 14    MOV   A,[v1+2]
    08E6: 08       PUSH  A
    08E7: 51 15    MOV   A,[v1+3]
    08E9: 08       PUSH  A
    08EA: 62 D0 00 MOV   REG[0xD0],0x0
    08ED: 7C 09 DE LCALL 0x09DE
    08F0: 18       POP   A
    08F1: 62 D0 00 MOV   REG[0xD0],0x0
    08F4: 53 15    MOV   [v1+3],A
    08F6: 18       POP   A
    08F7: 53 14    MOV   [v1+2],A
    08F9: 18       POP   A
    08FA: 53 13    MOV   [v1+1],A
    08FC: 18       POP   A
    08FD: 53 12    MOV   [v1],A
    08FF: 38 FC    ADD   SP,0xFC
(0023) 			if (v1 > 100)  v1 = 100;  /* Make sure Max is 100 */
    0901: 50 64    MOV   A,0x64
    0903: 12 15    SUB   A,[v1+3]
    0905: 50 00    MOV   A,0x0
    0907: 1A 14    SBB   A,[v1+2]
    0909: 50 00    MOV   A,0x0
    090B: 1A 13    SBB   A,[v1+1]
    090D: 51 12    MOV   A,[v1]
    090F: 31 80    XOR   A,0x80
    0911: 62 D0 00 MOV   REG[0xD0],0x0
    0914: 53 0F    MOV   [__rX],A
    0916: 50 80    MOV   A,0x80
    0918: 1A 0F    SBB   A,[__rX]
    091A: D0 10    JNC   0x092B
    091C: 62 D0 00 MOV   REG[0xD0],0x0
    091F: 55 12 00 MOV   [v1],0x0
    0922: 55 13 00 MOV   [v1+1],0x0
    0925: 55 14 00 MOV   [v1+2],0x0
    0928: 55 15 64 MOV   [v1+3],0x64
(0024) 			b = (int) v1;					
    092B: 62 D0 00 MOV   REG[0xD0],0x0
    092E: 51 15    MOV   A,[v1+3]
    0930: 62 D0 00 MOV   REG[0xD0],0x0
    0933: 53 10    MOV   [__r1],A
    0935: 62 D0 00 MOV   REG[0xD0],0x0
    0938: 51 14    MOV   A,[v1+2]
    093A: 62 D0 00 MOV   REG[0xD0],0x0
    093D: 53 11    MOV   [__r0],A
    093F: 51 10    MOV   A,[__r1]
    0941: 54 01    MOV   [X+1],A
    0943: 51 11    MOV   A,[__r0]
    0945: 54 00    MOV   [X+0],A
(0025) 		}
(0026) 		return b;
    0947: 52 01    MOV   A,[X+1]
(0027) }    0948: 01 53    ADD   A,0x53
    094A: 10       PUSH  X
    094B: 52 00    MOV   A,[X+0]
    094D: 53 11    MOV   [__r0],A
    094F: 38 FE    ADD   SP,0xFE
    0951: 20       POP   X
    0952: 7F       RET   
FILE: D:\Studia\PSOC\MF_LIGHT\MF_LIGHT\MF_LIGHT\main.c
(0001) #include <m8c.h>        
(0002) #include "PSoCAPI.h"    
(0003) #include "LEDControl.h"
(0004) 
(0005) void main(void)
(0006) {
_main:
  result               --> X+0
    0953: 10       PUSH  X
    0954: 4F       MOV   X,SP
    0955: 38 02    ADD   SP,0x2
(0007) 	M8C_EnableGInt; 
    0957: 71 01    OR    F,0x1
(0008) 	LEDControl_INIT();
    0959: 7C 05 A1 LCALL __UserModules_end|_LEDControl_INIT|__text_start|_LEDControl_INIT
(0009) 	LightControl_INIT();
    095C: 7C 08 45 LCALL _LightControl_INIT
    095F: 80 77    JMP   0x09D7
(0010) 	
(0011) 	while(1)        
(0012) 	{
(0013) 		int result = LightControl_Scan();	
    0961: 7C 08 61 LCALL _LightControl_Scan
    0964: 62 D0 00 MOV   REG[0xD0],0x0
    0967: 51 10    MOV   A,[__r1]
    0969: 54 01    MOV   [X+1],A
    096B: 51 11    MOV   A,[__r0]
    096D: 54 00    MOV   [X+0],A
(0014) 
(0015) 		if (result > 40)
    096F: 50 28    MOV   A,0x28
    0971: 13 01    SUB   A,[X+1]
    0973: 52 00    MOV   A,[X+0]
    0975: 31 80    XOR   A,0x80
    0977: 53 0F    MOV   [__rX],A
    0979: 50 80    MOV   A,0x80
    097B: 1A 0F    SBB   A,[__rX]
    097D: D0 0D    JNC   0x098B
(0016) 		{
(0017) 			LEDControl_ChangeState(TRUE,TRUE,TRUE);
    097F: 50 01    MOV   A,0x1
    0981: 08       PUSH  A
    0982: 08       PUSH  A
    0983: 08       PUSH  A
    0984: 7C 05 B0 LCALL _LEDControl_ChangeState
    0987: 38 FD    ADD   SP,0xFD
(0018) 		}
    0989: 80 4D    JMP   0x09D7
(0019) 		else if(result > 25)
    098B: 50 19    MOV   A,0x19
    098D: 13 01    SUB   A,[X+1]
    098F: 52 00    MOV   A,[X+0]
    0991: 31 80    XOR   A,0x80
    0993: 62 D0 00 MOV   REG[0xD0],0x0
    0996: 53 0F    MOV   [__rX],A
    0998: 50 80    MOV   A,0x80
    099A: 1A 0F    SBB   A,[__rX]
    099C: D0 0F    JNC   0x09AC
(0020) 		{
(0021) 			LEDControl_ChangeState(TRUE,TRUE,FALSE);
    099E: 50 00    MOV   A,0x0
    09A0: 08       PUSH  A
    09A1: 50 01    MOV   A,0x1
    09A3: 08       PUSH  A
    09A4: 08       PUSH  A
    09A5: 7C 05 B0 LCALL _LEDControl_ChangeState
    09A8: 38 FD    ADD   SP,0xFD
(0022) 		}else if(result > 5)
    09AA: 80 2C    JMP   0x09D7
    09AC: 50 05    MOV   A,0x5
    09AE: 13 01    SUB   A,[X+1]
    09B0: 52 00    MOV   A,[X+0]
    09B2: 31 80    XOR   A,0x80
    09B4: 62 D0 00 MOV   REG[0xD0],0x0
    09B7: 53 0F    MOV   [__rX],A
    09B9: 50 80    MOV   A,0x80
    09BB: 1A 0F    SBB   A,[__rX]
    09BD: D0 0F    JNC   0x09CD
(0023) 		{
(0024) 			LEDControl_ChangeState(TRUE,FALSE,FALSE);
    09BF: 50 00    MOV   A,0x0
    09C1: 08       PUSH  A
    09C2: 08       PUSH  A
    09C3: 50 01    MOV   A,0x1
    09C5: 08       PUSH  A
    09C6: 7C 05 B0 LCALL _LEDControl_ChangeState
    09C9: 38 FD    ADD   SP,0xFD
(0025) 		}
    09CB: 80 0B    JMP   0x09D7
(0026) 		else
(0027) 		{	
(0028) 			LEDControl_ChangeState(FALSE,FALSE,FALSE);
    09CD: 50 00    MOV   A,0x0
    09CF: 08       PUSH  A
    09D0: 08       PUSH  A
    09D1: 08       PUSH  A
    09D2: 7C 05 B0 LCALL _LEDControl_ChangeState
    09D5: 38 FD    ADD   SP,0xFD
(0029) 		}		
(0030) 	}
    09D7: 8F 89    JMP   0x0961
(0031) 	
(0032) }
    09D9: 38 FE    ADD   SP,0xFE
    09DB: 20       POP   X
    09DC: 8F FF    JMP   0x09DC
