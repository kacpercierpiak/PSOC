{
  "name": "Cleaner2",
  "createVersion": "2017-08-12",
  "description": "New Project",
  "lastModified": "2020-03-08T20:30:48.570Z",
  "created": "2020-03-08T20:30:48.570Z",
  "meta": {
    "projectTypeName": "PSoC 6 Wi-Fi BT Proto",
    "projectTypeId": "PSoC6WiFiBtProto"
  },
  "planes": {
    "PSoC 6 Wi-Fi BT Proto": {
      "type": "Cypress",
      "compilerVersion": "latest",
      "variants": [
        "PSoC6WiFiBtProto"
      ],
      "meta": {},
      "elements": [
        {
          "name": "Interval",
          "type": "EmbeddedInterval",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_INTERVAL_Handle_t intervalHandle;\n    ATMO_INTERVAL_AddAbilityInterval(\n\t\tATMO_PROPERTY(Interval, instance), \n\t\tATMO_ABILITY(Interval, interval), \n\t\tATMO_PROPERTY(Interval, time), \n\t\t&intervalHandle\n\t);\n\t\n\treturn ATMO_Status_Success;\n\t",
              "interval": "\treturn ATMO_Status_Success;"
            },
            "variables": {},
            "embeddedPropertyConversions": {},
            "codeUserChanged": {
              "setup": false,
              "interval": false
            },
            "instance": "ATMO_DRIVERINSTANCE_INTERVAL_INTERVAL1",
            "time": "2000"
          },
          "meta": {
            "editorX": 146,
            "editorY": 171,
            "lastTrigger": "interval"
          },
          "triggers": {
            "triggered": [],
            "interval": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "DebugPrint",
                "targetAbility": "print"
              }
            ]
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "interval": true
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "interval",
              "triggers": [
                "interval"
              ]
            }
          ]
        },
        {
          "name": "NTCThermistor",
          "type": "EmbeddedNTCThermistor",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\nif ( !NTCThermistor_Init( ATMO_PROPERTY(NTCThermistor, adcInstance ), ATMO_PROPERTY(NTCThermistor, bValue ), ATMO_PROPERTY(NTCThermistor, t0Value ), ATMO_PROPERTY(NTCThermistor, vddADCPin ), ATMO_PROPERTY(NTCThermistor, temperatureADCPin ) ) )\n{\n\treturn ATMO_Status_Fail;\n\n}\n\nreturn ATMO_Status_Success;",
              "readTemperature": "float temperatureC = 0.0;\n\nif ( !NTCThermistor_GetTemperature( &temperatureC ) )\n{\n\treturn ATMO_Status_Fail;\n}\n\nATMO_CreateValueFloat( out, temperatureC );\n\nreturn ATMO_Status_Success;\n"
            },
            "variables": {},
            "embeddedPropertyConversions": {},
            "codeUserChanged": {
              "setup": false,
              "readTemperature": false
            },
            "adcInstance": "ATMO_DRIVERINSTANCE_ADC_ADC1",
            "bValue": 3428,
            "t0Value": 25,
            "vddADCPin": "P10_0",
            "temperatureADCPin": "P10_1"
          },
          "meta": {
            "editorX": 410,
            "editorY": 173,
            "lastTrigger": "temperatureRead"
          },
          "triggers": {
            "triggered": [],
            "temperatureRead": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "BLE_NTC",
                "targetAbility": "setValue"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "ToString",
                "targetAbility": "convert"
              }
            ]
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "readTemperature": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "readTemperature",
              "triggers": [
                "temperatureRead"
              ]
            }
          ]
        },
        {
          "name": "BLE_NTC",
          "type": "EmbeddedBLECharacteristicCustom",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables",
            "ble"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_BLE_GATTSAddService(\n\t\tATMO_PROPERTY(BLE_NTC, instance),\n\t\t&ATMO_VARIABLE(BLE_NTC, bleServiceHandle), \n\t\tATMO_PROPERTY(BLE_NTC, bleServiceUuid));\n\t\n\tuint8_t property = 0;\n\tuint8_t permission = 0;\n\t\n\tproperty |= ATMO_PROPERTY(BLE_NTC, read) ? ATMO_BLE_Property_Read : 0;\n\tproperty |= ATMO_PROPERTY(BLE_NTC, write) ? ATMO_BLE_Property_Write : 0;\n\tproperty |= ATMO_PROPERTY(BLE_NTC, notify) ? ATMO_BLE_Property_Notify : 0;\n\n\tpermission |= ATMO_PROPERTY(BLE_NTC, read) ? ATMO_BLE_Permission_Read : 0;\n\tpermission |= ATMO_PROPERTY(BLE_NTC, write) ? ATMO_BLE_Permission_Write : 0;\n\n\tATMO_DATATYPE types[3] = {ATMO_PROPERTY(BLE_NTC, writeDataType), ATMO_PROPERTY(BLE_NTC, readDataType), ATMO_PROPERTY(BLE_NTC, notifyDataType)};\n\t\n\tATMO_BLE_GATTSAddCharacteristic(\n\t\tATMO_PROPERTY(BLE_NTC, instance),\n\t\t&ATMO_VARIABLE(BLE_NTC, bleCharacteristicHandle), \n\t\tATMO_VARIABLE(BLE_NTC, bleServiceHandle), \n\t\tATMO_PROPERTY(BLE_NTC, bleCharacteristicUuid), \n\t\tproperty, permission, ATMO_GetMaxValueSize(3, 64, types));\n\t\n\tATMO_BLE_GATTSRegisterCharacteristicAbilityHandle(\n\t\tATMO_PROPERTY(BLE_NTC, instance),\n\t\tATMO_VARIABLE(BLE_NTC, bleCharacteristicHandle), \n\t\tATMO_BLE_Characteristic_Written, \n\t\tATMO_ABILITY(BLE_NTC, written));\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setValue": "\n\t\n\t// Convert to the desired write data type\n\tATMO_Value_t convertedValue;\n\tATMO_InitValue(&convertedValue);\n\tATMO_CreateValueConverted(&convertedValue, ATMO_PROPERTY(BLE_NTC, readDataType), in);\n\n\tATMO_BLE_GATTSSetCharacteristic(\n\t\tATMO_PROPERTY(BLE_NTC, instance),\n\t\tATMO_VARIABLE(BLE_NTC, bleCharacteristicHandle),\n\t\tconvertedValue.size, \n\t\t(uint8_t *)convertedValue.data,\n\t\tNULL);\n\t\n\tATMO_FreeValue(&convertedValue);\n\t\t\n\treturn ATMO_Status_Success;\n\t",
              "written": "\n\tATMO_CreateValueConverted(out, ATMO_PROPERTY(BLE_NTC, writeDataType), in);\n\treturn ATMO_Status_Success;\n\t",
              "subscibed": "\treturn ATMO_Status_Success;",
              "unsubscribed": "\treturn ATMO_Status_Success;"
            },
            "variables": {
              "bleServiceHandle": {
                "type": "ATMO_BLE_Handle_t"
              },
              "bleCharacteristicHandle": {
                "type": "ATMO_BLE_Handle_t"
              }
            },
            "embeddedPropertyConversions": {
              "bleServiceUuid": "string",
              "bleCharacteristicUuid": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "setValue": false,
              "written": false,
              "subscibed": false,
              "unsubscribed": false
            },
            "instance": "ATMO_DRIVERINSTANCE_BLE_BLE1",
            "bleServiceUuid": "cd900ce8-9603-4a92-b124-57f4befd5f5e",
            "bleCharacteristicUuid": "cd900ce8-9603-4a92-b124-57f4befd5f60",
            "read": true,
            "write": true,
            "notify": false,
            "readDataType": "ATMO_DATATYPE_FLOAT",
            "writeDataType": "ATMO_DATATYPE_FLOAT",
            "notifyDataType": "ATMO_DATATYPE_STRING"
          },
          "meta": {
            "editorX": 591,
            "editorY": 66,
            "lastTrigger": "written"
          },
          "triggers": {
            "triggered": [],
            "written": [],
            "subscibed": [],
            "unsubscribed": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setValue": "valueSet",
            "written": false,
            "subscibed": false,
            "unsubscribed": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setValue",
              "triggers": []
            },
            {
              "name": "written",
              "triggers": [
                "written"
              ]
            },
            {
              "name": "subscibed",
              "triggers": [
                "subscibed"
              ]
            },
            {
              "name": "unsubscribed",
              "triggers": [
                "unsubscribed"
              ]
            }
          ]
        },
        {
          "name": "DebugPrint",
          "type": "EmbeddedDebugPrint",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables",
            "debugPrint"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\treturn ATMO_Status_Success;\n\t",
              "print": "\n    if((in != NULL) && (in->type != ATMO_DATATYPE_VOID))\n    {\n        char str[256];\n        unsigned int prependLen = strlen(ATMO_PROPERTY(DebugPrint, prepend));\n        // If there's text to prepend, do that first\n        if(prependLen > 0)\n        {\n            sprintf(str, \"%s: \", ATMO_PROPERTY(DebugPrint, prepend));\n            prependLen += 2; // Adding 2 chars for \": \"\n        }\n        \n        // Grab the string version of the input data, place it after the prepend text\n        if(ATMO_GetString(in, str + prependLen, 256 - prependLen) == ATMO_Status_Success)\n        {\n            ATMO_PLATFORM_DebugPrint(\"%s\\r\\n\", str);\n        }\n    }\n    else\n    {\n        ATMO_PLATFORM_DebugPrint(\"%s\\r\\n\", ATMO_PROPERTY(DebugPrint, prepend));\n    }\n    \n    return ATMO_Status_Success;\n    "
            },
            "variables": {},
            "embeddedPropertyConversions": {
              "prepend": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "print": false
            },
            "prepend": "_Temperature-"
          },
          "meta": {
            "editorX": 284,
            "editorY": 173,
            "lastTrigger": "printed"
          },
          "triggers": {
            "triggered": [],
            "printed": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "NTCThermistor",
                "targetAbility": "readTemperature"
              }
            ]
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "print": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "print",
              "triggers": [
                "printed"
              ]
            }
          ]
        },
        {
          "name": "TemperatureWrite",
          "type": "EmbeddedUART",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables",
            "uart"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_UART_Peripheral_t uart;\n\tATMO_UART_GetDefaultConfig(&uart);\n\tuart.baudRate = ATMO_PROPERTY(TemperatureWrite, baudRate);\n\tuart.flowControl = ATMO_UART_FlowControl_None;\n\tuart.numDataBits = ATMO_UART_NumDataBits_8;\n\tuart.numStopBits = ATMO_UART_NumStopBits_1;\n\tuart.parity = ATMO_UART_Parity_None;\n\tuart.isBinaryData = ATMO_PROPERTY(TemperatureWrite, dataType) == ATMO_DATATYPE_BINARY;\n\tuart.rxTrim = false;\n\n\tif(strlen(ATMO_PROPERTY(TemperatureWrite, bufferRegex)) > 0)\n\t{\n\t\tuart.rxBuffer = true;\n\t\tstrcpy(uart.splitRegex, ATMO_PROPERTY(TemperatureWrite, bufferRegex));\n\t}\n\telse\n\t{\n\t\tuart.rxBuffer = false;\n\t}\n\n\tATMO_UART_SetConfiguration(ATMO_PROPERTY(TemperatureWrite, instance), &uart);\n\tATMO_UART_RegisterRxAbilityHandle(ATMO_PROPERTY(TemperatureWrite, instance), ATMO_ABILITY(TemperatureWrite, receiveData));\n\treturn ATMO_Status_Success;\n\t",
              "readByteBlocking": "\treturn ATMO_Status_Success;",
              "receiveData": "\n\tATMO_CreateValueCopy(out, in);\n\treturn ATMO_Status_Success;\n\t",
              "writeBlocking": "\n\tuint32_t numBytesWritten = 0;\n\n\tif( (ATMO_UART_WriteBlocking(ATMO_PROPERTY(TemperatureWrite, instance), (const char *)in->data, in->size, &numBytesWritten, 0) != ATMO_UART_Status_Success) || (numBytesWritten != in->size))\n\t{\n\t\treturn ATMO_Status_Fail;\n\t}\n\n\treturn ATMO_Status_Success;\n\t"
            },
            "variables": {},
            "embeddedPropertyConversions": {
              "bufferRegex": "rawstring"
            },
            "codeUserChanged": {
              "setup": false,
              "readByteBlocking": false,
              "receiveData": false,
              "writeBlocking": false
            },
            "instance": "ATMO_DRIVERINSTANCE_UART_UART1",
            "baudRate": "ATMO_UART_BaudRate_115200",
            "bufferRegex": "",
            "dataType": "ATMO_DATATYPE_STRING"
          },
          "meta": {
            "editorX": 713,
            "editorY": 222,
            "lastTrigger": "dataWritten"
          },
          "triggers": {
            "triggered": [],
            "byteReadBlocking": [],
            "dataReceived": [],
            "dataWritten": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "readByteBlocking": false,
            "receiveData": false,
            "writeBlocking": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "readByteBlocking",
              "triggers": [
                "byteReadBlocking"
              ]
            },
            {
              "name": "receiveData",
              "triggers": [
                "dataReceived"
              ]
            },
            {
              "name": "writeBlocking",
              "triggers": [
                "dataWritten"
              ]
            }
          ]
        },
        {
          "name": "ToString",
          "type": "EmbeddedDataTypeConversion",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\treturn ATMO_Status_Success;\n\t",
              "convert": "\n    return ATMO_CreateValueConverted(out, ATMO_PROPERTY(ToString, type), in);\n    "
            },
            "variables": {},
            "embeddedPropertyConversions": {},
            "codeUserChanged": {
              "setup": false,
              "convert": false
            },
            "type": "ATMO_DATATYPE_STRING"
          },
          "meta": {
            "editorX": 579,
            "editorY": 222,
            "lastTrigger": "converted"
          },
          "triggers": {
            "triggered": [],
            "converted": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "TemperatureWrite",
                "targetAbility": "writeBlocking"
              }
            ]
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "convert": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "convert",
              "triggers": [
                "converted"
              ]
            }
          ]
        },
        {
          "name": "BLEMovement",
          "type": "EmbeddedBLECharacteristicCustom",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables",
            "ble"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_BLE_GATTSAddService(\n\t\tATMO_PROPERTY(BLEMovement, instance),\n\t\t&ATMO_VARIABLE(BLEMovement, bleServiceHandle), \n\t\tATMO_PROPERTY(BLEMovement, bleServiceUuid));\n\t\n\tuint8_t property = 0;\n\tuint8_t permission = 0;\n\t\n\tproperty |= ATMO_PROPERTY(BLEMovement, read) ? ATMO_BLE_Property_Read : 0;\n\tproperty |= ATMO_PROPERTY(BLEMovement, write) ? ATMO_BLE_Property_Write : 0;\n\tproperty |= ATMO_PROPERTY(BLEMovement, notify) ? ATMO_BLE_Property_Notify : 0;\n\n\tpermission |= ATMO_PROPERTY(BLEMovement, read) ? ATMO_BLE_Permission_Read : 0;\n\tpermission |= ATMO_PROPERTY(BLEMovement, write) ? ATMO_BLE_Permission_Write : 0;\n\n\tATMO_DATATYPE types[3] = {ATMO_PROPERTY(BLEMovement, writeDataType), ATMO_PROPERTY(BLEMovement, readDataType), ATMO_PROPERTY(BLEMovement, notifyDataType)};\n\t\n\tATMO_BLE_GATTSAddCharacteristic(\n\t\tATMO_PROPERTY(BLEMovement, instance),\n\t\t&ATMO_VARIABLE(BLEMovement, bleCharacteristicHandle), \n\t\tATMO_VARIABLE(BLEMovement, bleServiceHandle), \n\t\tATMO_PROPERTY(BLEMovement, bleCharacteristicUuid), \n\t\tproperty, permission, ATMO_GetMaxValueSize(3, 64, types));\n\t\n\tATMO_BLE_GATTSRegisterCharacteristicAbilityHandle(\n\t\tATMO_PROPERTY(BLEMovement, instance),\n\t\tATMO_VARIABLE(BLEMovement, bleCharacteristicHandle), \n\t\tATMO_BLE_Characteristic_Written, \n\t\tATMO_ABILITY(BLEMovement, written));\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setValue": "\n\t\n\t// Convert to the desired write data type\n\tATMO_Value_t convertedValue;\n\tATMO_InitValue(&convertedValue);\n\tATMO_CreateValueConverted(&convertedValue, ATMO_PROPERTY(BLEMovement, readDataType), in);\n\n\tATMO_BLE_GATTSSetCharacteristic(\n\t\tATMO_PROPERTY(BLEMovement, instance),\n\t\tATMO_VARIABLE(BLEMovement, bleCharacteristicHandle),\n\t\tconvertedValue.size, \n\t\t(uint8_t *)convertedValue.data,\n\t\tNULL);\n\t\n\tATMO_FreeValue(&convertedValue);\n\t\t\n\treturn ATMO_Status_Success;\n\t",
              "written": "\n\tATMO_CreateValueConverted(out, ATMO_PROPERTY(BLEMovement, writeDataType), in);\n\treturn ATMO_Status_Success;\n\t",
              "subscibed": "\treturn ATMO_Status_Success;",
              "unsubscribed": "\treturn ATMO_Status_Success;"
            },
            "variables": {
              "bleServiceHandle": {
                "type": "ATMO_BLE_Handle_t"
              },
              "bleCharacteristicHandle": {
                "type": "ATMO_BLE_Handle_t"
              }
            },
            "embeddedPropertyConversions": {
              "bleServiceUuid": "string",
              "bleCharacteristicUuid": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "setValue": false,
              "written": false,
              "subscibed": false,
              "unsubscribed": false
            },
            "instance": "ATMO_DRIVERINSTANCE_BLE_BLE1",
            "bleServiceUuid": "cd900ce8-9603-4a92-b124-57f4befd5f5e",
            "bleCharacteristicUuid": "cd900ce8-9603-4a92-b124-57f4befd5f5f",
            "read": true,
            "write": true,
            "notify": false,
            "readDataType": "ATMO_DATATYPE_STRING",
            "writeDataType": "ATMO_DATATYPE_STRING",
            "notifyDataType": "ATMO_DATATYPE_STRING"
          },
          "meta": {
            "editorX": 135,
            "editorY": 840,
            "lastTrigger": "written"
          },
          "triggers": {
            "triggered": [],
            "written": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "STOP_Soft",
                "targetAbility": "evaluate"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "Forward",
                "targetAbility": "evaluate"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "Backward",
                "targetAbility": "evaluate"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "Left",
                "targetAbility": "evaluate"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "Right",
                "targetAbility": "evaluate"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "Stop_Hard",
                "targetAbility": "evaluate"
              }
            ],
            "subscibed": [],
            "unsubscribed": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setValue": "valueSet",
            "written": false,
            "subscibed": false,
            "unsubscribed": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setValue",
              "triggers": []
            },
            {
              "name": "written",
              "triggers": [
                "written"
              ]
            },
            {
              "name": "subscibed",
              "triggers": [
                "subscibed"
              ]
            },
            {
              "name": "unsubscribed",
              "triggers": [
                "unsubscribed"
              ]
            }
          ]
        },
        {
          "name": "STOP_Soft",
          "type": "EmbeddedComparison",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\treturn ATMO_Status_Success;\n\t",
              "evaluate": "\n\tATMO_BOOL_t conditionTrue = false;\n\n\t// Convert property to same type as input\n\tATMO_Value_t targetStr;\n\tATMO_Value_t targetNum;\n\t\n\tATMO_InitValue(&targetStr);\n\tATMO_InitValue(&targetNum);\n\tATMO_CreateValueString(&targetStr, ATMO_PROPERTY(STOP_Soft, target));\n\tATMO_CreateValueConverted(&targetNum, in->type, &targetStr);\n\t\n\tif(ATMO_CompareValues(in, &targetNum, ATMO_PROPERTY(STOP_Soft, condition), &conditionTrue) != ATMO_Status_Success)\n\t{\n\t\tATMO_Value_t value;\n\t\tATMO_InitValue(&value);\n\t\tATMO_TriggerHandler(ATMO_TRIGGER(STOP_Soft, invalidType), NULL);\n\t\tATMO_FreeValue(&value);\n\t\tATMO_FreeValue(&targetStr);\n\t\tATMO_FreeValue(&targetNum);\n\t\treturn ATMO_Status_Fail;\n\t}\n\n\tATMO_FreeValue(&targetStr);\n\tATMO_FreeValue(&targetNum);\n\n\n\tATMO_Value_t value;\n\tATMO_InitValue(&value);\n\tATMO_CreateValueCopy(&value, in);\n\tATMO_TriggerHandler(conditionTrue ? ATMO_TRIGGER(STOP_Soft, conditionTrue) : ATMO_TRIGGER(STOP_Soft, conditionFalse), &value);\n\tATMO_FreeValue(&value);\t\t\n\n\treturn ATMO_Status_Success;\n\t"
            },
            "variables": {},
            "embeddedPropertyConversions": {
              "target": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "evaluate": false
            },
            "condition": "ATMO_EQUAL",
            "target": "0"
          },
          "meta": {
            "editorX": 449,
            "editorY": 613,
            "lastTrigger": "conditionTrue"
          },
          "triggers": {
            "triggered": [],
            "conditionTrue": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "IN1_LeftMotorForward",
                "targetAbility": "setPinLow"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "IN2_LeftMotorBackward",
                "targetAbility": "setPinLow"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "IN3_RightMotorForward",
                "targetAbility": "setPinLow"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "IN4_RightMotorBackward",
                "targetAbility": "setPinLow"
              }
            ],
            "conditionFalse": [],
            "invalidType": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "evaluate": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "evaluate",
              "triggers": []
            }
          ]
        },
        {
          "name": "Forward",
          "type": "EmbeddedComparison",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\treturn ATMO_Status_Success;\n\t",
              "evaluate": "\n\tATMO_BOOL_t conditionTrue = false;\n\n\t// Convert property to same type as input\n\tATMO_Value_t targetStr;\n\tATMO_Value_t targetNum;\n\t\n\tATMO_InitValue(&targetStr);\n\tATMO_InitValue(&targetNum);\n\tATMO_CreateValueString(&targetStr, ATMO_PROPERTY(Forward, target));\n\tATMO_CreateValueConverted(&targetNum, in->type, &targetStr);\n\t\n\tif(ATMO_CompareValues(in, &targetNum, ATMO_PROPERTY(Forward, condition), &conditionTrue) != ATMO_Status_Success)\n\t{\n\t\tATMO_Value_t value;\n\t\tATMO_InitValue(&value);\n\t\tATMO_TriggerHandler(ATMO_TRIGGER(Forward, invalidType), NULL);\n\t\tATMO_FreeValue(&value);\n\t\tATMO_FreeValue(&targetStr);\n\t\tATMO_FreeValue(&targetNum);\n\t\treturn ATMO_Status_Fail;\n\t}\n\n\tATMO_FreeValue(&targetStr);\n\tATMO_FreeValue(&targetNum);\n\n\n\tATMO_Value_t value;\n\tATMO_InitValue(&value);\n\tATMO_CreateValueCopy(&value, in);\n\tATMO_TriggerHandler(conditionTrue ? ATMO_TRIGGER(Forward, conditionTrue) : ATMO_TRIGGER(Forward, conditionFalse), &value);\n\tATMO_FreeValue(&value);\t\t\n\n\treturn ATMO_Status_Success;\n\t"
            },
            "variables": {},
            "embeddedPropertyConversions": {
              "target": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "evaluate": false
            },
            "condition": "ATMO_EQUAL",
            "target": "1"
          },
          "meta": {
            "editorX": 449,
            "editorY": 727,
            "lastTrigger": "conditionTrue"
          },
          "triggers": {
            "triggered": [],
            "conditionTrue": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "IN4_RightMotorBackward",
                "targetAbility": "setPinLow"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "IN3_RightMotorForward",
                "targetAbility": "setPinHigh"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "IN2_LeftMotorBackward",
                "targetAbility": "setPinLow"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "IN1_LeftMotorForward",
                "targetAbility": "setPinHigh"
              }
            ],
            "conditionFalse": [],
            "invalidType": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "evaluate": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "evaluate",
              "triggers": []
            }
          ]
        },
        {
          "name": "BLEAcceleration",
          "type": "EmbeddedBLECharacteristicCustom",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables",
            "ble"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_BLE_GATTSAddService(\n\t\tATMO_PROPERTY(BLEAcceleration, instance),\n\t\t&ATMO_VARIABLE(BLEAcceleration, bleServiceHandle), \n\t\tATMO_PROPERTY(BLEAcceleration, bleServiceUuid));\n\t\n\tuint8_t property = 0;\n\tuint8_t permission = 0;\n\t\n\tproperty |= ATMO_PROPERTY(BLEAcceleration, read) ? ATMO_BLE_Property_Read : 0;\n\tproperty |= ATMO_PROPERTY(BLEAcceleration, write) ? ATMO_BLE_Property_Write : 0;\n\tproperty |= ATMO_PROPERTY(BLEAcceleration, notify) ? ATMO_BLE_Property_Notify : 0;\n\n\tpermission |= ATMO_PROPERTY(BLEAcceleration, read) ? ATMO_BLE_Permission_Read : 0;\n\tpermission |= ATMO_PROPERTY(BLEAcceleration, write) ? ATMO_BLE_Permission_Write : 0;\n\n\tATMO_DATATYPE types[3] = {ATMO_PROPERTY(BLEAcceleration, writeDataType), ATMO_PROPERTY(BLEAcceleration, readDataType), ATMO_PROPERTY(BLEAcceleration, notifyDataType)};\n\t\n\tATMO_BLE_GATTSAddCharacteristic(\n\t\tATMO_PROPERTY(BLEAcceleration, instance),\n\t\t&ATMO_VARIABLE(BLEAcceleration, bleCharacteristicHandle), \n\t\tATMO_VARIABLE(BLEAcceleration, bleServiceHandle), \n\t\tATMO_PROPERTY(BLEAcceleration, bleCharacteristicUuid), \n\t\tproperty, permission, ATMO_GetMaxValueSize(3, 64, types));\n\t\n\tATMO_BLE_GATTSRegisterCharacteristicAbilityHandle(\n\t\tATMO_PROPERTY(BLEAcceleration, instance),\n\t\tATMO_VARIABLE(BLEAcceleration, bleCharacteristicHandle), \n\t\tATMO_BLE_Characteristic_Written, \n\t\tATMO_ABILITY(BLEAcceleration, written));\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setValue": "\n\t\n\t// Convert to the desired write data type\n\tATMO_Value_t convertedValue;\n\tATMO_InitValue(&convertedValue);\n\tATMO_CreateValueConverted(&convertedValue, ATMO_PROPERTY(BLEAcceleration, readDataType), in);\n\n\tATMO_BLE_GATTSSetCharacteristic(\n\t\tATMO_PROPERTY(BLEAcceleration, instance),\n\t\tATMO_VARIABLE(BLEAcceleration, bleCharacteristicHandle),\n\t\tconvertedValue.size, \n\t\t(uint8_t *)convertedValue.data,\n\t\tNULL);\n\t\n\tATMO_FreeValue(&convertedValue);\n\t\t\n\treturn ATMO_Status_Success;\n\t",
              "written": "\n\tATMO_CreateValueConverted(out, ATMO_PROPERTY(BLEAcceleration, writeDataType), in);\n\treturn ATMO_Status_Success;\n\t",
              "subscibed": "\treturn ATMO_Status_Success;",
              "unsubscribed": "\treturn ATMO_Status_Success;"
            },
            "variables": {
              "bleServiceHandle": {
                "type": "ATMO_BLE_Handle_t"
              },
              "bleCharacteristicHandle": {
                "type": "ATMO_BLE_Handle_t"
              }
            },
            "embeddedPropertyConversions": {
              "bleServiceUuid": "string",
              "bleCharacteristicUuid": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "setValue": false,
              "written": false,
              "subscibed": false,
              "unsubscribed": false
            },
            "instance": "ATMO_DRIVERINSTANCE_BLE_BLE1",
            "bleServiceUuid": "cd900ce8-9603-4a92-b124-57f4befd5f5e",
            "bleCharacteristicUuid": "cd900ce8-9603-4a92-b124-57f4befd5f61",
            "read": true,
            "write": true,
            "notify": false,
            "readDataType": "ATMO_DATATYPE_STRING",
            "writeDataType": "ATMO_DATATYPE_STRING",
            "notifyDataType": "ATMO_DATATYPE_STRING"
          },
          "meta": {
            "editorX": 139,
            "editorY": 448,
            "lastTrigger": "written"
          },
          "triggers": {
            "triggered": [],
            "written": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "ToInterger",
                "targetAbility": "convert"
              }
            ],
            "subscibed": [],
            "unsubscribed": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setValue": "valueSet",
            "written": false,
            "subscibed": false,
            "unsubscribed": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setValue",
              "triggers": []
            },
            {
              "name": "written",
              "triggers": [
                "written"
              ]
            },
            {
              "name": "subscibed",
              "triggers": [
                "subscibed"
              ]
            },
            {
              "name": "unsubscribed",
              "triggers": [
                "unsubscribed"
              ]
            }
          ]
        },
        {
          "name": "ToInterger",
          "type": "EmbeddedDataTypeConversion",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\treturn ATMO_Status_Success;\n\t",
              "convert": "\n    return ATMO_CreateValueConverted(out, ATMO_PROPERTY(ToInterger, type), in);\n    "
            },
            "variables": {},
            "embeddedPropertyConversions": {},
            "codeUserChanged": {
              "setup": false,
              "convert": false
            },
            "type": "ATMO_DATATYPE_INT"
          },
          "meta": {
            "editorX": 267,
            "editorY": 447,
            "lastTrigger": "converted"
          },
          "triggers": {
            "triggered": [],
            "converted": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "AddOffset",
                "targetAbility": "performOperation"
              }
            ]
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "convert": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "convert",
              "triggers": [
                "converted"
              ]
            }
          ]
        },
        {
          "name": "Acceleration",
          "type": "EmbeddedVariable",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n    ATMO_InitValue(&ATMO_VARIABLE(Acceleration, value));\n    if(ATMO_PROPERTY(Acceleration, initialValue) != NULL)\n    {\n        // Create initial value as string\n        ATMO_Value_t strValue;\n        ATMO_InitValue(&strValue);\n        ATMO_CreateValueString(&strValue, ATMO_PROPERTY(Acceleration, initialValue));\n\n        // Convert to desired type\n        ATMO_CreateValueConverted(&ATMO_VARIABLE(Acceleration, value), ATMO_PROPERTY(Acceleration, initialDataType), &strValue);\n        ATMO_FreeValue(&strValue);\n    }\n\treturn ATMO_Status_Success;\n\t",
              "setValue": "\n    ATMO_CreateValueCopy(&ATMO_VARIABLE(Acceleration, value), in);\n    ATMO_CreateValueCopy(out, in);\n    return ATMO_Status_Success;\n    ",
              "getValue": "\n    ATMO_CreateValueCopy(out, &ATMO_VARIABLE(Acceleration, value));\n    return ATMO_Status_Success;\n    "
            },
            "variables": {
              "value": {
                "type": "ATMO_Value_t"
              }
            },
            "embeddedPropertyConversions": {
              "initialValue": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "setValue": false,
              "getValue": false
            },
            "initialValue": "50",
            "initialDataType": "ATMO_DATATYPE_INT"
          },
          "meta": {
            "editorX": 504,
            "editorY": 445,
            "lastTrigger": "valueSet"
          },
          "triggers": {
            "triggered": [],
            "valueSet": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "PWM_LeftMotor",
                "targetAbility": "setDutyCycle"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "PWM_RightMotor",
                "targetAbility": "setDutyCycle"
              }
            ],
            "valueRetrieved": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setValue": false,
            "getValue": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setValue",
              "triggers": [
                "valueSet"
              ]
            },
            {
              "name": "getValue",
              "triggers": [
                "valueRetrieved"
              ]
            }
          ]
        },
        {
          "name": "IN1_LeftMotorForward",
          "type": "EmbeddedGPIOPin",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_GPIO_Config_t config;\n\tconfig.pinMode = ATMO_PROPERTY(IN1_LeftMotorForward, mode);\n\tconfig.initialState = ATMO_PROPERTY(IN1_LeftMotorForward, state);\n\tATMO_GPIO_SetPinConfiguration(ATMO_PROPERTY(IN1_LeftMotorForward, instance), ATMO_PROPERTY(IN1_LeftMotorForward, pin), &config);\n\n\t#if ATMO_PROPERTY(IN1_LeftMotorForward, interruptEnabled) == true\n\t\tATMO_GPIO_RegisterInterruptCallback(\n\t\t\tATMO_PROPERTY(IN1_LeftMotorForward, instance), \n\t\t\tATMO_PROPERTY(IN1_LeftMotorForward, pin), \n\t\t\tATMO_PROPERTY(IN1_LeftMotorForward, interruptMode), \n\t\t\tATMO_INTERRUPT(IN1_LeftMotorForward, interrupt));\n\t#endif\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setState": "\n\tATMO_BOOL_t state;\n\tATMO_GetBool(in, &state);\n\tATMO_GPIO_SetPinState(ATMO_PROPERTY(IN1_LeftMotorForward, instance), ATMO_PROPERTY(IN1_LeftMotorForward, pin), (ATMO_GPIO_PinState_t)state);\n\treturn ATMO_Status_Success;\n\t",
              "setPinHigh": "\n\tATMO_GPIO_SetPinState(ATMO_PROPERTY(IN1_LeftMotorForward, instance), ATMO_PROPERTY(IN1_LeftMotorForward, pin), ATMO_GPIO_PinState_High);\n\treturn ATMO_Status_Success;\n\t",
              "setPinLow": "\n\tATMO_GPIO_SetPinState(ATMO_PROPERTY(IN1_LeftMotorForward, instance), ATMO_PROPERTY(IN1_LeftMotorForward, pin), ATMO_GPIO_PinState_Low);\n\treturn ATMO_Status_Success;\n\t",
              "read": "\n\tATMO_CreateValueBool(out, ATMO_GPIO_Read(ATMO_PROPERTY(IN1_LeftMotorForward, instance), ATMO_PROPERTY(IN1_LeftMotorForward, pin)));\n\treturn ATMO_Status_Success;\n\t",
              "toggle": "\n\tATMO_GPIO_Toggle(ATMO_PROPERTY(IN1_LeftMotorForward, instance), ATMO_PROPERTY(IN1_LeftMotorForward, pin));\n\treturn ATMO_Status_Success;\n\t",
              "interrupt": "\n\tATMO_CreateValueCopy(out, in);\n\treturn ATMO_Status_Success;\n\t"
            },
            "variables": {},
            "embeddedPropertyConversions": {},
            "codeUserChanged": {
              "setup": false,
              "setState": false,
              "setPinHigh": false,
              "setPinLow": false,
              "read": false,
              "toggle": false,
              "interrupt": false
            },
            "instance": "ATMO_DRIVERINSTANCE_GPIO_GPIO1",
            "pin": "P5_7",
            "mode": "ATMO_GPIO_PinMode_Output_PushPull",
            "state": "ATMO_GPIO_PinState_Low",
            "interruptEnabled": false,
            "interruptMode": "ATMO_GPIO_InterruptTrigger_None"
          },
          "meta": {
            "editorX": 813,
            "editorY": 659,
            "lastTrigger": "stateSet"
          },
          "triggers": {
            "triggered": [],
            "stateSet": [],
            "read": [],
            "toggled": [],
            "interrupt": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setState": false,
            "setPinHigh": false,
            "setPinLow": false,
            "read": false,
            "toggle": false,
            "interrupt": true
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setState",
              "triggers": [
                "stateSet"
              ]
            },
            {
              "name": "setPinHigh",
              "triggers": [
                "stateSet"
              ]
            },
            {
              "name": "setPinLow",
              "triggers": [
                "stateSet"
              ]
            },
            {
              "name": "read",
              "triggers": [
                "read"
              ]
            },
            {
              "name": "toggle",
              "triggers": [
                "toggled"
              ]
            },
            {
              "name": "interrupt",
              "triggers": [
                "interrupt"
              ]
            }
          ]
        },
        {
          "name": "IN2_LeftMotorBackward",
          "type": "EmbeddedGPIOPin",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_GPIO_Config_t config;\n\tconfig.pinMode = ATMO_PROPERTY(IN2_LeftMotorBackward, mode);\n\tconfig.initialState = ATMO_PROPERTY(IN2_LeftMotorBackward, state);\n\tATMO_GPIO_SetPinConfiguration(ATMO_PROPERTY(IN2_LeftMotorBackward, instance), ATMO_PROPERTY(IN2_LeftMotorBackward, pin), &config);\n\n\t#if ATMO_PROPERTY(IN2_LeftMotorBackward, interruptEnabled) == true\n\t\tATMO_GPIO_RegisterInterruptCallback(\n\t\t\tATMO_PROPERTY(IN2_LeftMotorBackward, instance), \n\t\t\tATMO_PROPERTY(IN2_LeftMotorBackward, pin), \n\t\t\tATMO_PROPERTY(IN2_LeftMotorBackward, interruptMode), \n\t\t\tATMO_INTERRUPT(IN2_LeftMotorBackward, interrupt));\n\t#endif\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setState": "\n\tATMO_BOOL_t state;\n\tATMO_GetBool(in, &state);\n\tATMO_GPIO_SetPinState(ATMO_PROPERTY(IN2_LeftMotorBackward, instance), ATMO_PROPERTY(IN2_LeftMotorBackward, pin), (ATMO_GPIO_PinState_t)state);\n\treturn ATMO_Status_Success;\n\t",
              "setPinHigh": "\n\tATMO_GPIO_SetPinState(ATMO_PROPERTY(IN2_LeftMotorBackward, instance), ATMO_PROPERTY(IN2_LeftMotorBackward, pin), ATMO_GPIO_PinState_High);\n\treturn ATMO_Status_Success;\n\t",
              "setPinLow": "\n\tATMO_GPIO_SetPinState(ATMO_PROPERTY(IN2_LeftMotorBackward, instance), ATMO_PROPERTY(IN2_LeftMotorBackward, pin), ATMO_GPIO_PinState_Low);\n\treturn ATMO_Status_Success;\n\t",
              "read": "\n\tATMO_CreateValueBool(out, ATMO_GPIO_Read(ATMO_PROPERTY(IN2_LeftMotorBackward, instance), ATMO_PROPERTY(IN2_LeftMotorBackward, pin)));\n\treturn ATMO_Status_Success;\n\t",
              "toggle": "\n\tATMO_GPIO_Toggle(ATMO_PROPERTY(IN2_LeftMotorBackward, instance), ATMO_PROPERTY(IN2_LeftMotorBackward, pin));\n\treturn ATMO_Status_Success;\n\t",
              "interrupt": "\n\tATMO_CreateValueCopy(out, in);\n\treturn ATMO_Status_Success;\n\t"
            },
            "variables": {},
            "embeddedPropertyConversions": {},
            "codeUserChanged": {
              "setup": false,
              "setState": false,
              "setPinHigh": false,
              "setPinLow": false,
              "read": false,
              "toggle": false,
              "interrupt": false
            },
            "instance": "ATMO_DRIVERINSTANCE_GPIO_GPIO1",
            "pin": "P5_6",
            "mode": "ATMO_GPIO_PinMode_Output_PushPull",
            "state": "ATMO_GPIO_PinState_Low",
            "interruptEnabled": false,
            "interruptMode": "ATMO_GPIO_InterruptTrigger_None"
          },
          "meta": {
            "editorX": 811,
            "editorY": 812,
            "lastTrigger": "interrupt"
          },
          "triggers": {
            "triggered": [],
            "stateSet": [],
            "read": [],
            "toggled": [],
            "interrupt": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setState": false,
            "setPinHigh": false,
            "setPinLow": false,
            "read": false,
            "toggle": false,
            "interrupt": true
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setState",
              "triggers": [
                "stateSet"
              ]
            },
            {
              "name": "setPinHigh",
              "triggers": [
                "stateSet"
              ]
            },
            {
              "name": "setPinLow",
              "triggers": [
                "stateSet"
              ]
            },
            {
              "name": "read",
              "triggers": [
                "read"
              ]
            },
            {
              "name": "toggle",
              "triggers": [
                "toggled"
              ]
            },
            {
              "name": "interrupt",
              "triggers": [
                "interrupt"
              ]
            }
          ]
        },
        {
          "name": "IN3_RightMotorForward",
          "type": "EmbeddedGPIOPin",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_GPIO_Config_t config;\n\tconfig.pinMode = ATMO_PROPERTY(IN3_RightMotorForward, mode);\n\tconfig.initialState = ATMO_PROPERTY(IN3_RightMotorForward, state);\n\tATMO_GPIO_SetPinConfiguration(ATMO_PROPERTY(IN3_RightMotorForward, instance), ATMO_PROPERTY(IN3_RightMotorForward, pin), &config);\n\n\t#if ATMO_PROPERTY(IN3_RightMotorForward, interruptEnabled) == true\n\t\tATMO_GPIO_RegisterInterruptCallback(\n\t\t\tATMO_PROPERTY(IN3_RightMotorForward, instance), \n\t\t\tATMO_PROPERTY(IN3_RightMotorForward, pin), \n\t\t\tATMO_PROPERTY(IN3_RightMotorForward, interruptMode), \n\t\t\tATMO_INTERRUPT(IN3_RightMotorForward, interrupt));\n\t#endif\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setState": "\n\tATMO_BOOL_t state;\n\tATMO_GetBool(in, &state);\n\tATMO_GPIO_SetPinState(ATMO_PROPERTY(IN3_RightMotorForward, instance), ATMO_PROPERTY(IN3_RightMotorForward, pin), (ATMO_GPIO_PinState_t)state);\n\treturn ATMO_Status_Success;\n\t",
              "setPinHigh": "\n\tATMO_GPIO_SetPinState(ATMO_PROPERTY(IN3_RightMotorForward, instance), ATMO_PROPERTY(IN3_RightMotorForward, pin), ATMO_GPIO_PinState_High);\n\treturn ATMO_Status_Success;\n\t",
              "setPinLow": "\n\tATMO_GPIO_SetPinState(ATMO_PROPERTY(IN3_RightMotorForward, instance), ATMO_PROPERTY(IN3_RightMotorForward, pin), ATMO_GPIO_PinState_Low);\n\treturn ATMO_Status_Success;\n\t",
              "read": "\n\tATMO_CreateValueBool(out, ATMO_GPIO_Read(ATMO_PROPERTY(IN3_RightMotorForward, instance), ATMO_PROPERTY(IN3_RightMotorForward, pin)));\n\treturn ATMO_Status_Success;\n\t",
              "toggle": "\n\tATMO_GPIO_Toggle(ATMO_PROPERTY(IN3_RightMotorForward, instance), ATMO_PROPERTY(IN3_RightMotorForward, pin));\n\treturn ATMO_Status_Success;\n\t",
              "interrupt": "\n\tATMO_CreateValueCopy(out, in);\n\treturn ATMO_Status_Success;\n\t"
            },
            "variables": {},
            "embeddedPropertyConversions": {},
            "codeUserChanged": {
              "setup": false,
              "setState": false,
              "setPinHigh": false,
              "setPinLow": false,
              "read": false,
              "toggle": false,
              "interrupt": false
            },
            "instance": "ATMO_DRIVERINSTANCE_GPIO_GPIO1",
            "pin": "P5_5",
            "mode": "ATMO_GPIO_PinMode_Output_PushPull",
            "state": "ATMO_GPIO_PinState_Low",
            "interruptEnabled": false,
            "interruptMode": "ATMO_GPIO_InterruptTrigger_None"
          },
          "meta": {
            "editorX": 809,
            "editorY": 930,
            "lastTrigger": "interrupt"
          },
          "triggers": {
            "triggered": [],
            "stateSet": [],
            "read": [],
            "toggled": [],
            "interrupt": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setState": false,
            "setPinHigh": false,
            "setPinLow": false,
            "read": false,
            "toggle": false,
            "interrupt": true
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setState",
              "triggers": [
                "stateSet"
              ]
            },
            {
              "name": "setPinHigh",
              "triggers": [
                "stateSet"
              ]
            },
            {
              "name": "setPinLow",
              "triggers": [
                "stateSet"
              ]
            },
            {
              "name": "read",
              "triggers": [
                "read"
              ]
            },
            {
              "name": "toggle",
              "triggers": [
                "toggled"
              ]
            },
            {
              "name": "interrupt",
              "triggers": [
                "interrupt"
              ]
            }
          ]
        },
        {
          "name": "IN4_RightMotorBackward",
          "type": "EmbeddedGPIOPin",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_GPIO_Config_t config;\n\tconfig.pinMode = ATMO_PROPERTY(IN4_RightMotorBackward, mode);\n\tconfig.initialState = ATMO_PROPERTY(IN4_RightMotorBackward, state);\n\tATMO_GPIO_SetPinConfiguration(ATMO_PROPERTY(IN4_RightMotorBackward, instance), ATMO_PROPERTY(IN4_RightMotorBackward, pin), &config);\n\n\t#if ATMO_PROPERTY(IN4_RightMotorBackward, interruptEnabled) == true\n\t\tATMO_GPIO_RegisterInterruptCallback(\n\t\t\tATMO_PROPERTY(IN4_RightMotorBackward, instance), \n\t\t\tATMO_PROPERTY(IN4_RightMotorBackward, pin), \n\t\t\tATMO_PROPERTY(IN4_RightMotorBackward, interruptMode), \n\t\t\tATMO_INTERRUPT(IN4_RightMotorBackward, interrupt));\n\t#endif\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setState": "\n\tATMO_BOOL_t state;\n\tATMO_GetBool(in, &state);\n\tATMO_GPIO_SetPinState(ATMO_PROPERTY(IN4_RightMotorBackward, instance), ATMO_PROPERTY(IN4_RightMotorBackward, pin), (ATMO_GPIO_PinState_t)state);\n\treturn ATMO_Status_Success;\n\t",
              "setPinHigh": "\n\tATMO_GPIO_SetPinState(ATMO_PROPERTY(IN4_RightMotorBackward, instance), ATMO_PROPERTY(IN4_RightMotorBackward, pin), ATMO_GPIO_PinState_High);\n\treturn ATMO_Status_Success;\n\t",
              "setPinLow": "\n\tATMO_GPIO_SetPinState(ATMO_PROPERTY(IN4_RightMotorBackward, instance), ATMO_PROPERTY(IN4_RightMotorBackward, pin), ATMO_GPIO_PinState_Low);\n\treturn ATMO_Status_Success;\n\t",
              "read": "\n\tATMO_CreateValueBool(out, ATMO_GPIO_Read(ATMO_PROPERTY(IN4_RightMotorBackward, instance), ATMO_PROPERTY(IN4_RightMotorBackward, pin)));\n\treturn ATMO_Status_Success;\n\t",
              "toggle": "\n\tATMO_GPIO_Toggle(ATMO_PROPERTY(IN4_RightMotorBackward, instance), ATMO_PROPERTY(IN4_RightMotorBackward, pin));\n\treturn ATMO_Status_Success;\n\t",
              "interrupt": "\n\tATMO_CreateValueCopy(out, in);\n\treturn ATMO_Status_Success;\n\t"
            },
            "variables": {},
            "embeddedPropertyConversions": {},
            "codeUserChanged": {
              "setup": false,
              "setState": false,
              "setPinHigh": false,
              "setPinLow": false,
              "read": false,
              "toggle": false,
              "interrupt": false
            },
            "instance": "ATMO_DRIVERINSTANCE_GPIO_GPIO1",
            "pin": "P5_4",
            "mode": "ATMO_GPIO_PinMode_Output_PushPull",
            "state": "ATMO_GPIO_PinState_Low",
            "interruptEnabled": false,
            "interruptMode": "ATMO_GPIO_InterruptTrigger_None"
          },
          "meta": {
            "editorX": 808,
            "editorY": 1087,
            "lastTrigger": "stateSet"
          },
          "triggers": {
            "triggered": [],
            "stateSet": [],
            "read": [],
            "toggled": [],
            "interrupt": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setState": false,
            "setPinHigh": false,
            "setPinLow": false,
            "read": false,
            "toggle": false,
            "interrupt": true
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setState",
              "triggers": [
                "stateSet"
              ]
            },
            {
              "name": "setPinHigh",
              "triggers": [
                "stateSet"
              ]
            },
            {
              "name": "setPinLow",
              "triggers": [
                "stateSet"
              ]
            },
            {
              "name": "read",
              "triggers": [
                "read"
              ]
            },
            {
              "name": "toggle",
              "triggers": [
                "toggled"
              ]
            },
            {
              "name": "interrupt",
              "triggers": [
                "interrupt"
              ]
            }
          ]
        },
        {
          "name": "Backward",
          "type": "EmbeddedComparison",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\treturn ATMO_Status_Success;\n\t",
              "evaluate": "\n\tATMO_BOOL_t conditionTrue = false;\n\n\t// Convert property to same type as input\n\tATMO_Value_t targetStr;\n\tATMO_Value_t targetNum;\n\t\n\tATMO_InitValue(&targetStr);\n\tATMO_InitValue(&targetNum);\n\tATMO_CreateValueString(&targetStr, ATMO_PROPERTY(Backward, target));\n\tATMO_CreateValueConverted(&targetNum, in->type, &targetStr);\n\t\n\tif(ATMO_CompareValues(in, &targetNum, ATMO_PROPERTY(Backward, condition), &conditionTrue) != ATMO_Status_Success)\n\t{\n\t\tATMO_Value_t value;\n\t\tATMO_InitValue(&value);\n\t\tATMO_TriggerHandler(ATMO_TRIGGER(Backward, invalidType), NULL);\n\t\tATMO_FreeValue(&value);\n\t\tATMO_FreeValue(&targetStr);\n\t\tATMO_FreeValue(&targetNum);\n\t\treturn ATMO_Status_Fail;\n\t}\n\n\tATMO_FreeValue(&targetStr);\n\tATMO_FreeValue(&targetNum);\n\n\n\tATMO_Value_t value;\n\tATMO_InitValue(&value);\n\tATMO_CreateValueCopy(&value, in);\n\tATMO_TriggerHandler(conditionTrue ? ATMO_TRIGGER(Backward, conditionTrue) : ATMO_TRIGGER(Backward, conditionFalse), &value);\n\tATMO_FreeValue(&value);\t\t\n\n\treturn ATMO_Status_Success;\n\t"
            },
            "variables": {},
            "embeddedPropertyConversions": {
              "target": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "evaluate": false
            },
            "condition": "ATMO_EQUAL",
            "target": "2"
          },
          "meta": {
            "editorX": 450,
            "editorY": 835,
            "lastTrigger": "conditionTrue"
          },
          "triggers": {
            "triggered": [],
            "conditionTrue": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "IN1_LeftMotorForward",
                "targetAbility": "setPinLow"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "IN2_LeftMotorBackward",
                "targetAbility": "setPinHigh"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "IN3_RightMotorForward",
                "targetAbility": "setPinLow"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "IN4_RightMotorBackward",
                "targetAbility": "setPinHigh"
              }
            ],
            "conditionFalse": [],
            "invalidType": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "evaluate": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "evaluate",
              "triggers": []
            }
          ]
        },
        {
          "name": "Left",
          "type": "EmbeddedComparison",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\treturn ATMO_Status_Success;\n\t",
              "evaluate": "\n\tATMO_BOOL_t conditionTrue = false;\n\n\t// Convert property to same type as input\n\tATMO_Value_t targetStr;\n\tATMO_Value_t targetNum;\n\t\n\tATMO_InitValue(&targetStr);\n\tATMO_InitValue(&targetNum);\n\tATMO_CreateValueString(&targetStr, ATMO_PROPERTY(Left, target));\n\tATMO_CreateValueConverted(&targetNum, in->type, &targetStr);\n\t\n\tif(ATMO_CompareValues(in, &targetNum, ATMO_PROPERTY(Left, condition), &conditionTrue) != ATMO_Status_Success)\n\t{\n\t\tATMO_Value_t value;\n\t\tATMO_InitValue(&value);\n\t\tATMO_TriggerHandler(ATMO_TRIGGER(Left, invalidType), NULL);\n\t\tATMO_FreeValue(&value);\n\t\tATMO_FreeValue(&targetStr);\n\t\tATMO_FreeValue(&targetNum);\n\t\treturn ATMO_Status_Fail;\n\t}\n\n\tATMO_FreeValue(&targetStr);\n\tATMO_FreeValue(&targetNum);\n\n\n\tATMO_Value_t value;\n\tATMO_InitValue(&value);\n\tATMO_CreateValueCopy(&value, in);\n\tATMO_TriggerHandler(conditionTrue ? ATMO_TRIGGER(Left, conditionTrue) : ATMO_TRIGGER(Left, conditionFalse), &value);\n\tATMO_FreeValue(&value);\t\t\n\n\treturn ATMO_Status_Success;\n\t"
            },
            "variables": {},
            "embeddedPropertyConversions": {
              "target": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "evaluate": false
            },
            "condition": "ATMO_EQUAL",
            "target": "3"
          },
          "meta": {
            "editorX": 454,
            "editorY": 937,
            "lastTrigger": "conditionTrue"
          },
          "triggers": {
            "triggered": [],
            "conditionTrue": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "IN1_LeftMotorForward",
                "targetAbility": "setPinHigh"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "IN2_LeftMotorBackward",
                "targetAbility": "setPinLow"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "IN3_RightMotorForward",
                "targetAbility": "setPinLow"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "IN4_RightMotorBackward",
                "targetAbility": "setPinHigh"
              }
            ],
            "conditionFalse": [],
            "invalidType": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "evaluate": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "evaluate",
              "triggers": []
            }
          ]
        },
        {
          "name": "Right",
          "type": "EmbeddedComparison",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\treturn ATMO_Status_Success;\n\t",
              "evaluate": "\n\tATMO_BOOL_t conditionTrue = false;\n\n\t// Convert property to same type as input\n\tATMO_Value_t targetStr;\n\tATMO_Value_t targetNum;\n\t\n\tATMO_InitValue(&targetStr);\n\tATMO_InitValue(&targetNum);\n\tATMO_CreateValueString(&targetStr, ATMO_PROPERTY(Right, target));\n\tATMO_CreateValueConverted(&targetNum, in->type, &targetStr);\n\t\n\tif(ATMO_CompareValues(in, &targetNum, ATMO_PROPERTY(Right, condition), &conditionTrue) != ATMO_Status_Success)\n\t{\n\t\tATMO_Value_t value;\n\t\tATMO_InitValue(&value);\n\t\tATMO_TriggerHandler(ATMO_TRIGGER(Right, invalidType), NULL);\n\t\tATMO_FreeValue(&value);\n\t\tATMO_FreeValue(&targetStr);\n\t\tATMO_FreeValue(&targetNum);\n\t\treturn ATMO_Status_Fail;\n\t}\n\n\tATMO_FreeValue(&targetStr);\n\tATMO_FreeValue(&targetNum);\n\n\n\tATMO_Value_t value;\n\tATMO_InitValue(&value);\n\tATMO_CreateValueCopy(&value, in);\n\tATMO_TriggerHandler(conditionTrue ? ATMO_TRIGGER(Right, conditionTrue) : ATMO_TRIGGER(Right, conditionFalse), &value);\n\tATMO_FreeValue(&value);\t\t\n\n\treturn ATMO_Status_Success;\n\t"
            },
            "variables": {},
            "embeddedPropertyConversions": {
              "target": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "evaluate": false
            },
            "condition": "ATMO_EQUAL",
            "target": "4"
          },
          "meta": {
            "editorX": 457,
            "editorY": 1055,
            "lastTrigger": "conditionTrue"
          },
          "triggers": {
            "triggered": [],
            "conditionTrue": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "IN1_LeftMotorForward",
                "targetAbility": "setPinLow"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "IN2_LeftMotorBackward",
                "targetAbility": "setPinHigh"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "IN3_RightMotorForward",
                "targetAbility": "setPinHigh"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "IN4_RightMotorBackward",
                "targetAbility": "setPinLow"
              }
            ],
            "conditionFalse": [],
            "invalidType": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "evaluate": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "evaluate",
              "triggers": []
            }
          ]
        },
        {
          "name": "Stop_Hard",
          "type": "EmbeddedComparison",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\treturn ATMO_Status_Success;\n\t",
              "evaluate": "\n\tATMO_BOOL_t conditionTrue = false;\n\n\t// Convert property to same type as input\n\tATMO_Value_t targetStr;\n\tATMO_Value_t targetNum;\n\t\n\tATMO_InitValue(&targetStr);\n\tATMO_InitValue(&targetNum);\n\tATMO_CreateValueString(&targetStr, ATMO_PROPERTY(Stop_Hard, target));\n\tATMO_CreateValueConverted(&targetNum, in->type, &targetStr);\n\t\n\tif(ATMO_CompareValues(in, &targetNum, ATMO_PROPERTY(Stop_Hard, condition), &conditionTrue) != ATMO_Status_Success)\n\t{\n\t\tATMO_Value_t value;\n\t\tATMO_InitValue(&value);\n\t\tATMO_TriggerHandler(ATMO_TRIGGER(Stop_Hard, invalidType), NULL);\n\t\tATMO_FreeValue(&value);\n\t\tATMO_FreeValue(&targetStr);\n\t\tATMO_FreeValue(&targetNum);\n\t\treturn ATMO_Status_Fail;\n\t}\n\n\tATMO_FreeValue(&targetStr);\n\tATMO_FreeValue(&targetNum);\n\n\n\tATMO_Value_t value;\n\tATMO_InitValue(&value);\n\tATMO_CreateValueCopy(&value, in);\n\tATMO_TriggerHandler(conditionTrue ? ATMO_TRIGGER(Stop_Hard, conditionTrue) : ATMO_TRIGGER(Stop_Hard, conditionFalse), &value);\n\tATMO_FreeValue(&value);\t\t\n\n\treturn ATMO_Status_Success;\n\t"
            },
            "variables": {},
            "embeddedPropertyConversions": {
              "target": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "evaluate": false
            },
            "condition": "ATMO_EQUAL",
            "target": "5"
          },
          "meta": {
            "editorX": 455,
            "editorY": 1159,
            "lastTrigger": "conditionTrue"
          },
          "triggers": {
            "triggered": [],
            "conditionTrue": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "IN1_LeftMotorForward",
                "targetAbility": "setPinHigh"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "IN2_LeftMotorBackward",
                "targetAbility": "setPinHigh"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "IN3_RightMotorForward",
                "targetAbility": "setPinHigh"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "IN4_RightMotorBackward",
                "targetAbility": "setPinHigh"
              }
            ],
            "conditionFalse": [],
            "invalidType": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "evaluate": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "evaluate",
              "triggers": []
            }
          ]
        },
        {
          "name": "PWM_LeftMotor",
          "type": "EmbeddedPWMPin",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables",
            "pwm"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_PWM_Config_t config;\n\tconfig.pwmFreqHz = ATMO_PROPERTY(PWM_LeftMotor, frequency);\n\tconfig.dutyCycle = ATMO_PROPERTY(PWM_LeftMotor, dutyCycle);\n\tATMO_PWM_SetPinConfiguration(ATMO_PROPERTY(PWM_LeftMotor, instance), ATMO_PROPERTY(PWM_LeftMotor, pin), &config);\n\tATMO_PWM_Enable(\n\t\tATMO_PROPERTY(PWM_LeftMotor, instance),\n\t\tATMO_PROPERTY(PWM_LeftMotor, pin)\n\t);\n\treturn ATMO_Status_Success;\n\t",
              "setDutyCycle": "\n\tunsigned int dutyCycle;\n\tATMO_GetUnsignedInt(in, &dutyCycle);\n\n\tATMO_PWM_Config_t config;\n\tconfig.pwmFreqHz = ATMO_PROPERTY(PWM_LeftMotor, frequency);\n\tconfig.dutyCycle = dutyCycle;\n\tATMO_PWM_SetPinConfiguration(ATMO_PROPERTY(PWM_LeftMotor, instance), ATMO_PROPERTY(PWM_LeftMotor, pin), &config);\n\t\n\treturn ATMO_Status_Success;\n\t"
            },
            "variables": {},
            "embeddedPropertyConversions": {},
            "codeUserChanged": {
              "setup": false,
              "setDutyCycle": false
            },
            "instance": "ATMO_DRIVERINSTANCE_PWM_PWM1",
            "pin": "P13_7",
            "frequency": 1000,
            "dutyCycle": "50"
          },
          "meta": {
            "editorX": 644,
            "editorY": 343,
            "lastTrigger": "triggered"
          },
          "triggers": {
            "triggered": [],
            "dutyCycleSet": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setDutyCycle": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setDutyCycle",
              "triggers": [
                "dutyCycleSet"
              ]
            }
          ]
        },
        {
          "name": "BLE_Relay",
          "type": "EmbeddedBLECharacteristicCustom",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables",
            "ble"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_BLE_GATTSAddService(\n\t\tATMO_PROPERTY(BLE_Relay, instance),\n\t\t&ATMO_VARIABLE(BLE_Relay, bleServiceHandle), \n\t\tATMO_PROPERTY(BLE_Relay, bleServiceUuid));\n\t\n\tuint8_t property = 0;\n\tuint8_t permission = 0;\n\t\n\tproperty |= ATMO_PROPERTY(BLE_Relay, read) ? ATMO_BLE_Property_Read : 0;\n\tproperty |= ATMO_PROPERTY(BLE_Relay, write) ? ATMO_BLE_Property_Write : 0;\n\tproperty |= ATMO_PROPERTY(BLE_Relay, notify) ? ATMO_BLE_Property_Notify : 0;\n\n\tpermission |= ATMO_PROPERTY(BLE_Relay, read) ? ATMO_BLE_Permission_Read : 0;\n\tpermission |= ATMO_PROPERTY(BLE_Relay, write) ? ATMO_BLE_Permission_Write : 0;\n\n\tATMO_DATATYPE types[3] = {ATMO_PROPERTY(BLE_Relay, writeDataType), ATMO_PROPERTY(BLE_Relay, readDataType), ATMO_PROPERTY(BLE_Relay, notifyDataType)};\n\t\n\tATMO_BLE_GATTSAddCharacteristic(\n\t\tATMO_PROPERTY(BLE_Relay, instance),\n\t\t&ATMO_VARIABLE(BLE_Relay, bleCharacteristicHandle), \n\t\tATMO_VARIABLE(BLE_Relay, bleServiceHandle), \n\t\tATMO_PROPERTY(BLE_Relay, bleCharacteristicUuid), \n\t\tproperty, permission, ATMO_GetMaxValueSize(3, 64, types));\n\t\n\tATMO_BLE_GATTSRegisterCharacteristicAbilityHandle(\n\t\tATMO_PROPERTY(BLE_Relay, instance),\n\t\tATMO_VARIABLE(BLE_Relay, bleCharacteristicHandle), \n\t\tATMO_BLE_Characteristic_Written, \n\t\tATMO_ABILITY(BLE_Relay, written));\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setValue": "\n\t\n\t// Convert to the desired write data type\n\tATMO_Value_t convertedValue;\n\tATMO_InitValue(&convertedValue);\n\tATMO_CreateValueConverted(&convertedValue, ATMO_PROPERTY(BLE_Relay, readDataType), in);\n\n\tATMO_BLE_GATTSSetCharacteristic(\n\t\tATMO_PROPERTY(BLE_Relay, instance),\n\t\tATMO_VARIABLE(BLE_Relay, bleCharacteristicHandle),\n\t\tconvertedValue.size, \n\t\t(uint8_t *)convertedValue.data,\n\t\tNULL);\n\t\n\tATMO_FreeValue(&convertedValue);\n\t\t\n\treturn ATMO_Status_Success;\n\t",
              "written": "\n\tATMO_CreateValueConverted(out, ATMO_PROPERTY(BLE_Relay, writeDataType), in);\n\treturn ATMO_Status_Success;\n\t",
              "subscibed": "\treturn ATMO_Status_Success;",
              "unsubscribed": "\treturn ATMO_Status_Success;"
            },
            "variables": {
              "bleServiceHandle": {
                "type": "ATMO_BLE_Handle_t"
              },
              "bleCharacteristicHandle": {
                "type": "ATMO_BLE_Handle_t"
              }
            },
            "embeddedPropertyConversions": {
              "bleServiceUuid": "string",
              "bleCharacteristicUuid": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "setValue": false,
              "written": false,
              "subscibed": false,
              "unsubscribed": false
            },
            "instance": "ATMO_DRIVERINSTANCE_BLE_BLE1",
            "bleServiceUuid": "cd900ce8-9603-4a92-b124-57f4befd5f5e",
            "bleCharacteristicUuid": "cd900ce8-9603-4a92-b124-57f4befd5f62",
            "read": true,
            "write": true,
            "notify": false,
            "readDataType": "ATMO_DATATYPE_STRING",
            "writeDataType": "ATMO_DATATYPE_STRING",
            "notifyDataType": "ATMO_DATATYPE_STRING"
          },
          "meta": {
            "editorX": 139,
            "editorY": 327,
            "lastTrigger": "written"
          },
          "triggers": {
            "triggered": [],
            "written": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "Relay_Switch",
                "targetAbility": "evaluate"
              }
            ],
            "subscibed": [],
            "unsubscribed": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setValue": "valueSet",
            "written": false,
            "subscibed": false,
            "unsubscribed": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setValue",
              "triggers": []
            },
            {
              "name": "written",
              "triggers": [
                "written"
              ]
            },
            {
              "name": "subscibed",
              "triggers": [
                "subscibed"
              ]
            },
            {
              "name": "unsubscribed",
              "triggers": [
                "unsubscribed"
              ]
            }
          ]
        },
        {
          "name": "PWM_RightMotor",
          "type": "EmbeddedPWMPin",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables",
            "pwm"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_PWM_Config_t config;\n\tconfig.pwmFreqHz = ATMO_PROPERTY(PWM_RightMotor, frequency);\n\tconfig.dutyCycle = ATMO_PROPERTY(PWM_RightMotor, dutyCycle);\n\tATMO_PWM_SetPinConfiguration(ATMO_PROPERTY(PWM_RightMotor, instance), ATMO_PROPERTY(PWM_RightMotor, pin), &config);\n\tATMO_PWM_Enable(\n\t\tATMO_PROPERTY(PWM_RightMotor, instance),\n\t\tATMO_PROPERTY(PWM_RightMotor, pin)\n\t);\n\treturn ATMO_Status_Success;\n\t",
              "setDutyCycle": "\n\tunsigned int dutyCycle;\n\tATMO_GetUnsignedInt(in, &dutyCycle);\n\n\tATMO_PWM_Config_t config;\n\tconfig.pwmFreqHz = ATMO_PROPERTY(PWM_RightMotor, frequency);\n\tconfig.dutyCycle = dutyCycle;\n\tATMO_PWM_SetPinConfiguration(ATMO_PROPERTY(PWM_RightMotor, instance), ATMO_PROPERTY(PWM_RightMotor, pin), &config);\n\t\n\treturn ATMO_Status_Success;\n\t"
            },
            "variables": {},
            "embeddedPropertyConversions": {},
            "codeUserChanged": {
              "setup": false,
              "setDutyCycle": false
            },
            "instance": "ATMO_DRIVERINSTANCE_PWM_PWM1",
            "pin": "P13_5",
            "frequency": 1000,
            "dutyCycle": "50"
          },
          "meta": {
            "editorX": 644,
            "editorY": 442,
            "lastTrigger": "triggered"
          },
          "triggers": {
            "triggered": [],
            "dutyCycleSet": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setDutyCycle": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setDutyCycle",
              "triggers": [
                "dutyCycleSet"
              ]
            }
          ]
        },
        {
          "name": "Relay_Pin",
          "type": "EmbeddedGPIOPin",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_GPIO_Config_t config;\n\tconfig.pinMode = ATMO_PROPERTY(Relay_Pin, mode);\n\tconfig.initialState = ATMO_PROPERTY(Relay_Pin, state);\n\tATMO_GPIO_SetPinConfiguration(ATMO_PROPERTY(Relay_Pin, instance), ATMO_PROPERTY(Relay_Pin, pin), &config);\n\n\t#if ATMO_PROPERTY(Relay_Pin, interruptEnabled) == true\n\t\tATMO_GPIO_RegisterInterruptCallback(\n\t\t\tATMO_PROPERTY(Relay_Pin, instance), \n\t\t\tATMO_PROPERTY(Relay_Pin, pin), \n\t\t\tATMO_PROPERTY(Relay_Pin, interruptMode), \n\t\t\tATMO_INTERRUPT(Relay_Pin, interrupt));\n\t#endif\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setState": "\n\tATMO_BOOL_t state;\n\tATMO_GetBool(in, &state);\n\tATMO_GPIO_SetPinState(ATMO_PROPERTY(Relay_Pin, instance), ATMO_PROPERTY(Relay_Pin, pin), (ATMO_GPIO_PinState_t)state);\n\treturn ATMO_Status_Success;\n\t",
              "setPinHigh": "\n\tATMO_GPIO_SetPinState(ATMO_PROPERTY(Relay_Pin, instance), ATMO_PROPERTY(Relay_Pin, pin), ATMO_GPIO_PinState_High);\n\treturn ATMO_Status_Success;\n\t",
              "setPinLow": "\n\tATMO_GPIO_SetPinState(ATMO_PROPERTY(Relay_Pin, instance), ATMO_PROPERTY(Relay_Pin, pin), ATMO_GPIO_PinState_Low);\n\treturn ATMO_Status_Success;\n\t",
              "read": "\n\tATMO_CreateValueBool(out, ATMO_GPIO_Read(ATMO_PROPERTY(Relay_Pin, instance), ATMO_PROPERTY(Relay_Pin, pin)));\n\treturn ATMO_Status_Success;\n\t",
              "toggle": "\n\tATMO_GPIO_Toggle(ATMO_PROPERTY(Relay_Pin, instance), ATMO_PROPERTY(Relay_Pin, pin));\n\treturn ATMO_Status_Success;\n\t",
              "interrupt": "\n\tATMO_CreateValueCopy(out, in);\n\treturn ATMO_Status_Success;\n\t"
            },
            "variables": {},
            "embeddedPropertyConversions": {},
            "codeUserChanged": {
              "setup": false,
              "setState": false,
              "setPinHigh": false,
              "setPinLow": false,
              "read": false,
              "toggle": false,
              "interrupt": false
            },
            "instance": "ATMO_DRIVERINSTANCE_GPIO_GPIO1",
            "pin": "P13_4",
            "mode": "ATMO_GPIO_PinMode_Output_PushPull",
            "state": "ATMO_GPIO_PinState_High",
            "interruptEnabled": false,
            "interruptMode": "ATMO_GPIO_InterruptTrigger_None"
          },
          "meta": {
            "editorX": 395,
            "editorY": 325,
            "lastTrigger": "interrupt"
          },
          "triggers": {
            "triggered": [],
            "stateSet": [],
            "read": [],
            "toggled": [],
            "interrupt": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setState": false,
            "setPinHigh": false,
            "setPinLow": false,
            "read": false,
            "toggle": false,
            "interrupt": true
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setState",
              "triggers": [
                "stateSet"
              ]
            },
            {
              "name": "setPinHigh",
              "triggers": [
                "stateSet"
              ]
            },
            {
              "name": "setPinLow",
              "triggers": [
                "stateSet"
              ]
            },
            {
              "name": "read",
              "triggers": [
                "read"
              ]
            },
            {
              "name": "toggle",
              "triggers": [
                "toggled"
              ]
            },
            {
              "name": "interrupt",
              "triggers": [
                "interrupt"
              ]
            }
          ]
        },
        {
          "name": "Relay_Switch",
          "type": "EmbeddedComparison",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\treturn ATMO_Status_Success;\n\t",
              "evaluate": "\n\tATMO_BOOL_t conditionTrue = false;\n\n\t// Convert property to same type as input\n\tATMO_Value_t targetStr;\n\tATMO_Value_t targetNum;\n\t\n\tATMO_InitValue(&targetStr);\n\tATMO_InitValue(&targetNum);\n\tATMO_CreateValueString(&targetStr, ATMO_PROPERTY(Relay_Switch, target));\n\tATMO_CreateValueConverted(&targetNum, in->type, &targetStr);\n\t\n\tif(ATMO_CompareValues(in, &targetNum, ATMO_PROPERTY(Relay_Switch, condition), &conditionTrue) != ATMO_Status_Success)\n\t{\n\t\tATMO_Value_t value;\n\t\tATMO_InitValue(&value);\n\t\tATMO_TriggerHandler(ATMO_TRIGGER(Relay_Switch, invalidType), NULL);\n\t\tATMO_FreeValue(&value);\n\t\tATMO_FreeValue(&targetStr);\n\t\tATMO_FreeValue(&targetNum);\n\t\treturn ATMO_Status_Fail;\n\t}\n\n\tATMO_FreeValue(&targetStr);\n\tATMO_FreeValue(&targetNum);\n\n\n\tATMO_Value_t value;\n\tATMO_InitValue(&value);\n\tATMO_CreateValueCopy(&value, in);\n\tATMO_TriggerHandler(conditionTrue ? ATMO_TRIGGER(Relay_Switch, conditionTrue) : ATMO_TRIGGER(Relay_Switch, conditionFalse), &value);\n\tATMO_FreeValue(&value);\t\t\n\n\treturn ATMO_Status_Success;\n\t"
            },
            "variables": {},
            "embeddedPropertyConversions": {
              "target": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "evaluate": false
            },
            "condition": "ATMO_EQUAL",
            "target": "0"
          },
          "meta": {
            "editorX": 266,
            "editorY": 324,
            "lastTrigger": "conditionTrue"
          },
          "triggers": {
            "triggered": [],
            "conditionTrue": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "Relay_Pin",
                "targetAbility": "setPinHigh"
              }
            ],
            "conditionFalse": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "Relay_Pin",
                "targetAbility": "setPinLow"
              }
            ],
            "invalidType": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "evaluate": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "evaluate",
              "triggers": []
            }
          ]
        },
        {
          "name": "AddOffset",
          "type": "EmbeddedOperation",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\treturn ATMO_Status_Success;\n\t",
              "performOperation": "\n    return ATMO_PerformOperation(out, ATMO_PROPERTY(AddOffset, operation), ATMO_PROPERTY(AddOffset, operand), in);\n    "
            },
            "variables": {},
            "embeddedPropertyConversions": {},
            "codeUserChanged": {
              "setup": false,
              "performOperation": false
            },
            "operation": "ATMO_OPERATOR_ADD",
            "operand": "50"
          },
          "meta": {
            "editorX": 389,
            "editorY": 446,
            "lastTrigger": "operationPerformed"
          },
          "triggers": {
            "triggered": [],
            "operationPerformed": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "Acceleration",
                "targetAbility": "setValue"
              }
            ]
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "performOperation": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "performOperation",
              "triggers": [
                "operationPerformed"
              ]
            }
          ]
        }
      ],
      "libraries": {
        "ntcThermistor": {
          "libName": "ntcThermistor",
          "manufacturer": "Cypress Semiconductor",
          "description": "NTC Thermistor is a solid state temperature sensing device that reduce or decrease their resistive value as the operating temperature increases",
          "type": "Temperature sensor",
          "icon": "EmbeddedTemperature.svg",
          "image": "",
          "version": "",
          "eelVersion": "3",
          "shoppingCartLinks": {},
          "requires": [
            "embedded",
            "adc"
          ],
          "elements": [
            {
              "name": "NTCThermistor",
              "type": "EmbeddedNTCThermistor",
              "icon": "EmbeddedTemperature.svg",
              "defaultAbility": "readTemperature",
              "defaultTrigger": "temperatureRead",
              "hidden": false,
              "abilities": [
                {
                  "name": "setup",
                  "hidden": true,
                  "triggers": [],
                  "code": "\nif ( !NTCThermistor_Init( ATMO_PROPERTY( undefined, adcInstance ), ATMO_PROPERTY( undefined, bValue ), ATMO_PROPERTY( undefined, t0Value ), ATMO_PROPERTY( undefined, vddADCPin ), ATMO_PROPERTY( undefined, temperatureADCPin ) ) )\n{\n\treturn ATMO_Status_Fail;\n\n}\n\nreturn ATMO_Status_Success;"
                },
                {
                  "name": "readTemperature",
                  "triggers": [
                    "temperatureRead"
                  ],
                  "code": "float temperatureC = 0.0;\n\nif ( !NTCThermistor_GetTemperature( &temperatureC ) )\n{\n\treturn ATMO_Status_Fail;\n}\n\nATMO_CreateValueFloat( out, temperatureC );\n\nreturn ATMO_Status_Success;\n"
                }
              ],
              "properties": [
                {
                  "name": "adcInstance",
                  "input": "driverInstance",
                  "driverType": "adc"
                },
                {
                  "name": "bValue",
                  "input": "number",
                  "value": "0"
                },
                {
                  "name": "t0Value",
                  "input": "number",
                  "value": "0"
                },
                {
                  "name": "vddADCPin",
                  "input": "number",
                  "value": "0"
                },
                {
                  "name": "temperatureADCPin",
                  "input": "number",
                  "value": "0"
                }
              ],
              "triggers": [],
              "variables": [],
              "language": {
                "en-US": {
                  "EmbeddedNTCThermistor": "NTC Thermistor",
                  "adcInstance": "ADC Driver Instance",
                  "readTemperature": "Read Temperature (°C)",
                  "temperatureRead": "Temperature Read",
                  "bValue": "Material Constant B",
                  "t0Value": "Initial Temperature",
                  "vddADCPin": "VDD ADC Pin",
                  "temperatureADCPin": "Temperature ADC Pin"
                }
              }
            }
          ],
          "files": {
            "common": {
              "headers": {
                "ntcThermistor.h": "#ifndef NTCThermistor_H_\n#define NTCThermistor_H_\n\n#include \"../app_src/atmosphere_platform.h\"\n\n\n/**\n * This routine initializes the sensor.\n * @param adcInstance : The peripheral instance to be configured.\n * @param bValue : The material constant B.\n * @param t0Value : The initial temperature t0.\n * @param vddADCPin : The ADC pin to get adc max value.\n * @param temperatureADCPin : The ADC pin to get the thermistor output.\n * @return ATMO_BOOL_t\n */\nATMO_BOOL_t NTCThermistor_Init( ATMO_DriverInstanceHandle_t adcInstance, float bValue, float t0Value, ATMO_GPIO_Device_Pin_t vddADCPin, ATMO_GPIO_Device_Pin_t temperatureADCPin );\n\n/**\n * This routine initiates an ADC conversion and reads the raw data and converts it to get temperature value in °C.\n * @param temperatureC : temperature data in °C\n * @return ATMO_BOOL_t\n */\nATMO_BOOL_t NTCThermistor_GetTemperature( float *temperatureC );\n\n#endif"
              },
              "objects": {
                "ntcThermistor.c": "#include \"ntcThermistor.h\"\n#include <math.h>\n#include <stdint.h>\n\n#define _NTCThermistor_LnLookupTable_Size 256\n\nstatic float _NTCThermistor_LnLookupTable[_NTCThermistor_LnLookupTable_Size] = { 0,\n                                                                                 -5.545177,\n                                                                                 -4.852030,\n                                                                                 -4.446565,\n                                                                                 -4.158883,\n                                                                                 -3.935740,\n                                                                                 -3.753418,\n                                                                                 -3.599267,\n                                                                                 -3.465736,\n                                                                                 -3.347953,\n                                                                                 -3.242592,\n                                                                                 -3.147282,\n                                                                                 -3.060271,\n                                                                                 -2.980228,\n                                                                                 -2.906120,\n                                                                                 -2.837127,\n                                                                                 -2.772589,\n                                                                                 -2.711964,\n                                                                                 -2.654806,\n                                                                                 -2.600738,\n                                                                                 -2.549445,\n                                                                                 -2.500655,\n                                                                                 -2.454135,\n                                                                                 -2.409683,\n                                                                                 -2.367124,\n                                                                                 -2.326302,\n                                                                                 -2.287081,\n                                                                                 -2.249341,\n                                                                                 -2.212973,\n                                                                                 -2.177882,\n                                                                                 -2.143980,\n                                                                                 -2.111190,\n                                                                                 -2.079442,\n                                                                                 -2.048670,\n                                                                                 -2.018817,\n                                                                                 -1.989829,\n                                                                                 -1.961659,\n                                                                                 -1.934260,\n                                                                                 -1.907591,\n                                                                                 -1.881616,\n                                                                                 -1.856298,\n                                                                                 -1.831605,\n                                                                                 -1.807508,\n                                                                                 -1.783977,\n                                                                                 -1.760988,\n                                                                                 -1.738515,\n                                                                                 -1.716536,\n                                                                                 -1.695030,\n                                                                                 -1.673976,\n                                                                                 -1.653357,\n                                                                                 -1.633154,\n                                                                                 -1.613352,\n                                                                                 -1.593934,\n                                                                                 -1.574886,\n                                                                                 -1.556193,\n                                                                                 -1.537844,\n                                                                                 -1.519826,\n                                                                                 -1.502126,\n                                                                                 -1.484734,\n                                                                                 -1.467640,\n                                                                                 -1.450833,\n                                                                                 -1.434304,\n                                                                                 -1.418043,\n                                                                                 -1.402043,\n                                                                                 -1.386294,\n                                                                                 -1.370790,\n                                                                                 -1.355523,\n                                                                                 -1.340485,\n                                                                                 -1.325670,\n                                                                                 -1.311071,\n                                                                                 -1.296682,\n                                                                                 -1.282498,\n                                                                                 -1.268511,\n                                                                                 -1.254718,\n                                                                                 -1.241112,\n                                                                                 -1.227689,\n                                                                                 -1.214444,\n                                                                                 -1.201372,\n                                                                                 -1.188469,\n                                                                                 -1.175730,\n                                                                                 -1.163151,\n                                                                                 -1.150728,\n                                                                                 -1.138458,\n                                                                                 -1.126337,\n                                                                                 -1.114361,\n                                                                                 -1.102526,\n                                                                                 -1.090830,\n                                                                                 -1.079269,\n                                                                                 -1.067841,\n                                                                                 -1.056541,\n                                                                                 -1.045368,\n                                                                                 -1.034318,\n                                                                                 -1.023389,\n                                                                                 -1.012578,\n                                                                                 -1.001883,\n                                                                                 -0.991301,\n                                                                                 -0.980829,\n                                                                                 -0.970466,\n                                                                                 -0.960210,\n                                                                                 -0.950058,\n                                                                                 -0.940007,\n                                                                                 -0.930057,\n                                                                                 -0.920205,\n                                                                                 -0.910448,\n                                                                                 -0.900787,\n                                                                                 -0.891217,\n                                                                                 -0.881738,\n                                                                                 -0.872349,\n                                                                                 -0.863046,\n                                                                                 -0.853830,\n                                                                                 -0.844697,\n                                                                                 -0.835647,\n                                                                                 -0.826679,\n                                                                                 -0.817790,\n                                                                                 -0.808979,\n                                                                                 -0.800245,\n                                                                                 -0.791587,\n                                                                                 -0.783004,\n                                                                                 -0.774493,\n                                                                                 -0.766054,\n                                                                                 -0.757686,\n                                                                                 -0.749387,\n                                                                                 -0.741156,\n                                                                                 -0.732993,\n                                                                                 -0.724896,\n                                                                                 -0.716864,\n                                                                                 -0.708896,\n                                                                                 -0.700990,\n                                                                                 -0.693147,\n                                                                                 -0.685365,\n                                                                                 -0.677643,\n                                                                                 -0.669980,\n                                                                                 -0.662376,\n                                                                                 -0.654828,\n                                                                                 -0.647338,\n                                                                                 -0.639903,\n                                                                                 -0.632523,\n                                                                                 -0.625197,\n                                                                                 -0.617924,\n                                                                                 -0.610704,\n                                                                                 -0.603535,\n                                                                                 -0.596418,\n                                                                                 -0.589350,\n                                                                                 -0.582333,\n                                                                                 -0.575364,\n                                                                                 -0.568444,\n                                                                                 -0.561571,\n                                                                                 -0.554745,\n                                                                                 -0.547965,\n                                                                                 -0.541231,\n                                                                                 -0.534542,\n                                                                                 -0.527898,\n                                                                                 -0.521297,\n                                                                                 -0.514740,\n                                                                                 -0.508225,\n                                                                                 -0.501752,\n                                                                                 -0.495321,\n                                                                                 -0.488932,\n                                                                                 -0.482582,\n                                                                                 -0.476273,\n                                                                                 -0.470004,\n                                                                                 -0.463773,\n                                                                                 -0.457581,\n                                                                                 -0.451427,\n                                                                                 -0.445311,\n                                                                                 -0.439232,\n                                                                                 -0.433190,\n                                                                                 -0.427184,\n                                                                                 -0.421213,\n                                                                                 -0.415279,\n                                                                                 -0.409379,\n                                                                                 -0.403514,\n                                                                                 -0.397683,\n                                                                                 -0.391886,\n                                                                                 -0.386122,\n                                                                                 -0.380391,\n                                                                                 -0.374693,\n                                                                                 -0.369028,\n                                                                                 -0.363394,\n                                                                                 -0.357792,\n                                                                                 -0.352221,\n                                                                                 -0.346680,\n                                                                                 -0.341171,\n                                                                                 -0.335691,\n                                                                                 -0.330242,\n                                                                                 -0.324822,\n                                                                                 -0.319431,\n                                                                                 -0.314069,\n                                                                                 -0.308735,\n                                                                                 -0.303430,\n                                                                                 -0.298153,\n                                                                                 -0.292904,\n                                                                                 -0.287682,\n                                                                                 -0.282487,\n                                                                                 -0.277319,\n                                                                                 -0.272178,\n                                                                                 -0.267063,\n                                                                                 -0.261974,\n                                                                                 -0.256910,\n                                                                                 -0.251873,\n                                                                                 -0.246860,\n                                                                                 -0.241873,\n                                                                                 -0.236910,\n                                                                                 -0.231971,\n                                                                                 -0.227057,\n                                                                                 -0.222167,\n                                                                                 -0.217301,\n                                                                                 -0.212459,\n                                                                                 -0.207639,\n                                                                                 -0.202843,\n                                                                                 -0.198070,\n                                                                                 -0.193319,\n                                                                                 -0.188591,\n                                                                                 -0.183885,\n                                                                                 -0.179201,\n                                                                                 -0.174539,\n                                                                                 -0.169899,\n                                                                                 -0.165280,\n                                                                                 -0.160682,\n                                                                                 -0.156106,\n                                                                                 -0.151550,\n                                                                                 -0.147015,\n                                                                                 -0.142500,\n                                                                                 -0.138006,\n                                                                                 -0.133531,\n                                                                                 -0.129077,\n                                                                                 -0.124642,\n                                                                                 -0.120227,\n                                                                                 -0.115832,\n                                                                                 -0.111455,\n                                                                                 -0.107098,\n                                                                                 -0.102760,\n                                                                                 -0.098440,\n                                                                                 -0.094139,\n                                                                                 -0.089856,\n                                                                                 -0.085592,\n                                                                                 -0.081346,\n                                                                                 -0.077117,\n                                                                                 -0.072907,\n                                                                                 -0.068714,\n                                                                                 -0.064539,\n                                                                                 -0.060381,\n                                                                                 -0.056240,\n                                                                                 -0.052116,\n                                                                                 -0.048009,\n                                                                                 -0.043919,\n                                                                                 -0.039846,\n                                                                                 -0.035789,\n                                                                                 -0.031749,\n                                                                                 -0.027725,\n                                                                                 -0.023717,\n                                                                                 -0.019725,\n                                                                                 -0.015748,\n                                                                                 -0.011788,\n                                                                                 -0.007843,\n                                                                                 -0.003914\n                                                                                 };\n\nstatic ATMO_DriverInstanceHandle_t _NTCThermistor_AdcInstance = 0;\nstatic ATMO_GPIO_Device_Pin_t _NTCThermistor_VddADCPin = 0;\nstatic ATMO_GPIO_Device_Pin_t _NTCThermistor_TemperatureADCPin = 0;\nstatic float _NTCThermistor_BValue = 0.0;\nstatic float _NTCThermistor_T0Value = 0.0;\n\n// It is a function to lookup the LN of a value between 0 and 1, and it will linearly interpolate to approximate.\nstatic float _NTCThermistor_Ln( float num )\n{\n\t// Get in 256 range\n\tfloat normalizedNum = num * _NTCThermistor_LnLookupTable_Size;\n\n\tint closestBelow = ( int )normalizedNum;\n\n\tif ( closestBelow >= _NTCThermistor_LnLookupTable_Size )\n\t{\n\t\treturn 0;\n\t}\n\n\tfloat diff = normalizedNum - closestBelow;\n\tfloat diffAbove = ( closestBelow + 1 ) - normalizedNum;\n\n\tfloat val = ( _NTCThermistor_LnLookupTable[closestBelow] * diffAbove ) + ( _NTCThermistor_LnLookupTable[closestBelow + 1] * diff );\n\treturn val;\n}\n// https://www.electronics-tutorials.ws/io/thermistors.html\nstatic float getTemperature( float bValue, float t0Value, uint32_t adcMax, uint32_t adcVal )\n{\n\tfloat adcRatio = ( ( float )adcMax ) / adcVal;\n\tfloat temp = ( 1 / t0Value ) + ( ( 1 / bValue ) * _NTCThermistor_Ln( adcRatio - 1 ) );\n\ttemp = 1 / temp;\n\treturn temp;\n}\n\nATMO_BOOL_t NTCThermistor_Init( ATMO_DriverInstanceHandle_t adcInstance, float bValue, float t0Value, ATMO_GPIO_Device_Pin_t vddADCPin, ATMO_GPIO_Device_Pin_t temperatureADCPin )\n{\n\t_NTCThermistor_AdcInstance = adcInstance;\n\t_NTCThermistor_VddADCPin = vddADCPin;\n\t_NTCThermistor_TemperatureADCPin = temperatureADCPin;\n\t_NTCThermistor_BValue = bValue;\n\t_NTCThermistor_T0Value = t0Value;\n\treturn true;\n}\n\nATMO_BOOL_t NTCThermistor_GetTemperature( float *temperatureC )\n{\n\tuint32_t adcMax, adcVal = 0;\n\tATMO_ADC_ReadRaw( _NTCThermistor_AdcInstance, _NTCThermistor_VddADCPin, &adcMax, 10 );\n\tATMO_ADC_ReadRaw( _NTCThermistor_AdcInstance, _NTCThermistor_TemperatureADCPin, &adcVal, 10 );\n\n\t*temperatureC = getTemperature( _NTCThermistor_BValue, _NTCThermistor_T0Value, adcMax, adcVal );\n\n\treturn true;\n}\n\n"
              }
            }
          },
          "md5": "7981050a2ed41a8db4653dfc46fa13dc"
        },
        "groveLCDRGB": {
          "libName": "groveLCDRGB",
          "manufacturer": "Seeed Studio",
          "description": "Character LCD 16x2 RGB Display Grove Platform Evaluation Expansion Board",
          "type": "LCD Display",
          "icon": "",
          "image": "",
          "version": "",
          "eelVersion": "3",
          "shoppingCartLinks": {
            "digikey": {
              "links": {
                "info": "https://www.digikey.com/short/j21qdf"
              },
              "cartData": {
                "part": "1597-1336-ND",
                "partid": "104030001",
                "source": "dkstudio",
                "qty": "1"
              }
            }
          },
          "requires": [
            "embedded",
            "i2c"
          ],
          "elements": [
            {
              "name": "GroveLCDRGB",
              "type": "EmbeddedGroveLCDRGB",
              "icon": "EmbeddedLedArray.svg",
              "helpPageHref": "https://developer.atmosphereiot.com/documents/elements/seeedstudiogrovelcdrgbelement.html",
              "defaultAbility": "setText",
              "defaultTrigger": "textSet",
              "hidden": false,
              "abilities": [
                {
                  "name": "setup",
                  "hidden": true,
                  "code": "\t// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!\n\t// according to datasheet, we need at least 40ms after power rises above 2.7V\n\t// If this is required for a particular platform we would recommend they put it in their setup before starting.\n\tATMO_PLATFORM_DelayMilliseconds(ATMO_PROPERTY(undefined, wakeUpDelay));\n\n\t// this is according to the hitachi HD44780 datasheet\n\t// page 45 figure 23\n\t\n\tGROVELCDRGB_Init(\n\t\tATMO_PROPERTY(undefined, i2cInstance), \n\t\tATMO_PROPERTY(undefined, i2cAddressForLCD), \n\t\tATMO_PROPERTY(undefined, i2cAddressForRGB), \n\t\tGROVELCDRGB_LCD_2LINE | GROVELCDRGB_LCD_5x8DOTS);\n\t\n\tGROVELCDRGB_SetRGB(\n\t\tATMO_PROPERTY(undefined, i2cInstance), \n\t\tATMO_PROPERTY(undefined, i2cAddressForRGB), \n\t\tATMO_PROPERTY(undefined, red), \n\t\tATMO_PROPERTY(undefined, green), \n\t\tATMO_PROPERTY(undefined, blue));\n\t\n    return ATMO_Status_Success;\n"
                },
                {
                  "name": "setText",
                  "triggers": [
                    "textSet"
                  ],
                  "code": "\tchar printBuffer[32];\n\tATMO_GetString(in, printBuffer, 32);\n\t\n\t//Clear the text from the display\n\tGROVELCDRGB_Clear(ATMO_PROPERTY(undefined, i2cInstance), ATMO_PROPERTY(undefined, i2cAddressForLCD));\n\t\n\t//Reset the cursor back to the first position\n\tGROVELCDRGB_SetCursor(ATMO_PROPERTY(undefined, i2cInstance), ATMO_PROPERTY(undefined, i2cAddressForLCD), 0, 0);\n\t\n\t//Now print our new text to the screen\n\tGROVELCDRGB_Print(ATMO_PROPERTY(undefined, i2cInstance), ATMO_PROPERTY(undefined, i2cAddressForLCD), printBuffer);\n\treturn ATMO_Status_Success;\n"
                },
                {
                  "name": "appendText",
                  "triggers": [
                    "textAppended"
                  ],
                  "code": "\tchar printBuffer[32];\n\t\n\tATMO_GetString(in, printBuffer, 32);\n\t\n\tGROVELCDRGB_Print(ATMO_PROPERTY(undefined, i2cInstance), ATMO_PROPERTY(undefined, i2cAddressForLCD), printBuffer);\n\t\n\treturn ATMO_Status_Success;\n"
                },
                {
                  "name": "turnOff",
                  "triggers": [
                    "turnedOff"
                  ],
                  "code": "\tGROVELCDRGB_NoDisplay(ATMO_PROPERTY(undefined, i2cInstance), ATMO_PROPERTY(undefined, i2cAddressForLCD));\n\treturn ATMO_Status_Success;\n"
                },
                {
                  "name": "turnOn",
                  "triggers": [
                    "turnedOn"
                  ],
                  "code": "\tGROVELCDRGB_Display(ATMO_PROPERTY(undefined, i2cInstance), ATMO_PROPERTY(undefined, i2cAddressForLCD));\n\treturn ATMO_Status_Success;\n"
                },
                {
                  "name": "clear",
                  "triggers": [
                    "cleared"
                  ],
                  "code": "\t//Clear the text from the display\n\tGROVELCDRGB_Clear(ATMO_PROPERTY(undefined, i2cInstance), ATMO_PROPERTY(undefined, i2cAddressForLCD));\n\t\n\t//Reset the cursor back to the first position\n\tGROVELCDRGB_SetCursor(ATMO_PROPERTY(undefined, i2cInstance), ATMO_PROPERTY(undefined, i2cAddressForLCD), 0, 0);\n\t\n\treturn ATMO_Status_Success;\n"
                },
                {
                  "name": "setRed",
                  "triggers": [
                    "redSet"
                  ],
                  "code": "\tint red;\n\tATMO_GetInt(in, &red);\n\tGROVELCDRGB_SetRGB_R(ATMO_PROPERTY(undefined, i2cInstance), ATMO_PROPERTY(undefined, i2cAddressForRGB), red);\n\treturn ATMO_Status_Success;\n"
                },
                {
                  "name": "setGreen",
                  "triggers": [
                    "greenSet"
                  ],
                  "code": "\tint green;\n\tATMO_GetInt(in, &green);\n\tGROVELCDRGB_SetRGB_G(ATMO_PROPERTY(undefined, i2cInstance), ATMO_PROPERTY(undefined, i2cAddressForRGB), green);\n\treturn ATMO_Status_Success;\n"
                },
                {
                  "name": "setBlue",
                  "triggers": [
                    "blueSet"
                  ],
                  "code": "\tint blue;\n\tATMO_GetInt(in, &blue);\n\tGROVELCDRGB_SetRGB_B(ATMO_PROPERTY(undefined, i2cInstance), ATMO_PROPERTY(undefined, i2cAddressForRGB), blue);\n\treturn ATMO_Status_Success;\n"
                }
              ],
              "properties": [
                {
                  "name": "i2cInstance",
                  "input": "driverInstance",
                  "driverType": "i2c"
                },
                {
                  "name": "i2cAddressForLCD",
                  "input": "number",
                  "value": "0x3e"
                },
                {
                  "name": "i2cAddressForRGB",
                  "input": "number",
                  "value": "0x62"
                },
                {
                  "name": "wakeUpDelay",
                  "input": "number",
                  "value": "50"
                },
                {
                  "name": "red",
                  "input": "number",
                  "value": "0x00"
                },
                {
                  "name": "green",
                  "input": "number",
                  "value": "0x00"
                },
                {
                  "name": "blue",
                  "input": "number",
                  "value": "0xff"
                }
              ],
              "triggers": [],
              "variables": [],
              "language": {
                "en-US": {
                  "EmbeddedGroveLCDRGB": "Grove LCD RGB",
                  "setup": "Setup",
                  "setText": "Set Text",
                  "textSet": "Text Set",
                  "appendText": "Append Text",
                  "textAppended": "Text Appended",
                  "turnOff": "Turn Off",
                  "turnedOff": "Turned Off",
                  "turnOn": "Turn On",
                  "turnedOn": "Turned On",
                  "clear": "Clear Display",
                  "cleared": "Display Cleared",
                  "setRed": "Set Red",
                  "redSet": "Red Set",
                  "setGreen": "Set Green",
                  "greenSet": "Green Set",
                  "setBlue": "Set Blue",
                  "blueSet": "Blue Set",
                  "i2cInstance": "I2C Driver Instance",
                  "i2cAddressForLCD": "I2C Address for Display",
                  "i2cAddressForRGB": "I2C Address for LED Driver",
                  "wakeUpDelay": "Wake Up Delay (ms)",
                  "red": "Initial Red (0-255)",
                  "green": "Initial Green (0-255)",
                  "blue": "Initial Blue (0-255)"
                }
              }
            }
          ],
          "files": {
            "common": {
              "headers": {
                "groveLCDRGB.h": "#ifndef __GROVELCDRGB_H__\n#define __GROVELCDRGB_H__\n\n#include \"../app_src/atmosphere_platform.h\"\n#include \"../i2c/i2c.h\"\n\n// Device I2C Arress\n#define GROVELCDRGB_LCD_ADDRESS     (0x7c>>1)\n#define GROVELCDRGB_RGB_ADDRESS     (0xc4>>1)\n\n// color define\n#define GROVELCDRGB_WHITE           0\n#define GROVELCDRGB_RED             1\n#define GROVELCDRGB_GREEN           2\n#define GROVELCDRGB_BLUE            3\n\n#define GROVELCDRGB_REG_RED         0x04        // pwm2\n#define GROVELCDRGB_REG_GREEN       0x03        // pwm1\n#define GROVELCDRGB_REG_BLUE        0x02        // pwm0\n\n#define GROVELCDRGB_REG_MODE1       0x00\n#define GROVELCDRGB_REG_MODE2       0x01\n#define GROVELCDRGB_REG_OUTPUT      0x08\n\n// commands\n#define GROVELCDRGB_LCD_CLEARDISPLAY 0x01\n#define GROVELCDRGB_LCD_RETURNHOME 0x02\n#define GROVELCDRGB_LCD_ENTRYMODESET 0x04\n#define GROVELCDRGB_LCD_DISPLAYCONTROL 0x08\n#define GROVELCDRGB_LCD_CURSORSHIFT 0x10\n#define GROVELCDRGB_LCD_FUNCTIONSET 0x20\n#define GROVELCDRGB_LCD_SETCGRAMADDR 0x40\n#define GROVELCDRGB_LCD_SETDDRAMADDR 0x80\n\n// flags for display entry mode\n#define GROVELCDRGB_LCD_ENTRYRIGHT 0x00\n#define GROVELCDRGB_LCD_ENTRYLEFT 0x02\n#define GROVELCDRGB_LCD_ENTRYSHIFTINCREMENT 0x01\n#define GROVELCDRGB_LCD_ENTRYSHIFTDECREMENT 0x00\n\n// flags for display on/off control\n#define GROVELCDRGB_LCD_DISPLAYON 0x04\n#define GROVELCDRGB_LCD_DISPLAYOFF 0x00\n#define GROVELCDRGB_LCD_CURSORON 0x02\n#define GROVELCDRGB_LCD_CURSOROFF 0x00\n#define GROVELCDRGB_LCD_BLINKON 0x01\n#define GROVELCDRGB_LCD_BLINKOFF 0x00\n\n// flags for display/cursor shift\n#define GROVELCDRGB_LCD_DISPLAYMOVE 0x08\n#define GROVELCDRGB_LCD_CURSORMOVE 0x00\n#define GROVELCDRGB_LCD_MOVERIGHT 0x04\n#define GROVELCDRGB_LCD_MOVELEFT 0x00\n\n// flags for function set\n#define GROVELCDRGB_LCD_8BITMODE 0x10\n#define GROVELCDRGB_LCD_4BITMODE 0x00\n#define GROVELCDRGB_LCD_2LINE 0x08\n#define GROVELCDRGB_LCD_1LINE 0x00\n#define GROVELCDRGB_LCD_5x10DOTS 0x04\n#define GROVELCDRGB_LCD_5x8DOTS 0x00\n\n\nvoid GROVELCDRGB_Init(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr, uint8_t i2cAddrRGB, uint8_t displayFlags);\nvoid GROVELCDRGB_Clear(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr);\nvoid GROVELCDRGB_Home(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr);\nvoid GROVELCDRGB_SetCursor(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr, uint8_t col, uint8_t row);\n\n// Turn the display on/off (quickly)\nvoid GROVELCDRGB_NoDisplay(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr);\nvoid GROVELCDRGB_Display(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr);\n// Turns the underline cursor on/off\nvoid GROVELCDRGB_NoCursor(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr);\nvoid GROVELCDRGB_Cursor(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr);\n\n// Turn on and off the blinking cursor\nvoid GROVELCDRGB_NoBlink(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr);\nvoid GROVELCDRGB_Blink(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr);\n// These commands scroll the display without changing the RAM\nvoid GROVELCDRGB_ScrollDisplayLeft(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr);\nvoid GROVELCDRGB_ScrollDisplayRight(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr);\n\n// This is for text that flows Left to Right\nvoid GROVELCDRGB_LeftToRight(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr);\n// This is for text that flows Right to Left\nvoid GROVELCDRGB_RightToLeft(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr);\n\n// This will 'right justify' text from the cursor\nvoid GROVELCDRGB_AutoScroll(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr);\n// This will 'left justify' text from the cursor\nvoid GROVELCDRGB_NoAutoScroll(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr);\n// Allows us to fill the first 8 CGRAM locations\n// with custom characters\nvoid GROVELCDRGB_CreateChar(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr, uint8_t location, uint8_t charmap[]);\n/*********** mid level commands, for sending data/cmds */\n\n// send command\nvoid GROVELCDRGB_Command(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr, uint8_t value);\nvoid GROVELCDRGB_Write(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr, uint8_t value);\nvoid GROVELCDRGB_Print(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr, char *str);\nvoid GROVELCDRGB_SetRGB(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr, uint8_t r, uint8_t g, uint8_t b);\nvoid GROVELCDRGB_SetRGB_R(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr, uint8_t r);\nvoid GROVELCDRGB_SetRGB_G(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr, uint8_t g);\nvoid GROVELCDRGB_SetRGB_B(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr, uint8_t b);\nvoid GROVELCDRGB_SetPWM(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr, uint8_t color, uint8_t pwm);\n\n#endif\n\n"
              },
              "objects": {
                "groveLCDRGB.c": "#include \"groveLCDRGB.h\"\n\nstatic uint8_t _displaycontrol;\nstatic uint8_t _displaymode;\n\n\nvoid _GROVELCDRGB_i2c_send_byte(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr, uint8_t dta)\n{\n\tATMO_I2C_MasterWrite(i2cInstance, i2cAddr, NULL, 0, &dta, 1, 50);\n}\n\nvoid _GROVELCDRGB_i2c_send_byteS(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr, uint8_t *dta, uint8_t len)\n{\n\tATMO_I2C_MasterWrite(i2cInstance, i2cAddr, NULL, 0, dta, len, 50);\n}\n\nvoid _GROVELCDRGB_rgb_lcd_set_reg(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr, uint8_t addr, uint8_t data)\n{\n\tuint8_t dta[] = {addr, data};\n\tATMO_I2C_MasterWrite(i2cInstance, i2cAddr, NULL, 0, dta, 2, 50);\n}\n\n// send rgb_lcd_command\nvoid GROVELCDRGB_Command(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr, uint8_t value)\n{\n\tuint8_t dta[2] = {0x80, value};\n\t_GROVELCDRGB_i2c_send_byteS(i2cInstance, i2cAddr, dta, 2);\n}\n\nvoid GROVELCDRGB_Init(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr, uint8_t i2cAddrRGB, uint8_t displayFlags)\n{\n\t// Send function set rgb_lcd_command sequence\n\tGROVELCDRGB_Command(i2cInstance, i2cAddr, GROVELCDRGB_LCD_FUNCTIONSET | displayFlags);\n\tATMO_PLATFORM_DelayMilliseconds(1);\n\n\t// turn the rgb_lcd_display on with no cursor or blinking default\n\t_displaycontrol = GROVELCDRGB_LCD_DISPLAYON | GROVELCDRGB_LCD_CURSOROFF | GROVELCDRGB_LCD_BLINKOFF;\n\tGROVELCDRGB_Display(i2cInstance, i2cAddr);\n\n\t// GROVELCDRGB_Clear it off\n\tGROVELCDRGB_Clear(i2cInstance, i2cAddr);\n\n\t// Initialize to default text direction (for romance languages)\n\t_displaymode = GROVELCDRGB_LCD_ENTRYLEFT | GROVELCDRGB_LCD_ENTRYSHIFTDECREMENT;\n\t// set the entry mode\n\tGROVELCDRGB_Command(i2cInstance, i2cAddr, GROVELCDRGB_LCD_ENTRYMODESET | _displaymode);\n\n\tGROVELCDRGB_SetCursor(i2cInstance, i2cAddr, 0, 0);\n\tATMO_PLATFORM_DelayMilliseconds(1);\n\t\n\t// backlight init\n\t_GROVELCDRGB_rgb_lcd_set_reg(i2cInstance, i2cAddrRGB, 0, 0);\n\t_GROVELCDRGB_rgb_lcd_set_reg(i2cInstance, i2cAddrRGB, 1, 0);\n\t_GROVELCDRGB_rgb_lcd_set_reg(i2cInstance, i2cAddrRGB, 0x08, 0xAA);\t // all led control by pwm\n\tATMO_PLATFORM_DelayMilliseconds(1);\n}\n\n/********** high level commands, for the user! */\nvoid GROVELCDRGB_Clear(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr)\n{\n\tGROVELCDRGB_Command(i2cInstance, i2cAddr, GROVELCDRGB_LCD_CLEARDISPLAY);\t\t// rgb_lcd_clear rgb_lcd_display, set cursor position to zero\n\tATMO_PLATFORM_DelayMilliseconds(10);\n}\n\nvoid GROVELCDRGB_Home(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr)\n{\n\tGROVELCDRGB_Command(i2cInstance, i2cAddr, GROVELCDRGB_LCD_RETURNHOME);\t\t// set cursor position to zero\n\tATMO_PLATFORM_DelayMilliseconds(6);\n}\n\nvoid GROVELCDRGB_SetCursor(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr, uint8_t col, uint8_t row)\n{\n\tcol = (row == 0 ? col|0x80 : col|0xc0);\n\tuint8_t dta[2] = {0x80, col};\n\t_GROVELCDRGB_i2c_send_byteS(i2cInstance, i2cAddr, dta, 2);\n}\n\n// Turn the rgb_lcd_display on/off (quickly)\nvoid GROVELCDRGB_NoDisplay(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr)\n{\n\t_displaycontrol &= ~GROVELCDRGB_LCD_DISPLAYON;\n\tGROVELCDRGB_Command(i2cInstance, i2cAddr, GROVELCDRGB_LCD_DISPLAYCONTROL | _displaycontrol);\n}\n\nvoid GROVELCDRGB_Display(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr) \n{\n\t_displaycontrol |= GROVELCDRGB_LCD_DISPLAYON;\n\tGROVELCDRGB_Command(i2cInstance, i2cAddr, GROVELCDRGB_LCD_DISPLAYCONTROL | _displaycontrol);\n}\n\n// Turns the underline cursor on/off\nvoid GROVELCDRGB_NoCursor(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr)\n{\n\t_displaycontrol &= ~GROVELCDRGB_LCD_CURSORON;\n\tGROVELCDRGB_Command(i2cInstance, i2cAddr, GROVELCDRGB_LCD_DISPLAYCONTROL | _displaycontrol);\n}\n\nvoid GROVELCDRGB_Cursor(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr) {\n\t_displaycontrol |= GROVELCDRGB_LCD_CURSORON;\n\tGROVELCDRGB_Command(i2cInstance, i2cAddr, GROVELCDRGB_LCD_DISPLAYCONTROL | _displaycontrol);\n}\n\n// Turn on and off the blinking cursor\nvoid GROVELCDRGB_NoBlink(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr)\n{\n\t_displaycontrol &= ~GROVELCDRGB_LCD_BLINKON;\n\tGROVELCDRGB_Command(i2cInstance, i2cAddr, GROVELCDRGB_LCD_DISPLAYCONTROL | _displaycontrol);\n}\n\nvoid GROVELCDRGB_Blink(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr)\n{\n\t_displaycontrol |= GROVELCDRGB_LCD_BLINKON;\n\tGROVELCDRGB_Command(i2cInstance, i2cAddr, GROVELCDRGB_LCD_DISPLAYCONTROL | _displaycontrol);\n}\n\n// These commands scroll the rgb_lcd_display without changing the RAM\nvoid GROVELCDRGB_ScrollDisplayLeft(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr)\n{\n\tGROVELCDRGB_Command(i2cInstance, i2cAddr, GROVELCDRGB_LCD_CURSORSHIFT | GROVELCDRGB_LCD_DISPLAYMOVE | GROVELCDRGB_LCD_MOVELEFT);\n}\nvoid GROVELCDRGB_ScrollDisplayRight(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr)\n{\n\tGROVELCDRGB_Command(i2cInstance, i2cAddr, GROVELCDRGB_LCD_CURSORSHIFT | GROVELCDRGB_LCD_DISPLAYMOVE | GROVELCDRGB_LCD_MOVERIGHT);\n}\n\n// This is for text that flows Left to Right\nvoid GROVELCDRGB_LeftToRight(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr)\n{\n\t_displaymode |= GROVELCDRGB_LCD_ENTRYLEFT;\n\tGROVELCDRGB_Command(i2cInstance, i2cAddr, GROVELCDRGB_LCD_ENTRYMODESET | _displaymode);\n}\n\n// This is for text that flows Right to Left\nvoid GROVELCDRGB_RightToLeft(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr)\n{\n\t_displaymode &= ~GROVELCDRGB_LCD_ENTRYLEFT;\n\tGROVELCDRGB_Command(i2cInstance, i2cAddr, GROVELCDRGB_LCD_ENTRYMODESET | _displaymode);\n}\n\n// This will 'right justify' text from the cursor\nvoid GROVELCDRGB_AutoScroll(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr)\n{\n\t_displaymode |= GROVELCDRGB_LCD_ENTRYSHIFTINCREMENT;\n\tGROVELCDRGB_Command(i2cInstance, i2cAddr, GROVELCDRGB_LCD_ENTRYMODESET | _displaymode);\n}\n\n// This will 'left justify' text from the cursor\nvoid GROVELCDRGB_NoAutoScroll(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr)\n{\n\t_displaymode &= ~GROVELCDRGB_LCD_ENTRYSHIFTINCREMENT;\n\tGROVELCDRGB_Command(i2cInstance, i2cAddr, GROVELCDRGB_LCD_ENTRYMODESET | _displaymode);\n}\n\n// Allows us to fill the first 8 CGRAM locations\n// with custom characters\nvoid GROVELCDRGB_CreateChar(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr, uint8_t location, uint8_t charmap[])\n{\n\n\tlocation &= 0x7; // we only have 8 locations 0-7\n\tGROVELCDRGB_Command(i2cInstance, i2cAddr, GROVELCDRGB_LCD_SETCGRAMADDR | (location << 3));\n\n\n\tuint8_t dta[9];\n\tdta[0] = 0x40;\n\tint i;\n\tfor(i=0; i<8; i++)\n\t{\n\t\tdta[i+1] = charmap[i];\n\t}\n\t_GROVELCDRGB_i2c_send_byteS(i2cInstance, i2cAddr, dta, 9);\n}\n\n/*********** mid level commands, for sending data/cmds */\n\n// send data\nvoid GROVELCDRGB_Write(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr, uint8_t value)\n{\n\tuint8_t dta[2] = {0x40, value};\n\t_GROVELCDRGB_i2c_send_byteS(i2cInstance, i2cAddr, dta, 2);\n}\n\nvoid GROVELCDRGB_Print(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr, char *str)\n{\n\twhile(*str)\n\t{\n\t\tGROVELCDRGB_Write(i2cInstance, i2cAddr, *str);\n\t\tstr++;\n\t}\n}\n\nvoid GROVELCDRGB_SetRGB(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr, uint8_t r, uint8_t g, uint8_t b)\n{\n\t_GROVELCDRGB_rgb_lcd_set_reg(i2cInstance, i2cAddr, GROVELCDRGB_REG_RED, r);\n\t_GROVELCDRGB_rgb_lcd_set_reg(i2cInstance, i2cAddr, GROVELCDRGB_REG_GREEN, g);\n\t_GROVELCDRGB_rgb_lcd_set_reg(i2cInstance, i2cAddr, GROVELCDRGB_REG_BLUE, b);\n}\n\nvoid GROVELCDRGB_SetRGB_R(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr, uint8_t r)\n{\n\t_GROVELCDRGB_rgb_lcd_set_reg(i2cInstance, i2cAddr, GROVELCDRGB_REG_RED, r);\n}\n\nvoid GROVELCDRGB_SetRGB_G(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr, uint8_t g)\n{\n\t_GROVELCDRGB_rgb_lcd_set_reg(i2cInstance, i2cAddr, GROVELCDRGB_REG_GREEN, g);\n}\n\nvoid GROVELCDRGB_SetRGB_B(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr, uint8_t b)\n{\n\t_GROVELCDRGB_rgb_lcd_set_reg(i2cInstance, i2cAddr, GROVELCDRGB_REG_BLUE, b);\n}\n\nvoid GROVELCDRGB_SetPWM(ATMO_DriverInstanceHandle_t i2cInstance, uint8_t i2cAddr, uint8_t color, uint8_t pwm)\n{\n\t_GROVELCDRGB_rgb_lcd_set_reg(i2cInstance, i2cAddr, color, pwm);\n}\n"
              }
            }
          },
          "md5": "0a0bcd514519d984a23d76f03c6fb326"
        }
      },
      "drivers": {
        "adc": [
          {
            "id": 0,
            "name": "ATMO_DRIVERINSTANCE_ADC_ADC1"
          }
        ],
        "ble": [
          {
            "id": 0,
            "name": "ATMO_DRIVERINSTANCE_BLE_BLE1"
          }
        ],
        "block": [
          {
            "id": 0,
            "name": "ATMO_DRIVERINSTANCE_BLOCK_BLOCK1"
          }
        ],
        "embeddedCloud": [
          {
            "id": 0,
            "name": "ATMO_DRIVERINSTANCE_EMBEDDEDCLOUD_EMBEDDEDCLOUD1"
          }
        ],
        "datetime": [],
        "filesytem": [
          {
            "id": 0,
            "name": "ATMO_DRIVERINSTANCE_FILESYSTEM_FILESYSTEM1"
          }
        ],
        "gpio": [
          {
            "id": 0,
            "name": "ATMO_DRIVERINSTANCE_GPIO_GPIO1"
          }
        ],
        "http": [],
        "i2c": [
          {
            "id": 0,
            "name": "ATMO_DRIVERINSTANCE_I2C_I2C1",
            "primary": true
          }
        ],
        "interval": [
          {
            "id": 0,
            "name": "ATMO_DRIVERINSTANCE_INTERVAL_INTERVAL1"
          }
        ],
        "nfc": [],
        "pwm": [
          {
            "id": 0,
            "name": "ATMO_DRIVERINSTANCE_PWM_PWM1"
          }
        ],
        "spi": [],
        "uart": [
          {
            "id": 0,
            "name": "ATMO_DRIVERINSTANCE_UART_UART1"
          }
        ],
        "wifi": [
          {
            "id": 0,
            "name": "ATMO_DRIVERINSTANCE_WIFI_WIFI1"
          }
        ]
      },
      "firmwareFiles": {
        "artifactName": "firmware",
        "fileName": "atmosphere-project.hex"
      },
      "static": {
        "header": "",
        "footer": "",
        "functions": {
          "ATMO_Setup": {
            "returnType": "void",
            "code": "",
            "arguments": []
          }
        }
      }
    },
    "Application": {
      "type": "app",
      "compilerVersion": "latest",
      "variants": [],
      "meta": {
        "appViewLayouts": {
          "320": {
            "560": true
          }
        }
      },
      "elements": [
        {
          "name": "AccelerationLabel",
          "type": "AppUILabel",
          "variants": [
            "app",
            "ui"
          ],
          "properties": {
            "errorData": null,
            "layouts": {
              "320": {
                "560": {
                  "width": 100,
                  "height": 100,
                  "x": 19,
                  "y": 91,
                  "rotation": 0,
                  "propertyOverlay": {}
                }
              }
            },
            "visible": true,
            "text": "Acceleration",
            "font": "18px Helvetica",
            "color": "black",
            "alignment": "left"
          },
          "meta": {
            "editorX": 198,
            "editorY": 52,
            "lastTrigger": "triggered"
          },
          "triggers": {
            "triggered": []
          }
        },
        {
          "name": "RightButton",
          "type": "AppUIButton",
          "variants": [
            "app",
            "ui"
          ],
          "properties": {
            "errorData": null,
            "layouts": {
              "320": {
                "560": {
                  "width": 100,
                  "height": 100,
                  "x": 111,
                  "y": 448,
                  "rotation": 0,
                  "propertyOverlay": {}
                }
              }
            },
            "visible": true,
            "labelText": "Down",
            "labelFont": "18px Arial Black",
            "labelColor": "black",
            "pressedData": {
              "x": 0,
              "y": 0
            },
            "releasedData": {
              "x": 0,
              "y": 0
            },
            "overData": {
              "x": 0,
              "y": 0
            },
            "leftData": {
              "x": 0,
              "y": 0
            }
          },
          "meta": {
            "editorX": 449,
            "editorY": 377,
            "lastTrigger": "pressed"
          },
          "triggers": {
            "triggered": [],
            "pressed": [
              {
                "mapping": {
                  "value": {
                    "code": "\"2\""
                  }
                },
                "targetOrder": [
                  "value"
                ],
                "targetElement": "BLEMovement",
                "targetAbility": "write"
              }
            ],
            "released": [
              {
                "mapping": {
                  "value": {
                    "code": "\"0\""
                  }
                },
                "targetOrder": [
                  "value"
                ],
                "targetElement": "BLEMovement",
                "targetAbility": "write"
              }
            ],
            "over": []
          }
        },
        {
          "name": "BackwardButton",
          "type": "AppUIButton",
          "variants": [
            "app",
            "ui"
          ],
          "properties": {
            "errorData": null,
            "layouts": {
              "320": {
                "560": {
                  "width": 100,
                  "height": 100,
                  "x": 212,
                  "y": 347,
                  "rotation": 0,
                  "propertyOverlay": {}
                }
              }
            },
            "visible": true,
            "labelText": "Right",
            "labelFont": "18px Arial Black",
            "labelColor": "black",
            "pressedData": {
              "x": 0,
              "y": 0
            },
            "releasedData": {
              "x": 0,
              "y": 0
            },
            "overData": {
              "x": 0,
              "y": 0
            },
            "leftData": {
              "x": 0,
              "y": 0
            }
          },
          "meta": {
            "editorX": 445,
            "editorY": 152,
            "lastTrigger": "pressed"
          },
          "triggers": {
            "triggered": [],
            "pressed": [
              {
                "mapping": {
                  "value": {
                    "code": "\"3\""
                  }
                },
                "targetOrder": [
                  "value"
                ],
                "targetElement": "BLEMovement",
                "targetAbility": "write"
              }
            ],
            "released": [
              {
                "mapping": {
                  "value": {
                    "code": "\"0\""
                  }
                },
                "targetOrder": [
                  "value"
                ],
                "targetElement": "BLEMovement",
                "targetAbility": "write"
              }
            ],
            "over": []
          }
        },
        {
          "name": "LeftButton",
          "type": "AppUIButton",
          "variants": [
            "app",
            "ui"
          ],
          "properties": {
            "errorData": null,
            "layouts": {
              "320": {
                "560": {
                  "width": 100,
                  "height": 100,
                  "x": 10,
                  "y": 347,
                  "rotation": 0,
                  "propertyOverlay": {}
                }
              }
            },
            "visible": true,
            "labelText": "Left",
            "labelFont": "18px Arial Black",
            "labelColor": "black",
            "pressedData": {
              "x": 0,
              "y": 0
            },
            "releasedData": {
              "x": 0,
              "y": 0
            },
            "overData": {
              "x": 0,
              "y": 0
            },
            "leftData": {
              "x": 0,
              "y": 0
            }
          },
          "meta": {
            "editorX": 446,
            "editorY": 266,
            "lastTrigger": "pressed"
          },
          "triggers": {
            "triggered": [],
            "pressed": [
              {
                "mapping": {
                  "value": {
                    "code": "\"4\""
                  }
                },
                "targetOrder": [
                  "value"
                ],
                "targetElement": "BLEMovement",
                "targetAbility": "write"
              }
            ],
            "released": [
              {
                "mapping": {
                  "value": {
                    "code": "\"0\""
                  }
                },
                "targetOrder": [
                  "value"
                ],
                "targetElement": "BLEMovement",
                "targetAbility": "write"
              }
            ],
            "over": []
          }
        },
        {
          "name": "ForwardButton",
          "type": "AppUIButton",
          "variants": [
            "app",
            "ui"
          ],
          "properties": {
            "errorData": null,
            "layouts": {
              "320": {
                "560": {
                  "width": 100,
                  "height": 100,
                  "x": 111,
                  "y": 246,
                  "rotation": 0,
                  "propertyOverlay": {}
                }
              }
            },
            "visible": true,
            "labelText": "Up",
            "labelFont": "18px Arial Black",
            "labelColor": "Black",
            "pressedData": {
              "x": 0,
              "y": 0
            },
            "releasedData": {
              "x": 0,
              "y": 0
            },
            "overData": {
              "x": 0,
              "y": 0
            },
            "leftData": {
              "x": 0,
              "y": 0
            }
          },
          "meta": {
            "editorX": 444,
            "editorY": 64,
            "lastTrigger": "pressed"
          },
          "triggers": {
            "triggered": [],
            "pressed": [
              {
                "mapping": {
                  "value": {
                    "code": "\"1\""
                  }
                },
                "targetOrder": [
                  "value"
                ],
                "targetElement": "BLEMovement",
                "targetAbility": "write"
              }
            ],
            "released": [
              {
                "mapping": {
                  "value": {
                    "code": "\"0\""
                  }
                },
                "targetOrder": [
                  "value"
                ],
                "targetElement": "BLEMovement",
                "targetAbility": "write"
              }
            ],
            "over": []
          }
        },
        {
          "name": "TempLabel",
          "type": "AppUILabel",
          "variants": [
            "app",
            "ui"
          ],
          "properties": {
            "errorData": null,
            "layouts": {
              "320": {
                "560": {
                  "width": 157.83334350585938,
                  "height": 113.76388549804688,
                  "x": 18.166656494140625,
                  "y": 52,
                  "rotation": 0,
                  "propertyOverlay": {}
                }
              }
            },
            "visible": true,
            "text": "Temperature: 20",
            "font": "18px Arial",
            "color": "Black",
            "alignment": "left"
          },
          "meta": {
            "editorX": 351,
            "editorY": 182,
            "lastTrigger": "triggered"
          },
          "triggers": {
            "triggered": []
          }
        },
        {
          "name": "BLE_NTC",
          "type": "AppBLECharacteristicCustom",
          "variants": [
            "app",
            "ble"
          ],
          "properties": {
            "errorData": {},
            "readData": null,
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_BLE_GATTSAddService(\n\t\tATMO_PROPERTY(BLE_NTC, instance),\n\t\t&ATMO_VARIABLE(BLE_NTC, bleServiceHandle), \n\t\tATMO_PROPERTY(BLE_NTC, bleServiceUuid));\n\t\n\tuint8_t property = 0;\n\tuint8_t permission = 0;\n\t\n\tproperty |= ATMO_PROPERTY(BLE_NTC, read) ? ATMO_BLE_Property_Read : 0;\n\tproperty |= ATMO_PROPERTY(BLE_NTC, write) ? ATMO_BLE_Property_Write : 0;\n\tproperty |= ATMO_PROPERTY(BLE_NTC, notify) ? ATMO_BLE_Property_Notify : 0;\n\n\tpermission |= ATMO_PROPERTY(BLE_NTC, read) ? ATMO_BLE_Permission_Read : 0;\n\tpermission |= ATMO_PROPERTY(BLE_NTC, write) ? ATMO_BLE_Permission_Write : 0;\n\n\tATMO_DATATYPE types[3] = {ATMO_PROPERTY(BLE_NTC, writeDataType), ATMO_PROPERTY(BLE_NTC, readDataType), ATMO_PROPERTY(BLE_NTC, notifyDataType)};\n\t\n\tATMO_BLE_GATTSAddCharacteristic(\n\t\tATMO_PROPERTY(BLE_NTC, instance),\n\t\t&ATMO_VARIABLE(BLE_NTC, bleCharacteristicHandle), \n\t\tATMO_VARIABLE(BLE_NTC, bleServiceHandle), \n\t\tATMO_PROPERTY(BLE_NTC, bleCharacteristicUuid), \n\t\tproperty, permission, ATMO_GetMaxValueSize(3, 64, types));\n\t\n\tATMO_BLE_GATTSRegisterCharacteristicAbilityHandle(\n\t\tATMO_PROPERTY(BLE_NTC, instance),\n\t\tATMO_VARIABLE(BLE_NTC, bleCharacteristicHandle), \n\t\tATMO_BLE_Characteristic_Written, \n\t\tATMO_ABILITY(BLE_NTC, written));\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setValue": "\n\t\n\t// Convert to the desired write data type\n\tATMO_Value_t convertedValue;\n\tATMO_InitValue(&convertedValue);\n\tATMO_CreateValueConverted(&convertedValue, ATMO_PROPERTY(BLE_NTC, readDataType), in);\n\n\tATMO_BLE_GATTSSetCharacteristic(\n\t\tATMO_PROPERTY(BLE_NTC, instance),\n\t\tATMO_VARIABLE(BLE_NTC, bleCharacteristicHandle),\n\t\tconvertedValue.size, \n\t\t(uint8_t *)convertedValue.data,\n\t\tNULL);\n\t\n\tATMO_FreeValue(&convertedValue);\n\t\t\n\treturn ATMO_Status_Success;\n\t",
              "written": "\n\tATMO_CreateValueConverted(out, ATMO_PROPERTY(BLE_NTC, writeDataType), in);\n\treturn ATMO_Status_Success;\n\t",
              "subscibed": "\treturn ATMO_Status_Success;",
              "unsubscribed": "\treturn ATMO_Status_Success;"
            },
            "variables": {
              "bleServiceHandle": {
                "type": "ATMO_BLE_Handle_t"
              },
              "bleCharacteristicHandle": {
                "type": "ATMO_BLE_Handle_t"
              }
            },
            "embeddedPropertyConversions": {
              "bleServiceUuid": "string",
              "bleCharacteristicUuid": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "setValue": false,
              "written": false,
              "subscibed": false,
              "unsubscribed": false
            },
            "instance": "ATMO_DRIVERINSTANCE_BLE_BLE1",
            "bleServiceUuid": "cd900ce8-9603-4a92-b124-57f4befd5f5e",
            "bleCharacteristicUuid": "cd900ce8-9603-4a92-b124-57f4befd5f60",
            "read": true,
            "write": true,
            "notify": false,
            "readDataType": "ATMO_DATATYPE_FLOAT",
            "writeDataType": "ATMO_DATATYPE_FLOAT",
            "notifyDataType": "ATMO_DATATYPE_STRING"
          },
          "meta": {
            "editorX": 231,
            "editorY": 180,
            "lastTrigger": "read"
          },
          "triggers": {
            "triggered": [],
            "read": [
              {
                "mapping": {
                  "text": {
                    "code": "\"Temperature: \" + readData.toFixed(2)"
                  }
                },
                "targetOrder": [
                  "text"
                ],
                "targetElement": "TempLabel",
                "targetAbility": "setText"
              }
            ],
            "written": [],
            "notification": [],
            "indication": [],
            "subscribed": [],
            "unsubscribed": []
          },
          "coupledElementName": "BLE_NTC",
          "coupledElementPlaneName": "PSoC 6 Wi-Fi BT Proto"
        },
        {
          "name": "TempInterval",
          "type": "AppInterval",
          "variants": [
            "app"
          ],
          "properties": {
            "errorData": null,
            "time": 1000,
            "startOnInitialize": true
          },
          "meta": {
            "editorX": 102,
            "editorY": 182,
            "lastTrigger": "interval"
          },
          "triggers": {
            "triggered": [],
            "interval": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "BLE_NTC",
                "targetAbility": "read"
              }
            ],
            "started": [],
            "paused": []
          }
        },
        {
          "name": "Title",
          "type": "AppUILabel",
          "variants": [
            "app",
            "ui"
          ],
          "properties": {
            "errorData": null,
            "layouts": {
              "320": {
                "560": {
                  "width": 297,
                  "height": 24.90277608235677,
                  "x": 16.166656494140625,
                  "y": 12.430557250976562,
                  "rotation": 0,
                  "propertyOverlay": {}
                }
              }
            },
            "visible": true,
            "text": "CleanerAPP",
            "font": "20px Arial",
            "color": "Black",
            "alignment": "center"
          },
          "meta": {
            "editorX": 98,
            "editorY": 53,
            "lastTrigger": "triggered"
          },
          "triggers": {
            "triggered": []
          }
        },
        {
          "name": "Slider",
          "type": "AppUISlider",
          "variants": [
            "app",
            "ui"
          ],
          "properties": {
            "errorData": null,
            "layouts": {
              "320": {
                "560": {
                  "width": 296,
                  "height": 34,
                  "x": -1.833343505859375,
                  "y": 121.43055725097656,
                  "rotation": 0,
                  "propertyOverlay": {}
                }
              }
            },
            "visible": true,
            "value": "50",
            "stepping": "1",
            "minValue": "0",
            "maxValue": "50"
          },
          "meta": {
            "editorX": 106,
            "editorY": 380,
            "lastTrigger": "changed"
          },
          "triggers": {
            "triggered": [],
            "changed": [
              {
                "mapping": {
                  "text": {
                    "code": "value"
                  }
                },
                "targetOrder": [
                  "text"
                ],
                "targetElement": "AccelerationValue",
                "targetAbility": "setText"
              }
            ]
          }
        },
        {
          "name": "BLEMovement",
          "type": "AppBLECharacteristicCustom",
          "variants": [
            "app",
            "ble"
          ],
          "properties": {
            "errorData": {},
            "readData": null,
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_BLE_GATTSAddService(\n\t\tATMO_PROPERTY(BLEMovement, instance),\n\t\t&ATMO_VARIABLE(BLEMovement, bleServiceHandle), \n\t\tATMO_PROPERTY(BLEMovement, bleServiceUuid));\n\t\n\tuint8_t property = 0;\n\tuint8_t permission = 0;\n\t\n\tproperty |= ATMO_PROPERTY(BLEMovement, read) ? ATMO_BLE_Property_Read : 0;\n\tproperty |= ATMO_PROPERTY(BLEMovement, write) ? ATMO_BLE_Property_Write : 0;\n\tproperty |= ATMO_PROPERTY(BLEMovement, notify) ? ATMO_BLE_Property_Notify : 0;\n\n\tpermission |= ATMO_PROPERTY(BLEMovement, read) ? ATMO_BLE_Permission_Read : 0;\n\tpermission |= ATMO_PROPERTY(BLEMovement, write) ? ATMO_BLE_Permission_Write : 0;\n\n\tATMO_DATATYPE types[3] = {ATMO_PROPERTY(BLEMovement, writeDataType), ATMO_PROPERTY(BLEMovement, readDataType), ATMO_PROPERTY(BLEMovement, notifyDataType)};\n\t\n\tATMO_BLE_GATTSAddCharacteristic(\n\t\tATMO_PROPERTY(BLEMovement, instance),\n\t\t&ATMO_VARIABLE(BLEMovement, bleCharacteristicHandle), \n\t\tATMO_VARIABLE(BLEMovement, bleServiceHandle), \n\t\tATMO_PROPERTY(BLEMovement, bleCharacteristicUuid), \n\t\tproperty, permission, ATMO_GetMaxValueSize(3, 64, types));\n\t\n\tATMO_BLE_GATTSRegisterCharacteristicAbilityHandle(\n\t\tATMO_PROPERTY(BLEMovement, instance),\n\t\tATMO_VARIABLE(BLEMovement, bleCharacteristicHandle), \n\t\tATMO_BLE_Characteristic_Written, \n\t\tATMO_ABILITY(BLEMovement, written));\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setValue": "\n\t\n\t// Convert to the desired write data type\n\tATMO_Value_t convertedValue;\n\tATMO_InitValue(&convertedValue);\n\tATMO_CreateValueConverted(&convertedValue, ATMO_PROPERTY(BLEMovement, readDataType), in);\n\n\tATMO_BLE_GATTSSetCharacteristic(\n\t\tATMO_PROPERTY(BLEMovement, instance),\n\t\tATMO_VARIABLE(BLEMovement, bleCharacteristicHandle),\n\t\tconvertedValue.size, \n\t\t(uint8_t *)convertedValue.data,\n\t\tNULL);\n\t\n\tATMO_FreeValue(&convertedValue);\n\t\t\n\treturn ATMO_Status_Success;\n\t",
              "written": "\n\tATMO_CreateValueConverted(out, ATMO_PROPERTY(BLEMovement, writeDataType), in);\n\treturn ATMO_Status_Success;\n\t",
              "subscibed": "\treturn ATMO_Status_Success;",
              "unsubscribed": "\treturn ATMO_Status_Success;"
            },
            "variables": {
              "bleServiceHandle": {
                "type": "ATMO_BLE_Handle_t"
              },
              "bleCharacteristicHandle": {
                "type": "ATMO_BLE_Handle_t"
              }
            },
            "embeddedPropertyConversions": {
              "bleServiceUuid": "string",
              "bleCharacteristicUuid": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "setValue": false,
              "written": false,
              "subscibed": false,
              "unsubscribed": false
            },
            "instance": "ATMO_DRIVERINSTANCE_BLE_BLE1",
            "bleServiceUuid": "cd900ce8-9603-4a92-b124-57f4befd5f5e",
            "bleCharacteristicUuid": "cd900ce8-9603-4a92-b124-57f4befd5f5f",
            "read": true,
            "write": true,
            "notify": false,
            "readDataType": "ATMO_DATATYPE_STRING",
            "writeDataType": "ATMO_DATATYPE_STRING",
            "notifyDataType": "ATMO_DATATYPE_STRING"
          },
          "meta": {
            "editorX": 610,
            "editorY": 264,
            "lastTrigger": "read"
          },
          "triggers": {
            "triggered": [],
            "read": [],
            "written": [],
            "notification": [],
            "indication": [],
            "subscribed": [],
            "unsubscribed": []
          },
          "coupledElementName": "BLEMovement",
          "coupledElementPlaneName": "PSoC 6 Wi-Fi BT Proto"
        },
        {
          "name": "BLEAcceleration",
          "type": "AppBLECharacteristicCustom",
          "variants": [
            "app",
            "ble"
          ],
          "properties": {
            "errorData": {},
            "readData": null,
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_BLE_GATTSAddService(\n\t\tATMO_PROPERTY(BLEAcceleration, instance),\n\t\t&ATMO_VARIABLE(BLEAcceleration, bleServiceHandle), \n\t\tATMO_PROPERTY(BLEAcceleration, bleServiceUuid));\n\t\n\tuint8_t property = 0;\n\tuint8_t permission = 0;\n\t\n\tproperty |= ATMO_PROPERTY(BLEAcceleration, read) ? ATMO_BLE_Property_Read : 0;\n\tproperty |= ATMO_PROPERTY(BLEAcceleration, write) ? ATMO_BLE_Property_Write : 0;\n\tproperty |= ATMO_PROPERTY(BLEAcceleration, notify) ? ATMO_BLE_Property_Notify : 0;\n\n\tpermission |= ATMO_PROPERTY(BLEAcceleration, read) ? ATMO_BLE_Permission_Read : 0;\n\tpermission |= ATMO_PROPERTY(BLEAcceleration, write) ? ATMO_BLE_Permission_Write : 0;\n\n\tATMO_DATATYPE types[3] = {ATMO_PROPERTY(BLEAcceleration, writeDataType), ATMO_PROPERTY(BLEAcceleration, readDataType), ATMO_PROPERTY(BLEAcceleration, notifyDataType)};\n\t\n\tATMO_BLE_GATTSAddCharacteristic(\n\t\tATMO_PROPERTY(BLEAcceleration, instance),\n\t\t&ATMO_VARIABLE(BLEAcceleration, bleCharacteristicHandle), \n\t\tATMO_VARIABLE(BLEAcceleration, bleServiceHandle), \n\t\tATMO_PROPERTY(BLEAcceleration, bleCharacteristicUuid), \n\t\tproperty, permission, ATMO_GetMaxValueSize(3, 64, types));\n\t\n\tATMO_BLE_GATTSRegisterCharacteristicAbilityHandle(\n\t\tATMO_PROPERTY(BLEAcceleration, instance),\n\t\tATMO_VARIABLE(BLEAcceleration, bleCharacteristicHandle), \n\t\tATMO_BLE_Characteristic_Written, \n\t\tATMO_ABILITY(BLEAcceleration, written));\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setValue": "\n\t\n\t// Convert to the desired write data type\n\tATMO_Value_t convertedValue;\n\tATMO_InitValue(&convertedValue);\n\tATMO_CreateValueConverted(&convertedValue, ATMO_PROPERTY(BLEAcceleration, readDataType), in);\n\n\tATMO_BLE_GATTSSetCharacteristic(\n\t\tATMO_PROPERTY(BLEAcceleration, instance),\n\t\tATMO_VARIABLE(BLEAcceleration, bleCharacteristicHandle),\n\t\tconvertedValue.size, \n\t\t(uint8_t *)convertedValue.data,\n\t\tNULL);\n\t\n\tATMO_FreeValue(&convertedValue);\n\t\t\n\treturn ATMO_Status_Success;\n\t",
              "written": "\n\tATMO_CreateValueConverted(out, ATMO_PROPERTY(BLEAcceleration, writeDataType), in);\n\treturn ATMO_Status_Success;\n\t",
              "subscibed": "\treturn ATMO_Status_Success;",
              "unsubscribed": "\treturn ATMO_Status_Success;"
            },
            "variables": {
              "bleServiceHandle": {
                "type": "ATMO_BLE_Handle_t"
              },
              "bleCharacteristicHandle": {
                "type": "ATMO_BLE_Handle_t"
              }
            },
            "embeddedPropertyConversions": {
              "bleServiceUuid": "string",
              "bleCharacteristicUuid": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "setValue": false,
              "written": false,
              "subscibed": false,
              "unsubscribed": false
            },
            "instance": "ATMO_DRIVERINSTANCE_BLE_BLE1",
            "bleServiceUuid": "cd900ce8-9603-4a92-b124-57f4befd5f5e",
            "bleCharacteristicUuid": "cd900ce8-9603-4a92-b124-57f4befd5f61",
            "read": true,
            "write": true,
            "notify": false,
            "readDataType": "ATMO_DATATYPE_STRING",
            "writeDataType": "ATMO_DATATYPE_STRING",
            "notifyDataType": "ATMO_DATATYPE_STRING"
          },
          "meta": {
            "editorX": 347,
            "editorY": 282,
            "lastTrigger": "read"
          },
          "triggers": {
            "triggered": [],
            "read": [],
            "written": [],
            "notification": [],
            "indication": [],
            "subscribed": [],
            "unsubscribed": []
          },
          "coupledElementName": "BLEAcceleration",
          "coupledElementPlaneName": "PSoC 6 Wi-Fi BT Proto"
        },
        {
          "name": "AccelerationValue",
          "type": "AppUILabel",
          "variants": [
            "app",
            "ui"
          ],
          "properties": {
            "errorData": null,
            "layouts": {
              "320": {
                "560": {
                  "width": 100,
                  "height": 100,
                  "x": 131,
                  "y": 92,
                  "rotation": 0,
                  "propertyOverlay": {}
                }
              }
            },
            "visible": true,
            "text": "50",
            "font": "18px Helvetica",
            "color": "black",
            "alignment": "left"
          },
          "meta": {
            "editorX": 242,
            "editorY": 282,
            "lastTrigger": "triggered"
          },
          "triggers": {
            "triggered": [
              {
                "mapping": {
                  "value": {
                    "code": "text"
                  }
                },
                "targetOrder": [
                  "value"
                ],
                "targetElement": "BLEAcceleration",
                "targetAbility": "write"
              }
            ]
          }
        },
        {
          "name": "AccelerationInterval",
          "type": "AppInterval",
          "variants": [
            "app"
          ],
          "properties": {
            "errorData": null,
            "time": "1000",
            "startOnInitialize": true
          },
          "meta": {
            "editorX": 104,
            "editorY": 281,
            "lastTrigger": "interval"
          },
          "triggers": {
            "triggered": [],
            "interval": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "AccelerationValue",
                "targetAbility": "trigger"
              }
            ],
            "started": [],
            "paused": []
          }
        },
        {
          "name": "StopButton",
          "type": "AppUIButton",
          "variants": [
            "app",
            "ui"
          ],
          "properties": {
            "errorData": null,
            "layouts": {
              "320": {
                "560": {
                  "width": 100,
                  "height": 100,
                  "x": 111,
                  "y": 347,
                  "rotation": 0,
                  "propertyOverlay": {}
                }
              }
            },
            "visible": true,
            "labelText": "",
            "labelFont": "18px Arial Black",
            "labelColor": "black",
            "pressedData": {
              "x": 0,
              "y": 0
            },
            "releasedData": {
              "x": 0,
              "y": 0
            },
            "overData": {
              "x": 0,
              "y": 0
            },
            "leftData": {
              "x": 0,
              "y": 0
            }
          },
          "meta": {
            "editorX": 450,
            "editorY": 483,
            "lastTrigger": "released"
          },
          "triggers": {
            "triggered": [],
            "pressed": [
              {
                "mapping": {
                  "value": {
                    "code": "\"5\""
                  }
                },
                "targetOrder": [
                  "value"
                ],
                "targetElement": "BLEMovement",
                "targetAbility": "write"
              }
            ],
            "released": [
              {
                "mapping": {
                  "value": {
                    "code": ""
                  }
                },
                "targetOrder": [
                  "value"
                ],
                "targetElement": "BLEMovement",
                "targetAbility": "write"
              }
            ],
            "over": []
          }
        },
        {
          "name": "WaterButton",
          "type": "AppUIButton",
          "variants": [
            "app",
            "ui"
          ],
          "properties": {
            "errorData": null,
            "layouts": {
              "320": {
                "560": {
                  "width": 70.83334350585938,
                  "height": 60.875,
                  "x": 235.16665649414062,
                  "y": 188,
                  "rotation": 0,
                  "propertyOverlay": {}
                }
              }
            },
            "visible": true,
            "labelText": "Water",
            "labelFont": "18px Helvetica",
            "labelColor": "Blue",
            "pressedData": {
              "x": 0,
              "y": 0
            },
            "releasedData": {
              "x": 0,
              "y": 0
            },
            "overData": {
              "x": 0,
              "y": 0
            },
            "leftData": {
              "x": 0,
              "y": 0
            }
          },
          "meta": {
            "editorX": 106,
            "editorY": 573,
            "lastTrigger": "pressed"
          },
          "triggers": {
            "triggered": [],
            "pressed": [
              {
                "mapping": {
                  "value": {
                    "code": "\"1\""
                  }
                },
                "targetOrder": [
                  "value"
                ],
                "targetElement": "BLE_Relay",
                "targetAbility": "write"
              }
            ],
            "released": [],
            "over": []
          }
        },
        {
          "name": "BLE_Relay",
          "type": "AppBLECharacteristicCustom",
          "variants": [
            "app",
            "ble"
          ],
          "properties": {
            "errorData": {},
            "readData": null,
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_BLE_GATTSAddService(\n\t\tATMO_PROPERTY(BLE_Relay, instance),\n\t\t&ATMO_VARIABLE(BLE_Relay, bleServiceHandle), \n\t\tATMO_PROPERTY(BLE_Relay, bleServiceUuid));\n\t\n\tuint8_t property = 0;\n\tuint8_t permission = 0;\n\t\n\tproperty |= ATMO_PROPERTY(BLE_Relay, read) ? ATMO_BLE_Property_Read : 0;\n\tproperty |= ATMO_PROPERTY(BLE_Relay, write) ? ATMO_BLE_Property_Write : 0;\n\tproperty |= ATMO_PROPERTY(BLE_Relay, notify) ? ATMO_BLE_Property_Notify : 0;\n\n\tpermission |= ATMO_PROPERTY(BLE_Relay, read) ? ATMO_BLE_Permission_Read : 0;\n\tpermission |= ATMO_PROPERTY(BLE_Relay, write) ? ATMO_BLE_Permission_Write : 0;\n\n\tATMO_DATATYPE types[3] = {ATMO_PROPERTY(BLE_Relay, writeDataType), ATMO_PROPERTY(BLE_Relay, readDataType), ATMO_PROPERTY(BLE_Relay, notifyDataType)};\n\t\n\tATMO_BLE_GATTSAddCharacteristic(\n\t\tATMO_PROPERTY(BLE_Relay, instance),\n\t\t&ATMO_VARIABLE(BLE_Relay, bleCharacteristicHandle), \n\t\tATMO_VARIABLE(BLE_Relay, bleServiceHandle), \n\t\tATMO_PROPERTY(BLE_Relay, bleCharacteristicUuid), \n\t\tproperty, permission, ATMO_GetMaxValueSize(3, 64, types));\n\t\n\tATMO_BLE_GATTSRegisterCharacteristicAbilityHandle(\n\t\tATMO_PROPERTY(BLE_Relay, instance),\n\t\tATMO_VARIABLE(BLE_Relay, bleCharacteristicHandle), \n\t\tATMO_BLE_Characteristic_Written, \n\t\tATMO_ABILITY(BLE_Relay, written));\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setValue": "\n\t\n\t// Convert to the desired write data type\n\tATMO_Value_t convertedValue;\n\tATMO_InitValue(&convertedValue);\n\tATMO_CreateValueConverted(&convertedValue, ATMO_PROPERTY(BLE_Relay, readDataType), in);\n\n\tATMO_BLE_GATTSSetCharacteristic(\n\t\tATMO_PROPERTY(BLE_Relay, instance),\n\t\tATMO_VARIABLE(BLE_Relay, bleCharacteristicHandle),\n\t\tconvertedValue.size, \n\t\t(uint8_t *)convertedValue.data,\n\t\tNULL);\n\t\n\tATMO_FreeValue(&convertedValue);\n\t\t\n\treturn ATMO_Status_Success;\n\t",
              "written": "\n\tATMO_CreateValueConverted(out, ATMO_PROPERTY(BLE_Relay, writeDataType), in);\n\treturn ATMO_Status_Success;\n\t",
              "subscibed": "\treturn ATMO_Status_Success;",
              "unsubscribed": "\treturn ATMO_Status_Success;"
            },
            "variables": {
              "bleServiceHandle": {
                "type": "ATMO_BLE_Handle_t"
              },
              "bleCharacteristicHandle": {
                "type": "ATMO_BLE_Handle_t"
              }
            },
            "embeddedPropertyConversions": {
              "bleServiceUuid": "string",
              "bleCharacteristicUuid": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "setValue": false,
              "written": false,
              "subscibed": false,
              "unsubscribed": false
            },
            "instance": "ATMO_DRIVERINSTANCE_BLE_BLE1",
            "bleServiceUuid": "cd900ce8-9603-4a92-b124-57f4befd5f5e",
            "bleCharacteristicUuid": "cd900ce8-9603-4a92-b124-57f4befd5f62",
            "read": true,
            "write": true,
            "notify": false,
            "readDataType": "ATMO_DATATYPE_STRING",
            "writeDataType": "ATMO_DATATYPE_STRING",
            "notifyDataType": "ATMO_DATATYPE_STRING"
          },
          "meta": {
            "editorX": 242,
            "editorY": 473,
            "lastTrigger": "read"
          },
          "triggers": {
            "triggered": [],
            "read": [],
            "written": [],
            "notification": [],
            "indication": [],
            "subscribed": [],
            "unsubscribed": []
          },
          "coupledElementName": "BLE_Relay",
          "coupledElementPlaneName": "PSoC 6 Wi-Fi BT Proto"
        },
        {
          "name": "SyncInterval",
          "type": "AppInterval",
          "variants": [
            "app"
          ],
          "properties": {
            "errorData": null,
            "time": "2000",
            "startOnInitialize": true
          },
          "meta": {
            "editorX": 104,
            "editorY": 476,
            "lastTrigger": "interval"
          },
          "triggers": {
            "triggered": [],
            "interval": [
              {
                "mapping": {
                  "value": {
                    "code": "\"0\""
                  }
                },
                "targetOrder": [
                  "value"
                ],
                "targetElement": "BLE_Relay",
                "targetAbility": "write"
              }
            ],
            "started": [],
            "paused": []
          }
        }
      ]
    },
    "Cloud": {
      "type": "cloud",
      "compilerVersion": "latest",
      "variants": [],
      "meta": {},
      "elements": [],
      "layout": {
        "height": 1000,
        "width": 1000,
        "zIndexOrder": []
      }
    }
  }
}