FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C21x34 microcontroller devices.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0068) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0069) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0070) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0071) ; bytes on the stack which are otherwise required for the return address. If
                                        (0072) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0073) ; release, the C compiler automatically places an infinite loop at the end
                                        (0074) ; of main, rather than a return instruction.)
                                        (0075) ;
                                        (0076) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0077) 
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ; Interrupt Vector Table
                                        (0081) ;-----------------------------------------------------------------------------
                                        (0082) ;
                                        (0083) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0084) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0085) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0086) ; vector jump targets are modified automatically according to the user
                                        (0087) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0088) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0089) ; configuration files. If you need to hard code a vector, update the
                                        (0090) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0091) ; of this file.
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) 
                                        (0094)     AREA TOP (ROM, ABS, CON)
                                        (0095) 
                                        (0096)     org   0                        ;Reset Interrupt Vector
                                        (0097) IF	(TOOLCHAIN & HITECH)
                                        (0098) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0099) ELSE
0000: 80 67    JMP   0x0068             (0100)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0101) ENDIF
                                        (0102)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0103)     ;---------------------------------------------------
                                        (0104)     ; Insert your custom code below this banner
                                        (0105)     ;---------------------------------------------------
                                        (0106) 
                                        (0107)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0108)     halt                           ;Stop execution if power falls too low
                                        (0109) 
                                        (0110)     org   08h                      ;Analog Column 0 Interrupt Vector
0008: 7D 05 3F LJMP  _CSD_CMP0_ISR      (0111)     ljmp	_CSD_CMP0_ISR
000B: 7E       RETI                     (0112)     reti
                                        (0113) 
                                        (0114)     org   0Ch                      ;Analog Column 1 Interrupt Vector
000C: 7D 05 3D LJMP  _CSD_CMP_ISR       (0115)     ljmp	_CSD_CMP_ISR
000F: 7E       RETI                     (0116)     reti
                                        (0117) 
                                        (0118)     org   18h                      ;VC3 Interrupt Vector
                                        (0119)     // call	void_handler
0018: 7E       RETI                     (0120)     reti
                                        (0121) 
                                        (0122)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0123)     // call	void_handler
001C: 7E       RETI                     (0124)     reti
                                        (0125) 
                                        (0126)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 05 3A LJMP  _CSD_CNT_ISR       (0127)     ljmp	_CSD_CNT_ISR
0023: 7E       RETI                     (0128)     reti
                                        (0129) 
                                        (0130)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0131)     // call	void_handler
0024: 7E       RETI                     (0132)     reti
                                        (0133) 
                                        (0134)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0135)     // call	void_handler
0028: 7E       RETI                     (0136)     reti
                                        (0137) 
                                        (0138)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 02 C7 LJMP  _PWM8_1_ISR        (0139)     ljmp	_PWM8_1_ISR
002F: 7E       RETI                     (0140)     reti
                                        (0141) 
                                        (0142)     org   60h                      ;PSoC I2C Interrupt Vector
0060: 7D 03 C5 LJMP  _EzI2Cs_ISR        (0143)     ljmp	_EzI2Cs_ISR
0063: 7E       RETI                     (0144)     reti
                                        (0145) 
                                        (0146)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0147)     // call	void_handler
0064: 7E       RETI                     (0148)     reti
0068: 71 10    OR    F,0x10             
                                        (0149)     ;---------------------------------------------------
                                        (0150)     ; Insert your custom code above this banner
                                        (0151)     ;---------------------------------------------------
                                        (0152)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0153) 
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  Start of Execution.
                                        (0156) ;-----------------------------------------------------------------------------
                                        (0157) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0158) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0159) ;
                                        (0160) 
                                        (0161) IF	(TOOLCHAIN & HITECH)
                                        (0162)  	AREA PD_startup(CODE, REL, CON)
                                        (0163) ELSE
                                        (0164)     org 68h
                                        (0165) ENDIF
                                        (0166) __Start:
                                        (0167) 
                                        (0168)     ; initialize SMP values for voltage stabilization, if required,
                                        (0169)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0170)     ; least for now. 
                                        (0171)     ;
                                        (0172)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0173)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0174)     M8C_SetBank0
                                        (0175) 
                                        (0176) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0177) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0178)     M8C_EnableWatchDog
                                        (0179) ENDIF
                                        (0180) 
0072: 41 FE FB AND   REG[0xFE],0xFB     (0181)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0182) 
                                        (0183)     ;---------------------------
                                        (0184)     ; Set up the Temporary stack
                                        (0185)     ;---------------------------
                                        (0186)     ; A temporary stack is set up for the SSC instructions.
                                        (0187)     ; The real stack start will be assigned later.
                                        (0188)     ;
                                        (0189) _stack_start:          equ 80h
0075: 50 80    MOV   A,0x80             (0190)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0191)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0192) 
                                        (0193)     ;------------------------
                                        (0194)     ; Set Power-related Trim 
                                        (0195)     ;------------------------
                                        (0196)     
                                        (0197) M8C_ClearWDTAndSleep
                                        (0198) 
                                        (0199) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0200)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0201)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0202)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V
                                        (0203)  ENDIF
                                        (0204) ENDIF ; 5.0 V Operation
                                        (0205) 
                                        (0206) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0207)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0208)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0209)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V
                                        (0210)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0211)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V
                                        (0212)  ENDIF
                                        (0213) ENDIF ; 3.3 Volt Operation
                                        (0214) 
                                        (0215) IF ( POWER_SETTING & POWER_SET_2V7_12MHZ)      ; *** 2.7 Volts / 12MHZ operation ***
                                        (0216)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0217)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_12MHZ, SSCTBL2_TRIM_BGR_2V
                                        (0218) ENDIF ; *** 2.7 Volts / 12MHZ operation ***
                                        (0219) 
                                        (0220) IF ( POWER_SETTING & POWER_SET_2V7_6MHZ)       ; *** 2.7 Volts /  6MHZ operation ***
                                        (0221)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0222)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_6MHZ,  SSCTBL2_TRIM_BGR_2V
                                        (0223) ENDIF ; *** 2.7 Volts /  6MHZ operation ***
                                        (0224) 
007B: 55 F8 00 MOV   [Data_Regs+103],0x0(0225)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [Data_Regs+104],0x0(0226)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0227) 
                                        (0228)     ;---------------------------------------
                                        (0229)     ; Initialize Crystal Oscillator and PLL
                                        (0230)     ;---------------------------------------
                                        (0231) IF ( POWER_SETTING & POWER_SET_2V7)       ; *** 2.7 Volts  ***
                                        (0232)     M8C_SetBank1
                                        (0233)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_3MHz)
                                        (0234)     M8C_SetBank0
                                        (0235)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0236) 
                                        (0237) ELSE 	 ;*** all other voltages OK for 12Mhz ***
                                        (0238)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0239)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
008B: 62 D1 01 MOV   REG[0xD1],0x1      
                                        (0240)     M8C_SetBank0
                                        (0241)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0242) 
                                        (0243) ENDIF
                                        (0244) 
                                        (0245) 	;-------------------------------------------------------
                                        (0246)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0247)     ;-------------------------------------------------------
                                        (0248) 
                                        (0249)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0250) 
                                        (0251) IF (SYSCLK_SOURCE)
                                        (0252)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0253) ENDIF
                                        (0254)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0255) 
                                        (0256) IF	(TOOLCHAIN & HITECH)
                                        (0257)     ;---------------------------------------------
                                        (0258)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0259)     ;---------------------------------------------
                                        (0260) 	global		__Lstackps
                                        (0261) 	mov     a,low __Lstackps
                                        (0262) 	swap    a,sp
                                        (0263) 
                                        (0264) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0265)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0266)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0267)     RAM_SETPAGE_CUR 0
                                        (0268)     RAM_SETPAGE_MVW 0
                                        (0269)     RAM_SETPAGE_MVR 0
                                        (0270)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0271)       or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0272)     ELSE
                                        (0273)       or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0274)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0275) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0276) ELSE
                                        (0277)     ;---------------------------------------------
                                        (0278)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0279)     ;---------------------------------------------
                                        (0280) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0281)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
008E: 50 00    MOV   A,0x0              (0282)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
0090: 4E       SWAP  SP,A               (0283)     swap  A, SP
0091: 62 D3 01 MOV   REG[0xD3],0x1      
0094: 62 D0 00 MOV   REG[0xD0],0x0      
0097: 62 D5 00 MOV   REG[0xD5],0x0      
009A: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0284)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0285)     RAM_SETPAGE_CUR 0
                                        (0286)     RAM_SETPAGE_MVW 0
                                        (0287)     RAM_SETPAGE_MVR 0
                                        (0288) 
                                        (0289)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
009D: 71 C0    OR    F,0xC0             (0290)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0291)   ELSE
                                        (0292)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0293)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0294) ELSE
                                        (0295)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0296)     swap  SP, A
                                        (0297) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0298) ENDIF ;	TOOLCHAIN
                                        (0299) 
                                        (0300)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0301)     ;---------------------------------------------------
                                        (0302)     ; Insert your custom code below this banner
                                        (0303)     ;---------------------------------------------------
                                        (0304) 
                                        (0305)     ;---------------------------------------------------
                                        (0306)     ; Insert your custom code above this banner
                                        (0307)     ;---------------------------------------------------
                                        (0308)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0309) 
                                        (0310)     ;-------------------------
                                        (0311)     ; Load Base Configuration
                                        (0312)     ;-------------------------
                                        (0313)     ; Load global parameter settings and load the user modules in the
                                        (0314)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0315)     ; to minimize start up time; (2) We may still need to play with the
                                        (0316)     ; Sleep Timer.
                                        (0317)     ;
009F: 7C 02 5F LCALL 0x025F             (0318)     lcall LoadConfigInit
                                        (0319) 
                                        (0320)     ;-----------------------------------
                                        (0321)     ; Initialize C Run-Time Environment
                                        (0322)     ;-----------------------------------
                                        (0323) IF ( C_LANGUAGE_SUPPORT )
                                        (0324) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0325)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0326)     mov  [__r0],<__bss_start
                                        (0327) BssLoop:
                                        (0328)     cmp  [__r0],<__bss_end
                                        (0329)     jz   BssDone
                                        (0330)     mvi  [__r0],A
                                        (0331)     jmp  BssLoop
                                        (0332) BssDone:
                                        (0333)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0334)     mov  X,<__idata_start
                                        (0335)     mov  [__r0],<__data_start
                                        (0336) IDataLoop:
                                        (0337)     cmp  [__r0],<__data_end
                                        (0338)     jz   C_RTE_Done
                                        (0339)     push A
                                        (0340)     romx
                                        (0341)     mvi  [__r0],A
                                        (0342)     pop  A
                                        (0343)     inc  X
                                        (0344)     adc  A,0
                                        (0345)     jmp  IDataLoop
                                        (0346) 
                                        (0347) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0348) 
                                        (0349) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00A2: 62 D0 00 MOV   REG[0xD0],0x0      (0350)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0351)                                        ; to use the Virtual Register page.
                                        (0352) 
                                        (0353)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0354)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0355)     ; text segment and may have been relocated by the Code Compressor.
                                        (0356)     ;
00A5: 50 01    MOV   A,0x1              (0357)     mov   A, >__pXIData                ; Get the address of the flash
00A7: 57 D8    MOV   X,0xD8             (0358)     mov   X, <__pXIData                ;   pointer to the xidata area.
00A9: 08       PUSH  A                  (0359)     push  A
00AA: 28       ROMX                     (0360)     romx                               ; get the MSB of xidata's address
00AB: 53 90    MOV   [__r0],A           (0361)     mov   [__r0], A
00AD: 18       POP   A                  (0362)     pop   A
00AE: 75       INC   X                  (0363)     inc   X
00AF: 09 00    ADC   A,0x0              (0364)     adc   A, 0
00B1: 28       ROMX                     (0365)     romx                               ; get the LSB of xidata's address
00B2: 4B       SWAP  A,X                (0366)     swap  A, X
00B3: 51 90    MOV   A,[__r0]           (0367)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0368)                                        ;   XIData structure list in flash
00B5: 80 04    JMP   0x00BA             (0369)     jmp   .AccessStruct
                                        (0370) 
                                        (0371)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0372)     ; values of C variables. Each structure contains 3 member elements.
                                        (0373)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0374)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0375)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0376)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0377)     ; value in the second member element, an unsigned byte:
                                        (0378)     ; (1) If the value of the second element is non-zero, it represents
                                        (0379)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0380)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0381)     ; the bytes are copied to the block of RAM.
                                        (0382)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0383)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0384)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0385) 
                                        (0386) .AccessNextStructLoop:
00B7: 75       INC   X                  (0387)     inc   X                            ; pXIData++
00B8: 09 00    ADC   A,0x0              (0388)     adc   A, 0
00BA: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0389) .AccessStruct:                         ; Entry point for first block
                                        (0390)     ;
                                        (0391)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0392)     ;
                                        (0393)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00BD: 08       PUSH  A                  (0394)     push  A
00BE: 28       ROMX                     (0395)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00BF: 60 D5    MOV   REG[0xD5],A        (0396)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00C1: 74       INC   A                  (0397)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00C2: A0 4B    JZ    0x010E             (0398)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00C4: 18       POP   A                  (0399)     pop   A                            ; restore pXIData to [A,X]
00C5: 75       INC   X                  (0400)     inc   X                            ; pXIData++
00C6: 09 00    ADC   A,0x0              (0401)     adc   A, 0
00C8: 08       PUSH  A                  (0402)     push  A
00C9: 28       ROMX                     (0403)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00CA: 53 90    MOV   [__r0],A           (0404)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00CC: 18       POP   A                  (0405)     pop   A                            ; restore pXIData to [A,X]
00CD: 75       INC   X                  (0406)     inc   X                            ; pXIData++ (point to size)
00CE: 09 00    ADC   A,0x0              (0407)     adc   A, 0
00D0: 08       PUSH  A                  (0408)     push  A
00D1: 28       ROMX                     (0409)     romx                               ; Get the size (CPU.A <- *pXIData)
00D2: A0 1C    JZ    0x00EF             (0410)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00D4: 53 8F    MOV   [__r1],A           (0411)     mov   [__r1], A                    ;             else downcount in __r1
00D6: 18       POP   A                  (0412)     pop   A                            ; restore pXIData to [A,X]
                                        (0413) 
                                        (0414) .CopyNextByteLoop:
                                        (0415)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0416)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0417)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0418)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0419)     ;
00D7: 75       INC   X                  (0420)     inc   X                            ; pXIData++ (point to next data byte)
00D8: 09 00    ADC   A,0x0              (0421)     adc   A, 0
00DA: 08       PUSH  A                  (0422)     push  A
00DB: 28       ROMX                     (0423)     romx                               ; Get the data value (CPU.A <- *pXIData)
00DC: 3F 90    MVI   [__r0],A           (0424)     mvi   [__r0], A                    ; Transfer the data to RAM
00DE: 47 90 FF TST   [__r0],0xFF        (0425)     tst   [__r0], 0xff                 ; Check for page crossing
00E1: B0 06    JNZ   0x00E8             (0426)     jnz   .CopyLoopTail                ;   No crossing, keep going
00E3: 5D D5    MOV   A,REG[0xD5]        (0427)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00E5: 74       INC   A                  (0428)     inc   A
00E6: 60 D5    MOV   REG[0xD5],A        (0429)     mov   reg[ MVW_PP], A
                                        (0430) .CopyLoopTail:
00E8: 18       POP   A                  (0431)     pop   A                            ; restore pXIData to [A,X]
00E9: 7A 8F    DEC   [__r1]             (0432)     dec   [__r1]                       ; End of this array in flash?
00EB: BF EB    JNZ   0x00D7             (0433)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
00ED: 8F C9    JMP   0x00B7             (0434)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0435) 
                                        (0436) .ClearRAMBlockToZero:
00EF: 18       POP   A                  (0437)     pop   A                            ; restore pXIData to [A,X]
00F0: 75       INC   X                  (0438)     inc   X                            ; pXIData++ (point to next data byte)
00F1: 09 00    ADC   A,0x0              (0439)     adc   A, 0
00F3: 08       PUSH  A                  (0440)     push  A
00F4: 28       ROMX                     (0441)     romx                               ; Get the run length (CPU.A <- *pXIData)
00F5: 53 8F    MOV   [__r1],A           (0442)     mov   [__r1], A                    ; Initialize downcounter
00F7: 50 00    MOV   A,0x0              (0443)     mov   A, 0                         ; Initialize source data
                                        (0444) 
                                        (0445) .ClearRAMBlockLoop:
                                        (0446)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0447)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0448)     ;
00F9: 3F 90    MVI   [__r0],A           (0449)     mvi   [__r0], A                    ; Clear a byte
00FB: 47 90 FF TST   [__r0],0xFF        (0450)     tst   [__r0], 0xff                 ; Check for page crossing
00FE: B0 08    JNZ   0x0107             (0451)     jnz   .ClearLoopTail               ;   No crossing, keep going
0100: 5D D5    MOV   A,REG[0xD5]        (0452)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0102: 74       INC   A                  (0453)     inc   A
0103: 60 D5    MOV   REG[0xD5],A        (0454)     mov   reg[ MVW_PP], A
0105: 50 00    MOV   A,0x0              (0455)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0456) .ClearLoopTail:
0107: 7A 8F    DEC   [__r1]             (0457)     dec   [__r1]                       ; Was this the last byte?
0109: BF EF    JNZ   0x00F9             (0458)     jnz   .ClearRAMBlockLoop           ;   No,  continue
010B: 18       POP   A                  (0459)     pop   A                            ;   Yes, restore pXIData to [A,X] and
010C: 8F AA    JMP   0x00B7             (0460)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0461) 
                                        (0462) .C_RTE_WrapUp:
010E: 18       POP   A                  (0463)     pop   A                            ; balance stack
010F: 71 10    OR    F,0x10             
                                        (0464) 
                                        (0465) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0466) 
                                        (0467) C_RTE_Done:
                                        (0468) 
                                        (0469) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0470) 
                                        (0471)     ;-------------------------------
                                        (0472)     ; Voltage Stabilization for SMP
                                        (0473)     ;-------------------------------
                                        (0474) 
                                        (0475) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0476) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0477)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0478)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0479)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0480)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0481)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0482)     M8C_SetBank1
                                        (0483)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0484)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0485)     M8C_SetBank0
                                        (0486)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0487)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0488) .WaitFor2ms:
                                        (0489)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0490)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0491) ENDIF ; SMP is operational
                                        (0492) ENDIF ; 5.0V Operation
                                        (0493) 
                                        (0494)     ;-------------------------------
                                        (0495)     ; Set Power-On Reset (POR) Level
                                        (0496)     ;-------------------------------
                                        (0497)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0498)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0499)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0500)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0501)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0502) 
                                        (0503)     M8C_SetBank1
                                        (0504) 
                                        (0505) IF (POWER_SETTING & POWER_SET_2V7)             ; 2.7V Operation?
                                        (0506)                                                ;  Yes, lowest trip already set
                                        (0507) ELSE                                           ;   No, must adjust POR...
                                        (0508) IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
                                        (0509)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, change to midpoint trip
                                        (0510) ELSE
                                        (0511) IF (POWER_SETTING & POWER_SET_5V0)             ; 5.0V Operation?
                                        (0512)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)       ; and Slow Mode?
                                        (0513)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, set to midpoint trip
                                        (0514)  ELSE                                          ;    No, fast mode
                                        (0515)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
0111: 43 E3 10 OR    REG[0xE3],0x10     (0516)     or   reg[VLT_CR], VLT_CR_POR_MID           ;         No, change to midpoint trip
0114: 70 EF    AND   F,0xEF             
                                        (0517)   ELSE ; 24HMz                                 ;
                                        (0518)     or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
                                        (0519)   ENDIF ; 24MHz
                                        (0520)  ENDIF ; Slow Mode
                                        (0521) ENDIF ; 5.0V Operation
                                        (0522) ENDIF ; 3.3V Operation
                                        (0523) ENDIF ; 2.7V Operation
                                        (0524) 
                                        (0525)     M8C_SetBank0
                                        (0526) 
                                        (0527)     ;----------------------------
                                        (0528)     ; Wrap up and invoke "main"
                                        (0529)     ;----------------------------
                                        (0530) 
                                        (0531)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0532)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0533)     ;
0116: 62 E0 00 MOV   REG[0xE0],0x0      (0534)     mov  reg[INT_MSK0],0
0119: 71 10    OR    F,0x10             
                                        (0535) 
                                        (0536)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0537)     ;
                                        (0538)     M8C_SetBank1
011B: 62 E0 00 MOV   REG[0xE0],0x0      (0539)     mov  reg[OSC_CR0],(SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
011E: 70 EF    AND   F,0xEF             
                                        (0540)     M8C_SetBank0
                                        (0541) 
                                        (0542)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0543)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0544)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0545)     ;
0120: 62 E2 00 MOV   REG[0xE2],0x0      (0546)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0547)                                    ; have been set during the boot process.
                                        (0548) IF	(TOOLCHAIN & HITECH)
                                        (0549) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0550) ELSE
                                        (0551) IF ENABLE_LJMP_TO_MAIN
                                        (0552)     ljmp  _main                    ; goto main (no return)
                                        (0553) ELSE
0123: 7C 0F 04 LCALL __UserModules_end|__text_start|_main|_main(0554)     lcall _main                    ; call main
                                        (0555) .Exit:
0126: 8F FF    JMP   0x0126             (0556)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0557) ENDIF
                                        (0558) ENDIF ; TOOLCHAIN
                                        (0559) 
                                        (0560)     ;---------------------------------
                                        (0561)     ; Library Access to Global Parms
                                        (0562)     ;---------------------------------
                                        (0563)     ;
                                        (0564)  bGetPowerSetting:
                                        (0565) _bGetPowerSetting:
                                        (0566)     ; Returns value of POWER_SETTING in the A register.
                                        (0567)     ; No inputs. No Side Effects.
                                        (0568)     ;
                                        (0569) IF (POWER_SETTING & POWER_SET_2V7)
                                        (0570)     mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
                                        (0571) ELSE
0128: 50 10    MOV   A,0x10             (0572)     mov   A, POWER_SETTING          ; Supply voltage and internal main osc
                                        (0573) ENDIF
012A: 7F       RET                      (0574)     ret
                                        (0575) 
                                        (0576) IF	(TOOLCHAIN & HITECH)
                                        (0577) ELSE
                                        (0578)     ;---------------------------------
                                        (0579)     ; Order Critical RAM & ROM AREAs
                                        (0580)     ;---------------------------------
                                        (0581)     ;  'TOP' is all that has been defined so far...
                                        (0582) 
                                        (0583)     ;  ROM AREAs for C CONST, static & global items
                                        (0584)     ;
                                        (0585)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0586)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0587) __idata_start:
                                        (0588) 
                                        (0589)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0590) __func_lit_start:
                                        (0591) 
                                        (0592) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0593)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0594)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0595)     ; relocated by the code compressor, but the text area may shrink and
                                        (0596)     ; that moves xidata around.
                                        (0597)     ;
                                        (0598) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0599) ENDIF
                                        (0600) 
                                        (0601)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0602)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0603) 
                                        (0604)     ; CODE segment for general use
                                        (0605)     ;
                                        (0606)     AREA text (ROM, REL, CON)
                                        (0607) __text_start:
                                        (0608) 
                                        (0609)     ; RAM area usage
                                        (0610)     ;
                                        (0611)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0612) __data_start:
                                        (0613) 
                                        (0614)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0615)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0616)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0617) __bss_start:
                                        (0618) ENDIF ; TOOLCHAIN
                                        (0619) ; end of file boot.asm
_CSD_wReadSensor:
    0ECB: 70 BF    AND   F,0xBF
    0ECD: 62 D3 00 MOV   REG[0xD3],0x0
    0ED0: 64       ASL   A
    0ED1: 5C       MOV   X,A
    0ED2: 52 7A    MOV   A,[X+122]
    0ED4: 59 79    MOV   X,[X+121]
    0ED6: 70 3F    AND   F,0x3F
    0ED8: 71 C0    OR    F,0xC0
    0EDA: 7F       RET   
    0EDB: 62 D0 00 MOV   REG[0xD0],0x0
    0EDE: 71 10    OR    F,0x10
    0EE0: 43 00 02 OR    REG[0x0],0x2
    0EE3: 41 00 FD AND   REG[0x0],0xFD
    0EE6: 43 0C 02 OR    REG[0xC],0x2
    0EE9: 41 0D FD AND   REG[0xD],0xFD
    0EEC: 70 EF    AND   F,0xEF
    0EEE: 41 0F FD AND   REG[0xF],0xFD
    0EF1: 57 14    MOV   X,0x14
    0EF3: 79       DEC   X
    0EF4: BF FE    JNZ   0x0EF3
    0EF6: 71 10    OR    F,0x10
    0EF8: 43 0C 02 OR    REG[0xC],0x2
    0EFB: 43 0D 02 OR    REG[0xD],0x2
    0EFE: 70 EF    AND   F,0xEF
    0F00: 43 0F 02 OR    REG[0xF],0x2
    0F03: 7F       RET   
FILE: D:\Studia\PSOC\Buzzer\MF_CS_SLIDE\MF_CS_SLIDE\main.c
(0001) 
(0002) #include <m8c.h>        /* part specific constants and macros */
(0003) #include "PSoCAPI.h"    /* PSoC API definitions for all User Modules */
(0004) #define POS 		1
(0005) #define BUFSIZE		1
(0006) #define RWBOUNDARY	2
(0007) #define BLUE	1
(0008) #define GREEN	2
(0009) #define RED		3
(0010) #define NO_FINGER	0xFF
(0011) 
(0012) struct I2C_Regs 
(0013) { 
(0014) BYTE led;
(0015) BYTE sliderPos;
(0016) } Data_Regs;
(0017) 
(0018) void main(void)
(0019) {
__UserModules_end|__text_start|_main|_main:
  fingerposition       --> X+0
    0F04: 10       PUSH  X
    0F05: 4F       MOV   X,SP
    0F06: 38 02    ADD   SP,0x2
(0020) 	 int fingerposition;
(0021) 	 EzI2Cs_SetRamBuffer(sizeof(Data_Regs), RWBOUNDARY, (BYTE *) &Data_Regs);   /* Setting RAM Buffer */
    0F08: 10       PUSH  X
    0F09: 50 00    MOV   A,0x0
    0F0B: 08       PUSH  A
    0F0C: 50 91    MOV   A,0x91
    0F0E: 08       PUSH  A
    0F0F: 50 02    MOV   A,0x2
    0F11: 08       PUSH  A
    0F12: 08       PUSH  A
    0F13: 7C 05 03 LCALL _EzI2Cs_SetRamBuffer
    0F16: 38 FC    ADD   SP,0xFC
    0F18: 20       POP   X
(0022) 	 M8C_EnableGInt ;   /* Enabling the Global Interrupts */
    0F19: 71 01    OR    F,0x1
(0023) 
(0024) 	CSD_Start();   /*Start CSD Module */
    0F1B: 10       PUSH  X
    0F1C: 7C 0C B6 LCALL _CSD_Start
(0025) 	CSD_ScanAllSensors();   /* Scan all the available sensors */
    0F1F: 7C 0E C1 LCALL _CSD_ScanAllSensors
(0026) 	CSD_InitializeBaselines() ;   /* Initialise base line for the sensors */
    0F22: 7C 06 E8 LCALL _CSD_InitializeBaselines
(0027) 	CSD_SetDefaultFingerThresholds();
    0F25: 7C 06 D3 LCALL _CSD_SetDefaultFingerThresholds
(0028) 	LED_BLUE_Start();
    0F28: 7C 03 8C LCALL LED_BLUE_Start|_LED_BLUE_Off|LED_BLUE_Stop|LED_BLUE_Off|_LED_BLUE_Start|_LED_BLUE_Stop
(0029) 	LED_GREEN_Start();
    0F2B: 7C 03 4F LCALL _LED_GREEN_Off|LED_GREEN_Start|_LED_GREEN_Stop|LED_GREEN_Stop|_LED_GREEN_Start
(0030) 	LED_RED_Start();
    0F2E: 7C 03 12 LCALL _LED_RED_Start|LED_RED_Off|_LED_RED_Stop|LED_RED_Start|_LED_RED_Off|LED_RED_Stop
(0031) 	EzI2Cs_Start();   /* Turn on I2C */
    0F31: 7C 04 A8 LCALL _EzI2Cs_Start
(0032) 	PWM8_1_Start();
    0F34: 7C 02 D0 LCALL _PWM8_1_Start
    0F37: 20       POP   X
    0F38: 80 E1    JMP   0x101A
(0033) 	while(1) /*Infinite loop */
(0034) 	{
(0035) 		CSD_ScanAllSensors();  /*Scan all sensors in array (buttons and sliders) */
    0F3A: 10       PUSH  X
    0F3B: 7C 0E C1 LCALL _CSD_ScanAllSensors
(0036) 		CSD_UpdateAllBaselines();
    0F3E: 7C 07 4E LCALL _CSD_UpdateAllBaselines
(0037) 		LED_RED_Off();
    0F41: 7C 03 12 LCALL _LED_RED_Start|LED_RED_Off|_LED_RED_Stop|LED_RED_Start|_LED_RED_Off|LED_RED_Stop
(0038) 		LED_GREEN_Off();
    0F44: 7C 03 4F LCALL _LED_GREEN_Off|LED_GREEN_Start|_LED_GREEN_Stop|LED_GREEN_Stop|_LED_GREEN_Start
(0039) 		LED_BLUE_Off();
    0F47: 7C 03 8C LCALL LED_BLUE_Start|_LED_BLUE_Off|LED_BLUE_Stop|LED_BLUE_Off|_LED_BLUE_Start|_LED_BLUE_Stop
(0040) 
(0041) 		if(CSD_bIsAnySensorActive())  /* is any sensor active */
    0F4A: 7C 07 35 LCALL _CSD_bIsAnySensorActive
    0F4D: 20       POP   X
    0F4E: 62 D0 00 MOV   REG[0xD0],0x0
    0F51: 39 00    CMP   A,0x0
    0F53: A0 BD    JZ    0x1011
(0042) 		{
(0043) 			fingerposition = CSD_wGetCentroidPos(POS);  /*Get the centroid position for the system	*/
    0F55: 10       PUSH  X
    0F56: 50 01    MOV   A,0x1
    0F58: 7C 07 58 LCALL _CSD_wGetCentroidPos
    0F5B: 62 D0 00 MOV   REG[0xD0],0x0
    0F5E: 5A 90    MOV   [__r0],X
    0F60: 20       POP   X
    0F61: 54 01    MOV   [X+1],A
    0F63: 51 90    MOV   A,[__r0]
    0F65: 54 00    MOV   [X+0],A
(0044) 			PWM8_1_WritePeriod((BYTE)fingerposition/2);
    0F67: 52 01    MOV   A,[X+1]
    0F69: 53 90    MOV   [__r0],A
    0F6B: 50 02    MOV   A,0x2
    0F6D: 08       PUSH  A
    0F6E: 51 90    MOV   A,[__r0]
    0F70: 08       PUSH  A
    0F71: 7C 10 21 LCALL 0x1021
    0F74: 18       POP   A
    0F75: 38 FF    ADD   SP,0xFF
    0F77: 10       PUSH  X
    0F78: 7C 02 D8 LCALL _PWM8_1_WritePeriod
    0F7B: 20       POP   X
(0045) 			PWM8_1_WritePulseWidth((BYTE)fingerposition/4);
    0F7C: 62 D0 00 MOV   REG[0xD0],0x0
    0F7F: 52 01    MOV   A,[X+1]
    0F81: 53 90    MOV   [__r0],A
    0F83: 50 04    MOV   A,0x4
    0F85: 08       PUSH  A
    0F86: 51 90    MOV   A,[__r0]
    0F88: 08       PUSH  A
    0F89: 7C 10 21 LCALL 0x1021
    0F8C: 18       POP   A
    0F8D: 38 FF    ADD   SP,0xFF
    0F8F: 10       PUSH  X
    0F90: 7C 02 DB LCALL _PWM8_1_WritePulseWidth
    0F93: 20       POP   X
(0046) 			if(fingerposition < 33 && fingerposition >0) /*If the value returned from Centroid position is 
    0F94: 52 01    MOV   A,[X+1]
    0F96: 11 21    SUB   A,0x21
    0F98: 52 00    MOV   A,[X+0]
    0F9A: 31 80    XOR   A,0x80
    0F9C: 19 80    SBB   A,0x80
    0F9E: D0 21    JNC   0x0FC0
    0FA0: 50 00    MOV   A,0x0
    0FA2: 13 01    SUB   A,[X+1]
    0FA4: 52 00    MOV   A,[X+0]
    0FA6: 31 80    XOR   A,0x80
    0FA8: 62 D0 00 MOV   REG[0xD0],0x0
    0FAB: 53 8E    MOV   [__rX],A
    0FAD: 50 80    MOV   A,0x80
    0FAF: 1A 8E    SBB   A,[__rX]
    0FB1: D0 0E    JNC   0x0FC0
(0047) 			                               greater than 0 and less than or equal to 33 */
(0048) 			{			
(0049) 				Data_Regs.led = BLUE;
    0FB3: 62 D0 00 MOV   REG[0xD0],0x0
    0FB6: 55 91 01 MOV   [Data_Regs],0x1
(0050) 				LED_BLUE_On();
    0FB9: 10       PUSH  X
    0FBA: 7C 03 88 LCALL _LED_BLUE_On
    0FBD: 20       POP   X
(0051) 			}
    0FBE: 80 49    JMP   0x1008
(0052) 			else if(fingerposition < 66 && fingerposition >=33)  /*If the value returned from Centroid position is 
    0FC0: 52 01    MOV   A,[X+1]
    0FC2: 11 42    SUB   A,0x42
    0FC4: 52 00    MOV   A,[X+0]
    0FC6: 31 80    XOR   A,0x80
    0FC8: 19 80    SBB   A,0x80
    0FCA: D0 1A    JNC   0x0FE5
    0FCC: 52 01    MOV   A,[X+1]
    0FCE: 11 21    SUB   A,0x21
    0FD0: 52 00    MOV   A,[X+0]
    0FD2: 31 80    XOR   A,0x80
    0FD4: 19 80    SBB   A,0x80
    0FD6: C0 0E    JC    0x0FE5
(0053) 			                                      greater than 33 and less than or equal to 66 */
(0054) 
(0055) 			{
(0056) 				
(0057) 				Data_Regs.led = GREEN;
    0FD8: 62 D0 00 MOV   REG[0xD0],0x0
    0FDB: 55 91 02 MOV   [Data_Regs],0x2
(0058) 
(0059) 				LED_GREEN_On();
    0FDE: 10       PUSH  X
    0FDF: 7C 03 4B LCALL _LED_GREEN_On
    0FE2: 20       POP   X
(0060) 			}
    0FE3: 80 24    JMP   0x1008
(0061) 			else if(fingerposition < 99 && fingerposition >=66)  /*If the value returned from Centroid position is
    0FE5: 52 01    MOV   A,[X+1]
    0FE7: 11 63    SUB   A,0x63
    0FE9: 52 00    MOV   A,[X+0]
    0FEB: 31 80    XOR   A,0x80
    0FED: 19 80    SBB   A,0x80
    0FEF: D0 18    JNC   0x1008
    0FF1: 52 01    MOV   A,[X+1]
    0FF3: 11 42    SUB   A,0x42
    0FF5: 52 00    MOV   A,[X+0]
    0FF7: 31 80    XOR   A,0x80
    0FF9: 19 80    SBB   A,0x80
    0FFB: C0 0C    JC    0x1008
(0062) 			                                      greater than 66 and less than or equal to 99 */
(0063) 			{
(0064) 				
(0065) 				Data_Regs.led = RED;
    0FFD: 62 D0 00 MOV   REG[0xD0],0x0
    1000: 55 91 03 MOV   [Data_Regs],0x3
(0066) 				LED_RED_On();
    1003: 10       PUSH  X
    1004: 7C 03 0E LCALL _LED_RED_On
    1007: 20       POP   X
(0067) 			}
(0068) 			Data_Regs.sliderPos = (BYTE) fingerposition;			
    1008: 52 01    MOV   A,[X+1]
    100A: 62 D0 00 MOV   REG[0xD0],0x0
    100D: 53 92    MOV   [Data_Regs+1],A
(0069) 		}
    100F: 80 0A    JMP   0x101A
(0070) 		else
(0071) 		{
(0072) 			
(0073) 			Data_Regs.sliderPos = 0;
    1011: 62 D0 00 MOV   REG[0xD0],0x0
    1014: 55 92 00 MOV   [Data_Regs+1],0x0
(0074) 			Data_Regs.led = 0;			
    1017: 55 91 00 MOV   [Data_Regs],0x0
(0075) 		}
(0076) 	}
    101A: 8F 1F    JMP   0x0F3A
(0077) }
    101C: 38 FE    ADD   SP,0xFE
    101E: 20       POP   X
    101F: 8F FF    JMP   0x101F
