//*****************************************************************************
//*****************************************************************************
//  FILENAME: I2CMstr.h
//   Version: 1.90, Updated on 2011/6/28 at 6:9:30
//  Generated by PSoC Designer 5.1.2306
//
//  DESCRIPTION: UMName User Module C Language interface file
//-----------------------------------------------------------------------------
//  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************

#include <m8c.h>

#ifndef I2C_MSTR_INCLUDE
#define I2C_MSTR_INCLUDE
#endif

// Create pragmas to support proper argument and return value passing

#ifdef I2C_MMS_INCLUDE
#pragma fastcall16  I2C_fReadBytesNoStall
#pragma fastcall16  I2C_bWriteBytesNoStall
#pragma fastcall16  I2C_bWriteCBytesNoStall
#endif

#pragma fastcall16  I2C_fReadBytes
#pragma fastcall16  I2C_bWriteBytes
#pragma fastcall16  I2C_bWriteCBytes
#pragma fastcall16  I2C_fSendStart
#pragma fastcall16  I2C_fSendRepeatStart
#pragma fastcall16  I2C_SendStop
#pragma fastcall16  I2C_fWrite
#pragma fastcall16  I2C_bRead

#ifndef I2C_MMS_INCLUDE
#pragma fastcall16  I2C_bReadBusStatus
#endif

//-------------------------------------------------
// Prototypes of the I2C API.
//-------------------------------------------------
// High level commands
#ifdef I2C_MMS_INCLUDE
// Read bCnt bytes of data from slave at bSlaveAddr using mode bMode, place data (UCHAR) pbXferData[]
// Returns 0xFF if tst reg[I2C_MSCR], I2CM_BUSBUSY is true, else jumps to I2C_BusFree1
extern BYTE  I2C_fReadBytesNoStall(BYTE bSlaveAddr, BYTE * pbXferData, BYTE bCnt, BYTE bMode);
// Read bCnt bytes of data from slave at bSlaveAddr using mode bMode, write data from (UCHAR) pbXferData[]
// Returns 0xFF if tst reg[I2C_MSCR], I2CM_BUSBUSY is true, else jumps to I2C_BusFree2
extern BYTE  I2C_bWriteBytesNoStall(BYTE bSlaveAddr, BYTE * pbXferData, BYTE bCnt, BYTE bMode);
// Read bCnt bytes of data from slave at bSlaveAddr using mode bMode, write data from (const UCHAR) pbXferData[]
// Returns 0xFF if tst reg[I2C_MSCR], I2CM_BUSBUSY is true, else jumps to I2C_BusFree1
extern BYTE  I2C_bWriteCBytesNoStall(BYTE bSlaveAddr, const BYTE * pcbXferData, BYTE bCnt, BYTE bMode);
#endif

// Read bCnt bytes of data from slave at bSlaveAddr using mode bMode, place data (UCHAR) pbXferData[]
extern void  I2C_fReadBytes(BYTE bSlaveAddr, BYTE * pbXferData, BYTE bCnt, BYTE bMode);
// Read bCnt bytes of data from slave at bSlaveAddr using mode bMode, write data from (UCHAR) pbXferData[]
extern void  I2C_bWriteBytes(BYTE bSlaveAddr, BYTE * pbXferData, BYTE bCnt, BYTE bMode);
// Read bCnt bytes of data from slave at bSlaveAddr using mode bMode, write data from (const UCHAR) pbXferData[]
extern void  I2C_bWriteCBytes(BYTE bSlaveAddr, const BYTE * pcbXferData, BYTE bCnt, BYTE bMode);

// Low level commands
extern BYTE  I2C_fSendStart(BYTE bSlaveAddr, BYTE fRW);
extern BYTE  I2C_fSendRepeatStart(BYTE bSlaveAddr, BYTE fRW);
extern void  I2C_SendStop(void);
extern BYTE  I2C_fWrite(BYTE bData);
extern BYTE  I2C_bRead(BYTE fACK);

#ifndef I2C_MMS_INCLUDE
extern BYTE  I2C_bReadBusStatus(void);
#endif

//-------------------------------------------------
// Status variables for I2C API's.
//-------------------------------------------------
extern char I2C_bStatus;
extern char I2C_RsrcStatus;

//
//export only the count values used in the i/o processing routine
//


#define I2C_READ_BUFTYPE                     0x0
#define I2C_READ_FLASH                       I2C_READ_BUFTYPE & 0x01

extern unsigned char     I2C_Write_Count;

#if (I2C_READ_BUFTYPE)
extern unsigned int    I2C_Read_CountHI;

#endif
extern unsigned char    I2C_Read_Count;


//-------------------------------------------------
// Constants for I2C API's.
//-------------------------------------------------
#define I2C_CompleteXfer   0x00 // Perform a complete I2C transfer
#define I2C_RepStart       0x01 // Perform a complete transfer with a Repeat Start
#define I2C_NoStop         0x02 // Perform a complete transfer, but leave off the stop
#define I2C_NAKnextWr      0x04 // Flag to tell slave to NAK next byte from master

#define I2C_READ           0x01 // Set the R/W flag after the slave address.
#define I2C_WRITE          0x00 // Clear the R/W flag after the slave address.

#define I2C_XFER_ERROR     0x00 // Communication error with the slave.
#define I2C_NAKslave       0x00 // NAK the slave after a read.
#define I2C_ACKslave       0x01 // ACK the slave after a read.

// end of file I2CMstr.h

