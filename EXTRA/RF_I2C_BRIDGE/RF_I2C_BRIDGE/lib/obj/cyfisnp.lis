 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           ;;  FILENAME: CYFISNP.asm
 0000           ;;  Version: 1.0, Updated on 2008/7/1 at 16:20:9
 0000           ;;  Generated by PSoC Designer 5.4.3191
 0000           ;;
 0000           ;;  DESCRIPTION: CYFISPI main functions implemenatation file
 0000           ;;-----------------------------------------------------------------------------
 0000           ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           
 0010           FLAG_XIO_MASK:  equ 10h
 0008           FLAG_SUPER:     equ 08h
 0004           FLAG_CARRY:     equ 04h
 0002           FLAG_ZERO:      equ 02h
 0001           FLAG_GLOBAL_IE: equ 01h
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           ; Port 4
 0010           PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
 0011           PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
 0012           PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
 0013           PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
 0000           ; Port 5
 0014           PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
 0015           PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
 0016           PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
 0017           PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10DR0:     equ 30h          ; data register 0                          (#)
 0031           DBB10DR1:     equ 31h          ; data register 1                          (W)
 0032           DBB10DR2:     equ 32h          ; data register 2                          (RW)
 0033           DBB10CR0:     equ 33h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11DR0:     equ 34h          ; data register 0                          (#)
 0035           DBB11DR1:     equ 35h          ; data register 1                          (W)
 0036           DBB11DR2:     equ 36h          ; data register 2                          (RW)
 0037           DBB11CR0:     equ 37h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12DR0:     equ 38h          ; data register 0                          (#)
 0039           DCB12DR1:     equ 39h          ; data register 1                          (W)
 003A           DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
 003B           DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13DR0:     equ 3Ch          ; data register 0                          (#)
 003D           DCB13DR1:     equ 3Dh          ; data register 1                          (W)
 003E           DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
 003F           DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Resource Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 00C0           AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
 0030           AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
 0040           ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
 0038           ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
 0007           ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
 0004           ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
 0003           ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
 0080           CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
 0040           CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0008           CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
 0004           CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0065           ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
 0070           ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
 0008           ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
 0006           ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
 0001           ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0080           CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
 0040           CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
 0020           CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
 0010           CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
 0000           
 0000           ;---------------------------------------------------
 0000           ;  Analog PSoC block Registers
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;---------------------------------------------------
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 0
 0070           ACB00CR3:     equ 70h          ; Control register 3                       (RW)
 0071           ACB00CR0:     equ 71h          ; Control register 0                       (RW)
 0072           ACB00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACB00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 1
 0074           ACB01CR3:     equ 74h          ; Control register 3                       (RW)
 0075           ACB01CR0:     equ 75h          ; Control register 0                       (RW)
 0076           ACB01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACB01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 2
 0078           ACB02CR3:     equ 78h          ; Control register 3                       (RW)
 0079           ACB02CR0:     equ 79h          ; Control register 0                       (RW)
 007A           ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
 007B           ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 3
 007C           ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
 007D           ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
 007E           ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
 007F           ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 0
 0080           ASC10CR0:     equ 80h          ; Control register 0                       (RW)
 0081           ASC10CR1:     equ 81h          ; Control register 1                       (RW)
 0082           ASC10CR2:     equ 82h          ; Control register 2                       (RW)
 0083           ASC10CR3:     equ 83h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 1
 0084           ASD11CR0:     equ 84h          ; Control register 0                       (RW)
 0085           ASD11CR1:     equ 85h          ; Control register 1                       (RW)
 0086           ASD11CR2:     equ 86h          ; Control register 2                       (RW)
 0087           ASD11CR3:     equ 87h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 2
 0088           ASC12CR0:     equ 88h          ; Control register 0                       (RW)
 0089           ASC12CR1:     equ 89h          ; Control register 1                       (RW)
 008A           ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
 008B           ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 3
 008C           ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
 008D           ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
 008E           ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
 008F           ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 0
 0090           ASD20CR0:     equ 90h          ; Control register 0                       (RW)
 0091           ASD20CR1:     equ 91h          ; Control register 1                       (RW)
 0092           ASD20CR2:     equ 92h          ; Control register 2                       (RW)
 0093           ASD20CR3:     equ 93h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 1
 0094           ASC21CR0:     equ 94h          ; Control register 0                       (RW)
 0095           ASC21CR1:     equ 95h          ; Control register 1                       (RW)
 0096           ASC21CR2:     equ 96h          ; Control register 2                       (RW)
 0097           ASC21CR3:     equ 97h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 2
 0098           ASD22CR0:     equ 98h          ; Control register 0                       (RW)
 0099           ASD22CR1:     equ 99h          ; Control register 1                       (RW)
 009A           ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
 009B           ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 3
 009C           ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
 009D           ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
 009E           ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
 009F           ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 00B8           RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
 00B9           RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
 00BA           RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
 00BB           RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
 00BC           RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
 00BD           RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
 00BE           RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0010           INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
 0008           INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
 0040           INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
 0020           INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
 0010           INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Registers
 00E4           DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
 00E5           DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ; Multiplier and MAC (Multiply/Accumulate) Unit
 00E8           MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
 00E9           MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
 00EA           MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
 00EB           MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
 00EC           MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
 00EC           ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
 00ED           MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
 00ED           ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
 00EE           MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
 00EE           ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
 00EF           MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
 00EF           ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 4
 0010           PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
 0011           PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
 0012           PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
 0013           PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 5
 0014           PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
 0015           PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
 0016           PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
 0017           PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10FN:      equ 30h          ; Function Register                        (RW)
 0031           DBB10IN:      equ 31h          ;    Input Register                        (RW)
 0032           DBB10OU:      equ 32h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11FN:      equ 34h          ; Function Register                        (RW)
 0035           DBB11IN:      equ 35h          ;    Input Register                        (RW)
 0036           DBB11OU:      equ 36h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12FN:      equ 38h          ; Function Register                        (RW)
 0039           DCB12IN:      equ 39h          ;    Input Register                        (RW)
 003A           DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13FN:      equ 3Ch          ; Function Register                        (RW)
 003D           DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
 003E           DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 00C0           CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
 0030           CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0040           CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
 0038           CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
 0007           CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0040           ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
 0020           ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
 0010           ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
 0008           ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
 0004           ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
 0002           ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
 0001           ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 0070           AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
 0007           AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 0070           AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
 0007           AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 0068           ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
 00F0           ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
 000F           ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
 0000           
 0069           CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
 0008           CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
 0001           CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
 0010           VLT_CR_4V5_POR:       equ 10h    ;    deprecated
 0020           VLT_CR_4V75_POR:      equ 20h    ;    deprecated
 0030           VLT_CR_DISABLE:       equ 30h    ;    deprecated
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Stall
 0000               or    reg[ASY_CR], ASY_CR_SYNCEN
 0000               macro M8C_Unstall
 0000               and   reg[ASY_CR], ~ASY_CR_SYNCEN
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0000           SYSTEM_STACK_PAGE: equ 0   
 0000           SYSTEM_STACK_BASE_ADDR: equ 0h   
 0000           SYSTEM_LARGE_MEMORY_MODEL: equ 0   
 0001           SYSTEM_SMALL_MEMORY_MODEL: equ 1   
 0001           IMAGECRAFT: equ 1   
 0002           HITECH: equ 2   
 0001           TOOLCHAIN: equ IMAGECRAFT   
 0001           SYSTEM_TOOLS: equ 1   
 0001           SYSTEM_IDXPG_TRACKS_STK_PP: equ 1   
 0000           SYSTEM_IDXPG_TRACKS_IDX_PP: equ 0   
 0000           SYSTEM_MULTIPAGE_STACK: equ 0 
 0000           
 0000           
 0000           ;  ******* Function Class Definitions *******
 0000           ;
 0000           ;  These definitions are used to describe RAM access patterns. They provide
 0000           ;  documentation and they control prologue and epilogue macros that perform
 0000           ;  the necessary housekeeping functions for large memory model devices like
 0000           ;  the CY8C27000.
 0000           
 0001           RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
 0002           RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
 0004           RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
 0008           RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
 0000           
 0000           ; ******* Hi Tech Specific *******
 0000           ; Turn on the expansion of all macros by default
                IF (TOOLCHAIN & HITECH)
                OPT EXPAND
                ENDIF
                ;  ******* Page Pointer Manipulation Macros *******
                ;
                ;  Most of the following macros are conditionally compiled so they only
                ;  produce code if the large memory model is selected.
                
                   ;-----------------------------------------------
                   ;  Set Stack Page Macro
                   ;-----------------------------------------------
                   ;
                   ;  DESC: Modify STK_PP in the large or small memory Models.
                   ;
                   ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
                   ;        which stack operations like PUSH and POP store and retrieve their
                   ;        data
                   ;
                   ;  COST: 8 instruction cycles (in LMM only)
                
 0000              macro RAM_SETPAGE_STK( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[STK_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_CUR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[CUR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[IDX_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVW( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVW_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX2STK
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 IF ( SYSTEM_MULTIPAGE_STACK )
 0000                    mov   A, reg[STK_PP]
 0000                    mov   reg[IDX_PP], A
 0000                 ELSE
 0000                    RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
 0000                 ENDIF
 0000              ENDIF
 0000              macro RAM_CHANGE_PAGE_MODE( MODE )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0000                 or    F,  FLAG_PGMODE_MASK & @MODE
 0000              ENDIF
 0000              macro RAM_SET_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_RESTORE_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_STACKPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 or   F, FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_INDEXPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and  F, ~FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_PROLOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                    RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                    RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro RAM_EPILOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro REG_PRESERVE( IOReg )
 0000              mov   A, reg[ @IOReg ]
 0000              push  A
 0000              macro REG_RESTORE( IOReg )
 0000              pop   A
 0000              mov   reg[ @IOReg ], A
 0000              macro ISR_PRESERVE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_PRESERVE CUR_PP
 0000                 REG_PRESERVE IDX_PP
 0000                 REG_PRESERVE MVR_PP
 0000                 REG_PRESERVE MVW_PP
 0000              ENDIF
 0000              macro ISR_RESTORE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_RESTORE MVW_PP
 0000                 REG_RESTORE MVR_PP
 0000                 REG_RESTORE IDX_PP
 0000                 REG_RESTORE CUR_PP
 0000              ENDIF
 0000           macro PRESERVE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_PRESERVE_PAGE_POINTERS
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             MOV A, [__r0]
 0000             PUSH A
 0000             MOV A, [__r1]
 0000             PUSH A
 0000             MOV A, [__r2]
 0000             PUSH A
 0000             MOV A, [__r3]
 0000             PUSH A
 0000             MOV A, [__r4]
 0000             PUSH A
 0000             MOV A, [__r5]
 0000             PUSH A
 0000             MOV A, [__r6]
 0000             PUSH A
 0000             MOV A, [__r7]
 0000             PUSH A
 0000             MOV A, [__r8]
 0000             PUSH A
 0000             MOV A, [__r9]
 0000             PUSH A
 0000             MOV A, [__r10]
 0000             PUSH A
 0000             MOV A, [__r11]
 0000             PUSH A
 0000             MOV A, [__rX]
 0000             PUSH A
 0000             MOV A, [__rY]
 0000             PUSH A
 0000             MOV A, [__rZ]
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               MOV REG[CUR_PP], 0
 0000             ENDIF
 0000           ENDIF
 0000           macro RESTORE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             POP A
 0000             MOV [__rZ], A
 0000             POP A
 0000             MOV [__rY], A
 0000             POP A
 0000             MOV [__rX], A
 0000             POP A
 0000             MOV [__r11], A
 0000             POP A
 0000             MOV [__r10], A
 0000             POP A
 0000             MOV [__r9], A
 0000             POP A
 0000             MOV [__r8], A
 0000             POP A
 0000             MOV [__r7], A
 0000             POP A
 0000             MOV [__r6], A
 0000             POP A
 0000             MOV [__r5], A
 0000             POP A
 0000             MOV [__r4], A
 0000             POP A
 0000             MOV [__r3], A
 0000             POP A
 0000             MOV [__r2], A
 0000             POP A
 0000             MOV [__r1], A
 0000             POP A
 0000             MOV [__r0], A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_RESTORE_PAGE_POINTERS
 0000               AND F, FLAG_PGMODE_0
 0000             ENDIF
 0000             POP A
 0000           ENDIF
 0010           FLAG_XIO_MASK:  equ 10h
 0008           FLAG_SUPER:     equ 08h
 0004           FLAG_CARRY:     equ 04h
 0002           FLAG_ZERO:      equ 02h
 0001           FLAG_GLOBAL_IE: equ 01h
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           ; Port 4
 0010           PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
 0011           PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
 0012           PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
 0013           PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
 0000           ; Port 5
 0014           PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
 0015           PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
 0016           PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
 0017           PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10DR0:     equ 30h          ; data register 0                          (#)
 0031           DBB10DR1:     equ 31h          ; data register 1                          (W)
 0032           DBB10DR2:     equ 32h          ; data register 2                          (RW)
 0033           DBB10CR0:     equ 33h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11DR0:     equ 34h          ; data register 0                          (#)
 0035           DBB11DR1:     equ 35h          ; data register 1                          (W)
 0036           DBB11DR2:     equ 36h          ; data register 2                          (RW)
 0037           DBB11CR0:     equ 37h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12DR0:     equ 38h          ; data register 0                          (#)
 0039           DCB12DR1:     equ 39h          ; data register 1                          (W)
 003A           DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
 003B           DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13DR0:     equ 3Ch          ; data register 0                          (#)
 003D           DCB13DR1:     equ 3Dh          ; data register 1                          (W)
 003E           DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
 003F           DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Resource Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 00C0           AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
 0030           AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
 0040           ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
 0038           ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
 0007           ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
 0004           ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
 0003           ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
 0080           CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
 0040           CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0008           CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
 0004           CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0065           ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
 0070           ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
 0008           ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
 0006           ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
 0001           ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0080           CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
 0040           CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
 0020           CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
 0010           CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
 0000           
 0000           ;---------------------------------------------------
 0000           ;  Analog PSoC block Registers
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;---------------------------------------------------
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 0
 0070           ACB00CR3:     equ 70h          ; Control register 3                       (RW)
 0071           ACB00CR0:     equ 71h          ; Control register 0                       (RW)
 0072           ACB00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACB00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 1
 0074           ACB01CR3:     equ 74h          ; Control register 3                       (RW)
 0075           ACB01CR0:     equ 75h          ; Control register 0                       (RW)
 0076           ACB01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACB01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 2
 0078           ACB02CR3:     equ 78h          ; Control register 3                       (RW)
 0079           ACB02CR0:     equ 79h          ; Control register 0                       (RW)
 007A           ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
 007B           ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 3
 007C           ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
 007D           ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
 007E           ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
 007F           ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 0
 0080           ASC10CR0:     equ 80h          ; Control register 0                       (RW)
 0081           ASC10CR1:     equ 81h          ; Control register 1                       (RW)
 0082           ASC10CR2:     equ 82h          ; Control register 2                       (RW)
 0083           ASC10CR3:     equ 83h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 1
 0084           ASD11CR0:     equ 84h          ; Control register 0                       (RW)
 0085           ASD11CR1:     equ 85h          ; Control register 1                       (RW)
 0086           ASD11CR2:     equ 86h          ; Control register 2                       (RW)
 0087           ASD11CR3:     equ 87h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 2
 0088           ASC12CR0:     equ 88h          ; Control register 0                       (RW)
 0089           ASC12CR1:     equ 89h          ; Control register 1                       (RW)
 008A           ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
 008B           ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 3
 008C           ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
 008D           ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
 008E           ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
 008F           ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 0
 0090           ASD20CR0:     equ 90h          ; Control register 0                       (RW)
 0091           ASD20CR1:     equ 91h          ; Control register 1                       (RW)
 0092           ASD20CR2:     equ 92h          ; Control register 2                       (RW)
 0093           ASD20CR3:     equ 93h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 1
 0094           ASC21CR0:     equ 94h          ; Control register 0                       (RW)
 0095           ASC21CR1:     equ 95h          ; Control register 1                       (RW)
 0096           ASC21CR2:     equ 96h          ; Control register 2                       (RW)
 0097           ASC21CR3:     equ 97h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 2
 0098           ASD22CR0:     equ 98h          ; Control register 0                       (RW)
 0099           ASD22CR1:     equ 99h          ; Control register 1                       (RW)
 009A           ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
 009B           ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 3
 009C           ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
 009D           ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
 009E           ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
 009F           ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 00B8           RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
 00B9           RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
 00BA           RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
 00BB           RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
 00BC           RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
 00BD           RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
 00BE           RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0010           INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
 0008           INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
 0040           INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
 0020           INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
 0010           INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Registers
 00E4           DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
 00E5           DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ; Multiplier and MAC (Multiply/Accumulate) Unit
 00E8           MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
 00E9           MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
 00EA           MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
 00EB           MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
 00EC           MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
 00EC           ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
 00ED           MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
 00ED           ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
 00EE           MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
 00EE           ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
 00EF           MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
 00EF           ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 4
 0010           PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
 0011           PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
 0012           PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
 0013           PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 5
 0014           PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
 0015           PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
 0016           PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
 0017           PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10FN:      equ 30h          ; Function Register                        (RW)
 0031           DBB10IN:      equ 31h          ;    Input Register                        (RW)
 0032           DBB10OU:      equ 32h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11FN:      equ 34h          ; Function Register                        (RW)
 0035           DBB11IN:      equ 35h          ;    Input Register                        (RW)
 0036           DBB11OU:      equ 36h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12FN:      equ 38h          ; Function Register                        (RW)
 0039           DCB12IN:      equ 39h          ;    Input Register                        (RW)
 003A           DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13FN:      equ 3Ch          ; Function Register                        (RW)
 003D           DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
 003E           DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 00C0           CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
 0030           CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0040           CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
 0038           CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
 0007           CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0040           ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
 0020           ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
 0010           ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
 0008           ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
 0004           ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
 0002           ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
 0001           ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 0070           AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
 0007           AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 0070           AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
 0007           AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 0068           ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
 00F0           ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
 000F           ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
 0000           
 0069           CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
 0008           CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
 0001           CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
 0010           VLT_CR_4V5_POR:       equ 10h    ;    deprecated
 0020           VLT_CR_4V75_POR:      equ 20h    ;    deprecated
 0030           VLT_CR_DISABLE:       equ 30h    ;    deprecated
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Stall
 0000               or    reg[ASY_CR], ASY_CR_SYNCEN
 0000               macro M8C_Unstall
 0000               and   reg[ASY_CR], ~ASY_CR_SYNCEN
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0000           ChipSelect_Data_ADDR:	equ	0h
 0100           ChipSelect_DriveMode_0_ADDR:	equ	100h
 0101           ChipSelect_DriveMode_1_ADDR:	equ	101h
 0003           ChipSelect_DriveMode_2_ADDR:	equ	3h
 0002           ChipSelect_GlobalSelect_ADDR:	equ	2h
 0102           ChipSelect_IntCtrl_0_ADDR:	equ	102h
 0103           ChipSelect_IntCtrl_1_ADDR:	equ	103h
 0001           ChipSelect_IntEn_ADDR:	equ	1h
 0004           ChipSelect_MASK:	equ	4h
 0000           ; DataReady address and mask equates
 0000           DataReady_Data_ADDR:	equ	0h
 0100           DataReady_DriveMode_0_ADDR:	equ	100h
 0101           DataReady_DriveMode_1_ADDR:	equ	101h
 0003           DataReady_DriveMode_2_ADDR:	equ	3h
 0002           DataReady_GlobalSelect_ADDR:	equ	2h
 0102           DataReady_IntCtrl_0_ADDR:	equ	102h
 0103           DataReady_IntCtrl_1_ADDR:	equ	103h
 0001           DataReady_IntEn_ADDR:	equ	1h
 0008           DataReady_MASK:	equ	8h
 0000           ; RedLED address and mask equates
 0004           RedLED_Data_ADDR:	equ	4h
 0104           RedLED_DriveMode_0_ADDR:	equ	104h
 0105           RedLED_DriveMode_1_ADDR:	equ	105h
 0007           RedLED_DriveMode_2_ADDR:	equ	7h
 0006           RedLED_GlobalSelect_ADDR:	equ	6h
 0106           RedLED_IntCtrl_0_ADDR:	equ	106h
 0107           RedLED_IntCtrl_1_ADDR:	equ	107h
 0005           RedLED_IntEn_ADDR:	equ	5h
 0004           RedLED_MASK:	equ	4h
 0000           ; GreenLED address and mask equates
 0004           GreenLED_Data_ADDR:	equ	4h
 0104           GreenLED_DriveMode_0_ADDR:	equ	104h
 0105           GreenLED_DriveMode_1_ADDR:	equ	105h
 0007           GreenLED_DriveMode_2_ADDR:	equ	7h
 0006           GreenLED_GlobalSelect_ADDR:	equ	6h
 0106           GreenLED_IntCtrl_0_ADDR:	equ	106h
 0107           GreenLED_IntCtrl_1_ADDR:	equ	107h
 0005           GreenLED_IntEn_ADDR:	equ	5h
 0008           GreenLED_MASK:	equ	8h
 0000           ; SW2 address and mask equates
 0004           SW2_Data_ADDR:	equ	4h
 0104           SW2_DriveMode_0_ADDR:	equ	104h
 0105           SW2_DriveMode_1_ADDR:	equ	105h
 0007           SW2_DriveMode_2_ADDR:	equ	7h
 0006           SW2_GlobalSelect_ADDR:	equ	6h
 0106           SW2_IntCtrl_0_ADDR:	equ	106h
 0107           SW2_IntCtrl_1_ADDR:	equ	107h
 0005           SW2_IntEn_ADDR:	equ	5h
 0010           SW2_MASK:	equ	10h
 0000           ; I2CSDA address and mask equates
 0004           I2CSDA_Data_ADDR:	equ	4h
 0104           I2CSDA_DriveMode_0_ADDR:	equ	104h
 0105           I2CSDA_DriveMode_1_ADDR:	equ	105h
 0007           I2CSDA_DriveMode_2_ADDR:	equ	7h
 0006           I2CSDA_GlobalSelect_ADDR:	equ	6h
 0106           I2CSDA_IntCtrl_0_ADDR:	equ	106h
 0107           I2CSDA_IntCtrl_1_ADDR:	equ	107h
 0005           I2CSDA_IntEn_ADDR:	equ	5h
 0020           I2CSDA_MASK:	equ	20h
 0000           ; SW1 address and mask equates
 0004           SW1_Data_ADDR:	equ	4h
 0104           SW1_DriveMode_0_ADDR:	equ	104h
 0105           SW1_DriveMode_1_ADDR:	equ	105h
 0007           SW1_DriveMode_2_ADDR:	equ	7h
 0006           SW1_GlobalSelect_ADDR:	equ	6h
 0106           SW1_IntCtrl_0_ADDR:	equ	106h
 0107           SW1_IntCtrl_1_ADDR:	equ	107h
 0005           SW1_IntEn_ADDR:	equ	5h
 0040           SW1_MASK:	equ	40h
 0000           ; I2CSCL address and mask equates
 0004           I2CSCL_Data_ADDR:	equ	4h
 0104           I2CSCL_DriveMode_0_ADDR:	equ	104h
 0105           I2CSCL_DriveMode_1_ADDR:	equ	105h
 0007           I2CSCL_DriveMode_2_ADDR:	equ	7h
 0006           I2CSCL_GlobalSelect_ADDR:	equ	6h
 0106           I2CSCL_IntCtrl_0_ADDR:	equ	106h
 0107           I2CSCL_IntCtrl_1_ADDR:	equ	107h
 0005           I2CSCL_IntEn_ADDR:	equ	5h
 0080           I2CSCL_MASK:	equ	80h
 0000           ; LP_MISO address and mask equates
 0008           LP_MISO_Data_ADDR:	equ	8h
 0108           LP_MISO_DriveMode_0_ADDR:	equ	108h
 0109           LP_MISO_DriveMode_1_ADDR:	equ	109h
 000B           LP_MISO_DriveMode_2_ADDR:	equ	bh
 000A           LP_MISO_GlobalSelect_ADDR:	equ	ah
 010A           LP_MISO_IntCtrl_0_ADDR:	equ	10ah
 010B           LP_MISO_IntCtrl_1_ADDR:	equ	10bh
 0009           LP_MISO_IntEn_ADDR:	equ	9h
 0001           LP_MISO_MASK:	equ	1h
 0000           ; LP_MISO_Data access macros
 0000           ;   GetLP_MISO_Data macro, return in a
 0000           macro GetLP_MISO_Data
 0000                   mov             a,[Port_2_Data_SHADE]
 0000                   and             a, 1h
 0000           macro SetLP_MISO_Data
 0000                   or              [Port_2_Data_SHADE], 1h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LP_MISO_Data_ADDR], a
 0000           macro ClearLP_MISO_Data
 0000                   and             [Port_2_Data_SHADE], ~1h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LP_MISO_Data_ADDR], a
 0008           LP_SCK_Data_ADDR:	equ	8h
 0108           LP_SCK_DriveMode_0_ADDR:	equ	108h
 0109           LP_SCK_DriveMode_1_ADDR:	equ	109h
 000B           LP_SCK_DriveMode_2_ADDR:	equ	bh
 000A           LP_SCK_GlobalSelect_ADDR:	equ	ah
 010A           LP_SCK_IntCtrl_0_ADDR:	equ	10ah
 010B           LP_SCK_IntCtrl_1_ADDR:	equ	10bh
 0009           LP_SCK_IntEn_ADDR:	equ	9h
 0008           LP_SCK_MASK:	equ	8h
 0000           ; LP_SCK_Data access macros
 0000           ;   GetLP_SCK_Data macro, return in a
 0000           macro GetLP_SCK_Data
 0000                   mov             a,[Port_2_Data_SHADE]
 0000                   and             a, 8h
 0000           macro SetLP_SCK_Data
 0000                   or              [Port_2_Data_SHADE], 8h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LP_SCK_Data_ADDR], a
 0000           macro ClearLP_SCK_Data
 0000                   and             [Port_2_Data_SHADE], ~8h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LP_SCK_Data_ADDR], a
 0008           LP_MOSI_Data_ADDR:	equ	8h
 0108           LP_MOSI_DriveMode_0_ADDR:	equ	108h
 0109           LP_MOSI_DriveMode_1_ADDR:	equ	109h
 000B           LP_MOSI_DriveMode_2_ADDR:	equ	bh
 000A           LP_MOSI_GlobalSelect_ADDR:	equ	ah
 010A           LP_MOSI_IntCtrl_0_ADDR:	equ	10ah
 010B           LP_MOSI_IntCtrl_1_ADDR:	equ	10bh
 0009           LP_MOSI_IntEn_ADDR:	equ	9h
 0020           LP_MOSI_MASK:	equ	20h
 0000           ; LP_MOSI_Data access macros
 0000           ;   GetLP_MOSI_Data macro, return in a
 0000           macro GetLP_MOSI_Data
 0000                   mov             a,[Port_2_Data_SHADE]
 0000                   and             a, 20h
 0000           macro SetLP_MOSI_Data
 0000                   or              [Port_2_Data_SHADE], 20h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LP_MOSI_Data_ADDR], a
 0000           macro ClearLP_MOSI_Data
 0000                   and             [Port_2_Data_SHADE], ~20h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LP_MOSI_Data_ADDR], a
 0008           CYFISNP_IRQ_Data_ADDR:	equ	8h
 0108           CYFISNP_IRQ_DriveMode_0_ADDR:	equ	108h
 0109           CYFISNP_IRQ_DriveMode_1_ADDR:	equ	109h
 000B           CYFISNP_IRQ_DriveMode_2_ADDR:	equ	bh
 000A           CYFISNP_IRQ_GlobalSelect_ADDR:	equ	ah
 010A           CYFISNP_IRQ_IntCtrl_0_ADDR:	equ	10ah
 010B           CYFISNP_IRQ_IntCtrl_1_ADDR:	equ	10bh
 0009           CYFISNP_IRQ_IntEn_ADDR:	equ	9h
 0040           CYFISNP_IRQ_MASK:	equ	40h
 0000           ; CYFISNP_IRQ_Data access macros
 0000           ;   GetCYFISNP_IRQ_Data macro, return in a
 0000           macro GetCYFISNP_IRQ_Data
 0000                   mov             a,[Port_2_Data_SHADE]
 0000                   and             a, 40h
 0000           macro SetCYFISNP_IRQ_Data
 0000                   or              [Port_2_Data_SHADE], 40h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[CYFISNP_IRQ_Data_ADDR], a
 0000           macro ClearCYFISNP_IRQ_Data
 0000                   and             [Port_2_Data_SHADE], ~40h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[CYFISNP_IRQ_Data_ADDR], a
 0008           CYFISNP_nSS_Data_ADDR:	equ	8h
 0108           CYFISNP_nSS_DriveMode_0_ADDR:	equ	108h
 0109           CYFISNP_nSS_DriveMode_1_ADDR:	equ	109h
 000B           CYFISNP_nSS_DriveMode_2_ADDR:	equ	bh
 000A           CYFISNP_nSS_GlobalSelect_ADDR:	equ	ah
 010A           CYFISNP_nSS_IntCtrl_0_ADDR:	equ	10ah
 010B           CYFISNP_nSS_IntCtrl_1_ADDR:	equ	10bh
 0009           CYFISNP_nSS_IntEn_ADDR:	equ	9h
 0080           CYFISNP_nSS_MASK:	equ	80h
 0000           ; CYFISNP_nSS_Data access macros
 0000           ;   GetCYFISNP_nSS_Data macro, return in a
 0000           macro GetCYFISNP_nSS_Data
 0000                   mov             a,[Port_2_Data_SHADE]
 0000                   and             a, 80h
 0000           macro SetCYFISNP_nSS_Data
 0000                   or              [Port_2_Data_SHADE], 80h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[CYFISNP_nSS_Data_ADDR], a
 0000           macro ClearCYFISNP_nSS_Data
 0000                   and             [Port_2_Data_SHADE], ~80h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[CYFISNP_nSS_Data_ADDR], a
 0001           CYFISNP_ARCH_TYPE_PSOC:                                     equ 1
 0000           CYFISNP_ARCH_TYPE_C20066:                                   equ 0
 0000           CYFISNP_ARCH_TYPE_ENCORE:                                   equ 0
 0000           CYFISNP_ARCH_TYPE_TMA300:                                   equ 0
 0000           
 0001           CYFISNP_IRQ_MODE_POLLING:                                   equ 1
 0000           CYFISNP_IRQ_MODE_GPIO_IRQ:                                  equ 0
 0000           CYFISNP_IRQ_MODE_DDB_IRQ:                                   equ 0
 0000           
 0001           CYFISNP_RENAME_STARTSTOP:                                   equ 1
 0000           CYFISNP_SPIM_API_EXPOSED:                                   equ 0
 0000           CYFISNP_IRQ_MOSI_MUXED:                                     equ 0
 0000           CYFISNP_SPI_MODE_SDIO:                                      equ 0
 0001           CYFISNP_FAST_SS_ACTUATION:                                  equ 1
 0001           CYFISNP_FASTER_TX_SEQUENCE:                                 equ 1
 0001           CYFISNP_LONG_PACKETS_ALLOWED:                               equ 1
 0000           
                IF (CYFISNP_ARCH_TYPE_PSOC | CYFISNP_ARCH_TYPE_C20066 | CYFISNP_ARCH_TYPE_TMA300)
 0040           CYFISNP_CPU_CYCLES_PER_SPI_BYTE:                            equ 0x40
                ENDIF
                
                ;; Workaround. This should allow compilation with default UM parameters
                IF(0x18 * 0x17)
                ELSE
                   CYFISNP_IRQ_Addr:       EQU     PRT0DR
                   CYFISNP_nSS_Addr:       EQU     PRT0DR
                   CYFISNP_IRQ_MASK:       EQU     0x00
                   CYFISNP_nSS_MASK:       EQU     0x00
                   CYFISNP_INT_REG:        EQU     0x00
                   CYFISNP_INT_MASK:       EQU     0x00
                ENDIF
                
 0000           CYFISNP_nSS_IS_PPSOC_FN: equ (0x18 / 100)
 0000           CYFISNP_IRQ_IS_PPSOC_FN: equ (0x17 / 100)
 0000           
                IF (CYFISNP_ARCH_TYPE_C20066 | CYFISNP_ARCH_TYPE_TMA300)
                   PRT2DM2:               EQU     0
                   PRT2GS:                EQU     0
                   PRT2DM2:               EQU     0
                   PRT2GS:                EQU     0
                ENDIF
                
                IF (CYFISNP_ARCH_TYPE_ENCORE)
                   CYFISNP_IRQ_Addr:       EQU     PRT2DR
                   CYFISNP_nSS_Addr:       EQU     PRT2DR
                ELSE
                   IF (CYFISNP_IRQ_IS_PPSOC_FN)
                      CYFISNP_IRQ_Addr:       EQU     FN0DR
                      CYFISNP_IRQDM0_Addr:    EQU     FN0DM0
                      CYFISNP_IRQDM1_Addr:    EQU     FN0DM1
                      CYFISNP_IRQDM2_Addr:    EQU     FN0DM2
                      CYFISNP_IRQGS_Addr:     EQU     FN0GS
                      CYFISNP_IRQIE_Addr:     EQU     FN0IE
                   ELSE
 0008                 CYFISNP_IRQ_Addr:       EQU     PRT2DR
 0008                 CYFISNP_IRQDM0_Addr:    EQU     PRT2DM0
 0009                 CYFISNP_IRQDM1_Addr:    EQU     PRT2DM1
 000B                 CYFISNP_IRQDM2_Addr:    EQU     PRT2DM2
 000A                 CYFISNP_IRQGS_Addr:     EQU     PRT2GS
 0009                 CYFISNP_IRQIE_Addr:     EQU     PRT2IE
 0000                 FN_0_Data_SHADE:                 EQU     0
                   ENDIF
                
                   IF (CYFISNP_nSS_IS_PPSOC_FN)
                      CYFISNP_nSS_Addr:       EQU     FN0DR
                      CYFISNP_nSSDM0_Addr:    EQU     FN0DM0
                      CYFISNP_nSSDM1_Addr:    EQU     FN0DM1
                      CYFISNP_nSSDM2_Addr:    EQU     FN0DM2
                      CYFISNP_nSSGS_Addr:     EQU     FN0GS
                      CYFISNP_nSSIE_Addr:     EQU     FN0IE
                   ELSE
 0008                 CYFISNP_nSS_Addr:       EQU     PRT2DR
 0008                 CYFISNP_nSSDM0_Addr:    EQU     PRT2DM0
 0009                 CYFISNP_nSSDM1_Addr:    EQU     PRT2DM1
 000B                 CYFISNP_nSSDM2_Addr:    EQU     PRT2DM2
 000A                 CYFISNP_nSSGS_Addr:     EQU     PRT2GS
 0009                 CYFISNP_nSSIE_Addr:     EQU     PRT2IE
 0000                 FN_0_Data_SHADE:                 EQU     0
                   ENDIF
                ENDIF
                
                IF (CYFISNP_ARCH_TYPE_C20066 | CYFISNP_ARCH_TYPE_TMA300)
                   IF((CYFISNP_nSS_Addr - CYFISNP_IRQ_Addr) | (CYFISNP_nSS_Addr - PRT1DR))
                      IF(CYFISNP_nSS_Addr - CYFISNP_IRQ_Addr)
                         IF(CYFISNP_nSS_Addr - PRT1DR)
                            CYFISNP_OD_MASK:  equ 0x00
                         ELSE
                            CYFISNP_OD_MASK:  equ 0x20
                         ENDIF
                      ELSE
                         CYFISNP_OD_MASK:  equ CYFISNP_IRQ_MASK
                      ENDIF
                   ELSE
                      CYFISNP_OD_MASK:  equ (CYFISNP_IRQ_MASK | 0x20)
                   ENDIF
                ELSE
 0000              CYFISNP_OD_MASK:  equ 0x00
                ENDIF
                
                ;  @PSoC_UserCode_NumPnCodes@ (Do not change this line.)
                
                ;  Following two lines selects SOP code set to use in CYFISNP_SetSopPnCode function
                ;  You must assign the same values to CYFISNP_SOP_SET_x in CYFISNP.h file
                ;  for proper User Module operation!
                
 0001           CYFISNP_SOP_SET_A: EQU 1
 0000           CYFISNP_SOP_SET_B: EQU 0
 0000           
 0000           ;  @PSoC_UserCode_END@ (Do not change this line.)
 0000           
 0000           
 0000           
 0000           CYFISNP_RADIO_INTERRUPT: equ CYFISNP_IRQ_MODE_GPIO_IRQ | CYFISNP_IRQ_MODE_DDB_IRQ
 0000           
                IF (CYFISNP_SOP_SET_A & CYFISNP_SOP_SET_B)
                   CYFISNP_NUM_PN_CODES: EQU 20
                ELSE
 000A              CYFISNP_NUM_PN_CODES: EQU 10
                ENDIF
                
                ;--------------------------------------------------
                ; Registers used by CYFISNP
                ;--------------------------------------------------
                IF (CYFISNP_ARCH_TYPE_PSOC | CYFISNP_ARCH_TYPE_TMA300)
                   IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                     @IRQBlock_CONTROL_0_INC                               ;IRQ Block ontrol register
                     CYFISNP_INT_REG:                                      equ 0x@IRQBlock__ISR_ADDR
                     CYFISNP_INT_MASK:                                     equ 0x@IRQBlock__ISR_MASK
                   ENDIF
                   IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                     CYFISNP_INT_REG:                                      equ INT_MSK0
                     CYFISNP_INT_MASK:                                     equ INT_MSK0_GPIO
                   ENDIF
 002B              CYFISNP_CONTROL_REG:    equ 2bh               ;Control register
 0028              CYFISNP_SHIFT_REG:  equ 28h                   ;TX Shift Register register
 0029              CYFISNP_TX_BUFFER_REG:  equ 29h               ;TX Buffer Register
 002A              CYFISNP_RX_BUFFER_REG:  equ 2ah               ;RX Buffer Register
 0028              CYFISNP_FUNCTION_REG:   equ 28h               ;Function register
 0029              CYFISNP_INPUT_REG:  equ 29h                   ;Input register
 002A              CYFISNP_OUTPUT_REG: equ 2ah                   ;Output register
                ENDIF
                
                IF (CYFISNP_ARCH_TYPE_C20066)
                   IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                     CYFISNP_INT_REG:                                      equ INT_MSK0
                     CYFISNP_INT_MASK:                                     equ INT_MSK0_GPIO
                   ENDIF
                   @SPIM_SpiControl_INC                          ;Control register
                   @SPIM_SpiTransmitData_INC                     ;TX Buffer Register
                   @SPIM_SpiReceiveData_INC                      ;RX Buffer Register
                ENDIF
                
                ;-----------------------------------------------------------------------------
 0080           CYFISNP_SPI_USE:        equ     0x80
 0001           CYFISNP_OUTPUT_EN:      equ     0x01
 0080           CYFISNP_SPI_SWAP:       equ     0x80
 0000           ;-----------------------------------------------------------------------------
 0000           
 0000           macro CYFISNP_DISABLE_IRQ_PIN
 0000              IF CYFISNP_IRQ_MOSI_MUXED
 0000                 IF (CYFISNP_ARCH_TYPE_PSOC)
 0000                    IF (CYFISNP_IRQ_MODE_DDB_IRQ)
 0000                       M8C_SetBank1
 0000                       or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
 0000                       and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
 0000                       M8C_SetBank0
 0000                    ENDIF
 0000                    IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
 0000                       M8C_SetBank1
 0000                       or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
 0000                       and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
 0000                       M8C_SetBank0
 0000                       and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
 0000                       or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
 0000                    ENDIF
 0000                    IF (CYFISNP_IRQ_MODE_POLLING)
 0000                       M8C_SetBank1
 0000                       or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
 0000                       and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
 0000                       M8C_SetBank0
 0000                       or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
 0000                    ENDIF
 0000                 ENDIF
 0000                 IF (CYFISNP_ARCH_TYPE_ENCORE)
 0000                       or      reg[P15CR], (CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)       ; P1.5 is SPI MOSI out
 0000                 ENDIF
 0000                 IF (CYFISNP_ARCH_TYPE_C20066)
 0000                    IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
 0000                       and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
 0000                    ENDIF
 0000                    M8C_SetBank1
 0000                       and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
 0000                    M8C_SetBank0
 0000                    or    reg[CYFISNP_CONTROL_REG], bfCONTROL_REG_START_BIT
 0000                 ENDIF
 0000           
 0000              ENDIF
 0000           macro CYFISNP_ENABLE_IRQ_PIN
 0000              IF CYFISNP_IRQ_MOSI_MUXED
 0000                 IF (CYFISNP_ARCH_TYPE_PSOC)
 0000                    IF (CYFISNP_IRQ_MODE_DDB_IRQ)
 0000                       M8C_SetBank1
 0000                       and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
 0000                       or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
 0000                       M8C_SetBank0
 0000                    ENDIF
 0000                    IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
 0000                       and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
 0000                       or      reg[CYFISNP_IRQIE_Addr],  CYFISNP_IRQ_MASK
 0000                       M8C_SetBank1
 0000                       and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
 0000                       or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
 0000                       M8C_SetBank0
 0000                    ENDIF
 0000                    IF (CYFISNP_IRQ_MODE_POLLING)
 0000                       and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
 0000                       M8C_SetBank1
 0000                       and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
 0000                       or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
 0000                       M8C_SetBank0
 0000                    ENDIF
 0000                 ENDIF
 0000                 IF (CYFISNP_ARCH_TYPE_ENCORE)
 0000                       and     reg[P15CR], ~(CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)      ; P1.5 is IRQ input
 0000                 ENDIF
 0000                 IF (CYFISNP_ARCH_TYPE_C20066)
 0000                    M8C_SetBank1
 0000                       or     reg[CYFISNP_IRQDM1_Addr], CYFISNP_IRQ_MASK
 0000                    M8C_SetBank0
 0000                    and    reg[CYFISNP_CONTROL_REG], ~bfCONTROL_REG_START_BIT
 0000                    or     reg[CYFISNP_IRQ_Addr],(CYFISNP_IRQ_MASK | 0x20)
 0000                    IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
 0000                       and    reg[INT_CLR0], ~INT_MSK0_GPIO
 0000                       or     reg[CYFISNP_IRQIE_Addr], CYFISNP_IRQ_MASK
 0000                    ENDIF
 0000                 ENDIF
 0000           
 0000              ENDIF
 0000           macro CYFISNP_TST_IRQ_PIN
 0000              tst   reg[CYFISNP_IRQ_Addr], CYFISNP_IRQ_MASK
 0000           macro CYFISNP_ISR_REG_PRESERVE (IOReg)
 0000             IF (SYSTEM_LARGE_MEMORY_MODEL)
 0000                   REG_PRESERVE (@IOReg)
 0000             ENDIF
 0000           macro CYFISNP_ISR_REG_RESTORE (IOReg)
 0000             IF (SYSTEM_LARGE_MEMORY_MODEL)
 0000                   REG_RESTORE (@IOReg)
 0000             ENDIF
 0000           macro CYFISNP_RADIO_SELECT
 0000           IF(0x18 * 0x17)
 0000              IF (CYFISNP_FAST_SS_ACTUATION)
 0000                 and   reg[CYFISNP_nSS_Addr], ~CYFISNP_nSS_MASK
 0000                 IF (CYFISNP_ARCH_TYPE_C20066 | CYFISNP_ARCH_TYPE_TMA300)
 0000                    IF((CYFISNP_nSS_Addr - CYFISNP_IRQ_Addr) * (CYFISNP_nSS_Addr - PRT1DR))
 0000                    ELSE
 0000                       or    reg[CYFISNP_nSS_Addr], CYFISNP_OD_MASK
 0000                    ENDIF
 0000                 ENDIF
 0000                 CYFISNP_DISABLE_IRQ_PIN
 0000              ELSE
 0000                 IF (CYFISNP_nSS_IS_PPSOC_FN)
 0000                    push    A
 0000                    IF (SYSTEM_LARGE_MEMORY_MODEL)
 0000                       REG_PRESERVE CUR_PP
 0000                       RAM_SETPAGE_CUR >FN_0_Data_SHADE
 0000                    ENDIF
 0000                    and     [FN_0_Data_SHADE], ~CYFISNP_nSS_MASK
 0000                    mov     A, [FN_0_Data_SHADE]
 0000                    mov     reg[CYFISNP_nSS_Addr], A
 0000                    IF (SYSTEM_LARGE_MEMORY_MODEL)
 0000                       REG_RESTORE CUR_PP
 0000                    ENDIF
 0000                    CYFISNP_DISABLE_IRQ_PIN
 0000                    pop     A
 0000                 ELSE
 0000                    push    A
 0000                    IF (SYSTEM_LARGE_MEMORY_MODEL)
 0000                       REG_PRESERVE CUR_PP
 0000                       RAM_SETPAGE_CUR >Port_2_Data_SHADE
 0000                    ENDIF
 0000                    and     [Port_2_Data_SHADE], ~CYFISNP_nSS_MASK
 0000                    mov     A, [Port_2_Data_SHADE]
 0000                    mov     reg[CYFISNP_nSS_Addr], A
 0000                    IF (SYSTEM_LARGE_MEMORY_MODEL)
 0000                       REG_RESTORE CUR_PP
 0000                    ENDIF
 0000                    CYFISNP_DISABLE_IRQ_PIN
 0000                    pop     A
 0000                 ENDIF
 0000              ENDIF
 0000           ENDIF
 0000           macro CYFISNP_RADIO_DESELECT
 0000           IF(0x18 * 0x17)
 0000              IF (CYFISNP_FAST_SS_ACTUATION)
 0000                 CYFISNP_ENABLE_IRQ_PIN
 0000                 or      reg[CYFISNP_nSS_Addr], (CYFISNP_nSS_MASK | CYFISNP_OD_MASK)
 0000              ELSE
 0000                 IF (CYFISNP_nSS_IS_PPSOC_FN)
 0000                    push    A
 0000                    CYFISNP_ENABLE_IRQ_PIN
 0000                    IF (SYSTEM_LARGE_MEMORY_MODEL)
 0000                       REG_PRESERVE CUR_PP
 0000                       RAM_SETPAGE_CUR >FN_0_Data_SHADE
 0000                    ENDIF
 0000                    or      [FN_0_Data_SHADE], CYFISNP_nSS_MASK
 0000                    mov     A, [FN_0_Data_SHADE]
 0000                    mov     reg[CYFISNP_nSS_Addr], A
 0000                    IF (SYSTEM_LARGE_MEMORY_MODEL)
 0000                       REG_RESTORE CUR_PP
 0000                    ENDIF
 0000                    pop     A
 0000                 ELSE
 0000                    push    A
 0000                    CYFISNP_ENABLE_IRQ_PIN
 0000                    IF (SYSTEM_LARGE_MEMORY_MODEL)
 0000                       REG_PRESERVE CUR_PP
 0000                       RAM_SETPAGE_CUR >Port_2_Data_SHADE
 0000                    ENDIF
 0000                    or      [Port_2_Data_SHADE], CYFISNP_nSS_MASK
 0000                    mov     A, [Port_2_Data_SHADE]
 0000                    mov     reg[CYFISNP_nSS_Addr], A
 0000                    IF (SYSTEM_LARGE_MEMORY_MODEL)
 0000                       REG_RESTORE CUR_PP
 0000                    ENDIF
 0000                    pop     A
 0000                 ENDIF
 0000              ENDIF
 0000           ENDIF
 0000           macro   CYFISNP_IsRadioSleep:                   ; Zero flag is set if Radio is currently in SLEEP mode
 0000                   TST     [CYFISNP_RestingState], CYFISNP_END_STATE_MSK
 0000           macro   CYFISNP_IsSleepDesired:                 ; Zero flag is set if the end state for the radio will be SLEEP mode
 0000                   TST     [CYFISNP_XactConfig], CYFISNP_END_STATE_MSK
 0008           CYFISNP_DEF_DATA_RATE:    EQU     0x8
 0007           CYFISNP_DEF_TX_POWER:     EQU     0x7
 0000           
 0000           ; Defaults for XACT_CFG_REG
 0000           CYFISNP_DEF_END_STATE:    EQU     0x0
 0080           CYFISNP_DEF_ACK_ENABLE:   EQU     0x80
 0001           CYFISNP_DEF_ACK_TIMEOUT:  EQU     0x1
 0000           
 0000           ; Defaults for FRAMING_CFG_REG
 0080           CYFISNP_DEF_SOP_EN:       EQU     0x80
 0000           CYFISNP_DEF_SOP_LEN:      EQU     0x0
 0020           CYFISNP_DEF_LEN_EN:       EQU     0x20
 0000           
                if (CYFISNP_DEF_SOP_LEN)
                CYFISNP_DEF_SOP_TSH:      EQU     0x0E
                else
 0004           CYFISNP_DEF_SOP_TSH:      EQU     0x04
                endif
                
                ; Default Thresholds
 0005           CYFISNP_DEF_32_THOLD:     EQU     0x05
 000E           CYFISNP_DEF_64_THOLD:     EQU     0x0E
 0000           
 0002           CYFISNP_DEF_PREAMBLE_CNT: EQU     0x2
 0000           
 0001           bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
 0000           ;--------------------------------------------------
 0000           ; Register constants and masks
 0000           ;--------------------------------------------------
 0000           CYFISNP_SPIM_MODE_0:             equ   00h      ;MODE 0 - Leading edge latches data - pos clock
 0002           CYFISNP_SPIM_MODE_1:             equ   02h      ;MODE 1 - Leading edge latches data - neg clock
 0004           CYFISNP_SPIM_MODE_2:             equ   04h      ;MODE 2 - Trailing edge latches data - pos clock
 0006           CYFISNP_SPIM_MODE_3:             equ   06h      ;MODE 3 - Trailing edge latches data - neg clock
 0080           CYFISNP_SPIM_LSB_FIRST:          equ   80h      ;LSB bit transmitted/received first
 0000           CYFISNP_SPIM_MSB_FIRST:          equ   00h      ;MSB bit transmitted/received first
 0000           
 0000           ;---------------------------
 0000           ; SPI Status register masks
 0000           ;---------------------------
 0040           CYFISNP_SPIM_RX_OVERRUN_ERROR:   equ   40h      ;Overrun error in received data
 0010           CYFISNP_SPIM_TX_BUFFER_EMPTY:    equ   10h      ;TX Buffer register is ready for next data byte
 0008           CYFISNP_SPIM_RX_BUFFER_FULL:     equ   08h      ;RX Buffer register has received current data
 0020           CYFISNP_SPIM_SPI_COMPLETE:       equ   20h      ;SPI Tx/Rx cycle has completed
 0000           
 0000           ;-----------------------------------------------------------------------------
 0000           ;
 0000           ; NOTES ON THE PSoC LARGE MEMORY MODEL (LMM) .vs. SMALL MEMORY MODEL (SMM)
 0000           ;
 0000           ; The file <memory.inc> indicates whether LMM or SMM is used.
 0000           ; LMM is available for devices with more than 256 Bytes of RAM and the
 0000           ;  (Project,Settings,Compiler,Enable paging) box is checked in PSoC Designer.
 0000           ;  Checking the Enable paging box sets SYSTEM_LARGE_MEMORY_MODEL: equ 1
 0000           ;  in <memory.inc>.
 0000           ;
 0000           ; When using the Small Memory Model, the macros in <memory.inc> reduce to
 0000           ;  nothing, and the resulting LMM paging overhead in Radio Driver disappears.
 0000           ;
 0000           ; Using the LMM imposes certain assumptions on the user's application.  See
 0000           ;  Cypress AN2218 for details, a "summary" is below, but please obtain and
 0000           ;  understand AN2218 before proceeding.
 0000           ;
 0000           ; 1) All internal radio driver variables are placed on Page 0.
 0000           ; 2) Rx and Tx bulk data buffers may be placed on any Page.
 0000           ; 3) Radio driver exit w/Page Mode bits UNCHANGED or set to NATIVE_PAGING
 0000           ; 4) Radio driver exits with only STK_PP preserved, except for ISR exit.
 0000           ;
 0000           ; This is consistent with the ImageCraft compiler, however calls from
 0000           ;  assembly need to handle possible loss of Page Pointers and Page Mode
 0000           ;  changes to NATIVE_PAGING.
 0000           ;
 0000           ;-----------------------------------------------------------------------------
 0000           
 0000           ;=============================================================================
 0000           ;=============================================================================
 0000           ;=============================================================================
 0000           ;
 0000           ;
 0000           ; EVERYTHING beyond this point is NOT NORMALLY CHANGED BY USERS
 0000           ;
 0000           ;
 0000           ;=============================================================================
 0000           ;=============================================================================
 0000           ;=============================================================================
 0000           
 0000           ; SPI Interface definitions:
 0000           ;
 003F           CYFISNP_mSPI_ADDRESS:      EQU      03Fh
 0080           CYFISNP_bSPI_WRITE:        EQU      080h
 0040           CYFISNP_bSPI_AUTO_INC:     EQU      040h
 0000           
 0000           ;
 0000           ; RADIO_STATE definitions:
 0000           ;
 0000           CYFISNP_IDLE:        EQU  00h
 0080           CYFISNP_RX:          EQU  80h
 0020           CYFISNP_TX:          EQU  20h
 0040           CYFISNP_SOP:         EQU  CYFISNP_SOPDET_IRQ
 0008           CYFISNP_DATA:        EQU  CYFISNP_RXB1_IRQ
 0002           CYFISNP_COMPLETE:    EQU  CYFISNP_RXC_IRQ         ; Code assumes these two bits are BOTH
 0001           CYFISNP_ERROR:       EQU  CYFISNP_RXE_IRQ         ;  in the RX_CTRL_ADR register.
 0000           
 0000           //
 0000           // Return value for a RadioAbort completed successfully. Otherwise the return value
 0000           //  is the length of the packet received (without error).
 0000           //
 00FF           CYFISNP_ABORT_SUCCESS: EQU    0xFF
 0000           
 0000           
 0000           
 0000           
 0000           
 0000           
 0000           ;----------------------------------------------------------------------------
 0000           ;
 0000           ; CYFISPI User Module PHY layer registers definitions
 0000           ;
 0000           
 0000           ; -------------------------------
 0000           ; Channel register
 0000           ; -------------------------------
 0000           CYFISNP_CHANNEL_ADR:                                    equ 0x00
 0048           CYFISNP_CHANNEL_RST:                                    equ 0x48
 007F           CYFISNP_CHANNEL_MSK:                                    equ 0x7f
 0000           
 0062           CYFISNP_CHANNEL_MAX:                                    equ 0x62
 0000           CYFISNP_CHANNEL_MIN:                                    equ 0x00
 0062           CYFISNP_CHANNEL_2P498_GHZ:                              equ 0x62
 0000           CYFISNP_CHANNEL_2P4_GHZ:                                equ 0x00
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; TX Length register
 0000           ; -------------------------------
 0001           CYFISNP_TX_LENGTH_ADR:                                  equ 0x01
 0000           CYFISNP_TX_LENGTH_RST:                                  equ 0x00
 00FF           CYFISNP_TX_LENGTH_MSK:                                  equ 0xff
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; TX Control register
 0000           ; -------------------------------
 0002           CYFISNP_TX_CTRL_ADR:                                    equ 0x02
 0003           CYFISNP_TX_CTRL_RST:                                    equ 0x03
 0000           
 0000           ; See TX_IRQ for remaining bit position definitions
 0000           
 0000           ; TX_CTRL bit masks
 0080           CYFISNP_TX_GO:                                          equ 0x80
 0040           CYFISNP_TX_CLR:                                         equ 0x40
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; TX Configuration register
 0000           ; -------------------------------
 0003           CYFISNP_TX_CFG_ADR:                                     equ 0x03
 0005           CYFISNP_TX_CFG_RST:                                     equ 0x05
 0000           
 0000           ; separate bit field masks
 0020           CYFISNP_TX_DATCODE_LEN_MSK:                             equ 0x20
 0018           CYFISNP_TX_DATMODE_MSK:                                 equ 0x18
 0007           CYFISNP_PA_VAL_MSK:                                     equ 0x07
 0000           
 0000           ; DATCODE_LEN register masks
 0020           CYFISNP_DATCODE_LEN_64:                                 equ 0x20
 0000           CYFISNP_DATCODE_LEN_32:                                 equ 0x00
 0000           
 0000           ; DATMODE register masks
 0000           CYFISNP_DATMODE_1MBPS:                                  equ 0x00
 0008           CYFISNP_DATMODE_8DR:                                    equ 0x08
 0000           
 0000           ; PA_SET register masks
 0000           CYFISNP_PA_N30_DBM:                                     equ 0x00
 0001           CYFISNP_PA_N25_DBM:                                     equ 0x01
 0002           CYFISNP_PA_N20_DBM:                                     equ 0x02
 0003           CYFISNP_PA_N15_DBM:                                     equ 0x03
 0004           CYFISNP_PA_N10_DBM:                                     equ 0x04
 0005           CYFISNP_PA_N5_DBM:                                      equ 0x05
 0006           CYFISNP_PA_0_DBM:                                       equ 0x06
 0007           CYFISNP_PA_4_DBM:                                       equ 0x07
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; TX IRQ Status register
 0000           ; -------------------------------
 0004           CYFISNP_TX_IRQ_STATUS_ADR:                              equ 0x04
 0000           
 0000           ; TX_IRQ bit masks
 0080           CYFISNP_XS_IRQ:                                         equ 0x80
 0040           CYFISNP_LV_IRQ:                                         equ 0x40
 0020           CYFISNP_TXB15_IRQ:                                      equ 0x20
 0010           CYFISNP_TXB8_IRQ:                                       equ 0x10
 0008           CYFISNP_TXB0_IRQ:                                       equ 0x08
 0004           CYFISNP_TXBERR_IRQ:                                     equ 0x04
 0002           CYFISNP_TXC_IRQ:                                        equ 0x02
 0001           CYFISNP_TXE_IRQ:                                        equ 0x01
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; RX Control register
 0000           ; -------------------------------
 0005           CYFISNP_RX_CTRL_ADR:                                    equ 0x05
 0007           CYFISNP_RX_CTRL_RST:                                    equ 0x07
 0000           
 0000           ; See RX_IRQ register for bit positions definitions also used for this register
 0000           
 0000           ; RX_CTRL bit masks
 0080           CYFISNP_RX_GO:                                          equ 0x80
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; RX Configuration register
 0000           ; -------------------------------
 0006           CYFISNP_RX_CFG_ADR:                                     equ 0x06
 0092           CYFISNP_RX_CFG_RST:                                     equ 0x92
 0000           
 0080           CYFISNP_AUTO_AGC_EN:                                    equ 0x80
 0040           CYFISNP_LNA_EN:                                         equ 0x40
 0020           CYFISNP_ATT_EN:                                         equ 0x20
 0010           CYFISNP_HI:                                             equ 0x10
 0000           CYFISNP_LO:                                             equ 0x00
 0008           CYFISNP_FASTTURN_EN:                                    equ 0x08
 0002           CYFISNP_RXOW_EN:                                        equ 0x02
 0001           CYFISNP_VLD_EN:                                         equ 0x01
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; RX IRQ register
 0000           ; -------------------------------
 0007           CYFISNP_RX_IRQ_STATUS_ADR:                              equ 0x07
 0000           ; There is no default value for this register.
 0000           
 0000           ; RX_IRQ bit masks
 0080           CYFISNP_RXOW_IRQ:                                       equ 0x80
 0040           CYFISNP_SOPDET_IRQ:                                     equ 0x40
 0020           CYFISNP_RXB16_IRQ:                                      equ 0x20
 0010           CYFISNP_RXB8_IRQ:                                       equ 0x10
 0008           CYFISNP_RXB1_IRQ:                                       equ 0x08
 0004           CYFISNP_RXBERR_IRQ:                                     equ 0x04
 0002           CYFISNP_RXC_IRQ:                                        equ 0x02
 0001           CYFISNP_RXE_IRQ:                                        equ 0x01
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; RX Status register
 0000           ; -------------------------------
 0008           CYFISNP_RX_STATUS_ADR:                                  equ 0x08
 0000           // There is no default value for this register.
 0000           
 0000           ; single flag bits & multi-bit-field masks
 0080           CYFISNP_RX_ACK:                                         equ 0x80
 0040           CYFISNP_RX_PKTERR:                                      equ 0x40
 0020           CYFISNP_RX_EOPERR:                                      equ 0x20
 0010           CYFISNP_RX_CRC0:                                        equ 0x10
 0008           CYFISNP_RX_BAD_CRC:                                     equ 0x08
 0004           CYFISNP_RX_DATCODE_LEN:                                 equ 0x04
 0003           CYFISNP_RX_DATMODE_MSK:                                 equ 0x03
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; RX Count register
 0000           ; -------------------------------
 0009           CYFISNP_RX_COUNT_ADR:                                   equ 0x09
 0000           CYFISNP_RX_COUNT_RST:                                   equ 0x00
 00FF           CYFISNP_RX_COUNT_MSK:                                   equ 0xff
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; RX Length Field register
 0000           ; -------------------------------
 000A           CYFISNP_RX_LENGTH_ADR:                                  equ 0x0a
 0000           CYFISNP_RX_LENGTH_RST:                                  equ 0x00
 00FF           CYFISNP_RX_LENGTH_MSK:                                  equ 0xff
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Power Control register
 0000           ; -------------------------------
 000B           CYFISNP_PWR_CTRL_ADR:                                   equ 0x0b
 00A0           CYFISNP_PWR_CTRL_RST:                                   equ 0xa0
 0000           
 0000           ; single flag bits & multi-bit-field masks
 0080           CYFISNP_PMU_EN:                                         equ 0x80
 0040           CYFISNP_LV_IRQ_EN:                                      equ 0x40
 0020           CYFISNP_PMU_SEN:                                        equ 0x20
 0010           CYFISNP_PFET_OFF:                                       equ 0x10
 000C           CYFISNP_LV_IRQ_TH_MSK:                                  equ 0x0c
 0003           CYFISNP_PMU_OUTV_MSK:                                   equ 0x03
 0000           
 0000           ; LV_IRQ_TH values
 000C           CYFISNP_LV_IRQ_TH_1P8_V:                                equ 0x0C
 0008           CYFISNP_LV_IRQ_TH_2P0_V:                                equ 0x08
 0004           CYFISNP_LV_IRQ_TH_2P2_V:                                equ 0x04
 0000           CYFISNP_LV_IRQ_TH_PMU_OUTV:                             equ 0x00
 0000           
 0000           ; PMU_OUTV values
 0003           CYFISNP_PMU_OUTV_2P4:                                   equ 0x03
 0002           CYFISNP_PMU_OUTV_2P5:                                   equ 0x02
 0001           CYFISNP_PMU_OUTV_2P6:                                   equ 0x01
 0000           CYFISNP_PMU_OUTV_2P7:                                   equ 0x00
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Crystal Control register
 0000           ; -------------------------------
 000C           CYFISNP_XTAL_CTRL_ADR:                                  equ 0x0c
 0004           CYFISNP_XTAL_CTRL_RST:                                  equ 0x04
 0000           
 0000           ; single flag bits & multi-bit-field masks
 00C0           CYFISNP_XOUT_FNC_MSK:                                   equ 0xc0
 0020           CYFISNP_XS_IRQ_EN:                                      equ 0x20
 0007           CYFISNP_XOUT_FREQ_MSK:                                  equ 0x07
 0000           
 0000           ; XOUT_FNC values
 0000           CYFISNP_XOUT_FNC_XOUT_FREQ:                             equ 0x00
 0040           CYFISNP_XOUT_FNC_PA_N:                                  equ 0x40
 0080           CYFISNP_XOUT_FNC_RAD_STREAM:                            equ 0x80
 00C0           CYFISNP_XOUT_FNC_GPIO:                                  equ 0xC0
 0000           
 0000           ; XOUT_FREQ values
 0000           CYFISNP_XOUT_FREQ_12MHZ:                                equ 0x00
 0001           CYFISNP_XOUT_FREQ_6MHZ:                                 equ 0x01
 0002           CYFISNP_XOUT_FREQ_3MHZ:                                 equ 0x02
 0003           CYFISNP_XOUT_FREQ_1P5MHZ:                               equ 0x03
 0004           CYFISNP_XOUT_FREQ_P75MHZ:                               equ 0x04
 0000           
 0000           ; -------------------------------
 0000           ; Analog Control register
 0000           ; -------------------------------
 0039           CYFISNP_ANALOG_CTRL_ADR:                                equ 0x39
 0001           CYFISNP_ALLSLOW:                                        equ 0x01
 0000           
 0000           ; -------------------------------
 0000           ; I/O Configuration register
 0000           ; -------------------------------
 000D           CYFISNP_IO_CFG_ADR:                                     equ 0x0d
 0000           CYFISNP_IO_CFG_RST:                                     equ 0x00
 00FF           CYFISNP_IO_CFG_MSK:                                     equ 0xff
 0000           
 0000           ; single flag bits & multi-bit-field masks
 0080           CYFISNP_IRQ_OD:                                         equ 0x80
 0040           CYFISNP_IRQ_POL:                                        equ 0x40
 0020           CYFISNP_MISO_OD:                                        equ 0x20
 0010           CYFISNP_XOUT_OD:                                        equ 0x10
 0008           CYFISNP_PACTL_OD:                                       equ 0x08
 0004           CYFISNP_PACTL_GPIO:                                     equ 0x04
 0002           CYFISNP_SPI_3_PIN:                                      equ 0x02
 0001           CYFISNP_IRQ_GPIO:                                       equ 0x01
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; GPIO Control register
 0000           ; -------------------------------
 000E           CYFISNP_GPIO_CTRL_ADR:                                  equ 0x0e
 0000           CYFISNP_GPIO_CTRL_RST:                                  equ 0x00
 00F0           CYFISNP_GPIO_CTRL_MSK:                                  equ 0xf0
 0000           
 0000           ; single flag bits & multi-bit-field masks
 0080           CYFISNP_XOUT_OP:                                        equ 0x80
 0040           CYFISNP_MISO_OP:                                        equ 0x40
 0020           CYFISNP_PACTL_OP:                                       equ 0x20
 0010           CYFISNP_IRQ_OP:                                         equ 0x10
 0008           CYFISNP_XOUT_IP:                                        equ 0x08
 0004           CYFISNP_MISO_IP:                                        equ 0x04
 0002           CYFISNP_PACTL_IP:                                       equ 0x02
 0001           CYFISNP_IRQ_IP:                                         equ 0x01
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Transaction Configuration register
 0000           ; -------------------------------
 000F           CYFISNP_XACT_CFG_ADR:                                   equ 0x0f
 0080           CYFISNP_XACT_CFG_RST:                                   equ 0x80
 0000           
 0000           ; single flag bits & multi-bit-field masks
 0080           CYFISNP_ACK_EN:                                         equ 0x80
 0020           CYFISNP_FRC_END_STATE:                                  equ 0x20
 001C           CYFISNP_END_STATE_MSK:                                  equ 0x1c
 0003           CYFISNP_ACK_TO_MSK:                                     equ 0x03
 0000           
 0000           ; END_STATE field values
 0000           CYFISNP_END_STATE_SLEEP:                                equ 0x00
 0004           CYFISNP_END_STATE_IDLE:                                 equ 0x04
 0008           CYFISNP_END_STATE_TXSYNTH:                              equ 0x08
 000C           CYFISNP_END_STATE_RXSYNTH:                              equ 0x0C
 0010           CYFISNP_END_STATE_RX:                                   equ 0x10
 0000           
 0000           ; ACK_TO field values
 0000           CYFISNP_ACK_TO_4X:                                      equ 0x00
 0001           CYFISNP_ACK_TO_8X:                                      equ 0x01
 0002           CYFISNP_ACK_TO_12X:                                     equ 0x02
 0003           CYFISNP_ACK_TO_15X:                                     equ 0x03
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Framing Configuration register
 0000           ; -------------------------------
 0010           CYFISNP_FRAMING_CFG_ADR:                                equ 0x10
 00A5           CYFISNP_FRAMING_CFG_RST:                                equ 0xa5
 0000           
 0000           ; single flag bits & multi-bit-field masks
 0080           CYFISNP_SOP_EN:                                         equ 0x80
 0040           CYFISNP_SOP_LEN:                                        equ 0x40
 0020           CYFISNP_LEN_EN:                                         equ 0x20
 001F           CYFISNP_SOP_THRESH_MSK:                                 equ 0x1f
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Data Threshold 32 register
 0000           ; -------------------------------
 0011           CYFISNP_DATA32_THOLD_ADR:                               equ 0x11
 0004           CYFISNP_DAT32_THRESH_RST:                               equ 0x04
 000F           CYFISNP_DAT32_THRESH_MSK:                               equ 0x0f
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Data Threshold 64 register
 0000           ; -------------------------------
 0012           CYFISNP_DATA64_THOLD_ADR:                               equ 0x12
 000A           CYFISNP_DAT64_THRESH_RST:                               equ 0x0a
 001F           CYFISNP_DAT64_THRESH_MSK:                               equ 0x1f
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; RSSI register
 0000           ; -------------------------------
 0013           CYFISNP_RSSI_ADR:                                       equ 0x13
 0020           CYFISNP_RSSI_RST:                                       equ 0x20
 0000           
 0000           ; single flag bits & multi-bit-field masks
 0080           CYFISNP_SOP_RSSI:                                       equ 0x80
 0020           CYFISNP_LNA_STATE:                                      equ 0x20
 001F           CYFISNP_RSSI_LVL_MSK:                                   equ 0x1f
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; EOP Control register
 0000           ; -------------------------------
 0014           CYFISNP_EOP_CTRL_ADR:                                   equ 0x14
 00A4           CYFISNP_EOP_CTRL_RST:                                   equ 0xa4
 0000           
 0000           ; single flag bits & multi-bit-field masks
 0080           CYFISNP_HINT_EN:                                        equ 0x80
 0070           CYFISNP_HINT_EOP_MSK:                                   equ 0x70
 000F           CYFISNP_EOP_MSK:                                        equ 0x0f
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; CRC Seed registers
 0000           ; -------------------------------
 0015           CYFISNP_CRC_SEED_LSB_ADR:                               equ 0x15
 0016           CYFISNP_CRC_SEED_MSB_ADR:                               equ 0x16
 0000           CYFISNP_CRC_SEED_LSB_RST:                               equ 0x00
 0000           CYFISNP_CRC_SEED_MSB_RST:                               equ 0x00
 0000           
 0000           ; CRC related values
 0000           ; USB CRC-16
 0080           CYFISNP_CRC_POLY_MSB:                                   equ 0x80
 0005           CYFISNP_CRC_POLY_LSB:                                   equ 0x05
 0080           CYFISNP_CRC_RESI_MSB:                                   equ 0x80
 000D           CYFISNP_CRC_RESI_LSB:                                   equ 0x0d
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; TX CRC Calculated registers
 0000           ; -------------------------------
 0017           CYFISNP_TX_CRC_LSB_ADR:                                 equ 0x17
 0018           CYFISNP_TX_CRC_MSB_ADR:                                 equ 0x18
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; RX CRC Field registers
 0000           ; -------------------------------
 0019           CYFISNP_RX_CRC_LSB_ADR:                                 equ 0x19
 001A           CYFISNP_RX_CRC_MSB_ADR:                                 equ 0x1a
 00FF           CYFISNP_RX_CRC_LSB_RST:                                 equ 0xff
 00FF           CYFISNP_RX_CRC_MSB_RST:                                 equ 0xff
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Synth Offset registers
 0000           ; -------------------------------
 001B           CYFISNP_TX_OFFSET_LSB_ADR:                              equ 0x1b
 001C           CYFISNP_TX_OFFSET_MSB_ADR:                              equ 0x1c
 0000           CYFISNP_TX_OFFSET_LSB_RST:                              equ 0x00
 0000           CYFISNP_TX_OFFSET_MSB_RST:                              equ 0x00
 0000           
 0000           ; single flag bits & multi-bit-field masks
 000F           CYFISNP_STRIM_MSB_MSK:                                  equ 0x0f
 00FF           CYFISNP_STRIM_LSB_MSK:                                  equ 0xff
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Mode Override register
 0000           ; -------------------------------
 001D           CYFISNP_MODE_OVERRIDE_ADR:                              equ 0x1d
 0000           CYFISNP_MODE_OVERRIDE_RST:                              equ 0x00
 0000           
 0003           CYFISNP_FRC_AWAKE:                                      equ 0x03
 0001           CYFISNP_FRC_AWAKE_OFF_1:                                equ 0x01
 0000           CYFISNP_FRC_AWAKE_OFF_2:                                equ 0x00
 0000           
 0000           ; single flag bits & multi-bit-field masks
 0080           CYFISNP_DIS_AUTO_SEN:                                   equ 0x80
 0040           CYFISNP_SEN_TXRXB:                                      equ 0x40
 0020           CYFISNP_FRC_SEN:                                        equ 0x20
 0018           CYFISNP_FRC_AWAKE_MSK:                                  equ 0x18
 0018           CYFISNP_MODE_OVRD_FRC_AWAKE:                            equ 0x18
 0008           CYFISNP_MODE_OVRD_FRC_AWAKE_OFF_1:                      equ 0x08
 0000           CYFISNP_MODE_OVRD_FRC_AWAKE_OFF_2:                      equ 0x00
 0001           CYFISNP_RST:                                            equ 0x01
 0002           CYFISNP_FRC_PA:                                         equ 0x02
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; RX Override register
 0000           ; -------------------------------
 001E           CYFISNP_RX_OVERRIDE_ADR:                                equ 0x1e
 0000           CYFISNP_RX_OVERRIDE_RST:                                equ 0x00
 0000           
 0000           ; single flag bits & multi-bit-field masks
 0080           CYFISNP_ACK_RX:                                         equ 0x80
 0040           CYFISNP_EXTEND_RX_TX:                                   equ 0x40
 0020           CYFISNP_MAN_RXACK:                                      equ 0x20
 0010           CYFISNP_FRC_RXDR:                                       equ 0x10
 0008           CYFISNP_DIS_CRC0:                                       equ 0x08
 0004           CYFISNP_DIS_RXCRC:                                      equ 0x04
 0002           CYFISNP_ACE:                                            equ 0x02
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; TX Override register
 0000           ; -------------------------------
 001F           CYFISNP_TX_OVERRIDE_ADR:                                equ 0x1f
 0000           CYFISNP_TX_OVERRIDE_RST:                                equ 0x00
 0000           
 0000           ; single flag bits & multi-bit-field masks
 0080           CYFISNP_ACK_TX_SEN:                                     equ 0x80
 0040           CYFISNP_FRC_PREAMBLE:                                   equ 0x40
 0020           CYFISNP_DIS_TX_RETRANS:                                 equ 0x20
 0010           CYFISNP_MAN_TXACK:                                      equ 0x10
 0008           CYFISNP_OVRRD_ACK:                                      equ 0x08
 0004           CYFISNP_DIS_TXCRC:                                      equ 0x04
 0002           CYFISNP_CO:                                             equ 0x02
 0001           CYFISNP_TXINV:                                          equ 0x01
 0000           
 0000           
 0000           ;------------------------------------------------------------------------------
 0000           ;      File Function Detail
 0000           ;------------------------------------------------------------------------------
 0000           
 0000           ; -------------------------------
 0000           ; TX Buffer - 16 bytes
 0000           ; -------------------------------
 0020           CYFISNP_TX_BUFFER_ADR:                                  equ 0x20
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; RX Buffer - 16 bytes
 0000           ; -------------------------------
 0021           CYFISNP_RX_BUFFER_ADR:                                  equ 0x21
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Framing Code - 8 bytes
 0000           ; -------------------------------
 0022           CYFISNP_SOP_CODE_ADR:                                   equ 0x22
 0000           
 0000           ; CODESTORE_REG_SOF_RST        64'h17_ff_9e_21_36_90_c7_82
 0017           CYFISNP_CODESTORE_BYTE7_SOF_RST:                        equ 0x17
 00FF           CYFISNP_CODESTORE_BYTE6_SOF_RST:                        equ 0xff
 009E           CYFISNP_CODESTORE_BYTE5_SOF_RST:                        equ 0x9e
 0021           CYFISNP_CODESTORE_BYTE4_SOF_RST:                        equ 0x21
 0036           CYFISNP_CODESTORE_BYTE3_SOF_RST:                        equ 0x36
 0090           CYFISNP_CODESTORE_BYTE2_SOF_RST:                        equ 0x90
 00C7           CYFISNP_CODESTORE_BYTE1_SOF_RST:                        equ 0xc7
 0082           CYFISNP_CODESTORE_BYTE0_SOF_RST:                        equ 0x82
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Data Code - 16 bytes
 0000           ; -------------------------------
 0023           CYFISNP_DATA_CODE_ADR:                                  equ 0x23
 0000           
 0000           ; CODESTORE_REG_DCODE0_RST            64'h01_2B_F1_DB_01_32_BE_6F
 0001           CYFISNP_CODESTORE_BYTE7_DCODE0_RST:                     equ 0x01
 002B           CYFISNP_CODESTORE_BYTE6_DCODE0_RST:                     equ 0x2b
 00F1           CYFISNP_CODESTORE_BYTE5_DCODE0_RST:                     equ 0xf1
 00DB           CYFISNP_CODESTORE_BYTE4_DCODE0_RST:                     equ 0xdb
 0001           CYFISNP_CODESTORE_BYTE3_DCODE0_RST:                     equ 0x01
 0032           CYFISNP_CODESTORE_BYTE2_DCODE0_RST:                     equ 0x32
 00BE           CYFISNP_CODESTORE_BYTE1_DCODE0_RST:                     equ 0xbe
 006F           CYFISNP_CODESTORE_BYTE0_DCODE0_RST:                     equ 0x6f
 0000           
 0000           ; CODESTORE_REG_DCODE1_RST            64'h02_F9_93_97_02_FA_5C_E3
 0002           CYFISNP_CODESTORE_BYTE7_DCODE1_RST:                     equ 0x02
 00F9           CYFISNP_CODESTORE_BYTE6_DCODE1_RST:                     equ 0xf9
 0093           CYFISNP_CODESTORE_BYTE5_DCODE1_RST:                     equ 0x93
 0097           CYFISNP_CODESTORE_BYTE4_DCODE1_RST:                     equ 0x97
 0002           CYFISNP_CODESTORE_BYTE3_DCODE1_RST:                     equ 0x02
 00FA           CYFISNP_CODESTORE_BYTE2_DCODE1_RST:                     equ 0xfa
 005C           CYFISNP_CODESTORE_BYTE1_DCODE1_RST:                     equ 0x5c
 00E3           CYFISNP_CODESTORE_BYTE0_DCODE1_RST:                     equ 0xe3
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Preamble - 3 bytes
 0000           ; -------------------------------
 0024           CYFISNP_PREAMBLE_ADR:                                   equ 0x24
 0000           
 0033           CYFISNP_PREAMBLE_CODE_MSB_RST:                          equ 0x33
 0033           CYFISNP_PREAMBLE_CODE_LSB_RST:                          equ 0x33
 0002           CYFISNP_PREAMBLE_LEN_RST:                               equ 0x02
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Laser Fuses - 8 bytes (2 hidden)
 0000           ; -------------------------------
 0025           CYFISNP_MFG_ID_ADR:                                     equ 0x25
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; XTAL Startup Delay
 0000           ; -------------------------------
 0026           CYFISNP_XTAL_CFG_ADR:                                   equ 0x26
 0000           CYFISNP_XTAL_CFG_RST:                                   equ 0x00
 0000           
 0000           ; -------------------------------
 0000           ; Clock Override
 0000           ; -------------------------------
 0027           CYFISNP_CLK_OVERRIDE_ADR:                               equ 0x27
 0000           CYFISNP_CLK_OVERRIDE_RST:                               equ 0x00
 0000           
 0002           CYFISNP_RXF:                                            equ 0x02
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Clock Enable
 0000           ; -------------------------------
 0028           CYFISNP_CLK_EN_ADR:                                     equ 0x28
 0000           CYFISNP_CLK_EN_RST:                                     equ 0x00
 0000           
 0002           CYFISNP_RXF:                                            equ 0x02
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Receiver Abort
 0000           ; -------------------------------
 0029           CYFISNP_RX_ABORT_ADR:                                   equ 0x29
 0000           CYFISNP_RX_ABORT_RST:                                   equ 0x00
 0000           
 0020           CYFISNP_ABORT_EN:                                       equ 0x20
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Auto Calibration Time
 0000           ; -------------------------------
 0032           CYFISNP_AUTO_CAL_TIME_ADR:                              equ 0x32
 000C           CYFISNP_AUTO_CAL_TIME_RST:                              equ 0x0C
 0000           
 003C           CYFISNP_AUTO_CAL_TIME_MAX:                              equ 0x3C
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Auto Calibration Offset
 0000           ; -------------------------------
 0035           CYFISNP_AUTO_CAL_OFFSET_ADR:                            equ 0x35
 0000           CYFISNP_AUTO_CAL_OFFSET_RST:                            equ 0x00
 0000           
 0014           CYFISNP_AUTO_CAL_OFFSET_MINUS_4:                        equ 0x14
 0000           
 0000           
 0000           ; ############################################################################
 0000           ; END OF CYFISPI.inc
 0000           ; ############################################################################
 0000           
 0000           
                area InterruptRAM(ram)
                
 0000            CYFISNP_DriverRamPage::                    ; used for page address only
 0000           _CYFISNP_XactConfig::
 0000            CYFISNP_XactConfig::  BLK     1            ; Current value of XACT_CFG_ADDR.
 0001                                                                ; The value of the Force End State bit in this variable is indeterminate.
 0001           _CYFISNP_RestingState::
 0001            CYFISNP_RestingState::  BLK     1          ; Current state of RF core while not attempting a transaction (usually equal to XACT_CFG_ADR, but not always).
 0002                                                                ; An exception to this is in receive mode (due to a workaround for a hardware issue).  If the user wants the end state to be SLEEP,
 0002                                                                ; The RF core actually goes into IDLE, and EndReceive does the work of putting the RF core to sleep.  In this case,
 0002                                                                ; CYFISNP_RestingState will be SLEEP even though the actual state may temporarily be IDLE.
 0002                                                                ; In all cases, the values of the bits in this variable not corresponding to the state field of XACT_CFG_ADR are indeterminate.
 0002           
 0002           _CYFISNP_State::
 0002            CYFISNP_State::       BLK     1            ; The current rx or tx state.
 0003           
 0003            CYFISNP_TxCount::
 0003            CYFISNP_ConstAddrLo:  BLK     1            ; Parameter to Radio TX / RX routines
 0004           
 0004           
 0004           ;
 0004           ; These variables are re-used to the point of confusion. They are commonly
 0004           ;  used for different functions, but occasionally used together as a buffer
 0004           ;  to burst into the radio registers.  The RadioPacketLength field is used
 0004           ;  during async rx and tx operations and therefore it is NOT valid to call
 0004           ;  any functions that use it for any other purpose between a start/end
 0004           ;  rx/tx pair.
 0004           ;
 0004           CYFISNP_ConstAddrHi:
 0004           CYFISNP_Temp1::       BLK     1            ; A work area used for short bursts.
 0005           
 0005           CYFISNP_FileAddr:
 0005           CYFISNP_Temp2::       BLK     1            ;  and other temp uses.
 0006           
 0006           _CYFISNP_RetryCount::
 0006            CYFISNP_RetryCount::
 0006            CYFISNP_Temp3::      BLK     1
 0007           
 0007           _CYFISNP_lpGIE::
 0007            CYFISNP_lpGIE::      BLK     1    ; Global Interrupt Enable at RadioInit()
 0008           
 0008           CYFISNP_BytesRead::    BLK  1
 0009           CYFISNP_TxCtrlShadow:: BLK  1      ; That last value written to TX_CTRL_ADR.
 000A           CYFISNP_Scratch0:      BLK  1
 000B           
 000B           
 0010           CYFISNP_FIFO_SIZE:   EQU     16      ; Radio Rx/Tx FIFO size
 0008           CYFISNP_FIFO_HALF:   EQU     8       ; Radio Rx/Tx FIFO half-way mark (B8 flag)
 000B           
 000B           ;--------------------------------------------------------------------------;
 000B           ;                                                                          ;
 000B           ;                                 C O D E                                  ;
 000B           ;                                                                          ;
 000B           ;--------------------------------------------------------------------------;
 000B           
                        AREA    UserModules (ROM, REL)
 0000 7100          or   F, 0
 0002           
 0002           ;--------------------------------------------------------------------------;
 0002           ;                                                                          ;
 0002           ;                      I N I T I A L I Z A T I O N                         ;
 0002           ;                                                                          ;
 0002           ;--------------------------------------------------------------------------;
 0002           
 0002           
 0002           ;-----------------------------------------------------------------------------
 0002           ;  FUNCTION NAME: CYFISNP_Start
 0002           ;  DESCRIPTION:
 0002           ;-----------------------------------------------------------------------------
 0002           ;  ARGUMENTS:    None
 0002           ;  RETURNS:      Nothing
 0002           ;  SIDE EFFECTS:
 0002           ;    The A and X registers may be modified by this or future implementations
 0002           ;    of this function.  The same is true for all RAM page pointer registers in
 0002           ;    the Large Memory Model.  When necessary, it is the calling function's
 0002           ;    responsibility to perserve their values across calls to fastcall16
 0002           ;    functions.
 0002           ;-----------------------------------------------------------------------------
                IF (CYFISNP_RENAME_STARTSTOP)
 0002           .SECTION
 0002            CYFISNP_PhyStart::
 0002           _CYFISNP_PhyStart::
                ELSE
                .SECTION
                 CYFISNP_Start::
                _CYFISNP_Start::
                ENDIF
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQIE_Addr],  CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            and     reg[P15CR], ~(CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)      ; P1.5 is IRQ input
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                    or    F, FLAG_XIO_MASK
                            or     reg[CYFISNP_IRQDM1_Addr], CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         and    reg[CYFISNP_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                         or     reg[CYFISNP_IRQ_Addr],(CYFISNP_IRQ_MASK | 0x20)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and    reg[INT_CLR0], ~INT_MSK0_GPIO
                            or     reg[CYFISNP_IRQIE_Addr], CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                
                   ENDIF
                
                 IF (CYFISNP_ARCH_TYPE_PSOC | CYFISNP_ARCH_TYPE_TMA300)
 0002 432B01       or    reg[CYFISNP_CONTROL_REG], bfCONTROL_REG_START_BIT | CYFISNP_SPIM_MODE_0 | CYFISNP_SPIM_MSB_FIRST
                  IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                   or    reg[CYFISNP_CONTROL_REG_IRQ], bfCONTROL_REG_START_BIT
                  ENDIF
                 ENDIF
                
                 IF (CYFISNP_ARCH_TYPE_C20066)
                   IF(CYFISNP_IRQ_Addr - PRT1DR)
                      or    reg[CYFISNP_IRQ_Addr], CYFISNP_IRQ_MASK
                      or    reg[PRT1DR], 0x20
                   ELSE
                      or    reg[CYFISNP_IRQ_Addr], CYFISNP_IRQ_MASK | 0x20
                   ENDIF
                  IF(CYFISNP_IRQ_MOSI_MUXED)
                  ELSE
                   or    reg[CYFISNP_CONTROL_REG], bfCONTROL_REG_START_BIT | CYFISNP_SPIM_MODE_0 | CYFISNP_SPIM_MSB_FIRST
                  ENDIF
                 ENDIF
                
                 IF (CYFISNP_ARCH_TYPE_C20066 | CYFISNP_ARCH_TYPE_TMA300)
                  IF(CYFISNP_FAST_SS_ACTUATION)
                  ELSE
                    IF(0x18 * 0x17)
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_2_Data_SHADE
                   ENDIF
                      or    [Port_2_Data_SHADE], CYFISNP_OD_MASK
                    ENDIF
                  ENDIF
                 ENDIF
                
 0005 5081         mov   A, CYFISNP_DEF_ACK_ENABLE | CYFISNP_DEF_ACK_TIMEOUT | CYFISNP_DEF_END_STATE
 0007 570F         mov   X, CYFISNP_DEF_DATA_RATE | CYFISNP_DEF_TX_POWER
 0009 9023         call     CYFISNP_Init
 000B 3900         cmp   A, 0
 000D A013         jz    .InitError
 000F 50A4         mov   A, CYFISNP_DEF_SOP_EN | CYFISNP_DEF_SOP_LEN | CYFISNP_DEF_LEN_EN | CYFISNP_DEF_SOP_TSH
 0011 9098         call  CYFISNP_SetFrameConfig
 0013 500E         mov   A, CYFISNP_DEF_64_THOLD
 0015 90A4         call  CYFISNP_SetThreshold64
 0017 5005         mov   A, CYFISNP_DEF_32_THOLD
 0019 9098         call  CYFISNP_SetThreshold32
 001B 5002         mov   A, CYFISNP_DEF_PREAMBLE_CNT
 001D 90A4         call  CYFISNP_SetPreambleCount
 001F 5001         mov    A, 1
 0021           .InitError:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0021 7F           ret
 0022           .ENDSECTION
 0022           
 0022           
 0022           ;-----------------------------------------------------------------------------
 0022           ;  FUNCTION NAME: CYFISNP_Stop
 0022           ;  DESCRIPTION:
 0022           ;-----------------------------------------------------------------------------
 0022           ;  ARGUMENTS:    None
 0022           ;  RETURNS:      Nothing
 0022           ;  SIDE EFFECTS:
 0022           ;    The A and X registers may be modified by this or future implementations
 0022           ;    of this function.  The same is true for all RAM page pointer registers in
 0022           ;    the Large Memory Model.  When necessary, it is the calling function's
 0022           ;    responsibility to perserve their values across calls to fastcall16
 0022           ;    functions.
 0022           ;-----------------------------------------------------------------------------
                IF (CYFISNP_RENAME_STARTSTOP)
 0022           .SECTION
 0022            CYFISNP_PhyStop::
 0022           _CYFISNP_PhyStop::
                ELSE
                .SECTION
                 CYFISNP_Stop::
                _CYFISNP_Stop::
                ENDIF
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0022 9379         call  CYFISNP_Abort
 0024 5000         mov   A,CYFISNP_END_STATE_SLEEP
 0026 93B7         call  CYFISNP_ForceState
                 IF (CYFISNP_ARCH_TYPE_PSOC | CYFISNP_ARCH_TYPE_TMA300)
 0028 412BFE       and   reg[CYFISNP_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                  IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                   and   reg[CYFISNP_CONTROL_REG_IRQ], ~bfCONTROL_REG_START_BIT
                  ENDIF
                 ENDIF
                 IF (CYFISNP_ARCH_TYPE_C20066)
                   and   reg[CYFISNP_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                 ENDIF
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            or      reg[P15CR], (CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)       ; P1.5 is SPI MOSI out
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                         ENDIF
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         or    reg[CYFISNP_CONTROL_REG], bfCONTROL_REG_START_BIT
                      ENDIF
                
                   ENDIF
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 002B 7F           ret
 002C           .ENDSECTION
 002C           
 002C           
 002C           
 002C           ;-----------------------------------------------------------------------------
 002C           ;  FUNCTION NAME: CYFISNP_EnableInt
 002C           ;  DESCRIPTION:
 002C           ;-----------------------------------------------------------------------------
 002C           ;  ARGUMENTS:    None
 002C           ;  RETURNS:      Nothing
 002C           ;  SIDE EFFECTS:
 002C           ;    The A and X registers may be modified by this or future implementations
 002C           ;    of this function.  The same is true for all RAM page pointer registers in
 002C           ;    the Large Memory Model.  When necessary, it is the calling function's
 002C           ;    responsibility to perserve their values across calls to fastcall16
 002C           ;    functions.
 002C           ;-----------------------------------------------------------------------------
 002C           .SECTION
 002C            CYFISNP_EnableInt::
 002C           _CYFISNP_EnableInt::
                  IF (CYFISNP_RADIO_INTERRUPT)
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   or    reg[CYFISNP_INT_REG], CYFISNP_INT_MASK
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                  ENDIF
 002C 7F           ret
 002D           .ENDSECTION
 002D           
 002D           
 002D           ;-----------------------------------------------------------------------------
 002D           ;  FUNCTION NAME: CYFISNP_DisableInt
 002D           ;  DESCRIPTION:
 002D           ;-----------------------------------------------------------------------------
 002D           ;  ARGUMENTS:    None
 002D           ;  RETURNS:      Nothing
 002D           ;  SIDE EFFECTS:
 002D           ;    The A and X registers may be modified by this or future implementations
 002D           ;    of this function.  The same is true for all RAM page pointer registers in
 002D           ;    the Large Memory Model.  When necessary, it is the calling function's
 002D           ;    responsibility to perserve their values across calls to fastcall16
 002D           ;    functions.
 002D           ;-----------------------------------------------------------------------------
 002D           .SECTION
 002D            CYFISNP_DisableInt::
 002D           _CYFISNP_DisableInt::
                  IF (CYFISNP_RADIO_INTERRUPT)
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   and   reg[CYFISNP_INT_REG], ~CYFISNP_INT_MASK
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                  ENDIF
 002D 7F           ret
 002E           .ENDSECTION
 002E           
 002E           
 002E           .section
 002E           ;--------------------------------------------------------------------------
 002E           ;
 002E           ; RadioInit:       Initialize the Radio.
 002E           ;
 002E           ; 'C' Call:        void RadioInit(XACT_CONFIG xactConfig, TX_CONFIG txConfig);
 002E           ;
 002E           ; Assembly Call:   A: xactConfig
 002E           ;                  X: txConfig
 002E           ;
 002E           ; Assembly Return: A: Garbage
 002E           ;                  X: Garbage
 002E           ;
 002E           _CYFISNP_Init::
 002E            CYFISNP_Init::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
                
 002E 5304              MOV     [CYFISNP_Temp1], A
 0030 5A05              MOV     [CYFISNP_Temp2], X
 0032           
 0032 550080            MOV     [CYFISNP_XactConfig], CYFISNP_XACT_CFG_RST
 0035 550180            MOV     [CYFISNP_RestingState], CYFISNP_XACT_CFG_RST
 0038           
 0038 91C9              CALL    CYFISNP_Reset
 003A 3900              cmp     A, 0
 003C A043              jz      .InitError
 003E           
 003E           ;
 003E           ; We're going to want to force the RXF clock on in the streaming driver.
 003E           ; Not necessary for nonstreaming driver but harmless.
 003E           ;
 003E 5028              MOV     A, CYFISNP_CLK_EN_ADR
 0040 5702              MOV     X, CYFISNP_RXF
 0042 917B              CALL    CYFISNP_Write
 0044           
 0044           ;
 0044           ; Set up to use auto-cal for VCO. Register 0x34 is left at its default value
 0044           ; to allow auto-cal to be used.
 0044           ;
 0044 5032              MOV     A, CYFISNP_AUTO_CAL_TIME_ADR    ; Extend autoCal time to max.
 0046 573C              MOV     X, CYFISNP_AUTO_CAL_TIME_MAX
 0048 9175              CALL    CYFISNP_Write
 004A           
 004A 5035              MOV     A, CYFISNP_AUTO_CAL_OFFSET_ADR  ; AutoCal offset to -4.
 004C 5714              MOV     X, CYFISNP_AUTO_CAL_OFFSET_MINUS_4
 004E 916F              CALL    CYFISNP_Write
 0050           
 0050 500D              MOV     A, CYFISNP_IO_CFG_ADR           ; Read IO_CFG_ADR, user may have
 0052 916D              CALL    CYFISNP_Read                    ;  changed it in RadioReset
 0054 2940              OR      A, CYFISNP_IRQ_POL              ; Set IRQ polarity to positive.
 0056 570D              MOV     X, CYFISNP_IO_CFG_ADR           ;  (Some have asked that this be
 0058 9164              CALL    CYFISNP_WriteSwapped            ;  left at the default negative.)
 005A           
 005A           ;
 005A           ; Set the XTAL Startup delay to 150uSec to handle warm restarts of the XTAL.
 005A           ;
 005A 5026              MOV     A, CYFISNP_XTAL_CFG_ADR
 005C 5708              MOV     X, 0x08
 005E 915F              CALL    CYFISNP_Write
 0060           ;
 0060           ; Enable HiLo for quick-turn-around. Use low side injection for receive - this
 0060           ;  should result in non-inverted data, so no need to hit the invert bit.
 0060           ; Turn off AGC and force the LNA on.
 0060           ;
 0060 5006              MOV     A, CYFISNP_RX_CFG_ADR
 0062 5748              MOV     X, ((CYFISNP_RX_CFG_RST | CYFISNP_FASTTURN_EN | CYFISNP_LNA_EN) & ~(CYFISNP_HI | CYFISNP_RXOW_EN | CYFISNP_AUTO_AGC_EN))
 0064 9159              CALL    CYFISNP_Write
 0066           ;
 0066           ; Set the TX Offset to +1MHz.
 0066           ;
 0066           ; THIS MEANS THE ACTUAL TRANSMIT CARRIER WILL BE 1MHz ABOVE THE PLL
 0066           ;  FREQUENCY PROGRAMMED IN THE CHANNEL OR A & N REGISTERS.
 0066           ;  RadioSetFrequency COMPENSATES FOR THIS OFFSET.
 0066           ;
 0066 501B              MOV     A, CYFISNP_TX_OFFSET_LSB_ADR
 0068 5755              MOV     X, 055h
 006A 9153              CALL    CYFISNP_Write
 006C 501C              MOV     A, CYFISNP_TX_OFFSET_MSB_ADR
 006E 5705              MOV     X, 005h
 0070 914D              CALL    CYFISNP_Write
 0072           
 0072           ; Set ALL_SLOW bit when operating in GFSK mode
 0072           
                IF (CYFISNP_DEF_DATA_RATE)
                ELSE
                        MOV     A, CYFISNP_ANALOG_CTRL_ADR
                        MOV     X, CYFISNP_ALLSLOW
                        CALL    CYFISNP_Write
                ENDIF
                ;
                ; Set the radio transaction and TX configuration.
                ;
 0072 5104              MOV     A, [CYFISNP_Temp1]
 0074 9029              CALL    CYFISNP_SetXactConfig
 0076 5105              MOV     A, [CYFISNP_Temp2]
 0078 901D              CALL    CYFISNP_SetTxConfig
 007A           
 007A 550200            MOV     [CYFISNP_State], CYFISNP_IDLE
 007D 5001              mov     A, 1
 007F 7F                ret
 0080           .InitError:
 0080 7F                ret
 0081           .endsection
 0081           
 0081           ;--------------------------------------------------------------------------;
 0081           ;                                                                          ;
 0081           ;                        C O N F I G U R A T I O N                         ;
 0081           ;                                                                          ;
 0081           ;--------------------------------------------------------------------------;
 0081           .section
 0081           ;-----------------------------------------------------------------------------
 0081           ;
 0081           ; RadioSetChannel:
 0081           ;                  Set the channel (frequency + 2MHz).
 0081           ;
 0081           ; 'C' Call:        void RadioSetChannel(BYTE channel);
 0081           ;
 0081           ; Assembly Call:   A: frequency
 0081           ;                  X: Unused
 0081           ;
 0081           ; Assembly Return: A: Undefined
 0081           ;                  X: Undefined
 0081           ;
 0081           ; Note:            FALL THROUGH INTO RadioSetFrequency.
 0081           ;
 0081            CYFISNP_SetChannel::
 0081           _CYFISNP_SetChannel::
 0081 0102              ADD     A, 2
 0083                   ; fallthru to RadioSetFrequency()
 0083           
 0083           .endsection
 0083           .section
 0083           ;-----------------------------------------------------------------------------
 0083           ;
 0083           ; RadioSetFrequency:
 0083           ;                  Set the frequency on which future communications will occur.
 0083           ;
 0083           ;                  THIS DRIVER SETS TX OFFESET AT 1 WHICH MEANS THAT THE TX
 0083           ;                  CARRIER WILL BE 1MHz HIGHER THAN CHANNEL NUMBER WE PROGRAM.
 0083           ;                  THIS FUNCTION COMPENSATES FOR THAT OFFSET BY DECREMENTING
 0083           ;                  THE CHANNEL NUMBER.
 0083           ;
 0083           ; 'C' Call:        void RadioSetFrequency(BYTE frequency);
 0083           ;
 0083           ; Assembly Call:   A: frequency
 0083           ;                  X: Unused
 0083           ;
 0083           ; Assembly Return: A: Undefined
 0083           ;                  X: Undefined
 0083           ;
 0083            CYFISNP_SetFrequency::
 0083           _CYFISNP_SetFrequency::
 0083 3900              CMP     A, 0
 0085 A002              JZ      .Chan0
 0087 78                DEC     A
 0088 5700      .Chan0: MOV     X, CYFISNP_CHANNEL_ADR          ; Write into the channel register.
 008A 8133              JMP     CYFISNP_WriteSwapped
 008C           
 008C           .endsection
 008C           .section
 008C           ;-----------------------------------------------------------------------------
 008C           ;
 008C           ; RadioGetChannel:
 008C           ;                  Get the channel.
 008C           ;
 008C           ; 'C' Call:        BYTE RadioGetChannel(void);
 008C           ;
 008C           ; Assembly Call:   A: Unused
 008C           ;                  X: Unused
 008C           ;
 008C           ; Assembly Return: A: channel
 008C           ;                  X: Undefined
 008C           ;
 008C            CYFISNP_GetChannel::
 008C           _CYFISNP_GetChannel::
 008C 9003              CALL    CYFISNP_GetFrequency
 008E 1102              SUB     A, 2
 0090 7F                RET
 0091           
 0091           .endsection
 0091           .section
 0091           ;-----------------------------------------------------------------------------
 0091           ;
 0091           ; RadioGetFrequency:
 0091           ;                  Returns the frequency in MHz above 2.4GHz.
 0091           ;                  Example: 0 means 2.400GHz, 83 means 2.483GHz.
 0091           ;
 0091           ; 'C' Call:        BYTE RadioGetFrequency(void);
 0091           ;
 0091           ; Assembly Call:   A: Unused
 0091           ;                  X: Unused
 0091           ;
 0091           ; Assembly Return: A: frequency
 0091           ;                  X: Undefined
 0091           ;
 0091            CYFISNP_GetFrequency::
 0091           _CYFISNP_GetFrequency::
 0091 5000              MOV     A, CYFISNP_CHANNEL_ADR          ;  into the channel register.
 0093 912C              CALL    CYFISNP_Read
 0095 74                INC     A
 0096 7F                RET
 0097           
 0097           .endsection
 0097           .section
 0097           ;-----------------------------------------------------------------------------
 0097           ;
 0097           ; RadioSetTxConfig:Set the transmitter configuration.
 0097           ;
 0097           ; 'C' Call:        void RadioSetTxConfig(TX_CONFIG config);
 0097           ;
 0097           ; Assembly Call:   A: config
 0097           ;                  X: Unused
 0097           ;
 0097           ; Assembly Return: A: Undefined
 0097           ;                  X: Undefined
 0097           ;
 0097           _CYFISNP_SetTxConfig::
 0097            CYFISNP_SetTxConfig::
 0097 5703              MOV     X, CYFISNP_TX_CFG_ADR
 0099 8124              JMP     CYFISNP_WriteSwapped
 009B           
 009B           .endsection
 009B           
 009B           .section
 009B           ;-----------------------------------------------------------------------------
 009B           ;
 009B           ; RadioGetTxConfig:Return the transmitter configuration.
 009B           ;
 009B           ; 'C' Call:        TX_CONFIG RadioGetTxConfig(void);
 009B           ;
 009B           ; Assembly Call:   A: Unused
 009B           ;                  X: Unused
 009B           ;
 009B           ; Assembly Return: A: config
 009B           ;                  X: Undefined
 009B           ;
 009B           _CYFISNP_GetTxConfig::
 009B            CYFISNP_GetTxConfig::
 009B 5003              MOV     A, CYFISNP_TX_CFG_ADR
 009D 8123              JMP     CYFISNP_Read
 009F           
 009F           .endsection
 009F           
 009F           .section
 009F           ;-----------------------------------------------------------------------------
 009F           ;
 009F           ; RadioSetXactConfig:
 009F           ;                  Set the transaction configuration.
 009F           ;
 009F           ; 'C' Call:        void RadioSetXactConfig(XACT_CONFIG config);
 009F           ;
 009F           ; Assembly Call:   A: config (user shouldn't set FRC_END_STATE bit)
 009F           ;                  X: Unused
 009F           ;
 009F           ; Assembly Return: A: Undefined
 009F           ;                  X: Undefined
 009F           ;
 009F           ; Side Effects:
 009F           ; 1. Modifies the CYFISNP_XactConfig variable.
 009F           ;
 009F           ; Notes:
 009F           ; 1. This routine clears the Force End State bit prior to sending to the radio
 009F           ;    and prior to saving the configuration to CYFISNP_XactConfig.
 009F           ;-----------------------------------------------------------------------------
 009F           _CYFISNP_SetXactConfig::
 009F            CYFISNP_SetXactConfig::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
 009F 21DF              AND     A, ~CYFISNP_FRC_END_STATE  ; Disallow forcing the RF state
 00A1 5300              MOV     [CYFISNP_XactConfig], A    ; use RadioSetState() goto a State.
 00A3 570F              MOV     X, CYFISNP_XACT_CFG_ADR
 00A5 8118              JMP     CYFISNP_WriteSwapped
 00A7           
 00A7           
 00A7           .endsection
 00A7           .section
 00A7           ;-----------------------------------------------------------------------------
 00A7           ;
 00A7           ; RadioGetXactConfig:
 00A7           ;                  Return the transaction configuration.
 00A7           ;
 00A7           ; 'C' Call:        XACT_CONFIG RadioGetXactConfig(void);
 00A7           ;
 00A7           ; Assembly Call:   A: Unused
 00A7           ;                  X: Unused
 00A7           ;
 00A7           ; Assembly Return: A: config
 00A7           ;                  X: Undefined
 00A7           ;
 00A7           _CYFISNP_GetXactConfig::
 00A7            CYFISNP_GetXactConfig::
 00A7 500F              MOV     A, CYFISNP_XACT_CFG_ADR
 00A9 8117              JMP     CYFISNP_Read
 00AB           
 00AB           .endsection
 00AB           .section
 00AB           ;-----------------------------------------------------------------------------
 00AB           ;
 00AB           ; RadioSetFrameConfig:
 00AB           ;                  Set the framing configuration.
 00AB           ;
 00AB           ; 'C' Call:        void RadioSetFrameConfig(RADIO_FRAME_CONFIG config);
 00AB           ;
 00AB           ; Assembly Call:   A: config
 00AB           ;                  X: Unused
 00AB           ;
 00AB           ; Assembly Return: A: Undefined
 00AB           ;                  X: Undefined
 00AB           ;
 00AB           _CYFISNP_SetFrameConfig::
 00AB            CYFISNP_SetFrameConfig::
 00AB 5710              MOV     X, CYFISNP_FRAMING_CFG_ADR
 00AD 8110              JMP     CYFISNP_WriteSwapped
 00AF           
 00AF           .endsection
 00AF           
 00AF           .section
 00AF           ;-----------------------------------------------------------------------------
 00AF           ;
 00AF           ; RadioGetFrameConfig:
 00AF           ;                  Set the framing configuration.
 00AF           ;
 00AF           ; 'C' Call:        RADIO_FRAME_CONFIG RadioGetFrameConfig(void);
 00AF           ;
 00AF           ; Assembly Call:   A: Unused
 00AF           ;                  X: Unused
 00AF           ;
 00AF           ; Assembly Return: A: config
 00AF           ;                  X: Undefined
 00AF           ;
 00AF           _CYFISNP_GetFrameConfig::
 00AF            CYFISNP_GetFrameConfig::
 00AF 5010              MOV     A, CYFISNP_FRAMING_CFG_ADR
 00B1 810F              JMP     CYFISNP_Read
 00B3           
 00B3           .endsection
 00B3           
 00B3           .section
 00B3           ;-----------------------------------------------------------------------------
 00B3           ;
 00B3           ; RadioSetThreshold32:
 00B3           ;                  Set the threshold for the 32 chip data modes.
 00B3           ;
 00B3           ; 'C' Call:        void RadioSetThreshold32(BYTE threshold);
 00B3           ;
 00B3           ; Assembly Call:   A: threshold
 00B3           ;                  X: Unused
 00B3           ;
 00B3           ; Assembly Return: A: Undefined
 00B3           ;                  X: Undefined
 00B3           ;
 00B3           _CYFISNP_SetThreshold32::
 00B3            CYFISNP_SetThreshold32::
 00B3 5711              MOV     X, CYFISNP_DATA32_THOLD_ADR
 00B5 8108              JMP     CYFISNP_WriteSwapped
 00B7           
 00B7           .endsection
 00B7           
 00B7           .section
 00B7           ;-----------------------------------------------------------------------------
 00B7           ;
 00B7           ; RadioGetThreshold32:
 00B7           ;                  Return the threshold for the 32 chip data modes.
 00B7           ;
 00B7           ; 'C' Call:        BYTE RadioGetThreshold32(void);
 00B7           ;
 00B7           ; Assembly Call:   A: unused
 00B7           ;                  X: unused
 00B7           ;
 00B7           ; Assembly Return: A: threshold
 00B7           ;                  X: Undefined
 00B7           ;
 00B7           _CYFISNP_GetThreshold32::
 00B7            CYFISNP_GetThreshold32::
 00B7 5011              MOV     A, CYFISNP_DATA32_THOLD_ADR
 00B9 8107              JMP     CYFISNP_Read
 00BB           
 00BB           .endsection
 00BB           
 00BB           .section
 00BB           ;-----------------------------------------------------------------------------
 00BB           ;
 00BB           ; RadioSetThreshold64:
 00BB           ;                  Set the threshold for the 64 chip data modes.
 00BB           ;
 00BB           ; 'C' Call:        void RadioSetThreshold64(BYTE threshold);
 00BB           ;
 00BB           ; Assembly Call:   A: threshold
 00BB           ;                  X: Unused
 00BB           ;
 00BB           ; Assembly Return: A: Undefined
 00BB           ;                  X: Undefined
 00BB           ;
 00BB           _CYFISNP_SetThreshold64::
 00BB            CYFISNP_SetThreshold64::
 00BB 5712              MOV     X, CYFISNP_DATA64_THOLD_ADR
 00BD 8100              JMP     CYFISNP_WriteSwapped
 00BF           
 00BF           .endsection
 00BF           
 00BF           .section
 00BF           ;-----------------------------------------------------------------------------
 00BF           ;
 00BF           ; RadioGetThreshold64:
 00BF           ;                  Return the threshold for the 64 chip data modes.
 00BF           ;
 00BF           ; 'C' Call:        BYTE RadioGetThreshold64(void);
 00BF           ;
 00BF           ; Assembly Call:   A: unused
 00BF           ;                  X: unused
 00BF           ;
 00BF           ; Assembly Return: A: threshold
 00BF           ;                  X: Undefined
 00BF           ;
 00BF           _CYFISNP_GetThreshold64::
 00BF            CYFISNP_GetThreshold64::
 00BF 5012              MOV     A, CYFISNP_DATA64_THOLD_ADR
 00C1 80FF              JMP     CYFISNP_Read
 00C3           
 00C3           .endsection
 00C3           
 00C3           .section
 00C3           ;-----------------------------------------------------------------------------
 00C3           ;
 00C3           ; RadioSetPreambleCount:
 00C3           ;                  Set the preamble repetition count.
 00C3           ;
 00C3           ; 'C' Call:        void RadioSetPreambleCount(BYTE count);
 00C3           ;
 00C3           ; Assembly Call:   A: preamble count
 00C3           ;                  X: Unused
 00C3           ;
 00C3           ; Assembly Return: A: Undefined
 00C3           ;                  X: Undefined
 00C3           ;
 00C3           _CYFISNP_SetPreambleCount::
 00C3            CYFISNP_SetPreambleCount::
 00C3 5724              MOV     X, CYFISNP_PREAMBLE_ADR         ; Write the preamble count...
 00C5 90F7              CALL    CYFISNP_WriteSwapped
 00C7           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
                  IF (SYSTEM_LARGE_MEMORY_MODEL)
                        MOV     [CYFISNP_WipPtr+1], >CYFISNP_Temp1 ; LMM: MSByte RadioWipPtr
                  ENDIF
 00C7 550004            MOV     [CYFISNP_WipPtr+0], <CYFISNP_Temp1 ; LSByte RadioWipPtr
 00CA                                                                    ; Preamble file register is 3 bytes
 00CA 5024              MOV     A, CYFISNP_PREAMBLE_ADR         ;  and must always be accessed 3 times
 00CC 5702              MOV     X, 2                                     ;  so do a throw away burst read of 2
 00CE 8119              JMP     CYFISNP_FileReadWip        ;  to move it a total of 3 bytes.
 00D0           
 00D0           .endsection
 00D0           
 00D0           .section
 00D0           ;-----------------------------------------------------------------------------
 00D0           ;
 00D0           ; RadioGetPreambleCount:
 00D0           ;                  Get the preamble repetition count.
 00D0           ;
 00D0           ; 'C' Call:        BYTE RadioGetPreambleCount(void);
 00D0           ;
 00D0           ; Assembly Call:   A: unused
 00D0           ;                  X: unused
 00D0           ;
 00D0           ; Assembly Return: A: preamble count
 00D0           ;                  X: Undefined
 00D0           ;
 00D0           _CYFISNP_GetPreambleCount::
 00D0            CYFISNP_GetPreambleCount::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
                  IF (SYSTEM_LARGE_MEMORY_MODEL)
                        MOV     [CYFISNP_WipPtr+1], >CYFISNP_Temp1 ; LMM: MSB RadioWipPtr
                  ENDIF
 00D0 550004            MOV     [CYFISNP_WipPtr+0], <CYFISNP_Temp1 ; SMM: 8-bit RadioWipPtr
 00D3                                                                    ; The preamble file register is 3 byte
 00D3 5024              MOV     A, CYFISNP_PREAMBLE_ADR         ;  and must always be accessed 3 times
 00D5 5703              MOV     X, 3                                     ;  so do a burst read of the whole 3
 00D7 550003            MOV     [CYFISNP_WipLen], 3
 00DA 910C              CALL    CYFISNP_FileReadWip        ;  byte file register.
 00DC 5104              MOV     A, [CYFISNP_Temp1]         ; The first byte is the count.
 00DE 7F                RET
 00DF           
 00DF           .endsection
 00DF           
 00DF           .section
 00DF           ;-----------------------------------------------------------------------------
 00DF           ;
 00DF           ; RadioSetPreamblePattern:
 00DF           ;                  Set the preamble pattern.
 00DF           ;
 00DF           ; 'C' Call:        void RadioSetPreamblePattern(WORD pattern);
 00DF           ;
 00DF           ; Assembly Call:   A: pattern low order
 00DF           ;                  X: pattern high order
 00DF           ;
 00DF           ; Assembly Return: A: Undefined
 00DF           ;                  X: Undefined
 00DF           ;
 00DF           _CYFISNP_SetPreamblePattern::
 00DF            CYFISNP_SetPreamblePattern::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
 00DF 5304              MOV     [CYFISNP_Temp1], A         ; Save the pattern.
 00E1 5A05              MOV     [CYFISNP_Temp2], X
 00E3 5024              MOV     A, CYFISNP_PREAMBLE_ADR         ; Gotta access the whole 3 byte file -
 00E5 90DA              CALL    CYFISNP_Read               ;  do throw away read of preamblecount
 00E7           
                  IF (SYSTEM_LARGE_MEMORY_MODEL)
                        MOV     [CYFISNP_WipPtr+1], >CYFISNP_Temp1 ; LMM: MSB RadioWipPtr
                  ENDIF
 00E7 550004            MOV     [CYFISNP_WipPtr+0], <CYFISNP_Temp1 ; SMM: 8-bit RadioWipPtr
 00EA 5024              MOV     A, CYFISNP_PREAMBLE_ADR         ; Write the pattern as a 2 byte
 00EC 5702              MOV     X, 2                                     ;  file register burst.
 00EE 80E7              JMP     CYFISNP_FileWriteWip
 00F0           
 00F0           .endsection
 00F0           
 00F0           .section
 00F0           ;-----------------------------------------------------------------------------
 00F0           ;
 00F0           ; RadioGetPreamblePattern:
 00F0           ;                  Get the preamble pattern.
 00F0           ;
 00F0           ; 'C' Call:        WORD RadioGetPreamblePattern(void);
 00F0           ;
 00F0           ; Assembly Call:   A: unused
 00F0           ;                  X: unused
 00F0           ;
 00F0           ; Assembly Return: A: preamble count
 00F0           ;                  X: Undefined
 00F0           ;
 00F0           _CYFISNP_GetPreamblePattern::
 00F0            CYFISNP_GetPreamblePattern::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
                  IF (SYSTEM_LARGE_MEMORY_MODEL)
                        MOV     [CYFISNP_WipPtr+1], >CYFISNP_Temp1 ; LMM: MSB RadioWipPtr
                  ENDIF
 00F0 550004            MOV     [CYFISNP_WipPtr+0], <CYFISNP_Temp1 ; SMM: 8-bit RadioWipPtr
 00F3                                                                    ; Preamble file register is 3 bytes
 00F3 5024              MOV     A, CYFISNP_PREAMBLE_ADR         ;  and must always be accessed 3 times
 00F5 5703              MOV     X, 3                                     ;  so do a burst read of the whole 3
 00F7 550003            MOV     [CYFISNP_WipLen], 3
 00FA 90EC              CALL    CYFISNP_FileReadWip        ;  byte file register.
 00FC 5105              MOV     A, [CYFISNP_Temp2]         ; The first byte is the count and the
 00FE 5806              MOV     X, [CYFISNP_Temp3]         ;  pattern is the 2nd and 3rd bytes.
 0100 7F                RET
 0101           
 0101           .endsection
 0101           
 0101           .section
 0101           ;-----------------------------------------------------------------------------
 0101           ;
 0101           ; RadioSetCrcSeed: Sets CRC seed value used for both Tx and Rx
 0101           ;
 0101           ; 'C' Call:        void RadioSetCrcSeed(WORD crcSeed);
 0101           ;
 0101           ; Assembly Call:   A: crcSeed low order
 0101           ;                  X: crcSeed high order
 0101           ;
 0101           ; Assembly Return: A: Undefined
 0101           ;                  X: Undefined
 0101           ;
 0101            CYFISNP_SetCrcSeed::
 0101           _CYFISNP_SetCrcSeed::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
 0101 5304              MOV     [CYFISNP_Temp1], A         ; Save pattern in local work buffer
 0103 5A05              MOV     [CYFISNP_Temp2], X
                  IF (SYSTEM_LARGE_MEMORY_MODEL)
                        MOV     [CYFISNP_WipPtr+1], >CYFISNP_Temp1 ; LMM: MSB RadioWipPtr
                  ENDIF
 0105 550004            MOV     [CYFISNP_WipPtr+0], <CYFISNP_Temp1 ; SMM: 8-bit RadioWipPtr
 0108 5015              MOV     A, CYFISNP_CRC_SEED_LSB_ADR     ;  Write the pattern as a 2 byte file
 010A 5702              MOV     X, 2                                     ;  register burst.
 010C 80C0              JMP     CYFISNP_BurstWriteWip
 010E           
 010E           .endsection
 010E           
 010E           .section
 010E           ;-----------------------------------------------------------------------------
 010E           ;
 010E           ; RadioGetCrcSeed: Return CRC seed value used for both Tx and Rx
 010E           ;
 010E           ; 'C' Call:        WORD RadioGetCrcSeed(void);
 010E           ;
 010E           ; Assembly Call:   A: unused
 010E           ;                  X: unused
 010E           ;
 010E           ; Assembly Return: A: crcSeed low order
 010E           ;                  X: crcSeed high order
 010E           ;
 010E            CYFISNP_GetCrcSeed::
 010E           _CYFISNP_GetCrcSeed::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
                  IF (SYSTEM_LARGE_MEMORY_MODEL)
                        MOV     [CYFISNP_WipPtr+1], >CYFISNP_Temp1 ; LMM: MSB RadioWipPtr
                  ENDIF
 010E 550004            MOV     [CYFISNP_WipPtr+0], <CYFISNP_Temp1 ; SMM: 8-bit RadioWipPtr
 0111 5015              MOV     A, CYFISNP_CRC_SEED_LSB_ADR
 0113 5702              MOV     X, 2                    ;  2-Byte burst read
 0115 550002            MOV     [CYFISNP_WipLen], 2    ; 2-Byte burst read
 0118           
 0118 90C2              CALL    CYFISNP_BurstReadWip       ;  byte file register.
 011A 5104              MOV     A, [CYFISNP_Temp1]         ; The first byte is the count and the
 011C 5805              MOV     X, [CYFISNP_Temp2]         ;  pattern is the 2nd and 3rd bytes.
 011E 7F                RET
 011F           
 011F           .endsection
 011F           
 011F           .section
 011F           ;-----------------------------------------------------------------------------
 011F           ;
 011F           ; RadioGetFuses:   Get the fuse values from the radio.
 011F           ;
 011F           ;               Caller should have ALREADY called _SetLength() and _SetPtr().
 011F           ;
 011F           ; 'C' Call:        void RadioGetFuses(void);
 011F           ;
 011F           ; Assembly Call:   A: unused
 011F           ;                  X: unused
 011F           ;
 011F           ; Assembly Return: A: Undefined
 011F           ;                  X: Undefined
 011F           ;
 011F            CYFISNP_GetFuses::
 011F           _CYFISNP_GetFuses::
 011F 5025              MOV     A, CYFISNP_MFG_ID_ADR  ; Turn on fuse read bias.
 0121 57FF              MOV     X, 0FFh
 0123 909A              CALL    CYFISNP_Write
 0125           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
 0125 5706              MOV     X, 6
 0127 5025              MOV     A, CYFISNP_MFG_ID_ADR
 0129 90B7              CALL    CYFISNP_FileRead       ; Read the fuses.
 012B           
 012B           ; RAM_SETPAGE_CUR >_DriverRamPage  already done by RadioWrite()
                  IF (SYSTEM_LARGE_MEMORY_MODEL)
                        MOV     A, [CYFISNP_Ptr+1]     ; MSB RadioPtr (page number)
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[IDX_PP], A
                   ENDIF
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                  ENDIF
 012B 5800              MOV     X, [CYFISNP_Ptr+0]     ; LSB of pointer
 012D 5100              MOV     A, [CYFISNP_Len]
 012F 3700FF    .Loop:  XOR     [X+0], 0xFF
 0132 75                INC     X
 0133 78                DEC     A
 0134 BFFA              JNZ     .Loop
 0136           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                
 0136 5025              MOV     A, CYFISNP_MFG_ID_ADR  ; Turn off fuse read bias.
 0138 5700              MOV     X, 0
 013A 8084              JMP     CYFISNP_Write
 013C           .endsection
 013C           
 013C           .section
 013C           ;-----------------------------------------------------------------------------
 013C           ;
 013C           ; RadioSetConstSopPnCode:  Set SOP PN Code.
 013C           ;
 013C           ; 'C' Call:        void RadioSetConstSopPnCode(const BYTE *patternAddr);
 013C           ;
 013C           ; Assembly Call:   A: Code address high
 013C           ;                  X: Code address low
 013C           ;
 013C           ; Assembly Return: A: Undefined
 013C           ;                  X: Undefined
 013C           ;
 013C           _CYFISNP_SetConstSopPnCode::
 013C            CYFISNP_SetConstSopPnCode::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
 013C 550522            MOV     [CYFISNP_FileAddr], CYFISNP_SOP_CODE_ADR
 013F           CYFISNP_SetConstCode2:
 013F 5304              MOV     [CYFISNP_ConstAddrHi], A
 0141 5A03              MOV     [CYFISNP_ConstAddrLo], X
 0143           CYFISNP_SetConstCode:
 0143 550608            MOV     [CYFISNP_Temp3], 8
 0146 5104      .loop:  MOV     A, [CYFISNP_ConstAddrHi]
 0148 5803              MOV     X, [CYFISNP_ConstAddrLo]
 014A 28                ROMX
 014B 7603              INC     [CYFISNP_ConstAddrLo]
 014D B003              JNZ     .S1
 014F 7604              INC     [CYFISNP_ConstAddrHi]
 0151 5805      .S1:    MOV     X, [CYFISNP_FileAddr]
 0153 9069              CALL    CYFISNP_WriteSwapped
 0155 7A06              DEC     [CYFISNP_Temp3]
 0157 BFEE              JNZ     .loop
 0159 7F                RET
 015A           
 015A           .endsection
 015A           
 015A           .section
 015A           ;-----------------------------------------------------------------------------
 015A           ;
 015A           ; RadioSetConstDataPnCode: Set DATA PN Code.
 015A           ;
 015A           ; 'C' Call:        void RadioSetConstDataPnCode(const BYTE *patternAddr);
 015A           ;
 015A           ; Assembly Call:   A: Code address high
 015A           ;                  X: Code address low
 015A           ;
 015A           ; Assembly Return: A: Undefined
 015A           ;                  X: Undefined
 015A           ;
 015A           _CYFISNP_SetConstDataPnCode::
 015A            CYFISNP_SetConstDataPnCode::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
 015A 550523            MOV     [CYFISNP_FileAddr], CYFISNP_DATA_CODE_ADR
 015D 9FE0              CALL    CYFISNP_SetConstCode2
 015F 8FE3              JMP     CYFISNP_SetConstCode
 0161           
 0161           .endsection
 0161           
 0161           .section
 0161           ;-----------------------------------------------------------------------------
 0161           ;
 0161           ; RadioSetSopPnCode: Set the Start Of Packet PN Code.
 0161           ;
 0161           ; 'C' Call:        void RadioSetSopPnCode(BYTE patternNum);
 0161           ;
 0161           ; Assembly Call:   A: Code number
 0161           ;                  X: unused
 0161           ;
 0161           ; Assembly Return: A: Undefined
 0161           ;                  X: Undefined
 0161           ;
 0161           _CYFISNP_SetSopPnCode::
 0161            CYFISNP_SetSopPnCode::
 0161 64                ASL     A                           ; PN Codes are 8 bytes.
 0162 64                ASL     A
 0163 64                ASL     A
 0164 576E              MOV     X, >CYFISNP_PnCodeTable
 0166 016E              ADD     A, <CYFISNP_PnCodeTable
 0168 D002              JNC     .S1
 016A 75                INC     X
 016B 4B        .S1:    SWAP    A, X
 016C 8FCF              JMP     _CYFISNP_SetConstSopPnCode
 016E           
 016E           ;--------------------------------------------------------------------------;
 016E           ;                                                                          ;
 016E           ;                        P N   C o d e   T a b l e s                       ;
 016E           ;                                                                          ;
 016E           ;--------------------------------------------------------------------------;
 016E           
 016E           ;-----------------------------------------------------------------------------
 016E           ;
 016E           ; These are the 20 Multiplicative codes documented in RWW-87. The first 10 are
 016E           ;  the set recommended as the best at the conclusion of that memo.
 016E           ;
 016E           ; Bit ordering for these codes:
 016E           ;  The LSB of the first byte is the first bit transceived.
 016E           ;  The MSB of the first byte is the eighth bit transceived.
 016E           ;  The MSB of the eighth byte is the last bit transceived.
 016E           ;
 016E           
 016E           CYFISNP_PnCodeTable:
                IF (CYFISNP_SOP_SET_A)
 016E 3C37CC91E2F8CC91                              DB   3Ch, 37h, CCh, 91h, E2h, F8h, CCh, 91h ; PN Code 0
 0176 9BC5A10FAD39A20F                              DB   9Bh, C5h, A1h, 0Fh, ADh, 39h, A2h, 0Fh ; PN Code 1
 017E EF64B02AD28FB12A                              DB   EFh, 64h, B0h, 2Ah, D2h, 8Fh, B1h, 2Ah ; PN Code 2
 0186 66CD7C50DD267C50                              DB   66h, CDh, 7Ch, 50h, DDh, 26h, 7Ch, 50h ; PN Code 3
 018E 5CE1F644AD16F644                              DB   5Ch, E1h, F6h, 44h, ADh, 16h, F6h, 44h ; PN Code 4
 0196 5ACCAE46B631AE46                              DB   5Ah, CCh, AEh, 46h, B6h, 31h, AEh, 46h ; PN Code 5
 019E A178DC3C9E82DC3C                              DB   A1h, 78h, DCh, 3Ch, 9Eh, 82h, DCh, 3Ch ; PN Code 6
 01A6 B98E19746F651874                              DB   B9h, 8Eh, 19h, 74h, 6Fh, 65h, 18h, 74h ; PN Code 7
 01AE DFB1C04962DFC149                              DB   DFh, B1h, C0h, 49h, 62h, DFh, C1h, 49h ; PN Code 8
 01B6 97E514727F1A1472                              DB   97h, E5h, 14h, 72h, 7Fh, 1Ah, 14h, 72h ; PN Code 9
                ENDIF
                IF (CYFISNP_SOP_SET_B)
                                             DB   82h, C7h, 90h, 36h, 21h, 03h, FFh, 17h ; PN Code 10
                                             DB   E2h, F8h, CCh, 91h, 3Ch, 37h, CCh, 91h ; PN Code 11
                                             DB   ADh, 39h, A2h, 0Fh, 9Bh, C5h, A1h, 0Fh ; PN Code 12
                                             DB   D2h, 8Fh, B1h, 2Ah, EFh, 64h, B0h, 2Ah ; PN Code 13
                                             DB   DDh, 26h, 7Ch, 50h, 66h, CDh, 7Ch, 50h ; PN Code 14
                                             DB   ADh, 16h, F6h, 44h, 5Ch, E1h, F6h, 44h ; PN Code 15
                                             DB   B6h, 31h, AEh, 46h, 5Ah, CCh, AEh, 46h ; PN Code 16
                                             DB   9Eh, 82h, DCh, 3Ch, A1h, 78h, DCh, 3Ch ; PN Code 17
                                             DB   6Fh, 65h, 18h, 74h, B9h, 8Eh, 19h, 74h ; PN Code 18
                                             DB   62h, DFh, C1h, 49h, DFh, B1h, C0h, 49h ; PN Code 19
                ENDIF
 01BE           .endsection
 01BE           
 01BE           
 01BE           .section
 01BE           
 01BE           ;-------------------------------------------------------------------------------
 01BE           ; CYFISNP_WriteSwapped
 01BE           ;
 01BE           ; Writes a single byte to a register.  Parameter order is swapped compared to
 01BE           ; CYFISNP_Write.
 01BE           ;
 01BE           ; M8C Registers
 01BE           ;    A: Value to write.  Trashed on exit.
 01BE           ;    X: Address of register to write.  Trashed on exit.
 01BE           ;
 01BE           ; Assumptions
 01BE           ;    1. All assumptions of called/jumped subroutines apply.
 01BE           ;-------------------------------------------------------------------------------
 01BE            CYFISNP_WriteSwapped::
 01BE 4B                SWAP    A, X
 01BF                   ; Fall through to CYFISNP_Write
 01BF           
 01BF           ;-------------------------------------------------------------------------------
 01BF           ; CYFISNP_Write
 01BF           ;
 01BF           ; Writes a single byte to a register.
 01BF           ;
 01BF           ; M8C Registers
 01BF           ;    A: Address of register to write.  Trashed on exit.
 01BF           ;    X: Value to write.  Trashed on exit.
 01BF           ;
 01BF           ; Assumptions
 01BF           ;    1. All assumptions of called/jumped subroutines apply.
 01BF           ;-------------------------------------------------------------------------------
 01BF            CYFISNP_Write::
 01BF           _CYFISNP_Write::
                  IF (CYFISNP_SPI_MODE_SDIO)
                        CALL    CYFISNP_SaveAndClearGIE
                        CALL    CYFISNP_WriteRaw
                        JMP     CYFISNP_RestoreGIE
                  ELSE
 01BF 2980              OR      A, CYFISNP_bSPI_WRITE           ; Set the Write Bit.
 01C1                   ; Fall through to CYFISNP_Read
                  ENDIF
                
                
                ;-------------------------------------------------------------------------------
                ; CYFISNP_Read
                ;
                ; Reads a single byte from a register.
                ;
                ; M8C Registers
                ;    A: Address of register to read.  On exit, the read value is returned in
                ;       this register.
                ;    X: Trashed on exit.
                ;
                ; Assumptions
                ;    1. All assumptions of called/jumped subroutines apply.
                ;-------------------------------------------------------------------------------
 01C1            CYFISNP_Read::
 01C1           _CYFISNP_Read::
 01C1 9031              CALL    CYFISNP_SaveAndClearGIE
 01C3 9000              CALL    CYFISNP_ReadRaw
 01C5 8026              JMP     CYFISNP_RestoreGIE
 01C7           
 01C7           
 01C7           ;-------------------------------------------------------------------------------
 01C7           ; CYFISNP_ReadStatusDebounced
 01C7           ;
 01C7           ; Reads status flags from an appropriate register and performs a second read
 01C7           ; with some sticky bits if a couple bits are not equal to each other.
 01C7           ;
 01C7           ; M8C Registers
 01C7           ;    A: Address of the register to read.  On exit, the debounced read value is
 01C7           ;       returned in this register.
 01C7           ;    X: Trashed on exit.
 01C7           ;
 01C7           ; Assumptions
 01C7           ;    1. All assumptions of called/jumped subroutines apply.
 01C7           ;-------------------------------------------------------------------------------
 01C7            CYFISNP_ReadStatusDebounced::
 01C7           _CYFISNP_ReadStatusDebounced::
 01C7 902B              CALL   CYFISNP_SaveAndClearGIE
 01C9 9000              CALL   CYFISNP_ReadStatusDebouncedRaw
 01CB 8020              JMP    CYFISNP_RestoreGIE
 01CD           
 01CD           
 01CD           ;-------------------------------------------------------------------------------
 01CD           ; CYFISNP_BurstWrite
 01CD           ; CYFISNP_BurstWriteWip
 01CD           ; CYFISNP_FileWrite
 01CD           ; CYFISNP_FileWriteWip
 01CD           ;
 01CD           ; These routines handle burst writes of multiple consecutive registers or writes
 01CD           ; of multiple bytes to a register file.
 01CD           ;
 01CD           ; M8C Registers
 01CD           ;    A: Address of register to write.  Trashed on exit.
 01CD           ;    X: Number of bytes to write.  Trashed on exit.
 01CD           ;
 01CD           ; Assumptions
 01CD           ;    1. All assumptions of called/jumped subroutines apply.
 01CD           ;-------------------------------------------------------------------------------
 01CD            CYFISNP_BurstWriteWip::
 01CD 2940              OR      A, CYFISNP_bSPI_AUTO_INC        ; Set increment flag
 01CF 8006              JMP     CYFISNP_FileWriteWip            ; Use existing WIP ptr/ctr
 01D1           
 01D1            CYFISNP_BurstWrite::
 01D1           _CYFISNP_BurstWrite::
 01D1 2940              OR      A, CYFISNP_bSPI_AUTO_INC        ; Set increment flag.
 01D3           
 01D3            CYFISNP_FileWrite::
 01D3           _CYFISNP_FileWrite::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
                  IF (SYSTEM_LARGE_MEMORY_MODEL)
                        MOV     [CYFISNP_WipPtr+1], [CYFISNP_Ptr+1] ; Copy MSByte buffer pointer.
                  ENDIF
 01D3 5F0000            MOV     [CYFISNP_WipPtr+0], [CYFISNP_Ptr+0] ; Copy LSByte buffer pointer.
 01D6           
 01D6            CYFISNP_FileWriteWip::
 01D6 901C              CALL   CYFISNP_SaveAndClearGIE
 01D8 9000              CALL   CYFISNP_FileWriteWipRaw
 01DA 8011              JMP    CYFISNP_RestoreGIE
 01DC           
 01DC           
 01DC           
 01DC           ;-------------------------------------------------------------------------------
 01DC           ; CYFISNP_BurstRead
 01DC           ; CYFISNP_BurstReadWip
 01DC           ; CYFISNP_FileRead
 01DC           ; CYFISNP_FileReadWip
 01DC           ;
 01DC           ; These routines handle burst reads of multiple consecutive registers or reads
 01DC           ; of multiple bytes from a register file.
 01DC           ;
 01DC           ; M8C Registers
 01DC           ;    A: Address of register to read.  Trashed on exit.
 01DC           ;    X: Number of bytes to read.  Trashed on exit.
 01DC           ;
 01DC           ; Assumptions
 01DC           ;    1. All assumptions of called/jumped subroutines apply.
 01DC           ;-------------------------------------------------------------------------------
 01DC            CYFISNP_BurstReadWip::
 01DC 2940              OR      A, CYFISNP_bSPI_AUTO_INC        ; Set the increment flag.
 01DE 8009              JMP     CYFISNP_FileReadWip
 01E0           
 01E0           
 01E0            CYFISNP_BurstRead::
 01E0           _CYFISNP_BurstRead::
 01E0 2940              OR      A,CYFISNP_bSPI_AUTO_INC         ; Set the increment flag.
 01E2           
 01E2           
 01E2            CYFISNP_FileRead::
 01E2           _CYFISNP_FileRead::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
                  IF (SYSTEM_LARGE_MEMORY_MODEL)
                        MOV     [CYFISNP_WipPtr+1], [CYFISNP_Ptr+1] ; LMM: MSB working pointer
                  ENDIF
 01E2 5F0000            MOV     [CYFISNP_WipPtr+0], [CYFISNP_Ptr+0] ; Initialize working pointer
 01E5           
 01E5 5F0000            MOV     [CYFISNP_WipLen], [CYFISNP_Len]     ;  and length.
 01E8           
 01E8           
 01E8           CYFISNP_FileReadWip::
 01E8 900A              CALL    CYFISNP_SaveAndClearGIE
 01EA 9000              CALL    CYFISNP_FileReadWipRaw
 01EC                   ; Fall through to CYFISNP_RestoreGIE
 01EC           
 01EC           
 01EC           ;-------------------------------------------------------------------------------
 01EC           ; CYFISNP_RestoreGIE
 01EC           ;
 01EC           ; Restores the global interrupt enable flag (GIE) to the state it had prior to
 01EC           ; the most recent call to CYFISNP_SaveAndClearGIE.
 01EC           ; It's primary purpose is as the GIE restoration mechanism for interrupt-safe
 01EC           ; SPI operation.
 01EC           ;
 01EC           ; M8C Registers
 01EC           ;    A: Unused and unaffected
 01EC           ;    X: Unused and unaffected
 01EC           ;
 01EC           ; Assumptions
 01EC           ;    1. On entry, the current page pointer (CUR_PP) points at the RAM page
 01EC           ;       containing CYFISNP_lpGIE.
 01EC           ;    2. On entry, the global interrupt enable (GIE) flag is cleared.
 01EC           ;-------------------------------------------------------------------------------
 01EC            CYFISNP_RestoreGIE::
 01EC 470701            TST    [CYFISNP_lpGIE], FLAG_GLOBAL_IE
 01EF A003              JZ     .Done
 01F1 7101          or    F, FLAG_GLOBAL_IE
 01F3           .Done:
 01F3 7F                RET
 01F4           
 01F4           
 01F4           
 01F4           ;-------------------------------------------------------------------------------
 01F4           ; CYFISNP_SaveAndClearGIE
 01F4           ;
 01F4           ; Saves a copy of the M8C F register and clears the M8C global interrupt enable
 01F4           ; (GIE) flag.  The saved copy of F will be used in a later call to
 01F4           ; CYFISNP_RestoreGIE in order to restore the GIE flag to its previous
 01F4           ; state.  This function's primary purpose is as the GIE saving/disabling
 01F4           ; mechanim for interrupt-safe SPI operation.
 01F4           ;
 01F4           ; M8C Registers
 01F4           ;    A: Unused and unaffected
 01F4           ;    X: Unused and unaffected
 01F4           ;
 01F4           ; Assumptions
 01F4           ;    None
 01F4           ;-------------------------------------------------------------------------------
 01F4            CYFISNP_SaveAndClearGIE::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
 01F4 08                PUSH   A
 01F5 5DF7              MOV    A, reg[CPU_F]
 01F7 70FE          and   F, ~FLAG_GLOBAL_IE
 01F9 5307              MOV    [CYFISNP_lpGIE], A
 01FB 18                POP    A
 01FC 7F                RET
 01FD           .endsection
 01FD           
 01FD           
 01FD           .section
 01FD           ;-----------------------------------------------------------------------------
 01FD           ;
 01FD           ; RadioSetPtr:     Set the buffer pointer address for RadioBurstRead,
 01FD           ;                  RadioFileRead, RadioBurstWrite and RadioFileWrite functions
 01FD           ;
 01FD           ; 'C' Call:        void RadioSetPtr(unsigned char ramPtr);
 01FD           ;
 01FD           ; Return:     CUR_PP: Large Memory Model sets to RadioDriverRamPage
 01FD           ;-----------------------------------------------------------------------------
 01FD            CYFISNP_SetPtr::
 01FD           _CYFISNP_SetPtr::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
 01FD 5A00              MOV     [CYFISNP_Ptr+0], X         ; LSByte of pointer
                  IF (SYSTEM_LARGE_MEMORY_MODEL)
                        MOV     [CYFISNP_Ptr+1], A         ; LMM: MSB 16-bit pointer
                  ENDIF
 01FF 7F                RET
 0200           
 0200           .endsection
 0200           
 0200           
 0200           .section
 0200           ;-----------------------------------------------------------------------------
 0200           ;
 0200           ; RadioSetLength:  Set the buffer length for RadioBurstRead & RadioFileRead.
 0200           ;
 0200           ; 'C' Call:        void RadioSetLength(unsigned char length);
 0200           ;
 0200           ; Return:     CUR_PP: Large Memory Model sets to RadioDriverRamPage
 0200           ;-----------------------------------------------------------------------------
 0200            CYFISNP_SetLength::
 0200           _CYFISNP_SetLength::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
 0200 5300              MOV     [CYFISNP_Len], A
 0202 7F                RET
 0203           
 0203           .endsection
 0203           
 0203           
 0203           .section
 0203           ;-----------------------------------------------------------------------------
 0203           ;
 0203           ; RadioReset: Send Soft Reset command to radio.
 0203           ;
 0203           ; 'C' Call:        void RadioReset(void);
 0203           ;
 0203           ; Assembly Call:   A: none
 0203           ;                  X: none
 0203           ;
 0203           ; Assembly Return: A: 1 on successful execution.  0 if unsuccessful.
 0203           ;                  X: lost
 0203           ;             CUR_PP: Large Memory Model sets to RadioDriverRamPage
 0203           ; Notes
 0203           ; 1. To conserve RAM usage, CYFISNP_WipLen and
 0203           ;    CYFISNP_WipPtr are accessed.  These variables are declared in
 0203           ;    CYFISNP_PSoC_SPIm.asm or CYFISNP_E2_SPIm.asm.  It is
 0203           ;    assumed that at the time, this function is called, these variables
 0203           ;    contain no meaningful value.
 0203           ;
 0203           ; Side Effects
 0203           ; 1. Modifes global variables CYFISNP_WipLen and
 0203           ;    CYFISNP_WipPtr.
 0203           ;-----------------------------------------------------------------------------
 0203           _CYFISNP_Reset::
 0203            CYFISNP_Reset::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
                
                IF(0x18 * 0x17)
                   IF (CYFISNP_FAST_SS_ACTUATION)
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQIE_Addr],  CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            and     reg[P15CR], ~(CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)      ; P1.5 is IRQ input
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                    or    F, FLAG_XIO_MASK
                            or     reg[CYFISNP_IRQDM1_Addr], CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         and    reg[CYFISNP_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                         or     reg[CYFISNP_IRQ_Addr],(CYFISNP_IRQ_MASK | 0x20)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and    reg[INT_CLR0], ~INT_MSK0_GPIO
                            or     reg[CYFISNP_IRQIE_Addr], CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                
                   ENDIF
 0203 430880          or      reg[CYFISNP_nSS_Addr], (CYFISNP_nSS_MASK | CYFISNP_OD_MASK)
                   ELSE
                      IF (CYFISNP_nSS_IS_PPSOC_FN)
                         push    A
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQIE_Addr],  CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            and     reg[P15CR], ~(CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)      ; P1.5 is IRQ input
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                    or    F, FLAG_XIO_MASK
                            or     reg[CYFISNP_IRQDM1_Addr], CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         and    reg[CYFISNP_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                         or     reg[CYFISNP_IRQ_Addr],(CYFISNP_IRQ_MASK | 0x20)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and    reg[INT_CLR0], ~INT_MSK0_GPIO
                            or     reg[CYFISNP_IRQIE_Addr], CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                
                   ENDIF
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   mov   A, reg[ CUR_PP ]
                   push  A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >FN_0_Data_SHADE
                   ENDIF
                         ENDIF
                         or      [FN_0_Data_SHADE], CYFISNP_nSS_MASK
                         mov     A, [FN_0_Data_SHADE]
                         mov     reg[CYFISNP_nSS_Addr], A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   pop   A
                   mov   reg[ CUR_PP ], A
                         ENDIF
                         pop     A
                      ELSE
                         push    A
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQIE_Addr],  CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            and     reg[P15CR], ~(CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)      ; P1.5 is IRQ input
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                    or    F, FLAG_XIO_MASK
                            or     reg[CYFISNP_IRQDM1_Addr], CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         and    reg[CYFISNP_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                         or     reg[CYFISNP_IRQ_Addr],(CYFISNP_IRQ_MASK | 0x20)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and    reg[INT_CLR0], ~INT_MSK0_GPIO
                            or     reg[CYFISNP_IRQIE_Addr], CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                
                   ENDIF
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   mov   A, reg[ CUR_PP ]
                   push  A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_2_Data_SHADE
                   ENDIF
                         ENDIF
                         or      [Port_2_Data_SHADE], CYFISNP_nSS_MASK
                         mov     A, [Port_2_Data_SHADE]
                         mov     reg[CYFISNP_nSS_Addr], A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   pop   A
                   mov   reg[ CUR_PP ], A
                         ENDIF
                         pop     A
                      ENDIF
                   ENDIF
                ENDIF
                
                        ;---------------------------------------------------------------------
                        ; This CYFISPI_RST only NEEDS to work during soft-reset (NOT POR) to
                        ;  ensure Radio starts in 4-wire mode because in Minimum Power Mode
                        ;  4-wire mode is temporarily set to 3-wire mode to unfloat MISO.
                        ;---------------------------------------------------------------------
 0206 501D              MOV     A, CYFISNP_MODE_OVERRIDE_ADR       ; Reset Radio via SPI soft reset
 0208 5701              MOV     X, CYFISNP_RST                     ;  (don't use RST pin)
 020A 9FB3              CALL    CYFISNP_Write                      ; Issue soft-reset
 020C           
 020C                   ;---------------------------------------------------------------------
 020C                   ; Wait for the radio to emerge from POR.  At max SPI rate of 4 Mbps,
 020C                   ; One loop through this wait takes at least 8 microseconds.  To get a
 020C                   ; minimum of 20 ms, 2500 loops are required.  At a SPI rate of 500
 020C                   ; kbps, this loop would take 160 ms.
 020C                   ;---------------------------------------------------------------------
 020C           
 020C                   ; Initialize timeout counter for 2500 (0x09C4) iterations max.
 020C 550009            mov  [CYFISNP_WipLen], 0x09                ; CYFISNP_WipLen is the timeout counter MSB
 020F 5500C4            mov  [CYFISNP_WipPtr], 0xC4                ; CYFISNP_WipPtr is the timeout counter LSB
 0212           .wait:
 0212 62E300        mov   reg[RES_WDT], 00h
 0215 7A00              DEC    [CYFISNP_WipPtr]
 0217 1E0000            SBB    [CYFISNP_WipLen], 0
 021A C018              JC     .InitError
 021C           
 021C           
                IF CYFISNP_SPI_MODE_SDIO
                        MOV A,CYFISNP_IO_CFG_ADR
                        MOV X,CYFISNP_SPI_3_PIN
                        CALL CYFISNP_Write
                        MOV A, CYFISNP_IO_CFG_ADR
                        CALL CYFISNP_Read                          ; Try and readback using 3-Wire SPI
                        CMP A, CYFISNP_SPI_3_PIN
                ELSE
 021C 5000              MOV    A, CYFISNP_CHANNEL_ADR
 021E 5705              MOV    X, 5
 0220 9F9D              CALL   CYFISNP_Write
 0222 5000              MOV    A, CYFISNP_CHANNEL_ADR
 0224 9F9B              CALL   CYFISNP_Read
 0226 3905              CMP    A, 5
                ENDIF
 0228 BFE9              JNZ    .wait
 022A           
 022A           
 022A                   ;---------------------------------------------------------------------
 022A                   ; Soft reset CYFISPI
 022A                   ;---------------------------------------------------------------------
 022A 501D              MOV     A, CYFISNP_MODE_OVERRIDE_ADR    ; Reset Radio through SPI (soft reset)
 022C 5701              MOV     X, CYFISNP_RST                  ;  (don't use RST pin)
 022E           
                IF (CYFISNP_IRQ_MOSI_MUXED & CYFISNP_SPI_MODE_SDIO)
                        CALL    CYFISNP_Write              ; Issue soft-reset
                        MOV     A, CYFISNP_IO_CFG_ADR           ;
                        MOV     X, CYFISNP_SPI_3_PIN | CYFISNP_IRQ_GPIO ; Enable IRQ/MOSI mux + 3-wire SPI
                ELSE
                    IF CYFISNP_IRQ_MOSI_MUXED                        ; and non-3-wire SPI
                        CALL    CYFISNP_Write              ; Issue soft-reset
                        MOV     A, CYFISNP_IO_CFG_ADR           ;
                        MOV     X, CYFISNP_IRQ_GPIO             ; Only enable IRQ muxed on MOSI pin
                    ENDIF
                    IF CYFISNP_SPI_MODE_SDIO                   ; and non-Muxed IRQ
                        CALL    CYFISNP_Write              ; Issue soft-reset
                        MOV     A, CYFISNP_IO_CFG_ADR           ;
                        MOV     X, CYFISNP_SPI_3_PIN            ; Only enable 3-wire SPI
                    ENDIF
                ENDIF
 022E 9F8F              call CYFISNP_Write
 0230 5001              mov  A, 1
 0232 7F                ret
 0233           
 0233           .InitError:
 0233 5000              mov  A, 0
 0235 7F                ret
 0236           .endsection
 0236           
 0236           
 0236           
 0236           
 0236           .section
 0236           ;-----------------------------------------------------------------------------
 0236           ;
 0236           ; RadioStartTransmit:
 0236           ;                  Start the transmission of a packet. The location of the
 0236           ;                  packet buffer to transmit must have previously been set
 0236           ;                  by calling RadioSetPtr().
 0236           ;
 0236           ;                  After starting the transmission of a packet with this call,
 0236           ;                  the transmit operation should be monitored via
 0236           ;                  RadioGetTransmitState(). When RadioGetTransmitState()
 0236           ;                  indicates that the transmission has completed, then
 0236           ;                  RadioEndTransmit() should be called.
 0236           ;
 0236           ;                  After calling RadioStartTransmit() NO CALLS can be made to
 0236           ;                  configuration access routines until transmit operation is
 0236           ;                  terminated by calling RadioEndTransmit() or RadioAbort().
 0236           ;                  Until a call is made to end the transmit operation
 0236           ;                  the only other call supported is RadioGetTransmitState().
 0236           ;
 0236           ; 'C' Call:        void RadioStartTransmit(BYTE retryCount, RADIO_LENGTH len);
 0236           ;                  (A call to RadioSetPtr must have been made prior to the
 0236           ;                  call to RadioStartTransmit.)
 0236           ;
 0236           ; Assembly Call:   A: retry count
 0236           ;                  X: packet length
 0236           ;
 0236           ; Assembly Return: A: State
 0236           ;                  X: Undefined
 0236           ;-----------------------------------------------------------------------------
 0236           _CYFISNP_StartTransmit::
 0236            CYFISNP_StartTransmit::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
 0236 5306              MOV     [CYFISNP_RetryCount], A             ; Save retry count
 0238 5A04              MOV     [CYFISNP_Temp1], X                  ;  and length.
 023A           
 023A           ;-----------------------------------------------------------------------------
 023A           ; Start the transmission and a maximum of 16 Data Bytes.
 023A           ; For packets larger than 16 Bytes, the TXB8 IRQ is exposed, so the GIE is
 023A           ;  disabled.  Also the lpGIE image is "disabled" to prevent the GIE being
 023A           ;  re-enabled at SPI Write or Read returns.  Because RadioRestartTransmit()
 023A           ;  is called from either ISR or polled, it must be very careful to enable
 023A           ;  GIE as desired ONLY after the first 16-bytes are written.
 023A           ;-----------------------------------------------------------------------------
 023A 9FB8              CALL    CYFISNP_SaveAndClearGIE
 023C           
 023C 9002              CALL    CYFISNP_RestartTransmit
 023E           
 023E 8FAD              JMP     CYFISNP_RestoreGIE
 0240           
 0240           
 0240           ;-----------------------------------------------------------------------------
 0240           ; CYFISNP_RestartTransmit - Starts burst and initial TxFIFO load.
 0240           ;       When using CYFISNP_Interrupt(), it's called via non-ISR for first burst
 0240           ;        and via ISR for retransmits.
 0240           ;
 0240           ; Assumptions
 0240           ;    1. Interrupts are disabled on entry.
 0240           ;-----------------------------------------------------------------------------
 0240           _CYFISNP_RestartTransmit::
 0240            CYFISNP_RestartTransmit::
 0240           
 0240 91AE              CALL    CYFISNP_WakeupForXact
 0242           
 0242 550220            MOV     [CYFISNP_State], CYFISNP_TX
 0245 5505C3            MOV     [CYFISNP_Temp2], (CYFISNP_TX_GO | CYFISNP_TX_CLR | CYFISNP_TXC_IRQ | CYFISNP_TXE_IRQ) ; CDT-15618
 0248                   ; --------------------------------------------------------------------
 0248                   ; If packet is longer than TxFIFO, load 16 bytes and leave remainder.
 0248                   ; --------------------------------------------------------------------
 0248 5804              MOV     X, [CYFISNP_Temp1]                          ; X = burst-size to radio
 024A 550300            MOV     [CYFISNP_TxCount], 0                        ; default to nothing extra
 024D 5B                MOV     A, X                                                 ; Subtract 16 from the packet size.
 024E 1110              SUB     A, CYFISNP_FIFO_SIZE                     ; Is radio buf big enough
 0250 C008              JC      .OneFIFO                                             ; Yes, send entire data
 0252 5303              MOV     [CYFISNP_TxCount], A                        ; No, save "extra" byte count
 0254 5710              MOV     X, CYFISNP_FIFO_SIZE                     ;  Limit burst to radio buf size
 0256 2E0510            OR      [CYFISNP_Temp2], CYFISNP_TXB8_IRQ  ;  Extra bytes: need to use TXB8 IRQ
 0259           
 0259                   ; --------------------------------------------------------------------
 0259                   ; Issue TX_GO to start the radio transmitting and copy first TxFIFO
 0259                   ;
 0259                   ;  GIE is kept disabled throughout this because:
 0259                   ;   1) TXB8_IRQ must be blocked until TxFIFO first loaded.
 0259                   ;   2) First TxFIFO may need quick loading, depending on Synth state.
 0259                   ; --------------------------------------------------------------------
 0259           .OneFIFO:
 0259 5F0905            MOV     [CYFISNP_TxCtrlShadow], [CYFISNP_Temp2]
 025C 10                PUSH    X                                        ; Save data Tx Buf write len
 025D           
 025D 550004            MOV     [CYFISNP_WipPtr], <CYFISNP_Temp1 ; Burst write the
                IF (SYSTEM_LARGE_MEMORY_MODEL)
                        MOV        [CYFISNP_WipPtr+1], >CYFISNP_Temp1
                ENDIF
 0260 5001              MOV     A, CYFISNP_TX_LENGTH_ADR        ;  to start the TX.
 0262 5702              MOV     X, 2
 0264 5A00              MOV     [CYFISNP_WipLen], X
 0266 9000              CALL    CYFISNP_BurstWriteWipRaw      ; Write length and TX control as burst.
 0268           
 0268 20                POP     X                                        ; # bytes to burst to radio Tx Buf
 0269 5020              MOV     A, CYFISNP_TX_BUFFER_ADR
 026B 9000              CALL    CYFISNP_FileWriteRaw          ; Burst the data in
 026D           
 026D 5102              MOV     A, [CYFISNP_State]
 026F 7F                RET
 0270           .endsection
 0270           
 0270           
 0270           .section
 0270           ;-----------------------------------------------------------------------------
 0270           ;
 0270           ; RadioGetTransmitState:
 0270           ;                  Returns the state of the current transmit operation.
 0270           ;                  This call should be made after starting a transmit
 0270           ;                  operation with the RadioStartTransmit function.
 0270           ;
 0270           ;                  Although bits in the status register in the hardware clear
 0270           ;                  automatically, we make them sticky until RadioEndReceive.
 0270           ;
 0270           ;  IF USING RadioInterrupt(), DON'T CALL RadioGetTransmitState(),
 0270           ;    READ RadioState DIRECTLY
 0270           ;
 0270           ; 'C' Call:        RADIO_STATE RadioGetTransmitState(void);
 0270           ;
 0270           ; Assembly Call:   A: Unused
 0270           ;                  X: Unused
 0270           ;
 0270           ; Assembly Return: A: State
 0270           ;                  X: Undefined
 0270           ;-----------------------------------------------------------------------------
 0270           _CYFISNP_GetTransmitState::
 0270            CYFISNP_GetTransmitState::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
                
                  IF CYFISNP_RADIO_INTERRUPT
                        JMP     exitTx                  ; Service by Interrupt only: CDT-15694
                  ELSE
 0270 9F82              CALL    CYFISNP_SaveAndClearGIE
 0272 490840       tst   reg[CYFISNP_IRQ_Addr], CYFISNP_IRQ_MASK
 0275 A04E              JZ      exitTx                  ;  No, just return the state.
                  ENDIF
                
                
                        ;
                        ; Something interesting is happening at IRQ, find out what.
                        ;
 0277           _CYFISNP_GetTransmitStateIsr::
 0277            CYFISNP_GetTransmitStateIsr::
 0277 5004              MOV     A, CYFISNP_TX_IRQ_STATUS_ADR
 0279 9000              CALL    CYFISNP_ReadStatusDebouncedRaw
 027B 2113              AND     A, (CYFISNP_TXB8_IRQ | CYFISNP_TXE_IRQ | CYFISNP_TXC_IRQ)
 027D 2209              AND     A, [CYFISNP_TxCtrlShadow]
 027F 2C02              OR      [CYFISNP_State], A
 0281 3110              XOR     A, CYFISNP_TXB8_IRQ
 0283 B044              JNZ     CYFISNP_TxDontMoveData
 0285           
 0285                   ; Moving data, set TX IRQ mask to B8 only to simplify checking
 0285                   ;  when subsequent data can be moved after the first burst.
 0285                   ;
 0285 5710              MOV     X, CYFISNP_TXB8_IRQ             ; End of the data, clear the B8
 0287 5002              MOV     A, CYFISNP_TX_CTRL_ADR          ;  flag in the TX control register.
 0289 9000              CALL    CYFISNP_WriteRaw
 028B           
 028B                   ; Is the remaining data is longer than the 8 free bytes in TxFIFO.
 028B                   ;  Start by assuming a short packet.  In that case...
 028B                   ;
 028B           .MoveDataLoop:
 028B 5803              MOV     X, [CYFISNP_TxCount]       ; First burst is PacketLength bytes
 028D 550300            MOV     [CYFISNP_TxCount], 0       ;  and we will have no data left.
 0290 5B                MOV     A, X                                ; Subtract 8 from the packet size.
 0291 1108              SUB     A, CYFISNP_FIFO_HALF
 0293 C005              JC      .lastChunk                          ; If packet size >= 8 fall through
 0295 5303              MOV     [CYFISNP_TxCount], A       ;  save the difference as remaining
 0297 5708              MOV     X, CYFISNP_FIFO_HALF         ;  count and use 8 for this burst.
 0299           .lastChunk:
 0299 5020              MOV     A, CYFISNP_TX_BUFFER_ADR
 029B 9000              CALL    CYFISNP_FileWriteWipRaw       ; Burst the data in.
 029D           
 029D 5703              MOV     X, (CYFISNP_TXC_IRQ | CYFISNP_TXE_IRQ)  ; TX_CTRL value assuming no more data.
 029F 5103              MOV     A, [CYFISNP_TxCount]       ; Was that the end of the data?
 02A1 A008              JZ      .NoMoreData             ;  Yes, that will be all.
 02A3           
 02A3 490840       tst   reg[CYFISNP_IRQ_Addr], CYFISNP_IRQ_MASK
 02A6 BFE4              JNZ     .MoveDataLoop           ;  Yes, go move some more data.
 02A8           
 02A8 5713              MOV     X, (CYFISNP_TXB8_IRQ | CYFISNP_TXC_IRQ | CYFISNP_TXE_IRQ)
 02AA                                                   ; No more room, put TX_CTRL back.
 02AA           .NoMoreData:
 02AA 5A09              MOV     [CYFISNP_TxCtrlShadow], X
 02AC 5002              MOV     A, CYFISNP_TX_CTRL_ADR          ;  Update the TX control register.
 02AE 9000              CALL    CYFISNP_WriteRaw
 02B0           
 02B0           CYFISNP_TxCheckTxErrors:
 02B0 5102              MOV     A, [CYFISNP_State]
 02B2 2105              AND     A, (CYFISNP_TXE_IRQ | CYFISNP_TXBERR_IRQ)
 02B4 A004              JZ      CYFISNP_TxNoErrors
 02B6           CYFISNP_TxIsError:
 02B6 2E0202            OR      [CYFISNP_State], CYFISNP_TXC_IRQ
 02B9           CYFISNP_TxNoErrors:
 02B9 470201            TST     [CYFISNP_State], CYFISNP_TXE_IRQ
 02BC A007              JZ      exitTx                    ; Tx was error-free, done
 02BE           
 02BE 7A06              DEC     [CYFISNP_RetryCount]       ; Decrement and test Tx retry count
 02C0 C003              JC      exitTx
 02C2 9F7C              CALL    CYFISNP_RestartTransmit
 02C4           
 02C4           exitTx:
 02C4 5102              MOV     A, [CYFISNP_State]
                  IF (CYFISNP_RADIO_INTERRUPT)
                        RET
                  ELSE
 02C6 8F25              JMP     CYFISNP_RestoreGIE
                  ENDIF
                
                ;-----------------------------------------------------------------------------
                ; We're here, but NOT to move data. 'A' contains the last TX status read with
                ;  TXC masked out. RadioState has had the last TX status read OR'd in
                ;  including TXC bit. If TXC, TXE, and TXBERR are all clear that is an error.
                ;-----------------------------------------------------------------------------
 02C8           CYFISNP_TxDontMoveData:
 02C8 470202            TST     [CYFISNP_State], CYFISNP_TXC_IRQ
 02CB BFE4              JNZ     CYFISNP_TxCheckTxErrors
 02CD 2105              AND     A, (CYFISNP_TXE_IRQ | CYFISNP_TXBERR_IRQ)
 02CF BFE6              JNZ     CYFISNP_TxIsError
 02D1 5007              MOV     A, CYFISNP_RX_IRQ_STATUS_ADR    ; Radio saw SOP during AAck Rx window
 02D3 9000              CALL    CYFISNP_ReadRaw                 ; (RXE/RXC asserted), clear RXC/RXE
 02D5 8FE0              JMP     CYFISNP_TxIsError               ; and treat as Tx Error
 02D7           .endsection
 02D7           
 02D7           
 02D7           .section
 02D7           ;-----------------------------------------------------------------------------
 02D7           ;
 02D7           ; RadioEndTransmit: Completes a transmit operation.
 02D7           ;
 02D7           ; 'C' Call:        void RadioEndTransmit(void);
 02D7           ;
 02D7           ; Assembly Call:   A: Unused
 02D7           ;                  X: Unused
 02D7           ;
 02D7           ; Assembly Return: A: Preserved
 02D7           ;                  X: Undefined
 02D7           ;
 02D7           _CYFISNP_EndTransmit::
 02D7            CYFISNP_EndTransmit::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
 02D7 550200            MOV     [CYFISNP_State], CYFISNP_IDLE        ; Clear our status.
 02DA 7F                RET
 02DB           .endsection
 02DB           
 02DB           .section
 02DB           ;-----------------------------------------------------------------------------
 02DB           ;
 02DB           ; RadioBlockingTransmit:
 02DB           ;                  Transmit a packet. Block execution until it completes.
 02DB           ;                  This function attempts to transmit a packet. The address
 02DB           ;                  of the packet buffer should have previously been set with
 02DB           ;                  a call to RadioSetPtr.
 02DB           ;
 02DB           ;                  This routine gives the user very little control - probably
 02DB           ;                  less than most applications will require. This function is
 02DB           ;                  primarily intended for very simple applications that have
 02DB           ;                  no use for a time-out.
 02DB           ;
 02DB           ; 'C' Call:        RADIO_STATE RadioBlockingTransmit(BYTE retryCt,
 02DB           ;                                                    RADIO_LENGTH len);
 02DB           ;                  (A call to RadioSetPtr must have been made prior to the
 02DB           ;                  call to RadioBlockingTransmit.)
 02DB           ;
 02DB           ; Assembly Call:   A: retryCount
 02DB           ;                  X: length
 02DB           ;                  RadioPtr: Address of packet buffer
 02DB           ;
 02DB           ; Assembly Return: A: RADIO_STATE
 02DB           ;                  X: Undefined
 02DB           ;-----------------------------------------------------------------------------
 02DB           _CYFISNP_BlockingTransmit::
 02DB            CYFISNP_BlockingTransmit::
 02DB 9F59              CALL    CYFISNP_StartTransmit
 02DD           
 02DD 9F91      .Wait:  CALL    CYFISNP_GetTransmitState
 02DF 2103              AND     A, CYFISNP_TXC_IRQ | CYFISNP_TXE_IRQ    ; CDT-15709
 02E1 AFFB              JZ      .Wait
 02E3           
 02E3 8FF3              JMP     CYFISNP_EndTransmit        ; A = RADIO_STATE
 02E5           .endsection
 02E5           
 02E5           
 02E5           ;--------------------------------------------------------------------------;
 02E5           ;                                                                          ;
 02E5           ;                 R E C E I V E                                            ;
 02E5           ;                                                                          ;
 02E5           ;--------------------------------------------------------------------------;
 02E5           .section
 02E5           ;-----------------------------------------------------------------------------
 02E5           ;
 02E5           ; RadioStartReceive:
 02E5           ;                  Start the reception of a packet. The location and length of
 02E5           ;                  the packet buffer to receive the data into must have
 02E5           ;                  previously been set with a call to RadioSetPtr and
 02E5           ;                  RadioSetLength.
 02E5           ;
 02E5           ;                  After starting the reception of a packet with this call,
 02E5           ;                  the state of the receive operation should be checked by
 02E5           ;                  calling RadioGetReceiveState. When RadioGetReceiveState
 02E5           ;                  indicates that the transmission has completed a call
 02E5           ;                  should be made to RadioEndReceive.
 02E5           ;
 02E5           ;                  Receive is started by setting RX_GO" bit. All interesting
 02E5           ;                  interrupt enables are set and RadioGetReceiveState
 02E5           ;                  can be called in a polling loop in systems that do not use
 02E5           ;                  interrupts, or can be called directly in an interrupt
 02E5           ;                  handler.
 02E5           ;
 02E5           ;                  After calling RadioStartReceive NO CALLS can be made to the
 02E5           ;                  configuration access routines until receive operation is
 02E5           ;                  terminated with a call to RadioEndReceive or RadioAbort.
 02E5           ;                  Until a call is made to end the receive operation
 02E5           ;                  the only other calls supported are RadioGetReceiveState and
 02E5           ;                  RadioGetRssi.
 02E5           ;
 02E5           ; 'C' Call:        void RadioStartReceive(void);
 02E5           ;                  (A call to RadioSetPtr must have been made prior to the
 02E5           ;                  call to RadioStartReceive.)
 02E5           ;
 02E5           ; Assembly Call:   A: Unused
 02E5           ;                  X: Unused
 02E5           ;
 02E5           ; Assembly Return: A: Undefined
 02E5           ;                  X: Undefined
 02E5           ;-----------------------------------------------------------------------------
 02E5           _CYFISNP_StartReceive::
 02E5            CYFISNP_StartReceive::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
                  IF (SYSTEM_LARGE_MEMORY_MODEL)
                        MOV     [CYFISNP_WipPtr+1], [CYFISNP_Ptr+1] ; MSByte of pointer
                  ENDIF
 02E5 5F0000            MOV     [CYFISNP_WipPtr+0], [CYFISNP_Ptr+0]
 02E8 5F0000            MOV     [CYFISNP_WipLen],   [CYFISNP_Len]   ; sizeof(RadioPtr)
 02EB 550280            MOV     [CYFISNP_State], CYFISNP_RX
 02EE 550800            MOV     [CYFISNP_BytesRead], 0
 02F1           
 02F1           ; ----------------------------------------------------------------------------
 02F1           ; If Radio's End State (and implied current State) is SLEEP, need:
 02F1           ;       1) Workaround to startup oscillator.
 02F1           ;       2) Workaround to keep awake briefly at end of receive.
 02F1           ; ----------------------------------------------------------------------------
 02F1 9F01              CALL    CYFISNP_SaveAndClearGIE
 02F3 9105              CALL    CYFISNP_Wakeup
 02F5 9EF5              CALL    CYFISNP_RestoreGIE
 02F7           
 02F7 47001C            TST     [CYFISNP_XactConfig], CYFISNP_END_STATE_MSK
 02FA B00D              JNZ     .StayAwakeWhenDone
 02FC           
 02FC                   ; Set the radio end State to IDLE so it has time to clean up at RXE/RXC
 02FC                   ; However, don't change the value of CYFISNP_XactConfig
 02FC 5100              MOV     A, [CYFISNP_XactConfig]
 02FE 5301              MOV     [CYFISNP_RestingState], A       ; Save the desired end state as the resting state since this wasn't done in CYFISNP_Wakeup
 0300 21E3              AND     A, ~CYFISNP_END_STATE_MSK
 0302 2904              OR      A,  CYFISNP_END_STATE_IDLE
 0304 570F              MOV     X, CYFISNP_XACT_CFG_ADR
 0306 9EB6              CALL    CYFISNP_WriteSwapped
 0308           
 0308           .StayAwakeWhenDone:
 0308 5027              MOV     A, CYFISNP_CLK_OVERRIDE_ADR     ;
 030A 5702              MOV     X, CYFISNP_RXF                  ; Keep Rx clock running at RXE/RXC
 030C 9EB1              CALL    CYFISNP_Write              ;
 030E           
 030E 5005              MOV     A, CYFISNP_RX_CTRL_ADR
 0310 5793              MOV     X, (CYFISNP_RX_GO | CYFISNP_RXB8_IRQ | CYFISNP_RXC_IRQ | CYFISNP_RXE_IRQ)
 0312 9EAB              CALL    CYFISNP_Write
 0314           
 0314 5007              MOV     A, CYFISNP_RX_IRQ_STATUS_ADR
 0316 8EAA              JMP     CYFISNP_Read               // Clr SOP detect bit
 0318           .endsection
 0318           
 0318           .section
 0318           ;-----------------------------------------------------------------------------
 0318           ;
 0318           ; RadioGetReceiveState:
 0318           ;                  Returns the state of the current receive operation.
 0318           ;                  This call should be made after RadioStartReceive()
 0318           ;
 0318           ;                  Although  bits in the state register in the hardware clear
 0318           ;                  automatically, we make them sticky until RadioEndReceive.
 0318           ;
 0318           ;  IF USING RadioInterrupt(), DON'T CALL RadioGetReceiveState(),
 0318           ;    READ RadioState DIRECTLY
 0318           ;
 0318           ; 'C' Call:        RADIO_STATE RadioGetReceiveState(void);
 0318           ;
 0318           ; Assembly Call:   A: Unused
 0318           ;                  X: Unused
 0318           ;
 0318           ; Assembly Return: A: State
 0318           ;                  X: Undefined
 0318           ;-----------------------------------------------------------------------------
 0318           _CYFISNP_GetReceiveState::
 0318            CYFISNP_GetReceiveState::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
                  IF CYFISNP_RADIO_INTERRUPT
                        JMP     exitRx                  ; Service by Interrupt only: CDT-15694
                  ELSE
 0318 9EDA              CALL    CYFISNP_SaveAndClearGIE
                  ENDIF
                
 031A           GetRxStatePinTest:
 031A 490840       tst   reg[CYFISNP_IRQ_Addr], CYFISNP_IRQ_MASK
 031D A03C              JZ      exitRx                  ; Nothing interesting, exit
 031F           
 031F           _CYFISNP_GetReceiveStateIsr::
 031F            CYFISNP_GetReceiveStateIsr::                ; Entry via RadioInterrupt() wrapper
 031F 5007              MOV     A, CYFISNP_RX_IRQ_STATUS_ADR
 0321 9000              CALL    CYFISNP_ReadStatusDebouncedRaw
 0323 2C02              OR      [CYFISNP_State], A         ; Make bits sticky
 0325           
 0325                   ; RXBERR and RXE imply RXC, so any of these 3 flags implies there's
 0325                   ;  no rush to unload RFIFO.
 0325 2117              AND     A, (CYFISNP_RXBERR_IRQ | CYFISNP_RXE_IRQ | CYFISNP_RXC_IRQ | CYFISNP_RXB8_IRQ)
 0327 3110              XOR     A, CYFISNP_RXB8_IRQ             ; If more than RXB8_IRQ is SET, then
 0329 B028              JNZ     .rxEnded                ;  Rx ended, RadioEndReceive unloads
 032B           
 032B 5021              MOV     A, CYFISNP_RX_BUFFER_ADR        ; Get RFIFO data on-the-fly
 032D 5708              MOV     X, CYFISNP_FIFO_HALF
 032F 9000              CALL    CYFISNP_FileReadWipRaw
 0331 060808            ADD     [CYFISNP_BytesRead], CYFISNP_FIFO_HALF
 0334           
 0334 5005              MOV     A, CYFISNP_RX_CTRL_ADR          ;
 0336 5710              MOV     X, CYFISNP_RXB8_IRQ             ;
 0338 9000              CALL    CYFISNP_WriteRaw                ; Only expose RXB8
 033A 800A              JMP     .RXB8_tst               ;
 033C           
 033C           .RXB8_set:
 033C 5021              MOV     A, CYFISNP_RX_BUFFER_ADR        ; Only RXB8 is exposed on IRQ
 033E 5708              MOV     X, CYFISNP_FIFO_HALF         ;  so we know least 8 bytes in RFIFO
 0340 9000              CALL    CYFISNP_FileReadWipRaw
 0342 060808            ADD     [CYFISNP_BytesRead], CYFISNP_FIFO_HALF
 0345           .RXB8_tst:
 0345 490840       tst   reg[CYFISNP_IRQ_Addr], CYFISNP_IRQ_MASK
 0348 BFF3              JNZ     .RXB8_set               ; Only RXB8 is exposed on IRQ
 034A           
 034A 5005              MOV     A, CYFISNP_RX_CTRL_ADR          ; Expose RXE and RXC also
 034C 5713              MOV     X, (CYFISNP_RXB8_IRQ | CYFISNP_RXC_IRQ | CYFISNP_RXE_IRQ)
 034E 9000              CALL    CYFISNP_WriteRaw
 0350 8FC9              JMP     GetRxStatePinTest
 0352           
 0352           ;
 0352           ; RXC and/or RXE, RXBERR are set, so radio Rx has ended
 0352           ;
 0352           .rxEnded:
 0352 470205            TST     [CYFISNP_State], (CYFISNP_RXBERR_IRQ | CYFISNP_RXE_IRQ) ; If Error,
 0355 A004              JZ      exitRx                             ;  then set RXC/RXE
 0357 2E0203            OR      [CYFISNP_State], (CYFISNP_RXC_IRQ | CYFISNP_RXE_IRQ)    ;  because radio is done
 035A           
 035A           exitRx:
 035A 5102              MOV     A, [CYFISNP_State]         ;  State calls and return them.
                  IF (CYFISNP_RADIO_INTERRUPT)
                        RET
                  ELSE
 035C 8E8F              JMP     CYFISNP_RestoreGIE
                  ENDIF
                
 035E           .endsection
 035E           
 035E           .section
 035E           ;-----------------------------------------------------------------------------
 035E           ;
 035E           ; RadioEndReceive: Complete a receive operation.
 035E           ;
 035E           ; 'C' Call:        RADIO_LENGTH RadioEndReceive(void);
 035E           ;
 035E           ; Assembly Call:   A: Unused
 035E           ;                  X: Unused
 035E           ;
 035E           ; Assembly Return: A: # of bytes copied to User's Buf
 035E           ;                  X: Undefined
 035E           ;-----------------------------------------------------------------------------
 035E           _CYFISNP_EndReceive::
 035E            CYFISNP_EndReceive::
 035E 5006              MOV     A, CYFISNP_RX_CFG_ADR           ; Read current VLD_EN setting
 0360 9E5F              CALL    CYFISNP_Read                    ; (RadioRead also sets CUR_PP)
 0362 5306              MOV     [CYFISNP_Temp3], A              ;
 0364           
 0364 5009              MOV     A, CYFISNP_RX_COUNT_ADR         ; Total # bytes through RFIFO
 0366 9E59              CALL    CYFISNP_Read                    ; (RadioRead also sets CUR_PP)
 0368 470601            TST     [CYFISNP_Temp3], CYFISNP_VLD_EN
 036B A002              JZ      .S2                                      ; Normal (VLD_EN == 0)
 036D 64                ASL     A                                        ; 2x, every data byte has a valid byte
 036E 5306      .S2:    MOV     [CYFISNP_Temp3], A              ; # Bytes in RFIFO
 0370           
 0370 1208              SUB     A, [CYFISNP_BytesRead]          ; Subtract # bytes we've extracted
 0372                                                                    ;  leaves # bytes sitting in RFIFO
 0372 470201            TST     [CYFISNP_State], CYFISNP_RXE_IRQ   ;
 0375 A003              JZ      .S1                                      ; No error, unload the final byte(s)
 0377 5010              MOV     A, CYFISNP_FIFO_SIZE         ; RXE, purge full RFIFO to recove
 0379           .S1:
 0379 5721              MOV     X, CYFISNP_RX_BUFFER_ADR
 037B 4B                SWAP    A, X
 037C 9E6A              CALL    CYFISNP_FileReadWip             ; Final RFIFO unload
 037E           
 037E                   ; --------------------------------------------------------------------
 037E                   ; If User wanted CYFISNP_END_STATE_SLEEP, then undo
 037E                   ;  CYFISNP_StartReceive()'s intermediate CYFISNP_END_STATE_IDLE override.
 037E                   ; --------------------------------------------------------------------
 037E 47001C            TST     [CYFISNP_XactConfig], CYFISNP_END_STATE_MSK
 0381 B011              JNZ     isAwake                                  ;  then no workaround was invoked.
 0383           
 0383                   ; --------------------------------------------------------------------
 0383                   ; CYFISNP_RxCleanup() - end of CYFISNP_Abort()
 0383                   ; --------------------------------------------------------------------
 0383           CYFISNP_RxCleanup:
 0383 5100              MOV     A, [CYFISNP_XactConfig]    ;
 0385 2920              OR      A, CYFISNP_FRC_END_STATE        ; Force to User's desired end-state
 0387 570F              MOV     X, CYFISNP_XACT_CFG_ADR
 0389 9E33              CALL    CYFISNP_WriteSwapped
 038B 500F      .wait:  MOV     A, CYFISNP_XACT_CFG_ADR         ; Wait for FRC_END_STATE bit in
 038D 9E32              CALL    CYFISNP_Read                    ;  XACT_CFG register to clear
 038F 2120              AND     A, CYFISNP_FRC_END_STATE        ;  indicating the Force End is
 0391 BFF9              JNZ     .wait                                    ;  complete.
 0393                   ; ------------------------------
 0393           
 0393           isAwake:
 0393 5027              MOV     A, CYFISNP_CLK_OVERRIDE_ADR     ; Done receiving, stop forcing the
 0395 5700              MOV     X, 0                    ;  RXF clock.
 0397 9E26              CALL    CYFISNP_Write
 0399           
 0399 5106              MOV     A, [CYFISNP_Temp3]         ; Byte count
 039B 8F3B              JMP     CYFISNP_EndTransmit
 039D           .endsection
 039D           
 039D           
 039D           .section
 039D           ;-----------------------------------------------------------------------------
 039D           ;
 039D           ; RadioAbort:      Abort a receive operation.
 039D           ;
 039D           ; 'C' Call:        RADIO_LENGTH RadioAbort(void);
 039D           ;
 039D           ; Assembly Call:   A: Unused
 039D           ;                  X: Unused
 039D           ;
 039D           ; Assembly Return: A: RADIO_ABORT_SUCCESS or Length of valid Rx packet
 039D           ;                  X: Undefined
 039D           ;-----------------------------------------------------------------------------
 039D           _CYFISNP_Abort::
 039D            CYFISNP_Abort::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
 039D 470280            TST     [CYFISNP_State], CYFISNP_RX  ; This Abort handling is RX specific.
 03A0 A019              JZ      .Abort
 03A2           
 03A2                   ;  Don't issue Force End if receive has started.
 03A2 5720              MOV     X, CYFISNP_ABORT_EN             ; Try to avoid committing to a Receive
 03A4 5029              MOV     A, CYFISNP_RX_ABORT_ADR         ;  packet by invoking Digital Loopback
 03A6 9E17              CALL    CYFISNP_Write              ;
 03A8                   ; ------------------------------
 03A8 5780              MOV     X, 128                   ; Delay to see if SOP arrives
 03AA 79        .L1:    DEC     X       ; 4 cycles      ;
 03AB BFFE              JNZ     .L1     ; 5 cycles      ; (9 * 128) / 12 MHz = 96 uS
 03AD                   ; ------------------------------
 03AD 5007              MOV     A, CYFISNP_RX_IRQ_STATUS_ADR    ; See if Rx packet has started
 03AF 9E16              CALL    CYFISNP_ReadStatusDebounced;
 03B1 2C02              OR      [CYFISNP_State], A         ; Make bits sticky
 03B3 470240            TST     [CYFISNP_State], CYFISNP_SOPDET_IRQ
 03B6 B007              JNZ     .RxOk                   ; Rx packet has started, finish it
 03B8 9FC9              CALL    CYFISNP_RxCleanup          ; Rx packet blocked, issue FORCE_END
 03BA           
 03BA 50FF      .Abort: MOV     A, CYFISNP_ABORT_SUCCESS
 03BC 8015              JMP     .AbortExit
 03BE           
 03BE           ; ----------------------------------------------------------------------------
 03BE           ; Receiving a packet, allow to finish naturally.
 03BE           ; Probably has errors (RXE) because we activated Digital Loopback,
 03BE           ;  but if Loopback activated during AutoAck, we'll have a valid packet
 03BE           ;  (which was AutoAcked, so we'd better not discard it!).
 03BE           ; ----------------------------------------------------------------------------
 03BE 9F58      .RxOk:  CALL    CYFISNP_GetReceiveState    ; Keep servicing receiver
 03C0 470203            TST     [CYFISNP_State], CYFISNP_RXE_IRQ | CYFISNP_RXC_IRQ
 03C3 AFFA              JZ      .RxOk
 03C5           
 03C5 470201            TST     [CYFISNP_State], CYFISNP_RXE_IRQ   ; CDT 16852
 03C8 B005              JNZ     .rxe                    ; Rx packet was BAD
 03CA 9F92      .rxc:   CALL    CYFISNP_EndReceive         ; Rx packet was Good
 03CC 8005              JMP     .AbortExit              ; Exit w/Acc = # bytes loaded
 03CE           
 03CE 9F8E      .rxe:   CALL    CYFISNP_EndReceive
 03D0 50FF              MOV     A, CYFISNP_ABORT_SUCCESS  ; Exit w/Acc = ABORT SUCCESS
 03D2           
 03D2           .AbortExit:
 03D2 08                PUSH    A
 03D3 5700              MOV     X, 0
 03D5 5029              MOV     A, CYFISNP_RX_ABORT_ADR        ; Remove digital Loopback
 03D7 9DE6              CALL    CYFISNP_Write
 03D9 18                POP     A
 03DA 7F                RET
 03DB           .endsection
 03DB           
 03DB           
 03DB           .section
 03DB           ;-----------------------------------------------------------------------------
 03DB           ;
 03DB           ; RadioGetReceiveStatus:
 03DB           ;                  Returns the receiver status register.
 03DB           ;
 03DB           ; 'C' Call:        RADIO_RX_STATUS RadioGetReceiveStatus(void);
 03DB           ;
 03DB           ; Assembly Call:   A: Unused
 03DB           ;                  X: Unused
 03DB           ;
 03DB           ; Assembly Return: A: Status
 03DB           ;                  X: Undefined
 03DB           ;-----------------------------------------------------------------------------
 03DB           _CYFISNP_GetReceiveStatus::
 03DB            CYFISNP_GetReceiveStatus::
 03DB 5008              MOV     A, CYFISNP_RX_STATUS_ADR
 03DD 8DE3              JMP     CYFISNP_Read                        ; This JMP saves 14 CPU clock cycles over a CALL.
 03DF                                                                        ; (6 for the difference between JMP and CALL, and 8 for one less RET to execute.)
 03DF                                                                        ; It also saves 1 byte of ROM.
 03DF           .endsection
 03DF           
 03DF           
 03DF           .section
 03DF           ;-----------------------------------------------------------------------------
 03DF           ;
 03DF           ; RadioForceState:  Force radio to desired state NOW.
 03DF           ;                   Updates global RadioXacConfig shadow variable.
 03DF           ;                   Sometimes used to wake/sleep radio to measure voltage.
 03DF           ;
 03DF           ;  We must ensure SLEEP only transitions to IDLE (and recovers if problem).
 03DF           ;  RadioForceState(END_STATE_IDLE) MUST be called prior to TX_GO or RX_GO
 03DF           ;   whenever radio may be in SLEEP.
 03DF           ;
 03DF           ; 'C' Call:        void RadioForceState(XACT_CONFIG endStateBitsOnly);
 03DF           ;
 03DF           ; Assembly Call:   A: RadioXactConfig END_STATE bits only, no ACK_EN, ACK_TO
 03DF           ;                  X: Undefined
 03DF           ;
 03DF           ; Assembly Return: A,X: Undefined
 03DF           ;
 03DF           ; Side Effects:
 03DF           ; 1. Modifies the CYFISNP_XactConfig global variable.
 03DF           ;
 03DF           ; Assumptions:
 03DF           ; 1. CYFISNP_RestingState contains the new state after the call to
 03DF           ;    CYFISNP_ChangeState.  Furthermore, all non-state field bits
 03DF           ;    in CYFISNP_RestingState are cleared on return from
 03DF           ;    CYFISNP_ChangeState.
 03DF           ;-----------------------------------------------------------------------------
 03DF           _CYFISNP_ForceState::
 03DF            CYFISNP_ForceState::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
                
 03DF 9E13              CALL    CYFISNP_SaveAndClearGIE
 03E1           
 03E1 08                PUSH    A                                                                ; Save target state
 03E2 9016              CALL    CYFISNP_Wakeup
 03E4 18                POP     A                                                                ; Restore target state
 03E5           
 03E5 901A              CALL    CYFISNP_ChangeState                                     ; Set the new state
 03E7           
 03E7 5101              MOV     A, [CYFISNP_RestingState]                               ; Obtain the new state that was stored by CYFISNP_ChangeState
 03E9 2600E3            AND     [CYFISNP_XactConfig], ~CYFISNP_END_STATE_MSK
 03EC 2C00              OR      [CYFISNP_XactConfig], A                                 ; Save the new state in CYFISNP_XactConfig
 03EE           
 03EE 8DFD              JMP     CYFISNP_RestoreGIE                                      ; This JMP saves 14 CPU clock cycles over a CALL.
 03F0                                                                                            ; (6 for difference between JMP and CALL, and 8 for one less RET to execute.)
 03F0                                                                                            ; It also saves 1 byte of ROM.
 03F0           
 03F0           
 03F0           ; END OF CYFISNP_ForceState
 03F0           
 03F0           
 03F0           ; ----------------------------------------------------------------------------
 03F0           ; CYFISNP_WakeupForXact - Wake up the radio.  Then restore the
 03F0           ;       end state.
 03F0           ;
 03F0           ; CYFISNP_RestoreXactConfig - Restore the end state currently held
 03F0           ;       in CYFISNP_XactConfig
 03F0           ;
 03F0           ; Assembly Call (both functions):   A: Unused
 03F0           ;                                   X: Unused
 03F0           ;
 03F0           ; Return Value
 03F0           ;    None
 03F0           ;
 03F0           ; Side Effects:
 03F0           ; 1. Modifies the CYFISNP_RestingState global variable.
 03F0           ;
 03F0           ; Notes:
 03F0           ; 1. The Force End State bit of CYFISNP_RestingState is always
 03F0           ;    cleared on exit from this function.  All other bits are set equal to
 03F0           ;    the values of their corresponding bits in CYFISNP_XactConfig.
 03F0           ; 2. This routine cannot be safely executed with interrupts enabled.
 03F0           ; ----------------------------------------------------------------------------
 03F0           CYFISNP_WakeupForXact:
 03F0 9008              CALL     CYFISNP_Wakeup
 03F2           
 03F2           CYFISNP_RestoreXactConfig:
 03F2                   ; Restore the unforced END state to its originally desired value from CYFISNP_XactConfig
 03F2 5100              MOV     A, [CYFISNP_XactConfig]
 03F4 21DF              AND     A, ~CYFISNP_FRC_END_STATE           ; Clear the force state bit
 03F6 5301              MOV     [CYFISNP_RestingState], A           ; Save the new resting state.
 03F8           
 03F8 802E              JMP     CYFISNP_WriteXactConfigRegUnsafe    ; This JMP saves 14 CPU clock cycles over a CALL.
 03FA                                                                        ; (6 for difference between JMP and CALL, and 8 for one less RET to execute.)
 03FA                                                                        ; It also saves 1 byte of ROM.
 03FA           
 03FA           
 03FA           ; ----------------------------------------------------------------------------
 03FA           ; CYFISNP_Wakeup - If radio is in SLEEP, wake it up.
 03FA           ;
 03FA           ; Assembly Call:   A: Unused
 03FA           ;                  X: Unused
 03FA           ;
 03FA           ; CYFISNP_ChangeState
 03FA           ;               Does the actual changing of radio state.
 03FA           ;
 03FA           ; Assembly Call:   A: State to change to.
 03FA           ;                  X: Unused
 03FA           ;
 03FA           ; Return Value
 03FA           ;    None
 03FA           ;
 03FA           ; Side Effects
 03FA           ; 1. Modifies the CYFISNP_Scratch0 global variable.
 03FA           ;
 03FA           ; Notes
 03FA           ; 1. Both these routines share the CYFISNP_return label.
 03FA           ; 2. These routines cannot be safely executed with interrupts enabled.
 03FA           ; ----------------------------------------------------------------------------
 03FA           CYFISNP_Wakeup:
 03FA 47011C            TST     [CYFISNP_RestingState], CYFISNP_END_STATE_MSK
 03FD B01C              JNZ     CYFISNP_return                     ; Skip this routine if the radio is awake.
 03FF           
 03FF                   ; Force the radio from SLEEP to IDLE
 03FF 5004              MOV     A, CYFISNP_END_STATE_IDLE
 0401           
 0401                   ; Fall through to CYFISNP_ChangeState
 0401           
 0401           CYFISNP_ChangeState:
 0401 9018              CALL    CYFISNP_WriteForcedState           ;
 0403 550A00            MOV     [CYFISNP_Scratch0], 0              ; Initialize 256 iteration timeout counter
 0406           .wait5:
 0406 500F              MOV     A, CYFISNP_XACT_CFG_ADR            ;
 0408 9000              CALL    CYFISNP_ReadRaw                    ;
 040A 2120              AND     A, CYFISNP_FRC_END_STATE           ;
 040C A00D              JZ     CYFISNP_return                      ; Wait for Force End State completion
 040E 7A0A              DEC     [CYFISNP_Scratch0]
 0410 BFF5              JNZ     .wait5                                      ; Check for timeout.  Timeout possible ONLY when going SLEEP to IDLE
 0412           
 0412                   ; Timeout occurred.  Retry going back to sleep and transitioning to idle.  This time, assume success.
 0412 5000              MOV     A, CYFISNP_END_STATE_SLEEP
 0414 9005              CALL    CYFISNP_WriteForcedState
 0416 5004              MOV     A, CYFISNP_END_STATE_IDLE
 0418 8002              JMP     CYFISNP_WriteForcedState           ; This JMP saves 14 CPU clock cycles over a CALL.
 041A                                                                       ; (6 for the difference between JMP and CALL, and 8 for one less RET to execute.)
 041A           CYFISNP_return:
 041A 7F                RET
 041B           
 041B           ; END OF CYFISNP_WakeupForXact, CYFISNP_RestoreXactConfig, CYFISNP_Wakeup, & CYFISNP_ChangeState.
 041B           
 041B           
 041B           ;-----------------------------------------------------------------------------
 041B           ; @INSTANCE_NAME_WriteForcedState
 041B           ;    Merges existing ACK_EN, ACK_TO bits from CYFISNP_XactConfig
 041B           ;    with end state bits in A.  Sets the force end state bit and passes A on
 041B           ;    to CYFISNP_WriteXactConfigRegUnsafe.
 041B           ;
 041B           ; Return Value
 041B           ;    None
 041B           ;
 041B           ; Assembly Call:   A: State to write
 041B           ;                  X: Unused
 041B           ;
 041B           ; Side Effects
 041B           ; 1. Modifies the CYFISNP_RestingState global variable.
 041B           ;
 041B           ; Notes
 041B           ; 1. This routine cannot be safely executed with interrupts enabled.
 041B           ; 2. All bits of CYFISNP_RestingState that do not correspond to the
 041B           ;    state field of XACT_CONFIG_ADDR are cleared on exit.
 041B           ;-----------------------------------------------------------------------------
 041B           CYFISNP_WriteForcedState:
 041B                   ; Save the new state in CYFISNP_RestingState and combine the new state with
 041B                   ; the existing ACK_EN and ACK_TO bits from CYFISNP_XactConfig.
 041B 211C              AND     A, CYFISNP_END_STATE_MSK            ; Clear non-state field bits.
 041D 5301              MOV     [CYFISNP_RestingState], A           ; Save the new state in CYFISNP_RestingState
 041F 5100              MOV     A, [CYFISNP_XactConfig]             ; Copy CYFISNP_XactConfig into A for further manipulation (to preserve CYFISNP_XactConfig's contents)
 0421 21E3              AND     A, ~CYFISNP_END_STATE_MSK           ; Clear the old state field
 0423 2A01              OR      A, [CYFISNP_RestingState]           ; Copy the new state field into A
 0425 2920              OR      A, CYFISNP_FRC_END_STATE            ; Set the Force State bit
 0427           
 0427                   ; Allow execution to fall through to CYFISNP_WriteXactConfigRegUnsafe.
 0427                   ; This saves 19 CPU clock cycles and 3 bytes of ROM that using a CALL followed by a RET would have incurred.
 0427           
 0427           ;-----------------------------------------------------------------------------
 0427           ; CYFISNP_WriteXactConfigRegUnsafe
 0427           ;    Sends a transaction configuration to the radio.
 0427           ;
 0427           ; Return Value
 0427           ;    None
 0427           ;
 0427           ; Assembly Call:   A: Value to write to the register.
 0427           ;                  X: Unused
 0427           ; Notes
 0427           ; 1. This routine cannot be safely executed with interrupts enabled.
 0427           ;-----------------------------------------------------------------------------
 0427           
 0427           CYFISNP_WriteXactConfigRegUnsafe:
 0427 570F              MOV     X, CYFISNP_XACT_CFG_ADR
 0429 8000              JMP     CYFISNP_WriteSwappedRaw             ; This JMP saves 14 CPU clock cycles over a CALL.
 042B                                                                        ; (6 for the difference between JMP and CALL, and 8 for one less RET to execute.)
 042B                                                                        ; It also saves 1 byte of ROM.
 042B           
 042B           ; END OF CYFISNP_WriteForcedState & CYFISNP_WriteXactConfigRegUnsafe
 042B           
 042B           
 042B           .endsection
 042B           
 042B           
 042B           .section
 042B           ;-----------------------------------------------------------------------------
 042B           ;
 042B           ; RadioGetRssi:    Returns the receiver signal strength indicator.
 042B           ;
 042B           ; 'C' Call:        RADIO_RSSI RadioGetRssi(void);
 042B           ;
 042B           ; Assembly Call:   A: Unused
 042B           ;                  X: Unused
 042B           ;
 042B           ; Assembly Return: A: Rssi
 042B           ;                  X: Undefined
 042B           ;-----------------------------------------------------------------------------
 042B           _CYFISNP_GetRssi::
 042B            CYFISNP_GetRssi::
 042B 5013              MOV     A, CYFISNP_RSSI_ADR
 042D 8D93              JMP     CYFISNP_Read                        ; This JMP saves 14 CPU clock cycles over a CALL.
 042F                                                                        ; (6 for the difference between JMP and CALL, and 8 for one less RET to execute.)
 042F                                                                        ; It also saves 1 byte of ROM.
 042F           .endsection
 042F           
 042F 3800          add  SP, 0
 0431           ; ############################################################################
 0431           ; END OF CYFISNP.asm
 0431           ; ############################################################################
 0431           
