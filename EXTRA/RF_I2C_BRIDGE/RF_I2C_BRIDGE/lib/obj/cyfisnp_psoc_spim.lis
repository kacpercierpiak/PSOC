 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           ;;  FILENAME: CYFISNP_PSoC_SPIm.asm
 0000           ;;  Version: 2.00, Updated on 2015/3/4 at 22:21:20
 0000           ;;  Generated by PSoC Designer 5.4.3191
 0000           ;;
 0000           ;;  DESCRIPTION: CYFISPI PSoC-specific SPI routines
 0000           ;;-----------------------------------------------------------------------------
 0000           ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           
 0000           ;--------------------------------------------------------------------------;
 0000           ;                                                                          ;
 0000           ;                      I N C L U D E   F I L E S                           ;
 0000           ;                                                                          ;
 0000           ;--------------------------------------------------------------------------;
 0000           
 0010           FLAG_XIO_MASK:  equ 10h
 0008           FLAG_SUPER:     equ 08h
 0004           FLAG_CARRY:     equ 04h
 0002           FLAG_ZERO:      equ 02h
 0001           FLAG_GLOBAL_IE: equ 01h
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           ; Port 4
 0010           PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
 0011           PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
 0012           PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
 0013           PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
 0000           ; Port 5
 0014           PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
 0015           PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
 0016           PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
 0017           PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10DR0:     equ 30h          ; data register 0                          (#)
 0031           DBB10DR1:     equ 31h          ; data register 1                          (W)
 0032           DBB10DR2:     equ 32h          ; data register 2                          (RW)
 0033           DBB10CR0:     equ 33h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11DR0:     equ 34h          ; data register 0                          (#)
 0035           DBB11DR1:     equ 35h          ; data register 1                          (W)
 0036           DBB11DR2:     equ 36h          ; data register 2                          (RW)
 0037           DBB11CR0:     equ 37h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12DR0:     equ 38h          ; data register 0                          (#)
 0039           DCB12DR1:     equ 39h          ; data register 1                          (W)
 003A           DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
 003B           DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13DR0:     equ 3Ch          ; data register 0                          (#)
 003D           DCB13DR1:     equ 3Dh          ; data register 1                          (W)
 003E           DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
 003F           DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Resource Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 00C0           AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
 0030           AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
 0040           ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
 0038           ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
 0007           ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
 0004           ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
 0003           ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
 0080           CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
 0040           CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0008           CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
 0004           CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0065           ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
 0070           ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
 0008           ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
 0006           ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
 0001           ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0080           CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
 0040           CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
 0020           CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
 0010           CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
 0000           
 0000           ;---------------------------------------------------
 0000           ;  Analog PSoC block Registers
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;---------------------------------------------------
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 0
 0070           ACB00CR3:     equ 70h          ; Control register 3                       (RW)
 0071           ACB00CR0:     equ 71h          ; Control register 0                       (RW)
 0072           ACB00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACB00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 1
 0074           ACB01CR3:     equ 74h          ; Control register 3                       (RW)
 0075           ACB01CR0:     equ 75h          ; Control register 0                       (RW)
 0076           ACB01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACB01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 2
 0078           ACB02CR3:     equ 78h          ; Control register 3                       (RW)
 0079           ACB02CR0:     equ 79h          ; Control register 0                       (RW)
 007A           ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
 007B           ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 3
 007C           ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
 007D           ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
 007E           ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
 007F           ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 0
 0080           ASC10CR0:     equ 80h          ; Control register 0                       (RW)
 0081           ASC10CR1:     equ 81h          ; Control register 1                       (RW)
 0082           ASC10CR2:     equ 82h          ; Control register 2                       (RW)
 0083           ASC10CR3:     equ 83h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 1
 0084           ASD11CR0:     equ 84h          ; Control register 0                       (RW)
 0085           ASD11CR1:     equ 85h          ; Control register 1                       (RW)
 0086           ASD11CR2:     equ 86h          ; Control register 2                       (RW)
 0087           ASD11CR3:     equ 87h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 2
 0088           ASC12CR0:     equ 88h          ; Control register 0                       (RW)
 0089           ASC12CR1:     equ 89h          ; Control register 1                       (RW)
 008A           ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
 008B           ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 3
 008C           ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
 008D           ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
 008E           ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
 008F           ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 0
 0090           ASD20CR0:     equ 90h          ; Control register 0                       (RW)
 0091           ASD20CR1:     equ 91h          ; Control register 1                       (RW)
 0092           ASD20CR2:     equ 92h          ; Control register 2                       (RW)
 0093           ASD20CR3:     equ 93h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 1
 0094           ASC21CR0:     equ 94h          ; Control register 0                       (RW)
 0095           ASC21CR1:     equ 95h          ; Control register 1                       (RW)
 0096           ASC21CR2:     equ 96h          ; Control register 2                       (RW)
 0097           ASC21CR3:     equ 97h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 2
 0098           ASD22CR0:     equ 98h          ; Control register 0                       (RW)
 0099           ASD22CR1:     equ 99h          ; Control register 1                       (RW)
 009A           ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
 009B           ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 3
 009C           ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
 009D           ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
 009E           ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
 009F           ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 00B8           RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
 00B9           RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
 00BA           RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
 00BB           RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
 00BC           RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
 00BD           RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
 00BE           RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0010           INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
 0008           INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
 0040           INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
 0020           INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
 0010           INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Registers
 00E4           DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
 00E5           DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ; Multiplier and MAC (Multiply/Accumulate) Unit
 00E8           MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
 00E9           MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
 00EA           MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
 00EB           MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
 00EC           MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
 00EC           ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
 00ED           MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
 00ED           ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
 00EE           MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
 00EE           ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
 00EF           MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
 00EF           ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 4
 0010           PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
 0011           PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
 0012           PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
 0013           PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 5
 0014           PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
 0015           PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
 0016           PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
 0017           PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10FN:      equ 30h          ; Function Register                        (RW)
 0031           DBB10IN:      equ 31h          ;    Input Register                        (RW)
 0032           DBB10OU:      equ 32h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11FN:      equ 34h          ; Function Register                        (RW)
 0035           DBB11IN:      equ 35h          ;    Input Register                        (RW)
 0036           DBB11OU:      equ 36h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12FN:      equ 38h          ; Function Register                        (RW)
 0039           DCB12IN:      equ 39h          ;    Input Register                        (RW)
 003A           DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13FN:      equ 3Ch          ; Function Register                        (RW)
 003D           DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
 003E           DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 00C0           CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
 0030           CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0040           CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
 0038           CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
 0007           CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0040           ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
 0020           ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
 0010           ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
 0008           ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
 0004           ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
 0002           ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
 0001           ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 0070           AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
 0007           AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 0070           AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
 0007           AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 0068           ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
 00F0           ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
 000F           ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
 0000           
 0069           CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
 0008           CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
 0001           CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
 0010           VLT_CR_4V5_POR:       equ 10h    ;    deprecated
 0020           VLT_CR_4V75_POR:      equ 20h    ;    deprecated
 0030           VLT_CR_DISABLE:       equ 30h    ;    deprecated
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Stall
 0000               or    reg[ASY_CR], ASY_CR_SYNCEN
 0000               macro M8C_Unstall
 0000               and   reg[ASY_CR], ~ASY_CR_SYNCEN
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0000           SYSTEM_STACK_PAGE: equ 0   
 0000           SYSTEM_STACK_BASE_ADDR: equ 0h   
 0000           SYSTEM_LARGE_MEMORY_MODEL: equ 0   
 0001           SYSTEM_SMALL_MEMORY_MODEL: equ 1   
 0001           IMAGECRAFT: equ 1   
 0002           HITECH: equ 2   
 0001           TOOLCHAIN: equ IMAGECRAFT   
 0001           SYSTEM_TOOLS: equ 1   
 0001           SYSTEM_IDXPG_TRACKS_STK_PP: equ 1   
 0000           SYSTEM_IDXPG_TRACKS_IDX_PP: equ 0   
 0000           SYSTEM_MULTIPAGE_STACK: equ 0 
 0000           
 0000           
 0000           ;  ******* Function Class Definitions *******
 0000           ;
 0000           ;  These definitions are used to describe RAM access patterns. They provide
 0000           ;  documentation and they control prologue and epilogue macros that perform
 0000           ;  the necessary housekeeping functions for large memory model devices like
 0000           ;  the CY8C27000.
 0000           
 0001           RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
 0002           RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
 0004           RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
 0008           RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
 0000           
 0000           ; ******* Hi Tech Specific *******
 0000           ; Turn on the expansion of all macros by default
                IF (TOOLCHAIN & HITECH)
                OPT EXPAND
                ENDIF
                ;  ******* Page Pointer Manipulation Macros *******
                ;
                ;  Most of the following macros are conditionally compiled so they only
                ;  produce code if the large memory model is selected.
                
                   ;-----------------------------------------------
                   ;  Set Stack Page Macro
                   ;-----------------------------------------------
                   ;
                   ;  DESC: Modify STK_PP in the large or small memory Models.
                   ;
                   ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
                   ;        which stack operations like PUSH and POP store and retrieve their
                   ;        data
                   ;
                   ;  COST: 8 instruction cycles (in LMM only)
                
 0000              macro RAM_SETPAGE_STK( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[STK_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_CUR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[CUR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[IDX_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVW( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVW_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX2STK
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 IF ( SYSTEM_MULTIPAGE_STACK )
 0000                    mov   A, reg[STK_PP]
 0000                    mov   reg[IDX_PP], A
 0000                 ELSE
 0000                    RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
 0000                 ENDIF
 0000              ENDIF
 0000              macro RAM_CHANGE_PAGE_MODE( MODE )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0000                 or    F,  FLAG_PGMODE_MASK & @MODE
 0000              ENDIF
 0000              macro RAM_SET_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_RESTORE_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_STACKPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 or   F, FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_INDEXPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and  F, ~FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_PROLOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                    RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                    RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro RAM_EPILOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro REG_PRESERVE( IOReg )
 0000              mov   A, reg[ @IOReg ]
 0000              push  A
 0000              macro REG_RESTORE( IOReg )
 0000              pop   A
 0000              mov   reg[ @IOReg ], A
 0000              macro ISR_PRESERVE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_PRESERVE CUR_PP
 0000                 REG_PRESERVE IDX_PP
 0000                 REG_PRESERVE MVR_PP
 0000                 REG_PRESERVE MVW_PP
 0000              ENDIF
 0000              macro ISR_RESTORE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_RESTORE MVW_PP
 0000                 REG_RESTORE MVR_PP
 0000                 REG_RESTORE IDX_PP
 0000                 REG_RESTORE CUR_PP
 0000              ENDIF
 0000           macro PRESERVE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_PRESERVE_PAGE_POINTERS
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             MOV A, [__r0]
 0000             PUSH A
 0000             MOV A, [__r1]
 0000             PUSH A
 0000             MOV A, [__r2]
 0000             PUSH A
 0000             MOV A, [__r3]
 0000             PUSH A
 0000             MOV A, [__r4]
 0000             PUSH A
 0000             MOV A, [__r5]
 0000             PUSH A
 0000             MOV A, [__r6]
 0000             PUSH A
 0000             MOV A, [__r7]
 0000             PUSH A
 0000             MOV A, [__r8]
 0000             PUSH A
 0000             MOV A, [__r9]
 0000             PUSH A
 0000             MOV A, [__r10]
 0000             PUSH A
 0000             MOV A, [__r11]
 0000             PUSH A
 0000             MOV A, [__rX]
 0000             PUSH A
 0000             MOV A, [__rY]
 0000             PUSH A
 0000             MOV A, [__rZ]
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               MOV REG[CUR_PP], 0
 0000             ENDIF
 0000           ENDIF
 0000           macro RESTORE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             POP A
 0000             MOV [__rZ], A
 0000             POP A
 0000             MOV [__rY], A
 0000             POP A
 0000             MOV [__rX], A
 0000             POP A
 0000             MOV [__r11], A
 0000             POP A
 0000             MOV [__r10], A
 0000             POP A
 0000             MOV [__r9], A
 0000             POP A
 0000             MOV [__r8], A
 0000             POP A
 0000             MOV [__r7], A
 0000             POP A
 0000             MOV [__r6], A
 0000             POP A
 0000             MOV [__r5], A
 0000             POP A
 0000             MOV [__r4], A
 0000             POP A
 0000             MOV [__r3], A
 0000             POP A
 0000             MOV [__r2], A
 0000             POP A
 0000             MOV [__r1], A
 0000             POP A
 0000             MOV [__r0], A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_RESTORE_PAGE_POINTERS
 0000               AND F, FLAG_PGMODE_0
 0000             ENDIF
 0000             POP A
 0000           ENDIF
 0010           FLAG_XIO_MASK:  equ 10h
 0008           FLAG_SUPER:     equ 08h
 0004           FLAG_CARRY:     equ 04h
 0002           FLAG_ZERO:      equ 02h
 0001           FLAG_GLOBAL_IE: equ 01h
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           ; Port 4
 0010           PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
 0011           PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
 0012           PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
 0013           PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
 0000           ; Port 5
 0014           PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
 0015           PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
 0016           PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
 0017           PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10DR0:     equ 30h          ; data register 0                          (#)
 0031           DBB10DR1:     equ 31h          ; data register 1                          (W)
 0032           DBB10DR2:     equ 32h          ; data register 2                          (RW)
 0033           DBB10CR0:     equ 33h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11DR0:     equ 34h          ; data register 0                          (#)
 0035           DBB11DR1:     equ 35h          ; data register 1                          (W)
 0036           DBB11DR2:     equ 36h          ; data register 2                          (RW)
 0037           DBB11CR0:     equ 37h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12DR0:     equ 38h          ; data register 0                          (#)
 0039           DCB12DR1:     equ 39h          ; data register 1                          (W)
 003A           DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
 003B           DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13DR0:     equ 3Ch          ; data register 0                          (#)
 003D           DCB13DR1:     equ 3Dh          ; data register 1                          (W)
 003E           DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
 003F           DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Resource Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 00C0           AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
 0030           AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
 0040           ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
 0038           ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
 0007           ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
 0004           ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
 0003           ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
 0080           CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
 0040           CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0008           CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
 0004           CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0065           ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
 0070           ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
 0008           ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
 0006           ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
 0001           ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0080           CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
 0040           CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
 0020           CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
 0010           CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
 0000           
 0000           ;---------------------------------------------------
 0000           ;  Analog PSoC block Registers
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;---------------------------------------------------
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 0
 0070           ACB00CR3:     equ 70h          ; Control register 3                       (RW)
 0071           ACB00CR0:     equ 71h          ; Control register 0                       (RW)
 0072           ACB00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACB00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 1
 0074           ACB01CR3:     equ 74h          ; Control register 3                       (RW)
 0075           ACB01CR0:     equ 75h          ; Control register 0                       (RW)
 0076           ACB01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACB01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 2
 0078           ACB02CR3:     equ 78h          ; Control register 3                       (RW)
 0079           ACB02CR0:     equ 79h          ; Control register 0                       (RW)
 007A           ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
 007B           ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 3
 007C           ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
 007D           ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
 007E           ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
 007F           ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 0
 0080           ASC10CR0:     equ 80h          ; Control register 0                       (RW)
 0081           ASC10CR1:     equ 81h          ; Control register 1                       (RW)
 0082           ASC10CR2:     equ 82h          ; Control register 2                       (RW)
 0083           ASC10CR3:     equ 83h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 1
 0084           ASD11CR0:     equ 84h          ; Control register 0                       (RW)
 0085           ASD11CR1:     equ 85h          ; Control register 1                       (RW)
 0086           ASD11CR2:     equ 86h          ; Control register 2                       (RW)
 0087           ASD11CR3:     equ 87h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 2
 0088           ASC12CR0:     equ 88h          ; Control register 0                       (RW)
 0089           ASC12CR1:     equ 89h          ; Control register 1                       (RW)
 008A           ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
 008B           ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 3
 008C           ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
 008D           ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
 008E           ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
 008F           ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 0
 0090           ASD20CR0:     equ 90h          ; Control register 0                       (RW)
 0091           ASD20CR1:     equ 91h          ; Control register 1                       (RW)
 0092           ASD20CR2:     equ 92h          ; Control register 2                       (RW)
 0093           ASD20CR3:     equ 93h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 1
 0094           ASC21CR0:     equ 94h          ; Control register 0                       (RW)
 0095           ASC21CR1:     equ 95h          ; Control register 1                       (RW)
 0096           ASC21CR2:     equ 96h          ; Control register 2                       (RW)
 0097           ASC21CR3:     equ 97h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 2
 0098           ASD22CR0:     equ 98h          ; Control register 0                       (RW)
 0099           ASD22CR1:     equ 99h          ; Control register 1                       (RW)
 009A           ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
 009B           ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 3
 009C           ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
 009D           ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
 009E           ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
 009F           ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 00B8           RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
 00B9           RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
 00BA           RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
 00BB           RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
 00BC           RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
 00BD           RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
 00BE           RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0010           INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
 0008           INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
 0040           INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
 0020           INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
 0010           INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Registers
 00E4           DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
 00E5           DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ; Multiplier and MAC (Multiply/Accumulate) Unit
 00E8           MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
 00E9           MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
 00EA           MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
 00EB           MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
 00EC           MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
 00EC           ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
 00ED           MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
 00ED           ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
 00EE           MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
 00EE           ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
 00EF           MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
 00EF           ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 4
 0010           PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
 0011           PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
 0012           PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
 0013           PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 5
 0014           PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
 0015           PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
 0016           PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
 0017           PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10FN:      equ 30h          ; Function Register                        (RW)
 0031           DBB10IN:      equ 31h          ;    Input Register                        (RW)
 0032           DBB10OU:      equ 32h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11FN:      equ 34h          ; Function Register                        (RW)
 0035           DBB11IN:      equ 35h          ;    Input Register                        (RW)
 0036           DBB11OU:      equ 36h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12FN:      equ 38h          ; Function Register                        (RW)
 0039           DCB12IN:      equ 39h          ;    Input Register                        (RW)
 003A           DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13FN:      equ 3Ch          ; Function Register                        (RW)
 003D           DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
 003E           DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 00C0           CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
 0030           CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0040           CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
 0038           CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
 0007           CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0040           ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
 0020           ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
 0010           ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
 0008           ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
 0004           ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
 0002           ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
 0001           ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 0070           AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
 0007           AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 0070           AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
 0007           AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 0068           ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
 00F0           ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
 000F           ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
 0000           
 0069           CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
 0008           CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
 0001           CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
 0010           VLT_CR_4V5_POR:       equ 10h    ;    deprecated
 0020           VLT_CR_4V75_POR:      equ 20h    ;    deprecated
 0030           VLT_CR_DISABLE:       equ 30h    ;    deprecated
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Stall
 0000               or    reg[ASY_CR], ASY_CR_SYNCEN
 0000               macro M8C_Unstall
 0000               and   reg[ASY_CR], ~ASY_CR_SYNCEN
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0000           ChipSelect_Data_ADDR:	equ	0h
 0100           ChipSelect_DriveMode_0_ADDR:	equ	100h
 0101           ChipSelect_DriveMode_1_ADDR:	equ	101h
 0003           ChipSelect_DriveMode_2_ADDR:	equ	3h
 0002           ChipSelect_GlobalSelect_ADDR:	equ	2h
 0102           ChipSelect_IntCtrl_0_ADDR:	equ	102h
 0103           ChipSelect_IntCtrl_1_ADDR:	equ	103h
 0001           ChipSelect_IntEn_ADDR:	equ	1h
 0004           ChipSelect_MASK:	equ	4h
 0000           ; DataReady address and mask equates
 0000           DataReady_Data_ADDR:	equ	0h
 0100           DataReady_DriveMode_0_ADDR:	equ	100h
 0101           DataReady_DriveMode_1_ADDR:	equ	101h
 0003           DataReady_DriveMode_2_ADDR:	equ	3h
 0002           DataReady_GlobalSelect_ADDR:	equ	2h
 0102           DataReady_IntCtrl_0_ADDR:	equ	102h
 0103           DataReady_IntCtrl_1_ADDR:	equ	103h
 0001           DataReady_IntEn_ADDR:	equ	1h
 0008           DataReady_MASK:	equ	8h
 0000           ; RedLED address and mask equates
 0004           RedLED_Data_ADDR:	equ	4h
 0104           RedLED_DriveMode_0_ADDR:	equ	104h
 0105           RedLED_DriveMode_1_ADDR:	equ	105h
 0007           RedLED_DriveMode_2_ADDR:	equ	7h
 0006           RedLED_GlobalSelect_ADDR:	equ	6h
 0106           RedLED_IntCtrl_0_ADDR:	equ	106h
 0107           RedLED_IntCtrl_1_ADDR:	equ	107h
 0005           RedLED_IntEn_ADDR:	equ	5h
 0004           RedLED_MASK:	equ	4h
 0000           ; GreenLED address and mask equates
 0004           GreenLED_Data_ADDR:	equ	4h
 0104           GreenLED_DriveMode_0_ADDR:	equ	104h
 0105           GreenLED_DriveMode_1_ADDR:	equ	105h
 0007           GreenLED_DriveMode_2_ADDR:	equ	7h
 0006           GreenLED_GlobalSelect_ADDR:	equ	6h
 0106           GreenLED_IntCtrl_0_ADDR:	equ	106h
 0107           GreenLED_IntCtrl_1_ADDR:	equ	107h
 0005           GreenLED_IntEn_ADDR:	equ	5h
 0008           GreenLED_MASK:	equ	8h
 0000           ; SW2 address and mask equates
 0004           SW2_Data_ADDR:	equ	4h
 0104           SW2_DriveMode_0_ADDR:	equ	104h
 0105           SW2_DriveMode_1_ADDR:	equ	105h
 0007           SW2_DriveMode_2_ADDR:	equ	7h
 0006           SW2_GlobalSelect_ADDR:	equ	6h
 0106           SW2_IntCtrl_0_ADDR:	equ	106h
 0107           SW2_IntCtrl_1_ADDR:	equ	107h
 0005           SW2_IntEn_ADDR:	equ	5h
 0010           SW2_MASK:	equ	10h
 0000           ; I2CSDA address and mask equates
 0004           I2CSDA_Data_ADDR:	equ	4h
 0104           I2CSDA_DriveMode_0_ADDR:	equ	104h
 0105           I2CSDA_DriveMode_1_ADDR:	equ	105h
 0007           I2CSDA_DriveMode_2_ADDR:	equ	7h
 0006           I2CSDA_GlobalSelect_ADDR:	equ	6h
 0106           I2CSDA_IntCtrl_0_ADDR:	equ	106h
 0107           I2CSDA_IntCtrl_1_ADDR:	equ	107h
 0005           I2CSDA_IntEn_ADDR:	equ	5h
 0020           I2CSDA_MASK:	equ	20h
 0000           ; SW1 address and mask equates
 0004           SW1_Data_ADDR:	equ	4h
 0104           SW1_DriveMode_0_ADDR:	equ	104h
 0105           SW1_DriveMode_1_ADDR:	equ	105h
 0007           SW1_DriveMode_2_ADDR:	equ	7h
 0006           SW1_GlobalSelect_ADDR:	equ	6h
 0106           SW1_IntCtrl_0_ADDR:	equ	106h
 0107           SW1_IntCtrl_1_ADDR:	equ	107h
 0005           SW1_IntEn_ADDR:	equ	5h
 0040           SW1_MASK:	equ	40h
 0000           ; I2CSCL address and mask equates
 0004           I2CSCL_Data_ADDR:	equ	4h
 0104           I2CSCL_DriveMode_0_ADDR:	equ	104h
 0105           I2CSCL_DriveMode_1_ADDR:	equ	105h
 0007           I2CSCL_DriveMode_2_ADDR:	equ	7h
 0006           I2CSCL_GlobalSelect_ADDR:	equ	6h
 0106           I2CSCL_IntCtrl_0_ADDR:	equ	106h
 0107           I2CSCL_IntCtrl_1_ADDR:	equ	107h
 0005           I2CSCL_IntEn_ADDR:	equ	5h
 0080           I2CSCL_MASK:	equ	80h
 0000           ; LP_MISO address and mask equates
 0008           LP_MISO_Data_ADDR:	equ	8h
 0108           LP_MISO_DriveMode_0_ADDR:	equ	108h
 0109           LP_MISO_DriveMode_1_ADDR:	equ	109h
 000B           LP_MISO_DriveMode_2_ADDR:	equ	bh
 000A           LP_MISO_GlobalSelect_ADDR:	equ	ah
 010A           LP_MISO_IntCtrl_0_ADDR:	equ	10ah
 010B           LP_MISO_IntCtrl_1_ADDR:	equ	10bh
 0009           LP_MISO_IntEn_ADDR:	equ	9h
 0001           LP_MISO_MASK:	equ	1h
 0000           ; LP_MISO_Data access macros
 0000           ;   GetLP_MISO_Data macro, return in a
 0000           macro GetLP_MISO_Data
 0000                   mov             a,[Port_2_Data_SHADE]
 0000                   and             a, 1h
 0000           macro SetLP_MISO_Data
 0000                   or              [Port_2_Data_SHADE], 1h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LP_MISO_Data_ADDR], a
 0000           macro ClearLP_MISO_Data
 0000                   and             [Port_2_Data_SHADE], ~1h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LP_MISO_Data_ADDR], a
 0008           LP_SCK_Data_ADDR:	equ	8h
 0108           LP_SCK_DriveMode_0_ADDR:	equ	108h
 0109           LP_SCK_DriveMode_1_ADDR:	equ	109h
 000B           LP_SCK_DriveMode_2_ADDR:	equ	bh
 000A           LP_SCK_GlobalSelect_ADDR:	equ	ah
 010A           LP_SCK_IntCtrl_0_ADDR:	equ	10ah
 010B           LP_SCK_IntCtrl_1_ADDR:	equ	10bh
 0009           LP_SCK_IntEn_ADDR:	equ	9h
 0008           LP_SCK_MASK:	equ	8h
 0000           ; LP_SCK_Data access macros
 0000           ;   GetLP_SCK_Data macro, return in a
 0000           macro GetLP_SCK_Data
 0000                   mov             a,[Port_2_Data_SHADE]
 0000                   and             a, 8h
 0000           macro SetLP_SCK_Data
 0000                   or              [Port_2_Data_SHADE], 8h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LP_SCK_Data_ADDR], a
 0000           macro ClearLP_SCK_Data
 0000                   and             [Port_2_Data_SHADE], ~8h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LP_SCK_Data_ADDR], a
 0008           LP_MOSI_Data_ADDR:	equ	8h
 0108           LP_MOSI_DriveMode_0_ADDR:	equ	108h
 0109           LP_MOSI_DriveMode_1_ADDR:	equ	109h
 000B           LP_MOSI_DriveMode_2_ADDR:	equ	bh
 000A           LP_MOSI_GlobalSelect_ADDR:	equ	ah
 010A           LP_MOSI_IntCtrl_0_ADDR:	equ	10ah
 010B           LP_MOSI_IntCtrl_1_ADDR:	equ	10bh
 0009           LP_MOSI_IntEn_ADDR:	equ	9h
 0020           LP_MOSI_MASK:	equ	20h
 0000           ; LP_MOSI_Data access macros
 0000           ;   GetLP_MOSI_Data macro, return in a
 0000           macro GetLP_MOSI_Data
 0000                   mov             a,[Port_2_Data_SHADE]
 0000                   and             a, 20h
 0000           macro SetLP_MOSI_Data
 0000                   or              [Port_2_Data_SHADE], 20h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LP_MOSI_Data_ADDR], a
 0000           macro ClearLP_MOSI_Data
 0000                   and             [Port_2_Data_SHADE], ~20h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LP_MOSI_Data_ADDR], a
 0008           CYFISNP_IRQ_Data_ADDR:	equ	8h
 0108           CYFISNP_IRQ_DriveMode_0_ADDR:	equ	108h
 0109           CYFISNP_IRQ_DriveMode_1_ADDR:	equ	109h
 000B           CYFISNP_IRQ_DriveMode_2_ADDR:	equ	bh
 000A           CYFISNP_IRQ_GlobalSelect_ADDR:	equ	ah
 010A           CYFISNP_IRQ_IntCtrl_0_ADDR:	equ	10ah
 010B           CYFISNP_IRQ_IntCtrl_1_ADDR:	equ	10bh
 0009           CYFISNP_IRQ_IntEn_ADDR:	equ	9h
 0040           CYFISNP_IRQ_MASK:	equ	40h
 0000           ; CYFISNP_IRQ_Data access macros
 0000           ;   GetCYFISNP_IRQ_Data macro, return in a
 0000           macro GetCYFISNP_IRQ_Data
 0000                   mov             a,[Port_2_Data_SHADE]
 0000                   and             a, 40h
 0000           macro SetCYFISNP_IRQ_Data
 0000                   or              [Port_2_Data_SHADE], 40h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[CYFISNP_IRQ_Data_ADDR], a
 0000           macro ClearCYFISNP_IRQ_Data
 0000                   and             [Port_2_Data_SHADE], ~40h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[CYFISNP_IRQ_Data_ADDR], a
 0008           CYFISNP_nSS_Data_ADDR:	equ	8h
 0108           CYFISNP_nSS_DriveMode_0_ADDR:	equ	108h
 0109           CYFISNP_nSS_DriveMode_1_ADDR:	equ	109h
 000B           CYFISNP_nSS_DriveMode_2_ADDR:	equ	bh
 000A           CYFISNP_nSS_GlobalSelect_ADDR:	equ	ah
 010A           CYFISNP_nSS_IntCtrl_0_ADDR:	equ	10ah
 010B           CYFISNP_nSS_IntCtrl_1_ADDR:	equ	10bh
 0009           CYFISNP_nSS_IntEn_ADDR:	equ	9h
 0080           CYFISNP_nSS_MASK:	equ	80h
 0000           ; CYFISNP_nSS_Data access macros
 0000           ;   GetCYFISNP_nSS_Data macro, return in a
 0000           macro GetCYFISNP_nSS_Data
 0000                   mov             a,[Port_2_Data_SHADE]
 0000                   and             a, 80h
 0000           macro SetCYFISNP_nSS_Data
 0000                   or              [Port_2_Data_SHADE], 80h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[CYFISNP_nSS_Data_ADDR], a
 0000           macro ClearCYFISNP_nSS_Data
 0000                   and             [Port_2_Data_SHADE], ~80h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[CYFISNP_nSS_Data_ADDR], a
 0001           CYFISNP_ARCH_TYPE_PSOC:                                     equ 1
 0000           CYFISNP_ARCH_TYPE_C20066:                                   equ 0
 0000           CYFISNP_ARCH_TYPE_ENCORE:                                   equ 0
 0000           CYFISNP_ARCH_TYPE_TMA300:                                   equ 0
 0000           
 0001           CYFISNP_IRQ_MODE_POLLING:                                   equ 1
 0000           CYFISNP_IRQ_MODE_GPIO_IRQ:                                  equ 0
 0000           CYFISNP_IRQ_MODE_DDB_IRQ:                                   equ 0
 0000           
 0001           CYFISNP_RENAME_STARTSTOP:                                   equ 1
 0000           CYFISNP_SPIM_API_EXPOSED:                                   equ 0
 0000           CYFISNP_IRQ_MOSI_MUXED:                                     equ 0
 0000           CYFISNP_SPI_MODE_SDIO:                                      equ 0
 0001           CYFISNP_FAST_SS_ACTUATION:                                  equ 1
 0001           CYFISNP_FASTER_TX_SEQUENCE:                                 equ 1
 0001           CYFISNP_LONG_PACKETS_ALLOWED:                               equ 1
 0000           
                IF (CYFISNP_ARCH_TYPE_PSOC | CYFISNP_ARCH_TYPE_C20066 | CYFISNP_ARCH_TYPE_TMA300)
 0040           CYFISNP_CPU_CYCLES_PER_SPI_BYTE:                            equ 0x40
                ENDIF
                
                ;; Workaround. This should allow compilation with default UM parameters
                IF(0x18 * 0x17)
                ELSE
                   CYFISNP_IRQ_Addr:       EQU     PRT0DR
                   CYFISNP_nSS_Addr:       EQU     PRT0DR
                   CYFISNP_IRQ_MASK:       EQU     0x00
                   CYFISNP_nSS_MASK:       EQU     0x00
                   CYFISNP_INT_REG:        EQU     0x00
                   CYFISNP_INT_MASK:       EQU     0x00
                ENDIF
                
 0000           CYFISNP_nSS_IS_PPSOC_FN: equ (0x18 / 100)
 0000           CYFISNP_IRQ_IS_PPSOC_FN: equ (0x17 / 100)
 0000           
                IF (CYFISNP_ARCH_TYPE_C20066 | CYFISNP_ARCH_TYPE_TMA300)
                   PRT2DM2:               EQU     0
                   PRT2GS:                EQU     0
                   PRT2DM2:               EQU     0
                   PRT2GS:                EQU     0
                ENDIF
                
                IF (CYFISNP_ARCH_TYPE_ENCORE)
                   CYFISNP_IRQ_Addr:       EQU     PRT2DR
                   CYFISNP_nSS_Addr:       EQU     PRT2DR
                ELSE
                   IF (CYFISNP_IRQ_IS_PPSOC_FN)
                      CYFISNP_IRQ_Addr:       EQU     FN0DR
                      CYFISNP_IRQDM0_Addr:    EQU     FN0DM0
                      CYFISNP_IRQDM1_Addr:    EQU     FN0DM1
                      CYFISNP_IRQDM2_Addr:    EQU     FN0DM2
                      CYFISNP_IRQGS_Addr:     EQU     FN0GS
                      CYFISNP_IRQIE_Addr:     EQU     FN0IE
                   ELSE
 0008                 CYFISNP_IRQ_Addr:       EQU     PRT2DR
 0008                 CYFISNP_IRQDM0_Addr:    EQU     PRT2DM0
 0009                 CYFISNP_IRQDM1_Addr:    EQU     PRT2DM1
 000B                 CYFISNP_IRQDM2_Addr:    EQU     PRT2DM2
 000A                 CYFISNP_IRQGS_Addr:     EQU     PRT2GS
 0009                 CYFISNP_IRQIE_Addr:     EQU     PRT2IE
 0000                 FN_0_Data_SHADE:                 EQU     0
                   ENDIF
                
                   IF (CYFISNP_nSS_IS_PPSOC_FN)
                      CYFISNP_nSS_Addr:       EQU     FN0DR
                      CYFISNP_nSSDM0_Addr:    EQU     FN0DM0
                      CYFISNP_nSSDM1_Addr:    EQU     FN0DM1
                      CYFISNP_nSSDM2_Addr:    EQU     FN0DM2
                      CYFISNP_nSSGS_Addr:     EQU     FN0GS
                      CYFISNP_nSSIE_Addr:     EQU     FN0IE
                   ELSE
 0008                 CYFISNP_nSS_Addr:       EQU     PRT2DR
 0008                 CYFISNP_nSSDM0_Addr:    EQU     PRT2DM0
 0009                 CYFISNP_nSSDM1_Addr:    EQU     PRT2DM1
 000B                 CYFISNP_nSSDM2_Addr:    EQU     PRT2DM2
 000A                 CYFISNP_nSSGS_Addr:     EQU     PRT2GS
 0009                 CYFISNP_nSSIE_Addr:     EQU     PRT2IE
 0000                 FN_0_Data_SHADE:                 EQU     0
                   ENDIF
                ENDIF
                
                IF (CYFISNP_ARCH_TYPE_C20066 | CYFISNP_ARCH_TYPE_TMA300)
                   IF((CYFISNP_nSS_Addr - CYFISNP_IRQ_Addr) | (CYFISNP_nSS_Addr - PRT1DR))
                      IF(CYFISNP_nSS_Addr - CYFISNP_IRQ_Addr)
                         IF(CYFISNP_nSS_Addr - PRT1DR)
                            CYFISNP_OD_MASK:  equ 0x00
                         ELSE
                            CYFISNP_OD_MASK:  equ 0x20
                         ENDIF
                      ELSE
                         CYFISNP_OD_MASK:  equ CYFISNP_IRQ_MASK
                      ENDIF
                   ELSE
                      CYFISNP_OD_MASK:  equ (CYFISNP_IRQ_MASK | 0x20)
                   ENDIF
                ELSE
 0000              CYFISNP_OD_MASK:  equ 0x00
                ENDIF
                
                ;  @PSoC_UserCode_NumPnCodes@ (Do not change this line.)
                
                ;  Following two lines selects SOP code set to use in CYFISNP_SetSopPnCode function
                ;  You must assign the same values to CYFISNP_SOP_SET_x in CYFISNP.h file
                ;  for proper User Module operation!
                
 0001           CYFISNP_SOP_SET_A: EQU 1
 0000           CYFISNP_SOP_SET_B: EQU 0
 0000           
 0000           ;  @PSoC_UserCode_END@ (Do not change this line.)
 0000           
 0000           
 0000           
 0000           CYFISNP_RADIO_INTERRUPT: equ CYFISNP_IRQ_MODE_GPIO_IRQ | CYFISNP_IRQ_MODE_DDB_IRQ
 0000           
                IF (CYFISNP_SOP_SET_A & CYFISNP_SOP_SET_B)
                   CYFISNP_NUM_PN_CODES: EQU 20
                ELSE
 000A              CYFISNP_NUM_PN_CODES: EQU 10
                ENDIF
                
                ;--------------------------------------------------
                ; Registers used by CYFISNP
                ;--------------------------------------------------
                IF (CYFISNP_ARCH_TYPE_PSOC | CYFISNP_ARCH_TYPE_TMA300)
                   IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                     @IRQBlock_CONTROL_0_INC                               ;IRQ Block ontrol register
                     CYFISNP_INT_REG:                                      equ 0x@IRQBlock__ISR_ADDR
                     CYFISNP_INT_MASK:                                     equ 0x@IRQBlock__ISR_MASK
                   ENDIF
                   IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                     CYFISNP_INT_REG:                                      equ INT_MSK0
                     CYFISNP_INT_MASK:                                     equ INT_MSK0_GPIO
                   ENDIF
 002B              CYFISNP_CONTROL_REG:    equ 2bh               ;Control register
 0028              CYFISNP_SHIFT_REG:  equ 28h                   ;TX Shift Register register
 0029              CYFISNP_TX_BUFFER_REG:  equ 29h               ;TX Buffer Register
 002A              CYFISNP_RX_BUFFER_REG:  equ 2ah               ;RX Buffer Register
 0028              CYFISNP_FUNCTION_REG:   equ 28h               ;Function register
 0029              CYFISNP_INPUT_REG:  equ 29h                   ;Input register
 002A              CYFISNP_OUTPUT_REG: equ 2ah                   ;Output register
                ENDIF
                
                IF (CYFISNP_ARCH_TYPE_C20066)
                   IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                     CYFISNP_INT_REG:                                      equ INT_MSK0
                     CYFISNP_INT_MASK:                                     equ INT_MSK0_GPIO
                   ENDIF
                   @SPIM_SpiControl_INC                          ;Control register
                   @SPIM_SpiTransmitData_INC                     ;TX Buffer Register
                   @SPIM_SpiReceiveData_INC                      ;RX Buffer Register
                ENDIF
                
                ;-----------------------------------------------------------------------------
 0080           CYFISNP_SPI_USE:        equ     0x80
 0001           CYFISNP_OUTPUT_EN:      equ     0x01
 0080           CYFISNP_SPI_SWAP:       equ     0x80
 0000           ;-----------------------------------------------------------------------------
 0000           
 0000           macro CYFISNP_DISABLE_IRQ_PIN
 0000              IF CYFISNP_IRQ_MOSI_MUXED
 0000                 IF (CYFISNP_ARCH_TYPE_PSOC)
 0000                    IF (CYFISNP_IRQ_MODE_DDB_IRQ)
 0000                       M8C_SetBank1
 0000                       or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
 0000                       and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
 0000                       M8C_SetBank0
 0000                    ENDIF
 0000                    IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
 0000                       M8C_SetBank1
 0000                       or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
 0000                       and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
 0000                       M8C_SetBank0
 0000                       and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
 0000                       or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
 0000                    ENDIF
 0000                    IF (CYFISNP_IRQ_MODE_POLLING)
 0000                       M8C_SetBank1
 0000                       or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
 0000                       and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
 0000                       M8C_SetBank0
 0000                       or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
 0000                    ENDIF
 0000                 ENDIF
 0000                 IF (CYFISNP_ARCH_TYPE_ENCORE)
 0000                       or      reg[P15CR], (CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)       ; P1.5 is SPI MOSI out
 0000                 ENDIF
 0000                 IF (CYFISNP_ARCH_TYPE_C20066)
 0000                    IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
 0000                       and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
 0000                    ENDIF
 0000                    M8C_SetBank1
 0000                       and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
 0000                    M8C_SetBank0
 0000                    or    reg[CYFISNP_CONTROL_REG], bfCONTROL_REG_START_BIT
 0000                 ENDIF
 0000           
 0000              ENDIF
 0000           macro CYFISNP_ENABLE_IRQ_PIN
 0000              IF CYFISNP_IRQ_MOSI_MUXED
 0000                 IF (CYFISNP_ARCH_TYPE_PSOC)
 0000                    IF (CYFISNP_IRQ_MODE_DDB_IRQ)
 0000                       M8C_SetBank1
 0000                       and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
 0000                       or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
 0000                       M8C_SetBank0
 0000                    ENDIF
 0000                    IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
 0000                       and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
 0000                       or      reg[CYFISNP_IRQIE_Addr],  CYFISNP_IRQ_MASK
 0000                       M8C_SetBank1
 0000                       and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
 0000                       or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
 0000                       M8C_SetBank0
 0000                    ENDIF
 0000                    IF (CYFISNP_IRQ_MODE_POLLING)
 0000                       and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
 0000                       M8C_SetBank1
 0000                       and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
 0000                       or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
 0000                       M8C_SetBank0
 0000                    ENDIF
 0000                 ENDIF
 0000                 IF (CYFISNP_ARCH_TYPE_ENCORE)
 0000                       and     reg[P15CR], ~(CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)      ; P1.5 is IRQ input
 0000                 ENDIF
 0000                 IF (CYFISNP_ARCH_TYPE_C20066)
 0000                    M8C_SetBank1
 0000                       or     reg[CYFISNP_IRQDM1_Addr], CYFISNP_IRQ_MASK
 0000                    M8C_SetBank0
 0000                    and    reg[CYFISNP_CONTROL_REG], ~bfCONTROL_REG_START_BIT
 0000                    or     reg[CYFISNP_IRQ_Addr],(CYFISNP_IRQ_MASK | 0x20)
 0000                    IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
 0000                       and    reg[INT_CLR0], ~INT_MSK0_GPIO
 0000                       or     reg[CYFISNP_IRQIE_Addr], CYFISNP_IRQ_MASK
 0000                    ENDIF
 0000                 ENDIF
 0000           
 0000              ENDIF
 0000           macro CYFISNP_TST_IRQ_PIN
 0000              tst   reg[CYFISNP_IRQ_Addr], CYFISNP_IRQ_MASK
 0000           macro CYFISNP_ISR_REG_PRESERVE (IOReg)
 0000             IF (SYSTEM_LARGE_MEMORY_MODEL)
 0000                   REG_PRESERVE (@IOReg)
 0000             ENDIF
 0000           macro CYFISNP_ISR_REG_RESTORE (IOReg)
 0000             IF (SYSTEM_LARGE_MEMORY_MODEL)
 0000                   REG_RESTORE (@IOReg)
 0000             ENDIF
 0000           macro CYFISNP_RADIO_SELECT
 0000           IF(0x18 * 0x17)
 0000              IF (CYFISNP_FAST_SS_ACTUATION)
 0000                 and   reg[CYFISNP_nSS_Addr], ~CYFISNP_nSS_MASK
 0000                 IF (CYFISNP_ARCH_TYPE_C20066 | CYFISNP_ARCH_TYPE_TMA300)
 0000                    IF((CYFISNP_nSS_Addr - CYFISNP_IRQ_Addr) * (CYFISNP_nSS_Addr - PRT1DR))
 0000                    ELSE
 0000                       or    reg[CYFISNP_nSS_Addr], CYFISNP_OD_MASK
 0000                    ENDIF
 0000                 ENDIF
 0000                 CYFISNP_DISABLE_IRQ_PIN
 0000              ELSE
 0000                 IF (CYFISNP_nSS_IS_PPSOC_FN)
 0000                    push    A
 0000                    IF (SYSTEM_LARGE_MEMORY_MODEL)
 0000                       REG_PRESERVE CUR_PP
 0000                       RAM_SETPAGE_CUR >FN_0_Data_SHADE
 0000                    ENDIF
 0000                    and     [FN_0_Data_SHADE], ~CYFISNP_nSS_MASK
 0000                    mov     A, [FN_0_Data_SHADE]
 0000                    mov     reg[CYFISNP_nSS_Addr], A
 0000                    IF (SYSTEM_LARGE_MEMORY_MODEL)
 0000                       REG_RESTORE CUR_PP
 0000                    ENDIF
 0000                    CYFISNP_DISABLE_IRQ_PIN
 0000                    pop     A
 0000                 ELSE
 0000                    push    A
 0000                    IF (SYSTEM_LARGE_MEMORY_MODEL)
 0000                       REG_PRESERVE CUR_PP
 0000                       RAM_SETPAGE_CUR >Port_2_Data_SHADE
 0000                    ENDIF
 0000                    and     [Port_2_Data_SHADE], ~CYFISNP_nSS_MASK
 0000                    mov     A, [Port_2_Data_SHADE]
 0000                    mov     reg[CYFISNP_nSS_Addr], A
 0000                    IF (SYSTEM_LARGE_MEMORY_MODEL)
 0000                       REG_RESTORE CUR_PP
 0000                    ENDIF
 0000                    CYFISNP_DISABLE_IRQ_PIN
 0000                    pop     A
 0000                 ENDIF
 0000              ENDIF
 0000           ENDIF
 0000           macro CYFISNP_RADIO_DESELECT
 0000           IF(0x18 * 0x17)
 0000              IF (CYFISNP_FAST_SS_ACTUATION)
 0000                 CYFISNP_ENABLE_IRQ_PIN
 0000                 or      reg[CYFISNP_nSS_Addr], (CYFISNP_nSS_MASK | CYFISNP_OD_MASK)
 0000              ELSE
 0000                 IF (CYFISNP_nSS_IS_PPSOC_FN)
 0000                    push    A
 0000                    CYFISNP_ENABLE_IRQ_PIN
 0000                    IF (SYSTEM_LARGE_MEMORY_MODEL)
 0000                       REG_PRESERVE CUR_PP
 0000                       RAM_SETPAGE_CUR >FN_0_Data_SHADE
 0000                    ENDIF
 0000                    or      [FN_0_Data_SHADE], CYFISNP_nSS_MASK
 0000                    mov     A, [FN_0_Data_SHADE]
 0000                    mov     reg[CYFISNP_nSS_Addr], A
 0000                    IF (SYSTEM_LARGE_MEMORY_MODEL)
 0000                       REG_RESTORE CUR_PP
 0000                    ENDIF
 0000                    pop     A
 0000                 ELSE
 0000                    push    A
 0000                    CYFISNP_ENABLE_IRQ_PIN
 0000                    IF (SYSTEM_LARGE_MEMORY_MODEL)
 0000                       REG_PRESERVE CUR_PP
 0000                       RAM_SETPAGE_CUR >Port_2_Data_SHADE
 0000                    ENDIF
 0000                    or      [Port_2_Data_SHADE], CYFISNP_nSS_MASK
 0000                    mov     A, [Port_2_Data_SHADE]
 0000                    mov     reg[CYFISNP_nSS_Addr], A
 0000                    IF (SYSTEM_LARGE_MEMORY_MODEL)
 0000                       REG_RESTORE CUR_PP
 0000                    ENDIF
 0000                    pop     A
 0000                 ENDIF
 0000              ENDIF
 0000           ENDIF
 0000           macro   CYFISNP_IsRadioSleep:                   ; Zero flag is set if Radio is currently in SLEEP mode
 0000                   TST     [CYFISNP_RestingState], CYFISNP_END_STATE_MSK
 0000           macro   CYFISNP_IsSleepDesired:                 ; Zero flag is set if the end state for the radio will be SLEEP mode
 0000                   TST     [CYFISNP_XactConfig], CYFISNP_END_STATE_MSK
 0008           CYFISNP_DEF_DATA_RATE:    EQU     0x8
 0007           CYFISNP_DEF_TX_POWER:     EQU     0x7
 0000           
 0000           ; Defaults for XACT_CFG_REG
 0000           CYFISNP_DEF_END_STATE:    EQU     0x0
 0080           CYFISNP_DEF_ACK_ENABLE:   EQU     0x80
 0001           CYFISNP_DEF_ACK_TIMEOUT:  EQU     0x1
 0000           
 0000           ; Defaults for FRAMING_CFG_REG
 0080           CYFISNP_DEF_SOP_EN:       EQU     0x80
 0000           CYFISNP_DEF_SOP_LEN:      EQU     0x0
 0020           CYFISNP_DEF_LEN_EN:       EQU     0x20
 0000           
                if (CYFISNP_DEF_SOP_LEN)
                CYFISNP_DEF_SOP_TSH:      EQU     0x0E
                else
 0004           CYFISNP_DEF_SOP_TSH:      EQU     0x04
                endif
                
                ; Default Thresholds
 0005           CYFISNP_DEF_32_THOLD:     EQU     0x05
 000E           CYFISNP_DEF_64_THOLD:     EQU     0x0E
 0000           
 0002           CYFISNP_DEF_PREAMBLE_CNT: EQU     0x2
 0000           
 0001           bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
 0000           ;--------------------------------------------------
 0000           ; Register constants and masks
 0000           ;--------------------------------------------------
 0000           CYFISNP_SPIM_MODE_0:             equ   00h      ;MODE 0 - Leading edge latches data - pos clock
 0002           CYFISNP_SPIM_MODE_1:             equ   02h      ;MODE 1 - Leading edge latches data - neg clock
 0004           CYFISNP_SPIM_MODE_2:             equ   04h      ;MODE 2 - Trailing edge latches data - pos clock
 0006           CYFISNP_SPIM_MODE_3:             equ   06h      ;MODE 3 - Trailing edge latches data - neg clock
 0080           CYFISNP_SPIM_LSB_FIRST:          equ   80h      ;LSB bit transmitted/received first
 0000           CYFISNP_SPIM_MSB_FIRST:          equ   00h      ;MSB bit transmitted/received first
 0000           
 0000           ;---------------------------
 0000           ; SPI Status register masks
 0000           ;---------------------------
 0040           CYFISNP_SPIM_RX_OVERRUN_ERROR:   equ   40h      ;Overrun error in received data
 0010           CYFISNP_SPIM_TX_BUFFER_EMPTY:    equ   10h      ;TX Buffer register is ready for next data byte
 0008           CYFISNP_SPIM_RX_BUFFER_FULL:     equ   08h      ;RX Buffer register has received current data
 0020           CYFISNP_SPIM_SPI_COMPLETE:       equ   20h      ;SPI Tx/Rx cycle has completed
 0000           
 0000           ;-----------------------------------------------------------------------------
 0000           ;
 0000           ; NOTES ON THE PSoC LARGE MEMORY MODEL (LMM) .vs. SMALL MEMORY MODEL (SMM)
 0000           ;
 0000           ; The file <memory.inc> indicates whether LMM or SMM is used.
 0000           ; LMM is available for devices with more than 256 Bytes of RAM and the
 0000           ;  (Project,Settings,Compiler,Enable paging) box is checked in PSoC Designer.
 0000           ;  Checking the Enable paging box sets SYSTEM_LARGE_MEMORY_MODEL: equ 1
 0000           ;  in <memory.inc>.
 0000           ;
 0000           ; When using the Small Memory Model, the macros in <memory.inc> reduce to
 0000           ;  nothing, and the resulting LMM paging overhead in Radio Driver disappears.
 0000           ;
 0000           ; Using the LMM imposes certain assumptions on the user's application.  See
 0000           ;  Cypress AN2218 for details, a "summary" is below, but please obtain and
 0000           ;  understand AN2218 before proceeding.
 0000           ;
 0000           ; 1) All internal radio driver variables are placed on Page 0.
 0000           ; 2) Rx and Tx bulk data buffers may be placed on any Page.
 0000           ; 3) Radio driver exit w/Page Mode bits UNCHANGED or set to NATIVE_PAGING
 0000           ; 4) Radio driver exits with only STK_PP preserved, except for ISR exit.
 0000           ;
 0000           ; This is consistent with the ImageCraft compiler, however calls from
 0000           ;  assembly need to handle possible loss of Page Pointers and Page Mode
 0000           ;  changes to NATIVE_PAGING.
 0000           ;
 0000           ;-----------------------------------------------------------------------------
 0000           
 0000           ;=============================================================================
 0000           ;=============================================================================
 0000           ;=============================================================================
 0000           ;
 0000           ;
 0000           ; EVERYTHING beyond this point is NOT NORMALLY CHANGED BY USERS
 0000           ;
 0000           ;
 0000           ;=============================================================================
 0000           ;=============================================================================
 0000           ;=============================================================================
 0000           
 0000           ; SPI Interface definitions:
 0000           ;
 003F           CYFISNP_mSPI_ADDRESS:      EQU      03Fh
 0080           CYFISNP_bSPI_WRITE:        EQU      080h
 0040           CYFISNP_bSPI_AUTO_INC:     EQU      040h
 0000           
 0000           ;
 0000           ; RADIO_STATE definitions:
 0000           ;
 0000           CYFISNP_IDLE:        EQU  00h
 0080           CYFISNP_RX:          EQU  80h
 0020           CYFISNP_TX:          EQU  20h
 0040           CYFISNP_SOP:         EQU  CYFISNP_SOPDET_IRQ
 0008           CYFISNP_DATA:        EQU  CYFISNP_RXB1_IRQ
 0002           CYFISNP_COMPLETE:    EQU  CYFISNP_RXC_IRQ         ; Code assumes these two bits are BOTH
 0001           CYFISNP_ERROR:       EQU  CYFISNP_RXE_IRQ         ;  in the RX_CTRL_ADR register.
 0000           
 0000           //
 0000           // Return value for a RadioAbort completed successfully. Otherwise the return value
 0000           //  is the length of the packet received (without error).
 0000           //
 00FF           CYFISNP_ABORT_SUCCESS: EQU    0xFF
 0000           
 0000           
 0000           
 0000           
 0000           
 0000           
 0000           ;----------------------------------------------------------------------------
 0000           ;
 0000           ; CYFISPI User Module PHY layer registers definitions
 0000           ;
 0000           
 0000           ; -------------------------------
 0000           ; Channel register
 0000           ; -------------------------------
 0000           CYFISNP_CHANNEL_ADR:                                    equ 0x00
 0048           CYFISNP_CHANNEL_RST:                                    equ 0x48
 007F           CYFISNP_CHANNEL_MSK:                                    equ 0x7f
 0000           
 0062           CYFISNP_CHANNEL_MAX:                                    equ 0x62
 0000           CYFISNP_CHANNEL_MIN:                                    equ 0x00
 0062           CYFISNP_CHANNEL_2P498_GHZ:                              equ 0x62
 0000           CYFISNP_CHANNEL_2P4_GHZ:                                equ 0x00
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; TX Length register
 0000           ; -------------------------------
 0001           CYFISNP_TX_LENGTH_ADR:                                  equ 0x01
 0000           CYFISNP_TX_LENGTH_RST:                                  equ 0x00
 00FF           CYFISNP_TX_LENGTH_MSK:                                  equ 0xff
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; TX Control register
 0000           ; -------------------------------
 0002           CYFISNP_TX_CTRL_ADR:                                    equ 0x02
 0003           CYFISNP_TX_CTRL_RST:                                    equ 0x03
 0000           
 0000           ; See TX_IRQ for remaining bit position definitions
 0000           
 0000           ; TX_CTRL bit masks
 0080           CYFISNP_TX_GO:                                          equ 0x80
 0040           CYFISNP_TX_CLR:                                         equ 0x40
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; TX Configuration register
 0000           ; -------------------------------
 0003           CYFISNP_TX_CFG_ADR:                                     equ 0x03
 0005           CYFISNP_TX_CFG_RST:                                     equ 0x05
 0000           
 0000           ; separate bit field masks
 0020           CYFISNP_TX_DATCODE_LEN_MSK:                             equ 0x20
 0018           CYFISNP_TX_DATMODE_MSK:                                 equ 0x18
 0007           CYFISNP_PA_VAL_MSK:                                     equ 0x07
 0000           
 0000           ; DATCODE_LEN register masks
 0020           CYFISNP_DATCODE_LEN_64:                                 equ 0x20
 0000           CYFISNP_DATCODE_LEN_32:                                 equ 0x00
 0000           
 0000           ; DATMODE register masks
 0000           CYFISNP_DATMODE_1MBPS:                                  equ 0x00
 0008           CYFISNP_DATMODE_8DR:                                    equ 0x08
 0000           
 0000           ; PA_SET register masks
 0000           CYFISNP_PA_N30_DBM:                                     equ 0x00
 0001           CYFISNP_PA_N25_DBM:                                     equ 0x01
 0002           CYFISNP_PA_N20_DBM:                                     equ 0x02
 0003           CYFISNP_PA_N15_DBM:                                     equ 0x03
 0004           CYFISNP_PA_N10_DBM:                                     equ 0x04
 0005           CYFISNP_PA_N5_DBM:                                      equ 0x05
 0006           CYFISNP_PA_0_DBM:                                       equ 0x06
 0007           CYFISNP_PA_4_DBM:                                       equ 0x07
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; TX IRQ Status register
 0000           ; -------------------------------
 0004           CYFISNP_TX_IRQ_STATUS_ADR:                              equ 0x04
 0000           
 0000           ; TX_IRQ bit masks
 0080           CYFISNP_XS_IRQ:                                         equ 0x80
 0040           CYFISNP_LV_IRQ:                                         equ 0x40
 0020           CYFISNP_TXB15_IRQ:                                      equ 0x20
 0010           CYFISNP_TXB8_IRQ:                                       equ 0x10
 0008           CYFISNP_TXB0_IRQ:                                       equ 0x08
 0004           CYFISNP_TXBERR_IRQ:                                     equ 0x04
 0002           CYFISNP_TXC_IRQ:                                        equ 0x02
 0001           CYFISNP_TXE_IRQ:                                        equ 0x01
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; RX Control register
 0000           ; -------------------------------
 0005           CYFISNP_RX_CTRL_ADR:                                    equ 0x05
 0007           CYFISNP_RX_CTRL_RST:                                    equ 0x07
 0000           
 0000           ; See RX_IRQ register for bit positions definitions also used for this register
 0000           
 0000           ; RX_CTRL bit masks
 0080           CYFISNP_RX_GO:                                          equ 0x80
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; RX Configuration register
 0000           ; -------------------------------
 0006           CYFISNP_RX_CFG_ADR:                                     equ 0x06
 0092           CYFISNP_RX_CFG_RST:                                     equ 0x92
 0000           
 0080           CYFISNP_AUTO_AGC_EN:                                    equ 0x80
 0040           CYFISNP_LNA_EN:                                         equ 0x40
 0020           CYFISNP_ATT_EN:                                         equ 0x20
 0010           CYFISNP_HI:                                             equ 0x10
 0000           CYFISNP_LO:                                             equ 0x00
 0008           CYFISNP_FASTTURN_EN:                                    equ 0x08
 0002           CYFISNP_RXOW_EN:                                        equ 0x02
 0001           CYFISNP_VLD_EN:                                         equ 0x01
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; RX IRQ register
 0000           ; -------------------------------
 0007           CYFISNP_RX_IRQ_STATUS_ADR:                              equ 0x07
 0000           ; There is no default value for this register.
 0000           
 0000           ; RX_IRQ bit masks
 0080           CYFISNP_RXOW_IRQ:                                       equ 0x80
 0040           CYFISNP_SOPDET_IRQ:                                     equ 0x40
 0020           CYFISNP_RXB16_IRQ:                                      equ 0x20
 0010           CYFISNP_RXB8_IRQ:                                       equ 0x10
 0008           CYFISNP_RXB1_IRQ:                                       equ 0x08
 0004           CYFISNP_RXBERR_IRQ:                                     equ 0x04
 0002           CYFISNP_RXC_IRQ:                                        equ 0x02
 0001           CYFISNP_RXE_IRQ:                                        equ 0x01
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; RX Status register
 0000           ; -------------------------------
 0008           CYFISNP_RX_STATUS_ADR:                                  equ 0x08
 0000           // There is no default value for this register.
 0000           
 0000           ; single flag bits & multi-bit-field masks
 0080           CYFISNP_RX_ACK:                                         equ 0x80
 0040           CYFISNP_RX_PKTERR:                                      equ 0x40
 0020           CYFISNP_RX_EOPERR:                                      equ 0x20
 0010           CYFISNP_RX_CRC0:                                        equ 0x10
 0008           CYFISNP_RX_BAD_CRC:                                     equ 0x08
 0004           CYFISNP_RX_DATCODE_LEN:                                 equ 0x04
 0003           CYFISNP_RX_DATMODE_MSK:                                 equ 0x03
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; RX Count register
 0000           ; -------------------------------
 0009           CYFISNP_RX_COUNT_ADR:                                   equ 0x09
 0000           CYFISNP_RX_COUNT_RST:                                   equ 0x00
 00FF           CYFISNP_RX_COUNT_MSK:                                   equ 0xff
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; RX Length Field register
 0000           ; -------------------------------
 000A           CYFISNP_RX_LENGTH_ADR:                                  equ 0x0a
 0000           CYFISNP_RX_LENGTH_RST:                                  equ 0x00
 00FF           CYFISNP_RX_LENGTH_MSK:                                  equ 0xff
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Power Control register
 0000           ; -------------------------------
 000B           CYFISNP_PWR_CTRL_ADR:                                   equ 0x0b
 00A0           CYFISNP_PWR_CTRL_RST:                                   equ 0xa0
 0000           
 0000           ; single flag bits & multi-bit-field masks
 0080           CYFISNP_PMU_EN:                                         equ 0x80
 0040           CYFISNP_LV_IRQ_EN:                                      equ 0x40
 0020           CYFISNP_PMU_SEN:                                        equ 0x20
 0010           CYFISNP_PFET_OFF:                                       equ 0x10
 000C           CYFISNP_LV_IRQ_TH_MSK:                                  equ 0x0c
 0003           CYFISNP_PMU_OUTV_MSK:                                   equ 0x03
 0000           
 0000           ; LV_IRQ_TH values
 000C           CYFISNP_LV_IRQ_TH_1P8_V:                                equ 0x0C
 0008           CYFISNP_LV_IRQ_TH_2P0_V:                                equ 0x08
 0004           CYFISNP_LV_IRQ_TH_2P2_V:                                equ 0x04
 0000           CYFISNP_LV_IRQ_TH_PMU_OUTV:                             equ 0x00
 0000           
 0000           ; PMU_OUTV values
 0003           CYFISNP_PMU_OUTV_2P4:                                   equ 0x03
 0002           CYFISNP_PMU_OUTV_2P5:                                   equ 0x02
 0001           CYFISNP_PMU_OUTV_2P6:                                   equ 0x01
 0000           CYFISNP_PMU_OUTV_2P7:                                   equ 0x00
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Crystal Control register
 0000           ; -------------------------------
 000C           CYFISNP_XTAL_CTRL_ADR:                                  equ 0x0c
 0004           CYFISNP_XTAL_CTRL_RST:                                  equ 0x04
 0000           
 0000           ; single flag bits & multi-bit-field masks
 00C0           CYFISNP_XOUT_FNC_MSK:                                   equ 0xc0
 0020           CYFISNP_XS_IRQ_EN:                                      equ 0x20
 0007           CYFISNP_XOUT_FREQ_MSK:                                  equ 0x07
 0000           
 0000           ; XOUT_FNC values
 0000           CYFISNP_XOUT_FNC_XOUT_FREQ:                             equ 0x00
 0040           CYFISNP_XOUT_FNC_PA_N:                                  equ 0x40
 0080           CYFISNP_XOUT_FNC_RAD_STREAM:                            equ 0x80
 00C0           CYFISNP_XOUT_FNC_GPIO:                                  equ 0xC0
 0000           
 0000           ; XOUT_FREQ values
 0000           CYFISNP_XOUT_FREQ_12MHZ:                                equ 0x00
 0001           CYFISNP_XOUT_FREQ_6MHZ:                                 equ 0x01
 0002           CYFISNP_XOUT_FREQ_3MHZ:                                 equ 0x02
 0003           CYFISNP_XOUT_FREQ_1P5MHZ:                               equ 0x03
 0004           CYFISNP_XOUT_FREQ_P75MHZ:                               equ 0x04
 0000           
 0000           ; -------------------------------
 0000           ; Analog Control register
 0000           ; -------------------------------
 0039           CYFISNP_ANALOG_CTRL_ADR:                                equ 0x39
 0001           CYFISNP_ALLSLOW:                                        equ 0x01
 0000           
 0000           ; -------------------------------
 0000           ; I/O Configuration register
 0000           ; -------------------------------
 000D           CYFISNP_IO_CFG_ADR:                                     equ 0x0d
 0000           CYFISNP_IO_CFG_RST:                                     equ 0x00
 00FF           CYFISNP_IO_CFG_MSK:                                     equ 0xff
 0000           
 0000           ; single flag bits & multi-bit-field masks
 0080           CYFISNP_IRQ_OD:                                         equ 0x80
 0040           CYFISNP_IRQ_POL:                                        equ 0x40
 0020           CYFISNP_MISO_OD:                                        equ 0x20
 0010           CYFISNP_XOUT_OD:                                        equ 0x10
 0008           CYFISNP_PACTL_OD:                                       equ 0x08
 0004           CYFISNP_PACTL_GPIO:                                     equ 0x04
 0002           CYFISNP_SPI_3_PIN:                                      equ 0x02
 0001           CYFISNP_IRQ_GPIO:                                       equ 0x01
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; GPIO Control register
 0000           ; -------------------------------
 000E           CYFISNP_GPIO_CTRL_ADR:                                  equ 0x0e
 0000           CYFISNP_GPIO_CTRL_RST:                                  equ 0x00
 00F0           CYFISNP_GPIO_CTRL_MSK:                                  equ 0xf0
 0000           
 0000           ; single flag bits & multi-bit-field masks
 0080           CYFISNP_XOUT_OP:                                        equ 0x80
 0040           CYFISNP_MISO_OP:                                        equ 0x40
 0020           CYFISNP_PACTL_OP:                                       equ 0x20
 0010           CYFISNP_IRQ_OP:                                         equ 0x10
 0008           CYFISNP_XOUT_IP:                                        equ 0x08
 0004           CYFISNP_MISO_IP:                                        equ 0x04
 0002           CYFISNP_PACTL_IP:                                       equ 0x02
 0001           CYFISNP_IRQ_IP:                                         equ 0x01
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Transaction Configuration register
 0000           ; -------------------------------
 000F           CYFISNP_XACT_CFG_ADR:                                   equ 0x0f
 0080           CYFISNP_XACT_CFG_RST:                                   equ 0x80
 0000           
 0000           ; single flag bits & multi-bit-field masks
 0080           CYFISNP_ACK_EN:                                         equ 0x80
 0020           CYFISNP_FRC_END_STATE:                                  equ 0x20
 001C           CYFISNP_END_STATE_MSK:                                  equ 0x1c
 0003           CYFISNP_ACK_TO_MSK:                                     equ 0x03
 0000           
 0000           ; END_STATE field values
 0000           CYFISNP_END_STATE_SLEEP:                                equ 0x00
 0004           CYFISNP_END_STATE_IDLE:                                 equ 0x04
 0008           CYFISNP_END_STATE_TXSYNTH:                              equ 0x08
 000C           CYFISNP_END_STATE_RXSYNTH:                              equ 0x0C
 0010           CYFISNP_END_STATE_RX:                                   equ 0x10
 0000           
 0000           ; ACK_TO field values
 0000           CYFISNP_ACK_TO_4X:                                      equ 0x00
 0001           CYFISNP_ACK_TO_8X:                                      equ 0x01
 0002           CYFISNP_ACK_TO_12X:                                     equ 0x02
 0003           CYFISNP_ACK_TO_15X:                                     equ 0x03
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Framing Configuration register
 0000           ; -------------------------------
 0010           CYFISNP_FRAMING_CFG_ADR:                                equ 0x10
 00A5           CYFISNP_FRAMING_CFG_RST:                                equ 0xa5
 0000           
 0000           ; single flag bits & multi-bit-field masks
 0080           CYFISNP_SOP_EN:                                         equ 0x80
 0040           CYFISNP_SOP_LEN:                                        equ 0x40
 0020           CYFISNP_LEN_EN:                                         equ 0x20
 001F           CYFISNP_SOP_THRESH_MSK:                                 equ 0x1f
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Data Threshold 32 register
 0000           ; -------------------------------
 0011           CYFISNP_DATA32_THOLD_ADR:                               equ 0x11
 0004           CYFISNP_DAT32_THRESH_RST:                               equ 0x04
 000F           CYFISNP_DAT32_THRESH_MSK:                               equ 0x0f
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Data Threshold 64 register
 0000           ; -------------------------------
 0012           CYFISNP_DATA64_THOLD_ADR:                               equ 0x12
 000A           CYFISNP_DAT64_THRESH_RST:                               equ 0x0a
 001F           CYFISNP_DAT64_THRESH_MSK:                               equ 0x1f
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; RSSI register
 0000           ; -------------------------------
 0013           CYFISNP_RSSI_ADR:                                       equ 0x13
 0020           CYFISNP_RSSI_RST:                                       equ 0x20
 0000           
 0000           ; single flag bits & multi-bit-field masks
 0080           CYFISNP_SOP_RSSI:                                       equ 0x80
 0020           CYFISNP_LNA_STATE:                                      equ 0x20
 001F           CYFISNP_RSSI_LVL_MSK:                                   equ 0x1f
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; EOP Control register
 0000           ; -------------------------------
 0014           CYFISNP_EOP_CTRL_ADR:                                   equ 0x14
 00A4           CYFISNP_EOP_CTRL_RST:                                   equ 0xa4
 0000           
 0000           ; single flag bits & multi-bit-field masks
 0080           CYFISNP_HINT_EN:                                        equ 0x80
 0070           CYFISNP_HINT_EOP_MSK:                                   equ 0x70
 000F           CYFISNP_EOP_MSK:                                        equ 0x0f
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; CRC Seed registers
 0000           ; -------------------------------
 0015           CYFISNP_CRC_SEED_LSB_ADR:                               equ 0x15
 0016           CYFISNP_CRC_SEED_MSB_ADR:                               equ 0x16
 0000           CYFISNP_CRC_SEED_LSB_RST:                               equ 0x00
 0000           CYFISNP_CRC_SEED_MSB_RST:                               equ 0x00
 0000           
 0000           ; CRC related values
 0000           ; USB CRC-16
 0080           CYFISNP_CRC_POLY_MSB:                                   equ 0x80
 0005           CYFISNP_CRC_POLY_LSB:                                   equ 0x05
 0080           CYFISNP_CRC_RESI_MSB:                                   equ 0x80
 000D           CYFISNP_CRC_RESI_LSB:                                   equ 0x0d
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; TX CRC Calculated registers
 0000           ; -------------------------------
 0017           CYFISNP_TX_CRC_LSB_ADR:                                 equ 0x17
 0018           CYFISNP_TX_CRC_MSB_ADR:                                 equ 0x18
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; RX CRC Field registers
 0000           ; -------------------------------
 0019           CYFISNP_RX_CRC_LSB_ADR:                                 equ 0x19
 001A           CYFISNP_RX_CRC_MSB_ADR:                                 equ 0x1a
 00FF           CYFISNP_RX_CRC_LSB_RST:                                 equ 0xff
 00FF           CYFISNP_RX_CRC_MSB_RST:                                 equ 0xff
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Synth Offset registers
 0000           ; -------------------------------
 001B           CYFISNP_TX_OFFSET_LSB_ADR:                              equ 0x1b
 001C           CYFISNP_TX_OFFSET_MSB_ADR:                              equ 0x1c
 0000           CYFISNP_TX_OFFSET_LSB_RST:                              equ 0x00
 0000           CYFISNP_TX_OFFSET_MSB_RST:                              equ 0x00
 0000           
 0000           ; single flag bits & multi-bit-field masks
 000F           CYFISNP_STRIM_MSB_MSK:                                  equ 0x0f
 00FF           CYFISNP_STRIM_LSB_MSK:                                  equ 0xff
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Mode Override register
 0000           ; -------------------------------
 001D           CYFISNP_MODE_OVERRIDE_ADR:                              equ 0x1d
 0000           CYFISNP_MODE_OVERRIDE_RST:                              equ 0x00
 0000           
 0003           CYFISNP_FRC_AWAKE:                                      equ 0x03
 0001           CYFISNP_FRC_AWAKE_OFF_1:                                equ 0x01
 0000           CYFISNP_FRC_AWAKE_OFF_2:                                equ 0x00
 0000           
 0000           ; single flag bits & multi-bit-field masks
 0080           CYFISNP_DIS_AUTO_SEN:                                   equ 0x80
 0040           CYFISNP_SEN_TXRXB:                                      equ 0x40
 0020           CYFISNP_FRC_SEN:                                        equ 0x20
 0018           CYFISNP_FRC_AWAKE_MSK:                                  equ 0x18
 0018           CYFISNP_MODE_OVRD_FRC_AWAKE:                            equ 0x18
 0008           CYFISNP_MODE_OVRD_FRC_AWAKE_OFF_1:                      equ 0x08
 0000           CYFISNP_MODE_OVRD_FRC_AWAKE_OFF_2:                      equ 0x00
 0001           CYFISNP_RST:                                            equ 0x01
 0002           CYFISNP_FRC_PA:                                         equ 0x02
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; RX Override register
 0000           ; -------------------------------
 001E           CYFISNP_RX_OVERRIDE_ADR:                                equ 0x1e
 0000           CYFISNP_RX_OVERRIDE_RST:                                equ 0x00
 0000           
 0000           ; single flag bits & multi-bit-field masks
 0080           CYFISNP_ACK_RX:                                         equ 0x80
 0040           CYFISNP_EXTEND_RX_TX:                                   equ 0x40
 0020           CYFISNP_MAN_RXACK:                                      equ 0x20
 0010           CYFISNP_FRC_RXDR:                                       equ 0x10
 0008           CYFISNP_DIS_CRC0:                                       equ 0x08
 0004           CYFISNP_DIS_RXCRC:                                      equ 0x04
 0002           CYFISNP_ACE:                                            equ 0x02
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; TX Override register
 0000           ; -------------------------------
 001F           CYFISNP_TX_OVERRIDE_ADR:                                equ 0x1f
 0000           CYFISNP_TX_OVERRIDE_RST:                                equ 0x00
 0000           
 0000           ; single flag bits & multi-bit-field masks
 0080           CYFISNP_ACK_TX_SEN:                                     equ 0x80
 0040           CYFISNP_FRC_PREAMBLE:                                   equ 0x40
 0020           CYFISNP_DIS_TX_RETRANS:                                 equ 0x20
 0010           CYFISNP_MAN_TXACK:                                      equ 0x10
 0008           CYFISNP_OVRRD_ACK:                                      equ 0x08
 0004           CYFISNP_DIS_TXCRC:                                      equ 0x04
 0002           CYFISNP_CO:                                             equ 0x02
 0001           CYFISNP_TXINV:                                          equ 0x01
 0000           
 0000           
 0000           ;------------------------------------------------------------------------------
 0000           ;      File Function Detail
 0000           ;------------------------------------------------------------------------------
 0000           
 0000           ; -------------------------------
 0000           ; TX Buffer - 16 bytes
 0000           ; -------------------------------
 0020           CYFISNP_TX_BUFFER_ADR:                                  equ 0x20
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; RX Buffer - 16 bytes
 0000           ; -------------------------------
 0021           CYFISNP_RX_BUFFER_ADR:                                  equ 0x21
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Framing Code - 8 bytes
 0000           ; -------------------------------
 0022           CYFISNP_SOP_CODE_ADR:                                   equ 0x22
 0000           
 0000           ; CODESTORE_REG_SOF_RST        64'h17_ff_9e_21_36_90_c7_82
 0017           CYFISNP_CODESTORE_BYTE7_SOF_RST:                        equ 0x17
 00FF           CYFISNP_CODESTORE_BYTE6_SOF_RST:                        equ 0xff
 009E           CYFISNP_CODESTORE_BYTE5_SOF_RST:                        equ 0x9e
 0021           CYFISNP_CODESTORE_BYTE4_SOF_RST:                        equ 0x21
 0036           CYFISNP_CODESTORE_BYTE3_SOF_RST:                        equ 0x36
 0090           CYFISNP_CODESTORE_BYTE2_SOF_RST:                        equ 0x90
 00C7           CYFISNP_CODESTORE_BYTE1_SOF_RST:                        equ 0xc7
 0082           CYFISNP_CODESTORE_BYTE0_SOF_RST:                        equ 0x82
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Data Code - 16 bytes
 0000           ; -------------------------------
 0023           CYFISNP_DATA_CODE_ADR:                                  equ 0x23
 0000           
 0000           ; CODESTORE_REG_DCODE0_RST            64'h01_2B_F1_DB_01_32_BE_6F
 0001           CYFISNP_CODESTORE_BYTE7_DCODE0_RST:                     equ 0x01
 002B           CYFISNP_CODESTORE_BYTE6_DCODE0_RST:                     equ 0x2b
 00F1           CYFISNP_CODESTORE_BYTE5_DCODE0_RST:                     equ 0xf1
 00DB           CYFISNP_CODESTORE_BYTE4_DCODE0_RST:                     equ 0xdb
 0001           CYFISNP_CODESTORE_BYTE3_DCODE0_RST:                     equ 0x01
 0032           CYFISNP_CODESTORE_BYTE2_DCODE0_RST:                     equ 0x32
 00BE           CYFISNP_CODESTORE_BYTE1_DCODE0_RST:                     equ 0xbe
 006F           CYFISNP_CODESTORE_BYTE0_DCODE0_RST:                     equ 0x6f
 0000           
 0000           ; CODESTORE_REG_DCODE1_RST            64'h02_F9_93_97_02_FA_5C_E3
 0002           CYFISNP_CODESTORE_BYTE7_DCODE1_RST:                     equ 0x02
 00F9           CYFISNP_CODESTORE_BYTE6_DCODE1_RST:                     equ 0xf9
 0093           CYFISNP_CODESTORE_BYTE5_DCODE1_RST:                     equ 0x93
 0097           CYFISNP_CODESTORE_BYTE4_DCODE1_RST:                     equ 0x97
 0002           CYFISNP_CODESTORE_BYTE3_DCODE1_RST:                     equ 0x02
 00FA           CYFISNP_CODESTORE_BYTE2_DCODE1_RST:                     equ 0xfa
 005C           CYFISNP_CODESTORE_BYTE1_DCODE1_RST:                     equ 0x5c
 00E3           CYFISNP_CODESTORE_BYTE0_DCODE1_RST:                     equ 0xe3
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Preamble - 3 bytes
 0000           ; -------------------------------
 0024           CYFISNP_PREAMBLE_ADR:                                   equ 0x24
 0000           
 0033           CYFISNP_PREAMBLE_CODE_MSB_RST:                          equ 0x33
 0033           CYFISNP_PREAMBLE_CODE_LSB_RST:                          equ 0x33
 0002           CYFISNP_PREAMBLE_LEN_RST:                               equ 0x02
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Laser Fuses - 8 bytes (2 hidden)
 0000           ; -------------------------------
 0025           CYFISNP_MFG_ID_ADR:                                     equ 0x25
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; XTAL Startup Delay
 0000           ; -------------------------------
 0026           CYFISNP_XTAL_CFG_ADR:                                   equ 0x26
 0000           CYFISNP_XTAL_CFG_RST:                                   equ 0x00
 0000           
 0000           ; -------------------------------
 0000           ; Clock Override
 0000           ; -------------------------------
 0027           CYFISNP_CLK_OVERRIDE_ADR:                               equ 0x27
 0000           CYFISNP_CLK_OVERRIDE_RST:                               equ 0x00
 0000           
 0002           CYFISNP_RXF:                                            equ 0x02
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Clock Enable
 0000           ; -------------------------------
 0028           CYFISNP_CLK_EN_ADR:                                     equ 0x28
 0000           CYFISNP_CLK_EN_RST:                                     equ 0x00
 0000           
 0002           CYFISNP_RXF:                                            equ 0x02
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Receiver Abort
 0000           ; -------------------------------
 0029           CYFISNP_RX_ABORT_ADR:                                   equ 0x29
 0000           CYFISNP_RX_ABORT_RST:                                   equ 0x00
 0000           
 0020           CYFISNP_ABORT_EN:                                       equ 0x20
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Auto Calibration Time
 0000           ; -------------------------------
 0032           CYFISNP_AUTO_CAL_TIME_ADR:                              equ 0x32
 000C           CYFISNP_AUTO_CAL_TIME_RST:                              equ 0x0C
 0000           
 003C           CYFISNP_AUTO_CAL_TIME_MAX:                              equ 0x3C
 0000           
 0000           
 0000           ; -------------------------------
 0000           ; Auto Calibration Offset
 0000           ; -------------------------------
 0035           CYFISNP_AUTO_CAL_OFFSET_ADR:                            equ 0x35
 0000           CYFISNP_AUTO_CAL_OFFSET_RST:                            equ 0x00
 0000           
 0014           CYFISNP_AUTO_CAL_OFFSET_MINUS_4:                        equ 0x14
 0000           
 0000           
 0000           ; ############################################################################
 0000           ; END OF CYFISPI.inc
 0000           ; ############################################################################
 0000           
 0000           
 0000           ; This parameter is used to tune the SPI read/write routines
 0040           CPU_CYCLES_PER_SPI_BYTE:                  EQU     0x40
 0000           
 0000           ;-----------------------------------------------------------------------------
 0000           ; Just shorter names for SPI I/O for local scope
 002B           CYFISNP_SPI_CTRL_REG:   EQU     CYFISNP_CONTROL_REG
 0029           CYFISNP_SPI_TX_REG:     EQU     CYFISNP_TX_BUFFER_REG
 002A           CYFISNP_SPI_RX_REG:     EQU     CYFISNP_RX_BUFFER_REG
 0010           CYFISNP_SPI_TX_EMPTY:   EQU     CYFISNP_SPIM_TX_BUFFER_EMPTY
 0020           CYFISNP_SPI_DONE:       EQU     CYFISNP_SPIM_SPI_COMPLETE
 0008           CYFISNP_SPI_RX_FULL:    EQU     CYFISNP_SPIM_RX_BUFFER_FULL
 0040           CYFISNP_SPI_RX_OVERRUN: EQU     CYFISNP_SPIM_RX_OVERRUN_ERROR
 0000           
 0000           
 0000           ;--------------------------------------------------------------------------;
 0000           ;                                                                          ;
 0000           ;                            V A R I A B L E S                             ;
 0000           ;                                                                          ;
 0000           ;--------------------------------------------------------------------------;
                AREA    InterruptRAM(ram)       ; Variables on RAM Page 0
                
                IF SYSTEM_LARGE_MEMORY_MODEL
                        ; Although contrary to the big-endian ImageCraft compiler,
                        ;  Little-endian makes cleaner LMM/SMM macros.
                CYFISNP_WipPtr::   BLK     2       ; Working pointer (LSB, MSB, little-endian)
                CYFISNP_WipLen::   BLK     1       ; Working buffer length.
                CYFISNP_Ptr::      BLK     2       ; SPI access routine parameter (little-endian)
                CYFISNP_Len::      BLK     1       ; SPI access routines parameter - length.
                ELSE
 0000           CYFISNP_WipPtr::   BLK     1       ; Working pointer.
 0001           CYFISNP_WipLen::   BLK     1       ; Working buffer length.
 0002           CYFISNP_Ptr::      BLK     1       ; Parameter to SPI access routines - address.
 0003           CYFISNP_Len::      BLK     1       ; Parameter to SPI access routines - length.
                ENDIF
                
 0004           CYFISNP_SpiTemp:   BLK     1       ; Local working temp.
 0005           
 0005           
 0005           ;-----------------------------------------------------------------------------
 0080           CYFISNP_SPI_USE:        equ     0x80
 0001           CYFISNP_OUTPUT_EN:      equ     0x01
 0080           CYFISNP_SPI_SWAP:       equ     0x80
 0005           ;-----------------------------------------------------------------------------
 0005           
 0005           ;-----------------------------------------------------------------------------
 0005           macro   CYFISNP_SPI_TX_EMPTY_WAIT
 0005           .L2:    TST     REG[CYFISNP_SPI_CTRL_REG], CYFISNP_SPI_TX_EMPTY ; (TST opcode preserves CRY)
 0005                   JZ      .L2
 0005           macro   CYFISNP_SPI_RX_FULL_WAIT
 0005           .L2:    TST     REG[CYFISNP_SPI_CTRL_REG], CYFISNP_SPI_RX_FULL ; (TST opcode preserves CRY)
 0005                   JZ      .L2
 0005           macro   CYFISNP_SPI_RX_OVERRUN_WAIT
 0005           .L2:    TST     REG[CYFISNP_SPI_CTRL_REG], CYFISNP_SPI_RX_OVERRUN ; (TST opcode preserves CRY)
 0005                   JZ      .L2
                AREA    UserModules (ROM, REL)
                
 0000 7100          or   F, 0
 0002           
 0002           ;-----------------------------------------------------------------------------
 0002           ;
 0002           ; Some comments on the operation of the SPI PSoC block:
 0002           ;
 0002           ; The SPI_DONE and SPI_TX_EMPTY status
 0002           ;  bits are self-clearing. After you've read SPI_CTRL_REG these
 0002           ;  bits will be cleared. During a multibyte SPI transaction we use the
 0002           ;  SPI_TX_EMPTY status to pace the data, but at the end
 0002           ;  of a transaction we use SPI_DONE to determine that
 0002           ;  we can de-assert the slave select.
 0002           ;
 0002           ; Although the hardware generates the SPI_CTRL_REG status
 0002           ;  one full byte time before SPI_TX_EMPTY if you are
 0002           ;  not reading the SPI_CTRL_REG register fast enough you might
 0002           ;  see both of those status indications occur together, and after you've
 0002           ;  read the SPI_CTRL_REG status it will clear and you will not see
 0002           ;  it again. In the case that the SPI clock is very fast, or if interrupts
 0002           ;  are left enabled during the execution of these routines then it is very
 0002           ;  possible to see both of these indications occur together.
 0002           ;
 0002           ; In order for these routines to allow interrupts to be enabled during their
 0002           ;  execution they are structured to allow the assertion of the two status
 0002           ;  bits SPI_DONE and SPI_TX_EMPTY
 0002           ;  on the same read of SPI_CTRL_REG. Although this is a real world
 0002           ;  condition, you will only see it under stressed conditions.
 0002           ;
 0002           ; One other strangeness of the PSoC SPI block is that the
 0002           ;  SPI_DONE status ONLY INDICATES THE STATE OF THE
 0002           ;  SHIFTER - it does not include the state of the holding register. This
 0002           ;  means that when we need to poll SPI_DONE at the
 0002           ;  end of a transaction we need to make sure we see the status incdication
 0002           ;  SPI_TX_EMPTY to know that the complete wasn't for
 0002           ;  the previous byte.
 0002           ;
 0002           ;-----------------------------------------------------------------------------
 0002           
 0002           
 0002           ;-------------------------------------------------------------------------------
 0002           ; Interrupt Unsafe SPI API
 0002           ;
 0002           ; This portion of CYFISNP_PSoC_SPIm.asm does not manipulate the GIE
 0002           ; flag in any way.  However, the GIE flag must be cleared when these routines
 0002           ; are executing.  Therefore, they may only be directly called by interrupt
 0002           ; service routines (which do not nest interrupts).
 0002           ;-------------------------------------------------------------------------------
 0002           
 0002           
 0002           .section
 0002           ;-----------------------------------------------------------------------------
 0002           ;
 0002           ; CYFISNP_WriteSwappedRaw: Write a single byte to Radio register.
 0002           ;                  Same as CYFISNP_WriteRaw(), except A and X are
 0002           ;                  swapped because C calling convention makes it easier to set
 0002           ;                  registers.
 0002           ;
 0002           ; Assembly Call:   A: Value to write to selected register.
 0002           ;                  X: Register number to write, high 2 bits MUST be ZERO !
 0002           ; -------------------
 0002           ;
 0002           ; CYFISNP_WriteRaw:      Write a single byte to an Radio register.
 0002           ;
 0002           ; 'C' Call:        void CYFISNP_WriteRaw(RADIO_REG_ADDR regAddr, BYTE value);
 0002           ;
 0002           ; Assembly Call:   A: Register number to write, high 2 bits MUST be ZERO !
 0002           ;                  X: Value to write to the selected register.
 0002           ;
 0002           ; Assembly Return: A: lost
 0002           ;                  X: lost
 0002           ;             CUR_PP: Large Memory Model sets to RadioDriverRamPage
 0002           ;
 0002           ; Assumptions:
 0002           ;    1. The global interrupt enable flag is cleared on entry.
 0002           ;-----------------------------------------------------------------------------
 0002            CYFISNP_WriteSwappedRaw::
 0002 4B                SWAP    A, X
 0003           
 0003            CYFISNP_WriteRaw::
 0003           _CYFISNP_WriteRaw::
 0003 2980              OR      A, CYFISNP_bSPI_WRITE           ; Set the Write Bit.
 0005           
 0005                   ; Fall-thru to use RadioRead() to perform the Write
 0005           
 0005           ;-----------------------------------------------------------------------------
 0005           ;
 0005           ; CYFISNP_ReadRaw:       Read a single byte from an Radio register.
 0005           ;
 0005           ; 'C' Call:        BYTE CYFISNP_ReadRaw(RADIO_REG_ADDR regAddr);
 0005           ;
 0005           ; Assembly Call:   A: The register number to read
 0005           ;                  X: READ=unused, fallthru from WRITE=Data
 0005           ;
 0005           ;                  (For both the 'C' and assembly call the top two bits of
 0005           ;                   the register number MUST be clear.)
 0005           ;
 0005           ; Assembly Return: A: Value from register
 0005           ;                  X: lost
 0005           ;             CUR_PP: Large Memory Model sets to RadioDriverRamPage
 0005           ;
 0005           ; Assumptions:
 0005           ;    1. The global interrupt enable flag is cleared on entry.
 0005           ;    2. The SPI bus is idle on entry.
 0005           ;-----------------------------------------------------------------------------
 0005            CYFISNP_ReadRaw::
 0005           _CYFISNP_ReadRaw::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
                
                IF(0x18 * 0x17)
                   IF (CYFISNP_FAST_SS_ACTUATION)
 0005 41087F          and   reg[CYFISNP_nSS_Addr], ~CYFISNP_nSS_MASK
                      IF (CYFISNP_ARCH_TYPE_C20066 | CYFISNP_ARCH_TYPE_TMA300)
                         IF((CYFISNP_nSS_Addr - CYFISNP_IRQ_Addr) * (CYFISNP_nSS_Addr - PRT1DR))
                         ELSE
                            or    reg[CYFISNP_nSS_Addr], CYFISNP_OD_MASK
                         ENDIF
                      ENDIF
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            or      reg[P15CR], (CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)       ; P1.5 is SPI MOSI out
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                         ENDIF
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         or    reg[CYFISNP_CONTROL_REG], bfCONTROL_REG_START_BIT
                      ENDIF
                
                   ENDIF
                   ELSE
                      IF (CYFISNP_nSS_IS_PPSOC_FN)
                         push    A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   mov   A, reg[ CUR_PP ]
                   push  A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >FN_0_Data_SHADE
                   ENDIF
                         ENDIF
                         and     [FN_0_Data_SHADE], ~CYFISNP_nSS_MASK
                         mov     A, [FN_0_Data_SHADE]
                         mov     reg[CYFISNP_nSS_Addr], A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   pop   A
                   mov   reg[ CUR_PP ], A
                         ENDIF
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            or      reg[P15CR], (CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)       ; P1.5 is SPI MOSI out
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                         ENDIF
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         or    reg[CYFISNP_CONTROL_REG], bfCONTROL_REG_START_BIT
                      ENDIF
                
                   ENDIF
                         pop     A
                      ELSE
                         push    A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   mov   A, reg[ CUR_PP ]
                   push  A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_2_Data_SHADE
                   ENDIF
                         ENDIF
                         and     [Port_2_Data_SHADE], ~CYFISNP_nSS_MASK
                         mov     A, [Port_2_Data_SHADE]
                         mov     reg[CYFISNP_nSS_Addr], A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   pop   A
                   mov   reg[ CUR_PP ], A
                         ENDIF
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            or      reg[P15CR], (CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)       ; P1.5 is SPI MOSI out
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                         ENDIF
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         or    reg[CYFISNP_CONTROL_REG], bfCONTROL_REG_START_BIT
                      ENDIF
                
                   ENDIF
                         pop     A
                      ENDIF
                   ENDIF
                ENDIF
                
 0008 6029              MOV     REG[CYFISNP_SPI_TX_REG], A      ; Write SPI address
 000A 5D2A              MOV     A, REG[CYFISNP_SPI_RX_REG]      ; Empty the SPI RX register
 000C           
 000C           
 000C                   ; Wait for the TX register to empty, and simultaneously clear the RX overrun flag.
 000C                   ; Reading the SPI RX register takes 6 CPU cycles.
 000C                   ; Reading the SPI status register with a MOV to clear the RX overrun flag takes 6 CPU cycles.
 000C                   ; Loading A with the contents of the data byte (in X) takes 4 CPU cycles.
 000C                   ; This totals 16 CPU cycles.
 000C                   ; If it takes the SPI block less than 16 CPU cycles to shift out 1.5 bits
 000C                   ; (less than 85 CPU cycles per byte), we can assume that the TX register
 000C                   ; will already be empty after these instructions execute and thereby skip the wait.
 000C                   ; Note: 1.5 bits is equal to 3 input clocks to the SPI block.  This gives a margin of safety
 000C                   ;    that the TX register is really empty.
                IF (CPU_CYCLES_PER_SPI_BYTE / 85)
                .L2:    TST     REG[CYFISNP_SPI_CTRL_REG], CYFISNP_SPI_TX_EMPTY ; (TST opcode preserves CRY)
                        JZ      .L2
                ELSE
                        ; CYFISNP_SPI_TX_EMPTY_WAIT clears the RX overrun flag.  Do the same for fast SPI.
 000C 5D2B              MOV     A, REG[CYFISNP_SPI_CTRL_REG]
                ENDIF
                
 000E 5B                MOV     A, X                                     ; Load A with the next byte to write
 000F 6029              MOV     REG[CYFISNP_SPI_TX_REG], A      ; Write SPI data
 0011 492B40    .L2:    TST     REG[CYFISNP_SPI_CTRL_REG], CYFISNP_SPI_RX_OVERRUN ; (TST opcode preserves CRY)
 0014 AFFC              JZ      .L2
 0016           
 0016           
 0016                   ; When RX overrun goes true, there is an additional 1 SPI bit time before
 0016                   ; the SPI done bit goes true indicating that the transaction is over.
 0016                   ; The JZ instruction inside CYFISNP_SPI_RX_OVERRUN_WAIT
 0016                   ; provides a delay of 5 CPU cycles.  These 5 cycles provide a safety margin on
 0016                   ; top of software delays below.
                IF (CPU_CYCLES_PER_SPI_BYTE / 128)
                        ; 128 <= CPU cycles per SPI byte
                        ;  16 <= CPU cycles per SPI bit
                        ; The CPU is really fast compared to the SPI.
                        ; Wait for the SPI Done bit to become true (this occurs 1 SPI bit clock after overrun)
                .WaitSPIDone:
                        TST     REG[CYFISNP_SPI_CTRL_REG], CYFISNP_SPI_DONE
                        JZ      .WaitSPIDone
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 96)
                        ; 96 <= CPU cycles per SPI byte < 128
                        ; 12 <= CPU cycles per SPI bit < 16
                        ; Delay an additional 16 CPU clock cycles to ensure the RX register is full.
                        ; 16 + 5 = 21 total CPU cycles of delay.
                        NOP
                        NOP
                        NOP
                        NOP
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 96)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 64)
                        ; 64 <= CPU cycles per SPI byte < 96
                        ;  8 <= CPU cycles per SPI bit < 12
                        ; Delay an additional 12 CPU clock cycles to ensure the RX register is full.
                        ; 12 + 5 = 17 total CPU cycles of delay.
 0016 40                NOP
 0017 40                NOP
 0018 40                NOP
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 64)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 32)
                        ; 32 <= CPU cycles per SPI byte < 64
                        ;  4 <= CPU cycles per SPI bit < 8
                        ; Delay an additional 8 CPU clock cycles to ensure the RX register is full.
                        ; 8 + 5 = 13 total CPU cycles of delay.
                        NOP
                        NOP
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 32)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 24)
                        ; 24 <= CPU cycles per SPI byte < 32
                        ;  3 <= CPU cycles per SPI bit < 4
                        ; Delay an additional 4 CPU clock cycles to ensure the RX register is full.
                        ; 4 + 5 = 9 total CPU cycles of delay.
                        NOP
                  ELSE
                        ; CPU Cycles per SPI byte < 24
                        ; CPU cycles per SPI bit < 3.5
                        ; There is no need to provide additional delay to ensure the RX register is full.
                        ; 0 + 5 = 5 total CPU cycles of delay.
                  ENDIF
                ENDIF
                
 0019 5D2A              MOV     A, REG[CYFISNP_SPI_RX_REG]      ; Get SPI Rx data
 001B                                                                    ; A = return value
 001B           
                IF(0x18 * 0x17)
                   IF (CYFISNP_FAST_SS_ACTUATION)
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQIE_Addr],  CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            and     reg[P15CR], ~(CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)      ; P1.5 is IRQ input
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                    or    F, FLAG_XIO_MASK
                            or     reg[CYFISNP_IRQDM1_Addr], CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         and    reg[CYFISNP_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                         or     reg[CYFISNP_IRQ_Addr],(CYFISNP_IRQ_MASK | 0x20)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and    reg[INT_CLR0], ~INT_MSK0_GPIO
                            or     reg[CYFISNP_IRQIE_Addr], CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                
                   ENDIF
 001B 430880          or      reg[CYFISNP_nSS_Addr], (CYFISNP_nSS_MASK | CYFISNP_OD_MASK)
                   ELSE
                      IF (CYFISNP_nSS_IS_PPSOC_FN)
                         push    A
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQIE_Addr],  CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            and     reg[P15CR], ~(CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)      ; P1.5 is IRQ input
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                    or    F, FLAG_XIO_MASK
                            or     reg[CYFISNP_IRQDM1_Addr], CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         and    reg[CYFISNP_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                         or     reg[CYFISNP_IRQ_Addr],(CYFISNP_IRQ_MASK | 0x20)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and    reg[INT_CLR0], ~INT_MSK0_GPIO
                            or     reg[CYFISNP_IRQIE_Addr], CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                
                   ENDIF
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   mov   A, reg[ CUR_PP ]
                   push  A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >FN_0_Data_SHADE
                   ENDIF
                         ENDIF
                         or      [FN_0_Data_SHADE], CYFISNP_nSS_MASK
                         mov     A, [FN_0_Data_SHADE]
                         mov     reg[CYFISNP_nSS_Addr], A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   pop   A
                   mov   reg[ CUR_PP ], A
                         ENDIF
                         pop     A
                      ELSE
                         push    A
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQIE_Addr],  CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            and     reg[P15CR], ~(CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)      ; P1.5 is IRQ input
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                    or    F, FLAG_XIO_MASK
                            or     reg[CYFISNP_IRQDM1_Addr], CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         and    reg[CYFISNP_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                         or     reg[CYFISNP_IRQ_Addr],(CYFISNP_IRQ_MASK | 0x20)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and    reg[INT_CLR0], ~INT_MSK0_GPIO
                            or     reg[CYFISNP_IRQIE_Addr], CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                
                   ENDIF
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   mov   A, reg[ CUR_PP ]
                   push  A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_2_Data_SHADE
                   ENDIF
                         ENDIF
                         or      [Port_2_Data_SHADE], CYFISNP_nSS_MASK
                         mov     A, [Port_2_Data_SHADE]
                         mov     reg[CYFISNP_nSS_Addr], A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   pop   A
                   mov   reg[ CUR_PP ], A
                         ENDIF
                         pop     A
                      ENDIF
                   ENDIF
                ENDIF
                
 001E 7F                RET
 001F           .endsection
 001F           
 001F           
 001F           .section
 001F           ;-----------------------------------------------------------------------------
 001F           ;
 001F           ; CYFISNP_ReadStatusDebouncedRaw:
 001F           ;                  Read a single byte from the RX_IRQ_STATUS_ADR register and
 001F           ;                  debounce the update of the RXC and RXE bits. If only one of
 001F           ;                  those two bits is set, read the register a second time and
 001F           ;                  or them together. This second read happens in the same
 001F           ;                  SPI transaction as a burst to the same address.
 001F           ;
 001F           ; 'C' Call:        BYTE CYFISNP_ReadStatusDebouncedRaw(RADIO_REG_ADDR regAddr);
 001F           ;
 001F           ; Assembly Call:   A: Register # to read
 001F           ;                  X: none
 001F           ;
 001F           ; Assembly Return: A: Value from register
 001F           ;                  X: Untouched
 001F           ;             CUR_PP: Large Memory Model sets to RadioDriverRamPage
 001F           ;
 001F           ; Assumptions:
 001F           ;    1. The global interrupt enable flag is cleared on entry.
 001F           ;    2. The SPI bus is idle on entry.
 001F           ;-----------------------------------------------------------------------------
 001F            CYFISNP_ReadStatusDebouncedRaw::
 001F           _CYFISNP_ReadStatusDebouncedRaw::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
                
                IF(0x18 * 0x17)
                   IF (CYFISNP_FAST_SS_ACTUATION)
 001F 41087F          and   reg[CYFISNP_nSS_Addr], ~CYFISNP_nSS_MASK
                      IF (CYFISNP_ARCH_TYPE_C20066 | CYFISNP_ARCH_TYPE_TMA300)
                         IF((CYFISNP_nSS_Addr - CYFISNP_IRQ_Addr) * (CYFISNP_nSS_Addr - PRT1DR))
                         ELSE
                            or    reg[CYFISNP_nSS_Addr], CYFISNP_OD_MASK
                         ENDIF
                      ENDIF
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            or      reg[P15CR], (CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)       ; P1.5 is SPI MOSI out
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                         ENDIF
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         or    reg[CYFISNP_CONTROL_REG], bfCONTROL_REG_START_BIT
                      ENDIF
                
                   ENDIF
                   ELSE
                      IF (CYFISNP_nSS_IS_PPSOC_FN)
                         push    A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   mov   A, reg[ CUR_PP ]
                   push  A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >FN_0_Data_SHADE
                   ENDIF
                         ENDIF
                         and     [FN_0_Data_SHADE], ~CYFISNP_nSS_MASK
                         mov     A, [FN_0_Data_SHADE]
                         mov     reg[CYFISNP_nSS_Addr], A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   pop   A
                   mov   reg[ CUR_PP ], A
                         ENDIF
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            or      reg[P15CR], (CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)       ; P1.5 is SPI MOSI out
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                         ENDIF
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         or    reg[CYFISNP_CONTROL_REG], bfCONTROL_REG_START_BIT
                      ENDIF
                
                   ENDIF
                         pop     A
                      ELSE
                         push    A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   mov   A, reg[ CUR_PP ]
                   push  A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_2_Data_SHADE
                   ENDIF
                         ENDIF
                         and     [Port_2_Data_SHADE], ~CYFISNP_nSS_MASK
                         mov     A, [Port_2_Data_SHADE]
                         mov     reg[CYFISNP_nSS_Addr], A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   pop   A
                   mov   reg[ CUR_PP ], A
                         ENDIF
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            or      reg[P15CR], (CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)       ; P1.5 is SPI MOSI out
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                         ENDIF
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         or    reg[CYFISNP_CONTROL_REG], bfCONTROL_REG_START_BIT
                      ENDIF
                
                   ENDIF
                         pop     A
                      ENDIF
                   ENDIF
                ENDIF
                
 0022 6029              MOV     REG[CYFISNP_SPI_TX_REG], A      ; Write SPI address.
 0024 5D2A              MOV     A, REG[CYFISNP_SPI_RX_REG]      ; Empty the SPI RX register
 0026           
 0026                   ; Wait for the TX register to empty, and simultaneously clear the RX overrun flag.
 0026                   ; Reading the SPI RX register takes 6 CPU cycles.
 0026                   ; Reading the SPI status register with a MOV to clear the RX overrun flag takes 6 CPU cycles.
 0026                   ; This totals 12 CPU cycles.
 0026                   ; If it takes the SPI block less than 12 CPU cycles to shift out 1.5 bits
 0026                   ; (less than 64 CPU cycles per byte), we can assume that the TX register
 0026                   ; will already be empty after these instructions execute and thereby skip the wait.
 0026                   ; Note: 1.5 bits is equal to 3 input clocks to the SPI block.  This gives a margin of safety
 0026                   ;    that the TX register is really empty.
                IF (CPU_CYCLES_PER_SPI_BYTE / 64)
 0026 492B10    .L2:    TST     REG[CYFISNP_SPI_CTRL_REG], CYFISNP_SPI_TX_EMPTY ; (TST opcode preserves CRY)
 0029 AFFC              JZ      .L2
                ELSE
                        ; CYFISNP_SPI_TX_EMPTY_WAIT clears the RX overrun flag.  Do the same for fast SPI.
                        MOV     A, REG[CYFISNP_SPI_CTRL_REG]
                ENDIF
                
 002B 6029              MOV     REG[CYFISNP_SPI_TX_REG], A      ; Write an arbitrary byte
 002D 492B40    .L2:    TST     REG[CYFISNP_SPI_CTRL_REG], CYFISNP_SPI_RX_OVERRUN ; (TST opcode preserves CRY)
 0030 AFFC              JZ      .L2
 0032           
 0032                   ; When RX overrun goes true, there is an additional 1 SPI bit time before
 0032                   ; the SPI done bit goes true indicating that the transaction is over.
 0032                   ; The JZ instruction inside CYFISNP_SPI_RX_OVERRUN_WAIT
 0032                   ; provides a delay of 5 CPU cycles.  These 5 cycles provide a safety margin on
 0032                   ; top of software delays below.
                IF (CPU_CYCLES_PER_SPI_BYTE / 128)
                        ; 128 <= CPU cycles per SPI byte
                        ;  16 <= CPU cycles per SPI bit
                        ; The CPU is really fast compared to the SPI.
                        ; Wait for the SPI Done bit to become true (this occurs 1 SPI bit clock after overrun)
                .WaitSPIDone:
                        TST     REG[CYFISNP_SPI_CTRL_REG], CYFISNP_SPI_DONE
                        JZ      .WaitSPIDone
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 96)
                        ; 96 <= CPU cycles per SPI byte < 128
                        ; 12 <= CPU cycles per SPI bit < 16
                        ; Delay an additional 16 CPU clock cycles to ensure the RX register is full.
                        ; 16 + 5 = 21 total CPU cycles of delay.
                        NOP
                        NOP
                        NOP
                        NOP
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 96)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 64)
                        ; 64 <= CPU cycles per SPI byte < 96
                        ;  8 <= CPU cycles per SPI bit < 12
                        ; Delay an additional 12 CPU clock cycles to ensure the RX register is full.
                        ; 12 + 5 = 17 total CPU cycles of delay.
 0032 40                NOP
 0033 40                NOP
 0034 40                NOP
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 64)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 32)
                        ; 32 <= CPU cycles per SPI byte < 64
                        ;  4 <= CPU cycles per SPI bit < 8
                        ; Delay an additional 8 CPU clock cycles to ensure the RX register is full.
                        ; 8 + 5 = 13 total CPU cycles of delay.
                        NOP
                        NOP
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 32)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 24)
                        ; 24 <= CPU cycles per SPI byte < 32
                        ;  3 <= CPU cycles per SPI bit < 4
                        ; Delay an additional 4 CPU clock cycles to ensure the RX register is full.
                        ; 4 + 5 = 9 total CPU cycles of delay.
                        NOP
                  ELSE
                        ; CPU Cycles per SPI byte < 24
                        ; CPU cycles per SPI bit < 3.5
                        ; There is no need to provide additional delay to ensure the RX register is full.
                        ; 0 + 5 = 5 total CPU cycles of delay.
                  ENDIF
                ENDIF
                
                        ; If RXC and RXE (or TXC and TXE) bits match,
                        ; then skip the debounce read
 0035 5D2A              MOV     A, REG[CYFISNP_SPI_RX_REG]      ; Get SPI Rx data
 0037 5304              MOV     [CYFISNP_SpiTemp], A
 0039 2103              AND     A, CYFISNP_RXC_IRQ | CYFISNP_RXE_IRQ
 003B A010              JZ      .Done                   ; Both bits are ZERO
 003D 3903              CMP     A, CYFISNP_RXC_IRQ | CYFISNP_RXE_IRQ
 003F A00C              JZ      .Done                   ; Both bits are ONE
 0041           
 0041                   ; The Complete and Error bits are different.
 0041                   ; Read again to ensure both bits have updated.
 0041 6029              MOV     REG[CYFISNP_SPI_TX_REG], A
 0043 492B08    .L2:    TST     REG[CYFISNP_SPI_CTRL_REG], CYFISNP_SPI_RX_FULL ; (TST opcode preserves CRY)
 0046 AFFC              JZ      .L2
 0048           
 0048 5D2A              MOV     A, REG[CYFISNP_SPI_RX_REG]      ; Get SPI Rx data
 004A 2C04              OR      [CYFISNP_SpiTemp], A
 004C           
 004C 5104      .Done:  MOV     A, [CYFISNP_SpiTemp]       ; Get the return value.
 004E           
                IF(0x18 * 0x17)
                   IF (CYFISNP_FAST_SS_ACTUATION)
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQIE_Addr],  CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            and     reg[P15CR], ~(CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)      ; P1.5 is IRQ input
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                    or    F, FLAG_XIO_MASK
                            or     reg[CYFISNP_IRQDM1_Addr], CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         and    reg[CYFISNP_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                         or     reg[CYFISNP_IRQ_Addr],(CYFISNP_IRQ_MASK | 0x20)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and    reg[INT_CLR0], ~INT_MSK0_GPIO
                            or     reg[CYFISNP_IRQIE_Addr], CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                
                   ENDIF
 004E 430880          or      reg[CYFISNP_nSS_Addr], (CYFISNP_nSS_MASK | CYFISNP_OD_MASK)
                   ELSE
                      IF (CYFISNP_nSS_IS_PPSOC_FN)
                         push    A
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQIE_Addr],  CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            and     reg[P15CR], ~(CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)      ; P1.5 is IRQ input
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                    or    F, FLAG_XIO_MASK
                            or     reg[CYFISNP_IRQDM1_Addr], CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         and    reg[CYFISNP_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                         or     reg[CYFISNP_IRQ_Addr],(CYFISNP_IRQ_MASK | 0x20)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and    reg[INT_CLR0], ~INT_MSK0_GPIO
                            or     reg[CYFISNP_IRQIE_Addr], CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                
                   ENDIF
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   mov   A, reg[ CUR_PP ]
                   push  A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >FN_0_Data_SHADE
                   ENDIF
                         ENDIF
                         or      [FN_0_Data_SHADE], CYFISNP_nSS_MASK
                         mov     A, [FN_0_Data_SHADE]
                         mov     reg[CYFISNP_nSS_Addr], A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   pop   A
                   mov   reg[ CUR_PP ], A
                         ENDIF
                         pop     A
                      ELSE
                         push    A
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQIE_Addr],  CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            and     reg[P15CR], ~(CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)      ; P1.5 is IRQ input
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                    or    F, FLAG_XIO_MASK
                            or     reg[CYFISNP_IRQDM1_Addr], CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         and    reg[CYFISNP_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                         or     reg[CYFISNP_IRQ_Addr],(CYFISNP_IRQ_MASK | 0x20)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and    reg[INT_CLR0], ~INT_MSK0_GPIO
                            or     reg[CYFISNP_IRQIE_Addr], CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                
                   ENDIF
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   mov   A, reg[ CUR_PP ]
                   push  A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_2_Data_SHADE
                   ENDIF
                         ENDIF
                         or      [Port_2_Data_SHADE], CYFISNP_nSS_MASK
                         mov     A, [Port_2_Data_SHADE]
                         mov     reg[CYFISNP_nSS_Addr], A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   pop   A
                   mov   reg[ CUR_PP ], A
                         ENDIF
                         pop     A
                      ENDIF
                   ENDIF
                ENDIF
                
 0051 7F                RET
 0052           .endsection
 0052           
 0052           
 0052           .section
 0052           ;-----------------------------------------------------------------------------
 0052           ;
 0052           ; CYFISNP_BurstWriteWipRaw:
 0052           ;                  Write sequence of bytes to sequence of Radio registers.
 0052           ;                  Uses RadioWipPtr instead of RadioPtr as the data pointer.
 0052           ;
 0052           ; ---------------------
 0052           ;
 0052           ; CYFISNP_FileWriteWipRaw:
 0052           ;                  Write sequence of bytes to singleRadio register.
 0052           ;                  Uses RadioWipPtr instead of RadioPtr as the data pointer.
 0052           ;
 0052           ; ---------------------
 0052           ;
 0052           ; CYFISNP_BurstWriteRaw: Write sequence of bytes to sequence of Radio registers.
 0052           ;
 0052           ; 'C' Call:        void CYFISNP_BurstWriteRaw(BYTE regAddr, BYTE cnt);
 0052           ;                  Must set RadioPtr via CYFISNP_SetPtr() before CYFISNP_BurstWriteRaw
 0052           ;
 0052           ; ---------------------
 0052           ;
 0052           ; CYFISNP_FileWriteRaw:  Write sequence of bytes to single Radio register.
 0052           ;
 0052           ; 'C' Call:        void CYFISNP_FileWriteRaw(LS_REG_ADDR regAddr, BYTE cnt);
 0052           ;                  (Must set RadioPtr via CYFISNP_SetPtr() before CYFISNP_FileWriteRaw)
 0052           ; ---------------------
 0052           ;
 0052           ; Assembly Call:   A: Register number to write, top two bits MUST be clear!
 0052           ;                  X: Length of buffer.
 0052           ;           RadioPtr: Address of buffer to write.
 0052           ;
 0052           ; Assembly Return: A: Undefined
 0052           ;                  X: Undefined
 0052           ;             CUR_PP: Large Memory Model sets to RadioDriverRamPage
 0052           ;             MVR_PP: Large Memory Model sets to RadioWipPtr page
 0052           ;
 0052           ; Assumptions:
 0052           ;    1. The global interrupt enable flag is cleared on entry.
 0052           ;    2. The SPI bus is idle on entry.
 0052           ;    3. Maximum write length is 16 bytes.
 0052           ;-----------------------------------------------------------------------------
 0052            CYFISNP_BurstWriteWipRaw::
 0052 2940              OR      A, CYFISNP_bSPI_AUTO_INC        ; Set increment flag
 0054 8006              JMP     CYFISNP_FileWriteWipRaw       ; Use existing WIP ptr/ctr
 0056           
 0056            CYFISNP_BurstWriteRaw::
 0056           _CYFISNP_BurstWriteRaw::
 0056 2940              OR      A, CYFISNP_bSPI_AUTO_INC        ; Set increment flag.
 0058                   ; Fall through to CYFISNP_FileWriteRaw
 0058           
 0058            CYFISNP_FileWriteRaw::
 0058           _CYFISNP_FileWriteRaw::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
                  IF (SYSTEM_LARGE_MEMORY_MODEL)
                        MOV     [CYFISNP_WipPtr+1], [CYFISNP_Ptr+1] ; Copy MSByte buffer pointer.
                  ENDIF
 0058 5F0002            MOV     [CYFISNP_WipPtr+0], [CYFISNP_Ptr+0] ; Copy LSByte buffer pointer.
 005B                   ; Fall through to CYFISNP_FileWriteWipRaw
 005B           
 005B           CYFISNP_FileWriteWipRaw::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
                
 005B 79                DEC     X
 005C C021              JC      .Done                                    ; If the length is zero do nothing at all.
 005E 2980              OR      A, CYFISNP_bSPI_WRITE           ; Set the write flag.
 0060           
                IF(0x18 * 0x17)
                   IF (CYFISNP_FAST_SS_ACTUATION)
 0060 41087F          and   reg[CYFISNP_nSS_Addr], ~CYFISNP_nSS_MASK
                      IF (CYFISNP_ARCH_TYPE_C20066 | CYFISNP_ARCH_TYPE_TMA300)
                         IF((CYFISNP_nSS_Addr - CYFISNP_IRQ_Addr) * (CYFISNP_nSS_Addr - PRT1DR))
                         ELSE
                            or    reg[CYFISNP_nSS_Addr], CYFISNP_OD_MASK
                         ENDIF
                      ENDIF
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            or      reg[P15CR], (CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)       ; P1.5 is SPI MOSI out
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                         ENDIF
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         or    reg[CYFISNP_CONTROL_REG], bfCONTROL_REG_START_BIT
                      ENDIF
                
                   ENDIF
                   ELSE
                      IF (CYFISNP_nSS_IS_PPSOC_FN)
                         push    A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   mov   A, reg[ CUR_PP ]
                   push  A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >FN_0_Data_SHADE
                   ENDIF
                         ENDIF
                         and     [FN_0_Data_SHADE], ~CYFISNP_nSS_MASK
                         mov     A, [FN_0_Data_SHADE]
                         mov     reg[CYFISNP_nSS_Addr], A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   pop   A
                   mov   reg[ CUR_PP ], A
                         ENDIF
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            or      reg[P15CR], (CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)       ; P1.5 is SPI MOSI out
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                         ENDIF
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         or    reg[CYFISNP_CONTROL_REG], bfCONTROL_REG_START_BIT
                      ENDIF
                
                   ENDIF
                         pop     A
                      ELSE
                         push    A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   mov   A, reg[ CUR_PP ]
                   push  A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_2_Data_SHADE
                   ENDIF
                         ENDIF
                         and     [Port_2_Data_SHADE], ~CYFISNP_nSS_MASK
                         mov     A, [Port_2_Data_SHADE]
                         mov     reg[CYFISNP_nSS_Addr], A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   pop   A
                   mov   reg[ CUR_PP ], A
                         ENDIF
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            or      reg[P15CR], (CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)       ; P1.5 is SPI MOSI out
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                         ENDIF
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         or    reg[CYFISNP_CONTROL_REG], bfCONTROL_REG_START_BIT
                      ENDIF
                
                   ENDIF
                         pop     A
                      ENDIF
                   ENDIF
                ENDIF
                
 0063 6029              MOV     REG[CYFISNP_SPI_TX_REG], A      ; Write the address
 0065           
 0065           
                    IF (SYSTEM_LARGE_MEMORY_MODEL)
                        MOV     A, [CYFISNP_WipPtr+1]           ; MSByte adr
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[MVR_PP], A
                   ENDIF
                    ENDIF
                
 0065           .Burst:
 0065                   ; Pre-load A with the value to transfer
 0065 3E00              MVI     A, [CYFISNP_WipPtr+0]           ; Get the data
 0067           
 0067           
 0067                   ; Wait for the TX register to empty.  The components of the .Burst loop
 0067                   ; for transferring data and tracking take 24 CPU cycles total.
                IF (CPU_CYCLES_PER_SPI_BYTE / 37)
                        ; 37 <=CPU cycles per byte.  Monitor the TX empty flag.
 0067 492B10    .L2:    TST     REG[CYFISNP_SPI_CTRL_REG], CYFISNP_SPI_TX_EMPTY ; (TST opcode preserves CRY)
 006A AFFC              JZ      .L2
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 33)
                        ; 33 <= CPU cycles per byte < 37.  Wait an additional 12 cycles
                        ; 24 + 12 = 36 CPU clock cycles total loop time.
                        NOP
                        NOP
                        NOP
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 33)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 29)
                        ; 29 <= CPU cycles per byte < 33.  Wait an additional 8 cycles
                        ; 24 + 8 = 32 CPU clock cycles total loop time.
                        NOP
                        NOP
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 29)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 25)
                        ; 25 <= CPU cycles per byte < 29.  Wait an additional 4 cycles
                        ; 24 + 4 = 28 CPU clock cycles total loop time.
                        NOP
                  ELSE
                        ; CPU cycles per byte < 25.  Assume the TX register is already empty.
                        ; 24 + 0 = 24 CPU clock cycles total loop time.
                  ENDIF
                ENDIF
                
                
 006C 6029              MOV     REG[CYFISNP_SPI_TX_REG], A          ; Write the next byte
 006E 79                DEC     X                                            ; Update the number of bytes transferred
 006F DFF5              JNC     .Burst                                       ; Continue the transfer if not done
 0071           
 0071                   ; All done bursting, wait for last byte to leave the holding register
 0071 492B10    .L2:    TST     REG[CYFISNP_SPI_CTRL_REG], CYFISNP_SPI_TX_EMPTY ; (TST opcode preserves CRY)
 0074 AFFC              JZ      .L2
 0076           
 0076                   ; Wait for shifting to complete and the SPI transaction to finish.
 0076                   ; (1 SPI byte time minimum after the TX register empties)
 0076                   ; There are 5 cycles of delay guaranteed by the JZ instruction inside
 0076                   ; CYFISNPSPI_TX_EMPTY_WAIT before this section executes.
 0076                   ; CYFISNP_RADIO_DESELECT also provides 13 cycles of delay before
 0076                   ; deactivating the nSS.  Therefore, 18 cycles of delay are guaranteed.
                IF (CPU_CYCLES_PER_SPI_BYTE / 34)
                        ; The SPI is slow enough that the SPI_DONE bit can be monitored.
 0076 492B20    .L1:    TST     REG[CYFISNP_SPI_CTRL_REG],CYFISNP_SPI_DONE
 0079 AFFC              JZ      .L1
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 30)
                        ; 30 <= CPU cycles per SPI byte < 34
                        ; Delay for 20 additional clock cycles.
                        ; 20 + 18 = 38 CPU cycles total delay
                        NOP
                        NOP
                        NOP
                        NOP
                        NOP
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 30)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 26)
                        ; 26 <= CPU cycles per SPI byte < 30
                        ; The SPI is too fast for SPI_DONE monitoring.
                        ; Delay for 16 additional clock cycles.
                        ; 16 + 18 = 34 CPU cycles total delay
                        NOP
                        NOP
                        NOP
                        NOP
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 26)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 22)
                        ; 22 <= CPU cycles per SPI byte < 26
                        ; The SPI is too fast for SPI_DONE monitoring.
                        ; Delay for 12 additional clock cycles.
                        ; 12 + 18 = 30 CPU cycles total delay
                        NOP
                        NOP
                        NOP
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 22)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 18)
                        ; 18 <= CPU cycles per SPI byte < 22
                        ; SPI is too fast for SPI_DONE monitoring.
                        ; Delay for 8 additional clock cycles.
                        ; 8 + 18 = 26 CPU cycles total delay
                        NOP
                        NOP
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 18)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 14)
                        ; 14 <= CPU cycles per SPI byte < 18
                        ; SPI is too fast for SPI_DONE monitoring.
                        ; Delay for 4 additional clock cycles.
                        ; 4 + 18 = 22 CPU cycles total delay
                        NOP
                  ELSE
                        ; CPU cycles per SPI byte < 14
                        ; SPI is too fast for SPI_DONE monitoring.
                        ; No additional delay required.
                        ; 0 + 18 = 18 CPU cycles total delay
                  ENDIF
                ENDIF
                
                
                IF(0x18 * 0x17)
                   IF (CYFISNP_FAST_SS_ACTUATION)
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQIE_Addr],  CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            and     reg[P15CR], ~(CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)      ; P1.5 is IRQ input
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                    or    F, FLAG_XIO_MASK
                            or     reg[CYFISNP_IRQDM1_Addr], CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         and    reg[CYFISNP_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                         or     reg[CYFISNP_IRQ_Addr],(CYFISNP_IRQ_MASK | 0x20)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and    reg[INT_CLR0], ~INT_MSK0_GPIO
                            or     reg[CYFISNP_IRQIE_Addr], CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                
                   ENDIF
 007B 430880          or      reg[CYFISNP_nSS_Addr], (CYFISNP_nSS_MASK | CYFISNP_OD_MASK)
                   ELSE
                      IF (CYFISNP_nSS_IS_PPSOC_FN)
                         push    A
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQIE_Addr],  CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            and     reg[P15CR], ~(CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)      ; P1.5 is IRQ input
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                    or    F, FLAG_XIO_MASK
                            or     reg[CYFISNP_IRQDM1_Addr], CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         and    reg[CYFISNP_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                         or     reg[CYFISNP_IRQ_Addr],(CYFISNP_IRQ_MASK | 0x20)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and    reg[INT_CLR0], ~INT_MSK0_GPIO
                            or     reg[CYFISNP_IRQIE_Addr], CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                
                   ENDIF
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   mov   A, reg[ CUR_PP ]
                   push  A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >FN_0_Data_SHADE
                   ENDIF
                         ENDIF
                         or      [FN_0_Data_SHADE], CYFISNP_nSS_MASK
                         mov     A, [FN_0_Data_SHADE]
                         mov     reg[CYFISNP_nSS_Addr], A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   pop   A
                   mov   reg[ CUR_PP ], A
                         ENDIF
                         pop     A
                      ELSE
                         push    A
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQIE_Addr],  CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            and     reg[P15CR], ~(CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)      ; P1.5 is IRQ input
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                    or    F, FLAG_XIO_MASK
                            or     reg[CYFISNP_IRQDM1_Addr], CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         and    reg[CYFISNP_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                         or     reg[CYFISNP_IRQ_Addr],(CYFISNP_IRQ_MASK | 0x20)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and    reg[INT_CLR0], ~INT_MSK0_GPIO
                            or     reg[CYFISNP_IRQIE_Addr], CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                
                   ENDIF
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   mov   A, reg[ CUR_PP ]
                   push  A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_2_Data_SHADE
                   ENDIF
                         ENDIF
                         or      [Port_2_Data_SHADE], CYFISNP_nSS_MASK
                         mov     A, [Port_2_Data_SHADE]
                         mov     reg[CYFISNP_nSS_Addr], A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   pop   A
                   mov   reg[ CUR_PP ], A
                         ENDIF
                         pop     A
                      ENDIF
                   ENDIF
                ENDIF
 007E           .Done:
 007E           
 007E 7F                RET
 007F           .endsection
 007F           
 007F           .section
 007F           ;-----------------------------------------------------------------------------
 007F           ;
 007F           ; CYFISNP_BurstReadWipRaw:
 007F           ;                  Read a sequence of bytes from a sequence of Radio registers
 007F           ;                  using RadioWipPtr as the buffer pointer.
 007F           ;
 007F           ; Assembly Call:   RadioWipPtr: Address of buffer to read.
 007F           ;                  A: The register number to write.
 007F           ;                     (Top two bits MUST be clear.)
 007F           ;                  X: Length of the buffer.
 007F           ;
 007F           ; Assembly Return: A: Undefined
 007F           ;                  X: Undefined
 007F           ;
 007F           ; Assumptions:
 007F           ;    1. The global interrupt enable flag is cleared on entry.
 007F           ;    2. The SPI bus is idle on entry.
 007F           ;-----------------------------------------------------------------------------
 007F            CYFISNP_BurstReadWipRaw::
 007F 2940              OR      A, CYFISNP_bSPI_AUTO_INC        ; Set the increment flag.
 0081 8009              JMP     CYFISNP_FileReadWipRaw
 0083           
 0083           .endsection
 0083           
 0083           .section
 0083           ;-----------------------------------------------------------------------------
 0083           ;
 0083           ; CYFISNP_BurstReadRaw:  Read a sequence of bytes from a sequence of
 0083           ;                  Radio registers
 0083           ;
 0083           ; 'C' Call:        void CYFISNP_BurstReadRaw(unsigned char cnt);
 0083           ;                  Must set RadioPtr via CYFISNP_SetPtr() before
 0083           ;                  CYFISNP_BurstReadRaw.
 0083           ;
 0083           ; See CYFISNP_FileReadRaw() for entry/exit parameters
 0083           ;
 0083           ; Assumptions:
 0083           ;    1. The global interrupt enable flag is cleared on entry.
 0083           ;    2. The SPI bus is idle on entry.
 0083           ;-----------------------------------------------------------------------------
 0083            CYFISNP_BurstReadRaw::
 0083           _CYFISNP_BurstReadRaw::
 0083 2940              OR      A,CYFISNP_bSPI_AUTO_INC         ; Set the increment flag.
 0085                   ; Fall through to CYFISNP_FileReadRaw
 0085           
 0085           ;-----------------------------------------------------------------------------
 0085           ;
 0085           ; CYFISNP_FileReadRaw:   Read a sequence of bytes from a single Radio registers.
 0085           ;
 0085           ;                      time->           |8spiclk|8spiclk|8spiclk|
 0085           ;                  Assert Slave Select  |       |       |       |
 0085           ;                  Write Address        |       |       |       |
 0085           ;                  Wait for Empty(1)----+       |       |       |
 0085           ;                  Write Nul Data               |       |       |
 0085           ;                  Wait for Empty(2)------------+       |       |
 0085           ;                  Write Nul Data                       |       |
 0085           ;                  Read Nul Data                        |       |
 0085           ;                  Wait for Empty(3)--------------------+       |
 0085           ;                  Write Nul Data                               |
 0085           ;                  Read Data                                    |
 0085           ;                  Wait for Empty and complete------------------+
 0085           ;                  Read Data
 0085           ;                  De-assert Slave Select
 0085           ;
 0085           ;                  The main loop of this routine is a littler slower than it
 0085           ;                  should be. With a 12MHz CPU the burst is not always
 0085           ;                  continuous. There are occasional gaps between bytes in the
 0085           ;                  burst. It should be possible to correct this, but it's a
 0085           ;                  minor problem and this is already pretty convoluted to deal
 0085           ;                  with the latency caused by the TX and RX holding buffers.
 0085           ;
 0085           ;                  Properly handles all length cases, including zero and one.
 0085           ;
 0085           ; 'C' Call:        (Must set RadioPtr and RadioLen by calling RadioSetPtr
 0085           ;                  prior to CYFISNP_FileReadRaw.)
 0085           ;                  void CYFISNP_FileReadRaw(BYTE regAddr, BYTE cnt);
 0085           ;
 0085           ; Assembly Call:   A: The register number to write, top 2 bits MUST be clear!
 0085           ;                  X: Length of the buffer.
 0085           ;           RadioPtr: Address of buffer to read.
 0085           ;           RadioLen: Size of buffer
 0085           ;
 0085           ; Assembly Return: A: Undefined
 0085           ;                  X: Undefined
 0085           ;             CUR_PP: Large Memory Model sets to RadioDriverRamPage
 0085           ;             STK_PP: Large Memory Model sets to SYSTEM_STACK_PAGE
 0085           ;
 0085           ; Assumptions:
 0085           ;    1. The global interrupt enable flag is cleared on entry.
 0085           ;    2. The SPI bus is idle on entry.
 0085           ;-----------------------------------------------------------------------------
 0085            CYFISNP_FileReadRaw::
 0085           _CYFISNP_FileReadRaw::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
                  IF (SYSTEM_LARGE_MEMORY_MODEL)
                        MOV     [CYFISNP_WipPtr+1], [CYFISNP_Ptr+1] ; LMM: MSB working pointer
                  ENDIF
 0085 5F0002            MOV     [CYFISNP_WipPtr+0], [CYFISNP_Ptr+0] ; Initialize working pointer
 0088           
 0088           
 0088                   ;---------------------------------------------------------------------
 0088                   ; RadioWipLen = Remaining space in RAM buffer.  Streaming driver moves
 0088                   ;               8 Byte chunks, needs to remember how much physical
 0088                   ;               space remains after each 8-byte chunk in loaded.
 0088                   ;---------------------------------------------------------------------
 0088 5F0103            MOV     [CYFISNP_WipLen], [CYFISNP_Len]     ;  and length.
 008B                   ; Fall through to CYFISNP_FileReadWipRaw
 008B           
 008B           
 008B           ;-----------------------------------------------------------------------------
 008B           ; CYFISNP_FileReadWipRaw - Streaming driver is primary caller when
 008B           ;                    moving 8-byte chunks during a multi-chunk reception.
 008B           ;
 008B           ; Assumptions:
 008B           ;    1. The global interrupt enable flag is cleared on entry.
 008B           ;    2. The SPI bus is idle on entry.
 008B           ;-----------------------------------------------------------------------------
 008B           CYFISNP_FileReadWipRaw::
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >CYFISNP_DriverRamPage
                   ENDIF
                
 008B 79                DEC     X                       ; Check for zero length case.
 008C C059              JC      .exit0                  ; If zero, nothing to do.
 008E           
 008E           
 008E                   ;---------------------------------------------------
 008E                   ; Here, X = number of bytes in the file read - 1.
 008E                   ;---------------------------------------------------
 008E           
                IF(0x18 * 0x17)
                   IF (CYFISNP_FAST_SS_ACTUATION)
 008E 41087F          and   reg[CYFISNP_nSS_Addr], ~CYFISNP_nSS_MASK
                      IF (CYFISNP_ARCH_TYPE_C20066 | CYFISNP_ARCH_TYPE_TMA300)
                         IF((CYFISNP_nSS_Addr - CYFISNP_IRQ_Addr) * (CYFISNP_nSS_Addr - PRT1DR))
                         ELSE
                            or    reg[CYFISNP_nSS_Addr], CYFISNP_OD_MASK
                         ENDIF
                      ENDIF
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            or      reg[P15CR], (CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)       ; P1.5 is SPI MOSI out
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                         ENDIF
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         or    reg[CYFISNP_CONTROL_REG], bfCONTROL_REG_START_BIT
                      ENDIF
                
                   ENDIF
                   ELSE
                      IF (CYFISNP_nSS_IS_PPSOC_FN)
                         push    A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   mov   A, reg[ CUR_PP ]
                   push  A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >FN_0_Data_SHADE
                   ENDIF
                         ENDIF
                         and     [FN_0_Data_SHADE], ~CYFISNP_nSS_MASK
                         mov     A, [FN_0_Data_SHADE]
                         mov     reg[CYFISNP_nSS_Addr], A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   pop   A
                   mov   reg[ CUR_PP ], A
                         ENDIF
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            or      reg[P15CR], (CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)       ; P1.5 is SPI MOSI out
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                         ENDIF
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         or    reg[CYFISNP_CONTROL_REG], bfCONTROL_REG_START_BIT
                      ENDIF
                
                   ENDIF
                         pop     A
                      ELSE
                         push    A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   mov   A, reg[ CUR_PP ]
                   push  A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_2_Data_SHADE
                   ENDIF
                         ENDIF
                         and     [Port_2_Data_SHADE], ~CYFISNP_nSS_MASK
                         mov     A, [Port_2_Data_SHADE]
                         mov     reg[CYFISNP_nSS_Addr], A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   pop   A
                   mov   reg[ CUR_PP ], A
                         ENDIF
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                    or    F, FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            or      reg[P15CR], (CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)       ; P1.5 is SPI MOSI out
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
                         ENDIF
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         or    reg[CYFISNP_CONTROL_REG], bfCONTROL_REG_START_BIT
                      ENDIF
                
                   ENDIF
                         pop     A
                      ENDIF
                   ENDIF
                ENDIF
                
 0091 6029              MOV     REG[CYFISNP_SPI_TX_REG], A      ; Write SPI address.
 0093 5D2A              MOV     A, REG[CYFISNP_SPI_RX_REG]      ; Empty the SPI RX register
 0095           
 0095                   ; --------------------------------------------------------------------
 0095                   ; Using the SP as a write data pointer is 6-cycles faster than MVI.
 0095                   ;       (Since GIE is already disabled, using SP is safe).
 0095                   ; --------------------------------------------------------------------
 0095 4E                SWAP    A, SP
 0096 4C00              SWAP    A, [CYFISNP_WipPtr+0]      ; LSByte of pointer
 0098 4E                SWAP    A, SP                   ; SP = RadioWipPtr
                IF (SYSTEM_LARGE_MEMORY_MODEL)
                        MOV     A, [CYFISNP_WipPtr+1]      ; MSByte of pointer (page #)
                        MOV     REG[STK_PP], A
                ENDIF
                
                
                        ; Wait for the TX register to empty.  The four instructions after the write of the SPI address
                        ; take 23 CPU cycles total to execute.  If it takes the SPI block less than 23 CPU cycles to
                        ; shift out 1.5 bits (less than 122 CPU cycles per byte), we can assume that the TX register
                        ; is already empty and thereby skip the wait.
                        ; Secondly, we need to ensure that the RX overrun flag is clear if we are using it to
                        ; determine when the first data byte is ready to fetch from the RX register.
                        ; Note 1: 1.5 bits is equal to 3 input clocks to the SPI block.  This gives a margin of safety
                        ;    that the TX register is really empty.
                        ; Note 2: The large memory model instructions are ignored in this analysis.  This ignorance is
                        ;    safe as these instructions merely add some more delay.
                IF (CPU_CYCLES_PER_SPI_BYTE / 122)
                .L2:    TST     REG[CYFISNP_SPI_CTRL_REG], CYFISNP_SPI_TX_EMPTY ; (TST opcode preserves CRY)
                        JZ      .L2
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 50)
                        ; 50 <= CPU cycles per SPI byte < 122
                        ; CYFISNP_SPI_TX_EMPTY_WAIT automatically clears the RX overrun flag.
                        ; Do the same here for faster SPI operation that relies on the RX overrun flag to
                        ; determine when the RX register contains the first data byte.
 0099 5D2B              MOV     A, REG[CYFISNP_SPI_CTRL_REG]
                  ENDIF
                ENDIF
                
                
                
 009B 6029              MOV     REG[CYFISNP_SPI_TX_REG], A      ; Write null data.
 009D           
 009D           
 009D                   ;---------------------------------------------------------------------------
 009D                   ; At this point the following data is needed to determine whether all data
 009D                   ; can be saved, or if some data must be discarded.
 009D                   ;
 009D                   ; Number of bytes to retrieve  = X + 1
 009D                   ; Available user buffer size   = [CYFISNP_WipLen]
 009D                   ;
 009D                   ; When the calculations complete the following data will result.
 009D                   ;
 009D                   ; If no bytes will be discarded:
 009D                   ; Number of bytes to save            = X + 1
 009D                   ; Number of bytes to discard         = [CYFISNP_SpiTemp] = 0
 009D                   ; Available user buffer size on exit = [CYFISNP_WipLen] - 1
 009D                   ;     Note: This will be corrected by decrementing at exit.
 009D                   ;
 009D                   ; If some bytes will be discarded:
 009D                   ; Number of bytes to save            = X = initial value of [@INSTANCE_NAME_WipLen]
 009D                   ; Number of bytes to discard         = [CYFISNP_SpiTemp] + 1
 009D                   ; Available user buffer size on exit = [CYFISNP_WipLen] = 0
 009D                   ;---------------------------------------------------------------------------
 009D 5B                MOV     A, X
 009E 1201              SUB     A, [CYFISNP_WipLen]        ; CRY = 1 if user's buffer has enough space
 00A0 D009              JNC     .tooMuch
 00A2           
 00A2                   ;----------------------------------------
 00A2                   ; Receive data size fits in remaining UserBuf.
 00A2                   ;----------------------------------------
 00A2                   ; Set [@INSTANCE_NAME_SpiTemp] to 0
 00A2 550400            MOV     [CYFISNP_SpiTemp], 0
 00A5 5B                MOV     A, X
 00A6           
 00A6                   ;---------------------------------------------------------------------------
 00A6                   ; Set [CYFISNP_WipLen] to one byte more than the space available
 00A6                   ; at exit.  A correction will be made at exit.  See the comment in .tooMuch
 00A6                   ; to understand why.
 00A6                   ;---------------------------------------------------------------------------
 00A6 1401              SUB     [CYFISNP_WipLen], A        ; Decrease UserBuf for EXIT
 00A8           
 00A8 8008              JMP     .WaitFirstDataByte
 00AA           
 00AA                   ;----------------------------------------
 00AA                   ; Receive data size is too big for remaining UserBuf.
 00AA                   ;----------------------------------------
 00AA           .tooMuch:
 00AA                   ; Set [CYFISNP_SpiTemp] to the number of bytes to discard - 1
 00AA 5304              MOV     [CYFISNP_SpiTemp], A
 00AC           
 00AC                   ; Set X to the size of the available user buffer space
 00AC 5801              MOV     X, [CYFISNP_WipLen]
 00AE           
 00AE                   ;----------------------------------------------------------------------------
 00AE                   ; Setting [CYFISNP_WipLen] to 0 does two things.  First, it serves
 00AE                   ; as an indicator at exit that the user buffer is full.  Second, before exit,
 00AE                   ; it serves as an indicator that the last byte of the transfer will be
 00AE                   ; discarded.
 00AE                   ;----------------------------------------------------------------------------
 00AE 550100            MOV     [CYFISNP_WipLen], 0
 00B1           
 00B1           
 00B1           .WaitFirstDataByte:
 00B1                   ; Wait for the RX buffer to fill with the 1st data byte
 00B1                   ; 62 cycles minimum after writing the address byte to get here
 00B1                   ; 34 cycles minimum after writing the first data byte to get here
 00B1                   ; 19 cycles in the save loop entry. (81/53 cycles total)
 00B1                   ; Note: There are 28 cycles between the write of the address byte and the
 00B1                   ;   the write of the first data byte.  For a SPI byte that takes less
 00B1                   ;   than 28 CPU cycles to transfer, reference to the write of the first
 00B1                   ;   data byte would be required.  However, the minimum delay after writing
 00B1                   ;   the first data byte is 53 cycles.  Therefore, no wait is required for these,
 00B1                   ;   and all other speeds can be referenced to the write of the first byte.
                IF (CPU_CYCLES_PER_SPI_BYTE / 50)
                        ; 50 <= CPU cycles per byte.  100 <= CPU cycles for 2 bytes
                        ; Wait for RX overrun.  This precedes the availability of the received
                        ; byte in the RX register by 1 SPI bit time.  The 5 cycles in the JZ instruction inside
                        ; CYFISNP_SPI_RX_OVERRUN_WAIT plus the 19 cycles in the save
                        ; loop entry allow 24 CPU cycles total time for the byte to become available.
                        ; (equivalent to 192 CPU cycles per SPI bit
 00B1 492B40    .L2:    TST     REG[CYFISNP_SPI_CTRL_REG], CYFISNP_SPI_RX_OVERRUN ; (TST opcode preserves CRY)
 00B4 AFFC              JZ      .L2
 00B6           
 00B6                   ; For really slow SPI, check for the SPI done bit before continuing
                  IF (CPU_CYCLES_PER_SPI_BYTE / 188)
                .WaitFirstSPIDone:
                        TST     REG[CYFISNP_SPI_CTRL_REG], CYFISNP_SPI_DONE ;
                        JZ      .WaitFirstSPIDone
                  ENDIF
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 48)
                        ; 48 <= CPU cycles per byte < 50.
                        ; 96 <= CPU cycles for 2 bytes < 100
                        ; Wait an additional 20 cycles
                        ; 81 + 20 = 101 CPU clock cycles total from address byte write to RX register retrieval.
                        NOP
                        NOP
                        NOP
                        NOP
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 48)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 46)
                        ; 44 <= CPU cycles per byte < 46.
                        ; 92 <= CPU cycles for 2 bytes < 96
                        ; Wait an additional 16 cycles
                        ; 81 + 16 = 97 CPU clock cycles total from address byte write to RX register retrieval.
                        NOP
                        NOP
                        NOP
                        NOP
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 46)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 44)
                        ; 44 <= CPU cycles per byte < 46.
                        ; 88 <= CPU cycles for 2 bytes < 92
                        ; Wait an additional 12 cycles
                        ; 81 + 12 = 93 CPU clock cycles total from address byte write to RX register retrieval.
                        NOP
                        NOP
                        NOP
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 44)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 42)
                        ; 42 <= CPU cycles per byte < 44.
                        ; 84 <= CPU cycles for 2 bytes < 88
                        ; Wait an additional 8 cycles
                        ; 81 + 8 = 89 CPU clock cycles total from address byte write to RX register retrieval.
                        NOP
                        NOP
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 42)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 40)
                        ; 40 <= CPU cycles per byte < 42.
                        ; 80 <= CPU cycles for 2 bytes < 84
                        ; Wait an additional 4 cycles
                        ; 81 + 4 = 85 CPU clock cycles total from address byte write to RX register retrieval.
                        NOP
                  ELSE
                        ; CPU cycles per byte < 40.
                        ; CPU cycles for 2 bytes < 80 CPU cycles.
                        ; No additional waiting required.
                        ; 81 + 0 = 81 CPU clock cycles total from address byte write to RX register retrieval.
                  ENDIF
                ENDIF
                
                
 00B6           .Save:
 00B6 800B              jmp     .SaveLoopEntry
 00B8           
 00B8           
 00B8                   ; ----------------------------------------
 00B8                   ; Loop for copying received byte to user's Buffer
 00B8                   ; ----------------------------------------
 00B8           .SaveLoop:
 00B8 6029              MOV     REG[CYFISNP_SPI_TX_REG], A         ; Write null data.
 00BA 5D2A              MOV     A, REG[CYFISNP_SPI_RX_REG]         ; Get SPI Rx data
 00BC 08                PUSH    A                                           ; Save data in buffer, not real stack
 00BD           
 00BD                   ;----------------------------------------------------------------------------------------
 00BD                   ; The top of .SaveLoop is 15 cycles long.  The bottom (.SaveLoopEntry) is 9 cycles long.
 00BD                   ; Delay long enough to allow the byte shifting in to be completely received
 00BD                   ; by the time the MOV REG[CYFISNP_SPI_TX_REG], A instruction completes.
 00BD                   ;----------------------------------------------------------------------------------------
 00BD           
                IF (CPU_CYCLES_PER_SPI_BYTE / 128)
                        ; 128 <= CPU cycles per SPI byte
                        ; This is a slow SPI clock.  Just monitor the RX full flag.
                .L2:    TST     REG[CYFISNP_SPI_CTRL_REG], CYFISNP_SPI_RX_FULL ; (TST opcode preserves CRY)
                        JZ      .L2
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 44)
                        ; 44 <= CPU cycles per SPI byte < 128
                        ; This is a relatively slow SPI clock.  The CYFISNP_RX_FULL_WAIT macro
                        ; is 14 CPU cycles long.  This delay loop has a 9 cycle iteration time so as to
                        ; provide a little less waste of time.  In addition, it accounts for delays incurred
                        ; by the other instructions in the loop.  Set the number of iterations to delay
                        ; According to the number of CPU cycles that execute in transferring a single byte.
                        ; The factor +4 in the calculation of A is a safety factor to ensure a byte is in
                        ; the RX register.
                    IF ((CPU_CYCLES_PER_SPI_BYTE - 24 + 4 - 4) % 9)
 00BD 5005              MOV     A, (CPU_CYCLES_PER_SPI_BYTE - 24 + 4 - 4) / 9 + 1   ; 4 cycles
                    ELSE
                        MOV     A, (CPU_CYCLES_PER_SPI_BYTE - 24 + 4 - 4) / 9       ; 4 cycles
                    ENDIF
                
 00BF           .SaveLoopDelay1:
 00BF 78                DEC     A                                                   ; 4 cycles
 00C0 BFFE              JNZ     .SaveLoopDelay1                                     ; 5 cycles
 00C2                                                                               ;---------
 00C2                                                                               ; 4 + 9 * A total CPU clock cycles of delay
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 44)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 40)
                        ; 40 <= CPU cycles per SPI byte < 44
                        ; Delay for 20 CPU clock cycles to ensure that the RX buffer is full
                        ; when it is retrieved.
                        ; 20 + 15 + 9 = 44 total CPU clock cycles per loop iteration.
                        NOP
                        NOP
                        NOP
                        NOP
                        NOP
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 40)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 36)
                        ; 36 <= CPU cycles per SPI byte < 40
                        ; Delay for 16 CPU clock cycles to ensure that the RX buffer is full
                        ; when it is retrieved.
                        ; 16 + 15 + 9 = 40 total CPU clock cycles per loop iteration.
                        NOP
                        NOP
                        NOP
                        NOP
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 36)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 32)
                        ; 32 <= CPU cycles per SPI byte < 36
                        ; Delay for 12 CPU clock cycles to ensure that the RX buffer is full
                        ; when it is retrieved.
                        ; 12 + 15 + 9 = 36 total CPU clock cycles per loop iteration.
                        NOP
                        NOP
                        NOP
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 32)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 28)
                        ; 28 <= CPU cycles per SPI byte < 32
                        ; Delay for 8 CPU clock cycles to ensure that the RX buffer is full
                        ; when it is retrieved.
                        ; 8 + 15 + 9 = 32 total CPU clock cycles per loop iteration.
                        NOP
                        NOP
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 28)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 24)
                        ; 24 <= CPU cycles per SPI byte < 28
                        ; Delay for 4 clock cycles to ensure that the RX buffer is full
                        ; when it is retrieved.
                        ; 4 + 15 + 9 = 28 total CPU clock cycles per loop iteration.
                        NOP
                  ELSE
                        ; CPU cycles per SPI byte < 24
                        ; The loop instructions below provide enough delay
                        ; to ensure that the RX register is full when it is retrieved.
                        ; No additional delay is necessary.
                        ; 0 + 15 + 9 = 24 total CPU clock cycles per loop iteration.
                  ENDIF
                ENDIF
                
                
 00C2           .SaveLoopEntry:
 00C2                   ; Determine if the loop is done
 00C2 79                DEC     X                                           ; Update the number of bytes to left to retrieve
 00C3 DFF4              JNC     .SaveLoop                                   ; Continue the data retrieval loop if not done retrieving data
 00C5           
 00C5           
 00C5           
 00C5           
 00C5           .Discard:
 00C5                   ; --------------------------------------------------------------------
 00C5                   ; RadioSpiTmp = number of remaining bytes to read and discard.
 00C5                   ; --------------------------------------------------------------------
 00C5 5804              MOV     X, [CYFISNP_SpiTemp]
 00C7 800A              JMP     .DiscardLoopEntry
 00C9           
 00C9           .DiscardLoop:
 00C9 6029              MOV     REG[CYFISNP_SPI_TX_REG], A       ; Start shifting in another byte
 00CB 5D2A              MOV     A, REG[CYFISNP_SPI_RX_REG]       ; Empty the SPI RX register
 00CD           
 00CD           
 00CD                   ;----------------------------------------------------------------------------------------
 00CD                   ; The top of .DiscardLoop is 11 cycles long.  The bottom (.DiscardLoopEntry) is 9 cycles
 00CD                   ; long.  Delay long enough to allow the byte shifting in to be completely received
 00CD                   ; by the time the MOV REG[CYFISNP_SPI_TX_REG], A instruction completes.
 00CD                   ;----------------------------------------------------------------------------------------
 00CD           
                IF (CPU_CYCLES_PER_SPI_BYTE / 128)
                        ; 128 <= CPU cycles per SPI byte
                        ; This is a really slow SPI clock.  Just monitor the RX full flag.
                .L2:    TST     REG[CYFISNP_SPI_CTRL_REG], CYFISNP_SPI_RX_FULL ; (TST opcode preserves CRY)
                        JZ      .L2
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 40)
                        ; 40 <= CPU cycles per SPI byte < 128
                        ; This is a relatively slow SPI clock.  The CYFISNP_RX_FULL_WAIT macro
                        ; is 14 CPU cycles long.  This delay loop has a 9 cycle iteration time so as to
                        ; provide a little less waste of time.  In addition, it accounts for delays incurred
                        ; by the other instructions in the loop.  Set the number of iterations to delay
                        ; According to the number of CPU cycles that execute in transferring a single byte.
                        ; The factor +4 in the calculation of A is a safety factor to ensure a byte is in
                        ; the RX register.
                    IF ((CPU_CYCLES_PER_SPI_BYTE - 20 + 4 - 4) % 9)
 00CD 5005              MOV     A, (CPU_CYCLES_PER_SPI_BYTE - 20 + 4 - 4) / 9 + 1
                    ELSE
                        MOV     A, (CPU_CYCLES_PER_SPI_BYTE - 20 + 4 - 4) / 9       ; 4 cycles
                    ENDIF
                
 00CF           .DiscardLoopDelay1:
 00CF 78                DEC     A                                     ; 4 cycles
 00D0 BFFE              JNZ     .DiscardLoopDelay1                    ; 5 cycles
 00D2                                                                 ;---------
 00D2                                                                 ; 4 + 9 * A iterations
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 40)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 36)
                        ; 36 <= CPU cycles per SPI byte < 40
                        ; Delay for 20 CPU clock cycles to ensure that the RX buffer is full
                        ; when it is retrieved.
                        ; 20 + 11 + 9 = 40 total CPU clock cycles per loop iteration.
                        NOP
                        NOP
                        NOP
                        NOP
                        NOP
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 36)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 32)
                        ; 32 <= CPU cycles per SPI byte < 36
                        ; Delay for 16 CPU clock cycles to ensure that the RX buffer is full
                        ; when it is retrieved.
                        ; 16 + 11 + 9 = 36 total CPU clock cycles per loop iteration.
                        NOP
                        NOP
                        NOP
                        NOP
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 32)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 28)
                        ; 28 <= CPU cycles per SPI byte < 32
                        ; Delay for 12 CPU clock cycles to ensure that the RX buffer is full
                        ; when it is retrieved.
                        ; 12 + 11 + 9 = 32 total CPU clock cycles per loop iteration.
                        NOP
                        NOP
                        NOP
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 28)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 24)
                        ; 24 <= CPU cycles per SPI byte < 28
                        ; Delay for 8 CPU clock cycles to ensure that the RX buffer is full
                        ; when it is retrieved.
                        ; 8 + 11 + 9 = 28 total CPU clock cycles per loop iteration.
                        NOP
                        NOP
                  ENDIF
                ENDIF
                
                
                IF (CPU_CYCLES_PER_SPI_BYTE / 24)
                ELSE
                  IF (CPU_CYCLES_PER_SPI_BYTE / 20)
                        ; 20 <= CPU cycles per SPI byte < 24
                        ; Delay for 4 CPU clock cycles to ensure that the RX buffer is full
                        ; when it is retrieved.
                        ; 4 + 11 + 9 = 24 total CPU clock cycles per loop iteration.
                        NOP
                  ELSE
                        ; CPU cycles per SPI byte < 20
                        ; The loop instructions below provide enough delay
                        ; to ensure that the RX register is full when it is retrieved.
                        ; No additional delay is necessary.
                        ; Delay for 20 CPU clock cycles to ensure that the RX buffer is full
                        ; when it is retrieved.
                        ; 0 + 11 + 9 = 20 total CPU clock cycles per loop iteration.
                  ENDIF
                ENDIF
                
                
 00D2           .DiscardLoopEntry:
 00D2 79                DEC     X                                         ; Update the number of bytes to discard
 00D3 DFF5              JNC     .DiscardLoop                              ; Continue the discard loop if not done discarding
 00D5           .DiscardLoopDone:
 00D5           
 00D5           
 00D5           
 00D5                   ; --------------------------------------------------------------------
 00D5                   ; Moved all data except for one last byte. Wait for it and if
 00D5                   ;  we have room in the buffer, get it and store it.
 00D5                   ; --------------------------------------------------------------------
 00D5           .LastByte:
 00D5                   ; By the time this point is reached, the last byte is in the SPI RX register
 00D5                   ; If this byte is to be discarded, it can be left in the RX register as any
 00D5                   ; further SPI subroutine call will do cleanup before starting.
 00D5 3C0100            CMP     [CYFISNP_WipLen], 0             ; Determine if the byte is to be discarded or saved.
 00D8 A006              JZ      .exit1
 00DA           
 00DA                   ; The byte is to be saved
 00DA 5D2A              MOV     A, REG[CYFISNP_SPI_RX_REG]          ; Get SPI RX data
 00DC 08                PUSH    A                                        ; Save data in buffer, not real stack
 00DD 7A01              DEC     [CYFISNP_WipLen]                ; Correct the size of the unfilled user buffer space
 00DF           
 00DF           .exit1:
 00DF                   ; Restore SP to point at the stack
 00DF 4E                SWAP    A, SP
 00E0 4C00              SWAP    A, [CYFISNP_WipPtr]
 00E2 4E                SWAP    A, SP
                  IF (SYSTEM_LARGE_MEMORY_MODEL)
                        MOV     REG[STK_PP], SYSTEM_STACK_PAGE
                  ENDIF
                IF(0x18 * 0x17)
                   IF (CYFISNP_FAST_SS_ACTUATION)
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQIE_Addr],  CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            and     reg[P15CR], ~(CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)      ; P1.5 is IRQ input
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                    or    F, FLAG_XIO_MASK
                            or     reg[CYFISNP_IRQDM1_Addr], CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         and    reg[CYFISNP_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                         or     reg[CYFISNP_IRQ_Addr],(CYFISNP_IRQ_MASK | 0x20)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and    reg[INT_CLR0], ~INT_MSK0_GPIO
                            or     reg[CYFISNP_IRQIE_Addr], CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                
                   ENDIF
 00E3 430880          or      reg[CYFISNP_nSS_Addr], (CYFISNP_nSS_MASK | CYFISNP_OD_MASK)
                   ELSE
                      IF (CYFISNP_nSS_IS_PPSOC_FN)
                         push    A
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQIE_Addr],  CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            and     reg[P15CR], ~(CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)      ; P1.5 is IRQ input
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                    or    F, FLAG_XIO_MASK
                            or     reg[CYFISNP_IRQDM1_Addr], CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         and    reg[CYFISNP_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                         or     reg[CYFISNP_IRQ_Addr],(CYFISNP_IRQ_MASK | 0x20)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and    reg[INT_CLR0], ~INT_MSK0_GPIO
                            or     reg[CYFISNP_IRQIE_Addr], CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                
                   ENDIF
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   mov   A, reg[ CUR_PP ]
                   push  A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >FN_0_Data_SHADE
                   ENDIF
                         ENDIF
                         or      [FN_0_Data_SHADE], CYFISNP_nSS_MASK
                         mov     A, [FN_0_Data_SHADE]
                         mov     reg[CYFISNP_nSS_Addr], A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   pop   A
                   mov   reg[ CUR_PP ], A
                         ENDIF
                         pop     A
                      ELSE
                         push    A
                   IF CYFISNP_IRQ_MOSI_MUXED
                      IF (CYFISNP_ARCH_TYPE_PSOC)
                         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQIE_Addr],  CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                         IF (CYFISNP_IRQ_MODE_POLLING)
                            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
                    or    F, FLAG_XIO_MASK
                            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
                            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         ENDIF
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_ENCORE)
                            and     reg[P15CR], ~(CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)      ; P1.5 is IRQ input
                      ENDIF
                      IF (CYFISNP_ARCH_TYPE_C20066)
                    or    F, FLAG_XIO_MASK
                            or     reg[CYFISNP_IRQDM1_Addr], CYFISNP_IRQ_MASK
                    and   F, ~FLAG_XIO_MASK
                         and    reg[CYFISNP_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                         or     reg[CYFISNP_IRQ_Addr],(CYFISNP_IRQ_MASK | 0x20)
                         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
                            and    reg[INT_CLR0], ~INT_MSK0_GPIO
                            or     reg[CYFISNP_IRQIE_Addr], CYFISNP_IRQ_MASK
                         ENDIF
                      ENDIF
                
                   ENDIF
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   mov   A, reg[ CUR_PP ]
                   push  A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_2_Data_SHADE
                   ENDIF
                         ENDIF
                         or      [Port_2_Data_SHADE], CYFISNP_nSS_MASK
                         mov     A, [Port_2_Data_SHADE]
                         mov     reg[CYFISNP_nSS_Addr], A
                         IF (SYSTEM_LARGE_MEMORY_MODEL)
                   pop   A
                   mov   reg[ CUR_PP ], A
                         ENDIF
                         pop     A
                      ENDIF
                   ENDIF
                ENDIF
                
 00E6           .exit0:
 00E6 7F                RET
 00E7           .endsection
 00E7           
 00E7           
                IF (CYFISNP_SPIM_API_EXPOSED)
                
                .SECTION
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: CYFISNP_SendTxData
                ;
                ;  DESCRIPTION:
                ;     Initiates an SPI data transfer.
                ;
                ;-----------------------------------------------------------------------------
                 CYFISNP_SendTxData::
                _CYFISNP_SendTxData::
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   mov REG[CYFISNP_SPI_TX_REG], A
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   ret
                
                .ENDSECTION
                
                .SECTION
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: CYFISNP_bReadRxData
                ;
                ;  DESCRIPTION:
                ;     Reads the RX buffer register.  Should check the status regiser to make
                ;     sure data is valid.
                ;
                ;-----------------------------------------------------------------------------
                 CYFISNP_bReadRxData::
                _CYFISNP_bReadRxData::
                 bCYFISNP_ReadRxData::
                _bCYFISNP_ReadRxData::
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   mov A, REG[CYFISNP_SPI_RX_REG]
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   ret
                
                
                .ENDSECTION
                
                .SECTION
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: CYFISNP_ReadStatus
                ;
                ;  DESCRIPTION:
                ;     Reads the SPIM Status bits in the Control/Status register.
                ;
                ;-----------------------------------------------------------------------------
                 CYFISNP_bReadStatus::
                _CYFISNP_bReadStatus::
                 bCYFISNP_ReadStatus::
                _bCYFISNP_ReadStatus::
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   mov A,  REG[CYFISNP_SPI_CTRL_REG]
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   ret
                
                .ENDSECTION
                
                ENDIF
                
 00E7 3800          add  SP, 0
 00E9           
 00E9           ; ############################################################################
 00E9           ; END OF CYFISPI_PSoC_SPIm.asm
 00E9           ; ############################################################################
