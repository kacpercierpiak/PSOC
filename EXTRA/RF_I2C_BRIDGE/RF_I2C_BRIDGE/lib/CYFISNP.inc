;;*****************************************************************************
;;*****************************************************************************
;;  FILENAME: CYFISNP.inc
;;  Version: 2.00, Updated on 2015/3/4 at 22:21:20
;;  Generated by PSoC Designer 5.4.3191
;;
;;  DESCRIPTION: CYFISPI main include file
;;-----------------------------------------------------------------------------
;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
;;*****************************************************************************
;;*****************************************************************************

include "m8c.inc"
include "PSoCGPIOInt.inc"

CYFISNP_ARCH_TYPE_PSOC:                                     equ 1
CYFISNP_ARCH_TYPE_C20066:                                   equ 0
CYFISNP_ARCH_TYPE_ENCORE:                                   equ 0
CYFISNP_ARCH_TYPE_TMA300:                                   equ 0

CYFISNP_IRQ_MODE_POLLING:                                   equ 1
CYFISNP_IRQ_MODE_GPIO_IRQ:                                  equ 0
CYFISNP_IRQ_MODE_DDB_IRQ:                                   equ 0

CYFISNP_RENAME_STARTSTOP:                                   equ 1
CYFISNP_SPIM_API_EXPOSED:                                   equ 0
CYFISNP_IRQ_MOSI_MUXED:                                     equ 0
CYFISNP_SPI_MODE_SDIO:                                      equ 0
CYFISNP_FAST_SS_ACTUATION:                                  equ 1
CYFISNP_FASTER_TX_SEQUENCE:                                 equ 1
CYFISNP_LONG_PACKETS_ALLOWED:                               equ 1

IF (CYFISNP_ARCH_TYPE_PSOC | CYFISNP_ARCH_TYPE_C20066 | CYFISNP_ARCH_TYPE_TMA300)
CYFISNP_CPU_CYCLES_PER_SPI_BYTE:                            equ 0x40
ENDIF

;; Workaround. This should allow compilation with default UM parameters
IF(0x18 * 0x17)
ELSE
   CYFISNP_IRQ_Addr:       EQU     PRT0DR
   CYFISNP_nSS_Addr:       EQU     PRT0DR
   CYFISNP_IRQ_MASK:       EQU     0x00
   CYFISNP_nSS_MASK:       EQU     0x00
   CYFISNP_INT_REG:        EQU     0x00
   CYFISNP_INT_MASK:       EQU     0x00
ENDIF

CYFISNP_nSS_IS_PPSOC_FN: equ (0x18 / 100)
CYFISNP_IRQ_IS_PPSOC_FN: equ (0x17 / 100)

IF (CYFISNP_ARCH_TYPE_C20066 | CYFISNP_ARCH_TYPE_TMA300)
   PRT2DM2:               EQU     0
   PRT2GS:                EQU     0
   PRT2DM2:               EQU     0
   PRT2GS:                EQU     0
ENDIF

IF (CYFISNP_ARCH_TYPE_ENCORE)
   CYFISNP_IRQ_Addr:       EQU     PRT2DR
   CYFISNP_nSS_Addr:       EQU     PRT2DR
ELSE
   IF (CYFISNP_IRQ_IS_PPSOC_FN)
      CYFISNP_IRQ_Addr:       EQU     FN0DR
      CYFISNP_IRQDM0_Addr:    EQU     FN0DM0
      CYFISNP_IRQDM1_Addr:    EQU     FN0DM1
      CYFISNP_IRQDM2_Addr:    EQU     FN0DM2
      CYFISNP_IRQGS_Addr:     EQU     FN0GS
      CYFISNP_IRQIE_Addr:     EQU     FN0IE
   ELSE
      CYFISNP_IRQ_Addr:       EQU     PRT2DR
      CYFISNP_IRQDM0_Addr:    EQU     PRT2DM0
      CYFISNP_IRQDM1_Addr:    EQU     PRT2DM1
      CYFISNP_IRQDM2_Addr:    EQU     PRT2DM2
      CYFISNP_IRQGS_Addr:     EQU     PRT2GS
      CYFISNP_IRQIE_Addr:     EQU     PRT2IE
      FN_0_Data_SHADE:                 EQU     0
   ENDIF

   IF (CYFISNP_nSS_IS_PPSOC_FN)
      CYFISNP_nSS_Addr:       EQU     FN0DR
      CYFISNP_nSSDM0_Addr:    EQU     FN0DM0
      CYFISNP_nSSDM1_Addr:    EQU     FN0DM1
      CYFISNP_nSSDM2_Addr:    EQU     FN0DM2
      CYFISNP_nSSGS_Addr:     EQU     FN0GS
      CYFISNP_nSSIE_Addr:     EQU     FN0IE
   ELSE
      CYFISNP_nSS_Addr:       EQU     PRT2DR
      CYFISNP_nSSDM0_Addr:    EQU     PRT2DM0
      CYFISNP_nSSDM1_Addr:    EQU     PRT2DM1
      CYFISNP_nSSDM2_Addr:    EQU     PRT2DM2
      CYFISNP_nSSGS_Addr:     EQU     PRT2GS
      CYFISNP_nSSIE_Addr:     EQU     PRT2IE
      FN_0_Data_SHADE:                 EQU     0
   ENDIF
ENDIF

IF (CYFISNP_ARCH_TYPE_C20066 | CYFISNP_ARCH_TYPE_TMA300)
   IF((CYFISNP_nSS_Addr - CYFISNP_IRQ_Addr) | (CYFISNP_nSS_Addr - PRT1DR))
      IF(CYFISNP_nSS_Addr - CYFISNP_IRQ_Addr)
         IF(CYFISNP_nSS_Addr - PRT1DR)
            CYFISNP_OD_MASK:  equ 0x00
         ELSE
            CYFISNP_OD_MASK:  equ 0x20
         ENDIF
      ELSE
         CYFISNP_OD_MASK:  equ CYFISNP_IRQ_MASK
      ENDIF
   ELSE
      CYFISNP_OD_MASK:  equ (CYFISNP_IRQ_MASK | 0x20)
   ENDIF
ELSE
   CYFISNP_OD_MASK:  equ 0x00
ENDIF

;  @PSoC_UserCode_NumPnCodes@ (Do not change this line.)

;  Following two lines selects SOP code set to use in CYFISNP_SetSopPnCode function
;  You must assign the same values to CYFISNP_SOP_SET_x in CYFISNP.h file
;  for proper User Module operation!

CYFISNP_SOP_SET_A: EQU 1
CYFISNP_SOP_SET_B: EQU 0

;  @PSoC_UserCode_END@ (Do not change this line.)



CYFISNP_RADIO_INTERRUPT: equ CYFISNP_IRQ_MODE_GPIO_IRQ | CYFISNP_IRQ_MODE_DDB_IRQ

IF (CYFISNP_SOP_SET_A & CYFISNP_SOP_SET_B)
   CYFISNP_NUM_PN_CODES: EQU 20
ELSE
   CYFISNP_NUM_PN_CODES: EQU 10
ENDIF

;--------------------------------------------------
; Registers used by CYFISNP
;--------------------------------------------------
IF (CYFISNP_ARCH_TYPE_PSOC | CYFISNP_ARCH_TYPE_TMA300)
   IF (CYFISNP_IRQ_MODE_DDB_IRQ)
     @IRQBlock_CONTROL_0_INC                               ;IRQ Block ontrol register
     CYFISNP_INT_REG:                                      equ 0x@IRQBlock__ISR_ADDR
     CYFISNP_INT_MASK:                                     equ 0x@IRQBlock__ISR_MASK
   ENDIF
   IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
     CYFISNP_INT_REG:                                      equ INT_MSK0
     CYFISNP_INT_MASK:                                     equ INT_MSK0_GPIO
   ENDIF
   CYFISNP_CONTROL_REG:    equ 2bh               ;Control register
   CYFISNP_SHIFT_REG:  equ 28h                   ;TX Shift Register register
   CYFISNP_TX_BUFFER_REG:  equ 29h               ;TX Buffer Register
   CYFISNP_RX_BUFFER_REG:  equ 2ah               ;RX Buffer Register
   CYFISNP_FUNCTION_REG:   equ 28h               ;Function register
   CYFISNP_INPUT_REG:  equ 29h                   ;Input register
   CYFISNP_OUTPUT_REG: equ 2ah                   ;Output register
ENDIF

IF (CYFISNP_ARCH_TYPE_C20066)
   IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
     CYFISNP_INT_REG:                                      equ INT_MSK0
     CYFISNP_INT_MASK:                                     equ INT_MSK0_GPIO
   ENDIF
   @SPIM_SpiControl_INC                          ;Control register
   @SPIM_SpiTransmitData_INC                     ;TX Buffer Register
   @SPIM_SpiReceiveData_INC                      ;RX Buffer Register
ENDIF

;-----------------------------------------------------------------------------
CYFISNP_SPI_USE:        equ     0x80
CYFISNP_OUTPUT_EN:      equ     0x01
CYFISNP_SPI_SWAP:       equ     0x80
;-----------------------------------------------------------------------------

macro CYFISNP_DISABLE_IRQ_PIN
   IF CYFISNP_IRQ_MOSI_MUXED
      IF (CYFISNP_ARCH_TYPE_PSOC)
         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
            M8C_SetBank1
            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
            M8C_SetBank0
         ENDIF
         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
            M8C_SetBank1
            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
            M8C_SetBank0
            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
         ENDIF
         IF (CYFISNP_IRQ_MODE_POLLING)
            M8C_SetBank1
            or      reg[CYFISNP_IRQDM0_Addr],  CYFISNP_IRQ_MASK
            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
            M8C_SetBank0
            or      reg[CYFISNP_IRQGS_Addr],  CYFISNP_IRQ_MASK
         ENDIF
      ENDIF
      IF (CYFISNP_ARCH_TYPE_ENCORE)
            or      reg[P15CR], (CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)       ; P1.5 is SPI MOSI out
      ENDIF
      IF (CYFISNP_ARCH_TYPE_C20066)
         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
            and     reg[CYFISNP_IRQIE_Addr], ~CYFISNP_IRQ_MASK
         ENDIF
         M8C_SetBank1
            and     reg[CYFISNP_IRQDM1_Addr], ~CYFISNP_IRQ_MASK
         M8C_SetBank0
         or    reg[CYFISNP_CONTROL_REG], bfCONTROL_REG_START_BIT
      ENDIF

   ENDIF
endm

macro CYFISNP_ENABLE_IRQ_PIN
   IF CYFISNP_IRQ_MOSI_MUXED
      IF (CYFISNP_ARCH_TYPE_PSOC)
         IF (CYFISNP_IRQ_MODE_DDB_IRQ)
            M8C_SetBank1
            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
            M8C_SetBank0
         ENDIF
         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
            or      reg[CYFISNP_IRQIE_Addr],  CYFISNP_IRQ_MASK
            M8C_SetBank1
            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
            M8C_SetBank0
         ENDIF
         IF (CYFISNP_IRQ_MODE_POLLING)
            and     reg[CYFISNP_IRQGS_Addr], ~CYFISNP_IRQ_MASK
            M8C_SetBank1
            and     reg[CYFISNP_IRQDM0_Addr], ~CYFISNP_IRQ_MASK
            or      reg[CYFISNP_IRQDM1_Addr],  CYFISNP_IRQ_MASK
            M8C_SetBank0
         ENDIF
      ENDIF
      IF (CYFISNP_ARCH_TYPE_ENCORE)
            and     reg[P15CR], ~(CYFISNP_SPI_USE | CYFISNP_OUTPUT_EN)      ; P1.5 is IRQ input
      ENDIF
      IF (CYFISNP_ARCH_TYPE_C20066)
         M8C_SetBank1
            or     reg[CYFISNP_IRQDM1_Addr], CYFISNP_IRQ_MASK
         M8C_SetBank0
         and    reg[CYFISNP_CONTROL_REG], ~bfCONTROL_REG_START_BIT
         or     reg[CYFISNP_IRQ_Addr],(CYFISNP_IRQ_MASK | 0x20)
         IF (CYFISNP_IRQ_MODE_GPIO_IRQ)
            and    reg[INT_CLR0], ~INT_MSK0_GPIO
            or     reg[CYFISNP_IRQIE_Addr], CYFISNP_IRQ_MASK
         ENDIF
      ENDIF

   ENDIF
endm


macro CYFISNP_TST_IRQ_PIN
   tst   reg[CYFISNP_IRQ_Addr], CYFISNP_IRQ_MASK
endm

macro CYFISNP_ISR_REG_PRESERVE (IOReg)
  IF (SYSTEM_LARGE_MEMORY_MODEL)
        REG_PRESERVE (@IOReg)
  ENDIF
endm

macro CYFISNP_ISR_REG_RESTORE (IOReg)
  IF (SYSTEM_LARGE_MEMORY_MODEL)
        REG_RESTORE (@IOReg)
  ENDIF
endm


macro CYFISNP_RADIO_SELECT
IF(0x18 * 0x17)
   IF (CYFISNP_FAST_SS_ACTUATION)
      and   reg[CYFISNP_nSS_Addr], ~CYFISNP_nSS_MASK
      IF (CYFISNP_ARCH_TYPE_C20066 | CYFISNP_ARCH_TYPE_TMA300)
         IF((CYFISNP_nSS_Addr - CYFISNP_IRQ_Addr) * (CYFISNP_nSS_Addr - PRT1DR))
         ELSE
            or    reg[CYFISNP_nSS_Addr], CYFISNP_OD_MASK
         ENDIF
      ENDIF
      CYFISNP_DISABLE_IRQ_PIN
   ELSE
      IF (CYFISNP_nSS_IS_PPSOC_FN)
         push    A
         IF (SYSTEM_LARGE_MEMORY_MODEL)
            REG_PRESERVE CUR_PP
            RAM_SETPAGE_CUR >FN_0_Data_SHADE
         ENDIF
         and     [FN_0_Data_SHADE], ~CYFISNP_nSS_MASK
         mov     A, [FN_0_Data_SHADE]
         mov     reg[CYFISNP_nSS_Addr], A
         IF (SYSTEM_LARGE_MEMORY_MODEL)
            REG_RESTORE CUR_PP
         ENDIF
         CYFISNP_DISABLE_IRQ_PIN
         pop     A
      ELSE
         push    A
         IF (SYSTEM_LARGE_MEMORY_MODEL)
            REG_PRESERVE CUR_PP
            RAM_SETPAGE_CUR >Port_2_Data_SHADE
         ENDIF
         and     [Port_2_Data_SHADE], ~CYFISNP_nSS_MASK
         mov     A, [Port_2_Data_SHADE]
         mov     reg[CYFISNP_nSS_Addr], A
         IF (SYSTEM_LARGE_MEMORY_MODEL)
            REG_RESTORE CUR_PP
         ENDIF
         CYFISNP_DISABLE_IRQ_PIN
         pop     A
      ENDIF
   ENDIF
ENDIF
endm


macro CYFISNP_RADIO_DESELECT
IF(0x18 * 0x17)
   IF (CYFISNP_FAST_SS_ACTUATION)
      CYFISNP_ENABLE_IRQ_PIN
      or      reg[CYFISNP_nSS_Addr], (CYFISNP_nSS_MASK | CYFISNP_OD_MASK)
   ELSE
      IF (CYFISNP_nSS_IS_PPSOC_FN)
         push    A
         CYFISNP_ENABLE_IRQ_PIN
         IF (SYSTEM_LARGE_MEMORY_MODEL)
            REG_PRESERVE CUR_PP
            RAM_SETPAGE_CUR >FN_0_Data_SHADE
         ENDIF
         or      [FN_0_Data_SHADE], CYFISNP_nSS_MASK
         mov     A, [FN_0_Data_SHADE]
         mov     reg[CYFISNP_nSS_Addr], A
         IF (SYSTEM_LARGE_MEMORY_MODEL)
            REG_RESTORE CUR_PP
         ENDIF
         pop     A
      ELSE
         push    A
         CYFISNP_ENABLE_IRQ_PIN
         IF (SYSTEM_LARGE_MEMORY_MODEL)
            REG_PRESERVE CUR_PP
            RAM_SETPAGE_CUR >Port_2_Data_SHADE
         ENDIF
         or      [Port_2_Data_SHADE], CYFISNP_nSS_MASK
         mov     A, [Port_2_Data_SHADE]
         mov     reg[CYFISNP_nSS_Addr], A
         IF (SYSTEM_LARGE_MEMORY_MODEL)
            REG_RESTORE CUR_PP
         ENDIF
         pop     A
      ENDIF
   ENDIF
ENDIF
endm



macro   CYFISNP_IsRadioSleep:                   ; Zero flag is set if Radio is currently in SLEEP mode
        TST     [CYFISNP_RestingState], CYFISNP_END_STATE_MSK
endm

macro   CYFISNP_IsSleepDesired:                 ; Zero flag is set if the end state for the radio will be SLEEP mode
        TST     [CYFISNP_XactConfig], CYFISNP_END_STATE_MSK
endm


;-----------------------------------------------------------------------------
;
; UM Default Parameters
;
;-----------------------------------------------------------------------------

; Defaults for TX_CFG_REG
CYFISNP_DEF_DATA_RATE:    EQU     0x8
CYFISNP_DEF_TX_POWER:     EQU     0x7

; Defaults for XACT_CFG_REG
CYFISNP_DEF_END_STATE:    EQU     0x0
CYFISNP_DEF_ACK_ENABLE:   EQU     0x80
CYFISNP_DEF_ACK_TIMEOUT:  EQU     0x1

; Defaults for FRAMING_CFG_REG
CYFISNP_DEF_SOP_EN:       EQU     0x80
CYFISNP_DEF_SOP_LEN:      EQU     0x0
CYFISNP_DEF_LEN_EN:       EQU     0x20

if (CYFISNP_DEF_SOP_LEN)
CYFISNP_DEF_SOP_TSH:      EQU     0x0E
else
CYFISNP_DEF_SOP_TSH:      EQU     0x04
endif

; Default Thresholds
CYFISNP_DEF_32_THOLD:     EQU     0x05
CYFISNP_DEF_64_THOLD:     EQU     0x0E

CYFISNP_DEF_PREAMBLE_CNT: EQU     0x2

bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
;--------------------------------------------------
; Register constants and masks
;--------------------------------------------------
CYFISNP_SPIM_MODE_0:             equ   00h      ;MODE 0 - Leading edge latches data - pos clock
CYFISNP_SPIM_MODE_1:             equ   02h      ;MODE 1 - Leading edge latches data - neg clock
CYFISNP_SPIM_MODE_2:             equ   04h      ;MODE 2 - Trailing edge latches data - pos clock
CYFISNP_SPIM_MODE_3:             equ   06h      ;MODE 3 - Trailing edge latches data - neg clock
CYFISNP_SPIM_LSB_FIRST:          equ   80h      ;LSB bit transmitted/received first
CYFISNP_SPIM_MSB_FIRST:          equ   00h      ;MSB bit transmitted/received first

;---------------------------
; SPI Status register masks
;---------------------------
CYFISNP_SPIM_RX_OVERRUN_ERROR:   equ   40h      ;Overrun error in received data
CYFISNP_SPIM_TX_BUFFER_EMPTY:    equ   10h      ;TX Buffer register is ready for next data byte
CYFISNP_SPIM_RX_BUFFER_FULL:     equ   08h      ;RX Buffer register has received current data
CYFISNP_SPIM_SPI_COMPLETE:       equ   20h      ;SPI Tx/Rx cycle has completed

;-----------------------------------------------------------------------------
;
; NOTES ON THE PSoC LARGE MEMORY MODEL (LMM) .vs. SMALL MEMORY MODEL (SMM)
;
; The file <memory.inc> indicates whether LMM or SMM is used.
; LMM is available for devices with more than 256 Bytes of RAM and the
;  (Project,Settings,Compiler,Enable paging) box is checked in PSoC Designer.
;  Checking the Enable paging box sets SYSTEM_LARGE_MEMORY_MODEL: equ 1
;  in <memory.inc>.
;
; When using the Small Memory Model, the macros in <memory.inc> reduce to
;  nothing, and the resulting LMM paging overhead in Radio Driver disappears.
;
; Using the LMM imposes certain assumptions on the user's application.  See
;  Cypress AN2218 for details, a "summary" is below, but please obtain and
;  understand AN2218 before proceeding.
;
; 1) All internal radio driver variables are placed on Page 0.
; 2) Rx and Tx bulk data buffers may be placed on any Page.
; 3) Radio driver exit w/Page Mode bits UNCHANGED or set to NATIVE_PAGING
; 4) Radio driver exits with only STK_PP preserved, except for ISR exit.
;
; This is consistent with the ImageCraft compiler, however calls from
;  assembly need to handle possible loss of Page Pointers and Page Mode
;  changes to NATIVE_PAGING.
;
;-----------------------------------------------------------------------------

;=============================================================================
;=============================================================================
;=============================================================================
;
;
; EVERYTHING beyond this point is NOT NORMALLY CHANGED BY USERS
;
;
;=============================================================================
;=============================================================================
;=============================================================================

; SPI Interface definitions:
;
CYFISNP_mSPI_ADDRESS:      EQU      03Fh
CYFISNP_bSPI_WRITE:        EQU      080h
CYFISNP_bSPI_AUTO_INC:     EQU      040h

;
; RADIO_STATE definitions:
;
CYFISNP_IDLE:        EQU  00h
CYFISNP_RX:          EQU  80h
CYFISNP_TX:          EQU  20h
CYFISNP_SOP:         EQU  CYFISNP_SOPDET_IRQ
CYFISNP_DATA:        EQU  CYFISNP_RXB1_IRQ
CYFISNP_COMPLETE:    EQU  CYFISNP_RXC_IRQ         ; Code assumes these two bits are BOTH
CYFISNP_ERROR:       EQU  CYFISNP_RXE_IRQ         ;  in the RX_CTRL_ADR register.

//
// Return value for a RadioAbort completed successfully. Otherwise the return value
//  is the length of the packet received (without error).
//
CYFISNP_ABORT_SUCCESS: EQU    0xFF






;----------------------------------------------------------------------------
;
; CYFISPI User Module PHY layer registers definitions
;

; -------------------------------
; Channel register
; -------------------------------
CYFISNP_CHANNEL_ADR:                                    equ 0x00
CYFISNP_CHANNEL_RST:                                    equ 0x48
CYFISNP_CHANNEL_MSK:                                    equ 0x7f

CYFISNP_CHANNEL_MAX:                                    equ 0x62
CYFISNP_CHANNEL_MIN:                                    equ 0x00
CYFISNP_CHANNEL_2P498_GHZ:                              equ 0x62
CYFISNP_CHANNEL_2P4_GHZ:                                equ 0x00


; -------------------------------
; TX Length register
; -------------------------------
CYFISNP_TX_LENGTH_ADR:                                  equ 0x01
CYFISNP_TX_LENGTH_RST:                                  equ 0x00
CYFISNP_TX_LENGTH_MSK:                                  equ 0xff


; -------------------------------
; TX Control register
; -------------------------------
CYFISNP_TX_CTRL_ADR:                                    equ 0x02
CYFISNP_TX_CTRL_RST:                                    equ 0x03

; See TX_IRQ for remaining bit position definitions

; TX_CTRL bit masks
CYFISNP_TX_GO:                                          equ 0x80
CYFISNP_TX_CLR:                                         equ 0x40


; -------------------------------
; TX Configuration register
; -------------------------------
CYFISNP_TX_CFG_ADR:                                     equ 0x03
CYFISNP_TX_CFG_RST:                                     equ 0x05

; separate bit field masks
CYFISNP_TX_DATCODE_LEN_MSK:                             equ 0x20
CYFISNP_TX_DATMODE_MSK:                                 equ 0x18
CYFISNP_PA_VAL_MSK:                                     equ 0x07

; DATCODE_LEN register masks
CYFISNP_DATCODE_LEN_64:                                 equ 0x20
CYFISNP_DATCODE_LEN_32:                                 equ 0x00

; DATMODE register masks
CYFISNP_DATMODE_1MBPS:                                  equ 0x00
CYFISNP_DATMODE_8DR:                                    equ 0x08

; PA_SET register masks
CYFISNP_PA_N30_DBM:                                     equ 0x00
CYFISNP_PA_N25_DBM:                                     equ 0x01
CYFISNP_PA_N20_DBM:                                     equ 0x02
CYFISNP_PA_N15_DBM:                                     equ 0x03
CYFISNP_PA_N10_DBM:                                     equ 0x04
CYFISNP_PA_N5_DBM:                                      equ 0x05
CYFISNP_PA_0_DBM:                                       equ 0x06
CYFISNP_PA_4_DBM:                                       equ 0x07


; -------------------------------
; TX IRQ Status register
; -------------------------------
CYFISNP_TX_IRQ_STATUS_ADR:                              equ 0x04

; TX_IRQ bit masks
CYFISNP_XS_IRQ:                                         equ 0x80
CYFISNP_LV_IRQ:                                         equ 0x40
CYFISNP_TXB15_IRQ:                                      equ 0x20
CYFISNP_TXB8_IRQ:                                       equ 0x10
CYFISNP_TXB0_IRQ:                                       equ 0x08
CYFISNP_TXBERR_IRQ:                                     equ 0x04
CYFISNP_TXC_IRQ:                                        equ 0x02
CYFISNP_TXE_IRQ:                                        equ 0x01


; -------------------------------
; RX Control register
; -------------------------------
CYFISNP_RX_CTRL_ADR:                                    equ 0x05
CYFISNP_RX_CTRL_RST:                                    equ 0x07

; See RX_IRQ register for bit positions definitions also used for this register

; RX_CTRL bit masks
CYFISNP_RX_GO:                                          equ 0x80


; -------------------------------
; RX Configuration register
; -------------------------------
CYFISNP_RX_CFG_ADR:                                     equ 0x06
CYFISNP_RX_CFG_RST:                                     equ 0x92

CYFISNP_AUTO_AGC_EN:                                    equ 0x80
CYFISNP_LNA_EN:                                         equ 0x40
CYFISNP_ATT_EN:                                         equ 0x20
CYFISNP_HI:                                             equ 0x10
CYFISNP_LO:                                             equ 0x00
CYFISNP_FASTTURN_EN:                                    equ 0x08
CYFISNP_RXOW_EN:                                        equ 0x02
CYFISNP_VLD_EN:                                         equ 0x01


; -------------------------------
; RX IRQ register
; -------------------------------
CYFISNP_RX_IRQ_STATUS_ADR:                              equ 0x07
; There is no default value for this register.

; RX_IRQ bit masks
CYFISNP_RXOW_IRQ:                                       equ 0x80
CYFISNP_SOPDET_IRQ:                                     equ 0x40
CYFISNP_RXB16_IRQ:                                      equ 0x20
CYFISNP_RXB8_IRQ:                                       equ 0x10
CYFISNP_RXB1_IRQ:                                       equ 0x08
CYFISNP_RXBERR_IRQ:                                     equ 0x04
CYFISNP_RXC_IRQ:                                        equ 0x02
CYFISNP_RXE_IRQ:                                        equ 0x01


; -------------------------------
; RX Status register
; -------------------------------
CYFISNP_RX_STATUS_ADR:                                  equ 0x08
// There is no default value for this register.

; single flag bits & multi-bit-field masks
CYFISNP_RX_ACK:                                         equ 0x80
CYFISNP_RX_PKTERR:                                      equ 0x40
CYFISNP_RX_EOPERR:                                      equ 0x20
CYFISNP_RX_CRC0:                                        equ 0x10
CYFISNP_RX_BAD_CRC:                                     equ 0x08
CYFISNP_RX_DATCODE_LEN:                                 equ 0x04
CYFISNP_RX_DATMODE_MSK:                                 equ 0x03


; -------------------------------
; RX Count register
; -------------------------------
CYFISNP_RX_COUNT_ADR:                                   equ 0x09
CYFISNP_RX_COUNT_RST:                                   equ 0x00
CYFISNP_RX_COUNT_MSK:                                   equ 0xff


; -------------------------------
; RX Length Field register
; -------------------------------
CYFISNP_RX_LENGTH_ADR:                                  equ 0x0a
CYFISNP_RX_LENGTH_RST:                                  equ 0x00
CYFISNP_RX_LENGTH_MSK:                                  equ 0xff


; -------------------------------
; Power Control register
; -------------------------------
CYFISNP_PWR_CTRL_ADR:                                   equ 0x0b
CYFISNP_PWR_CTRL_RST:                                   equ 0xa0

; single flag bits & multi-bit-field masks
CYFISNP_PMU_EN:                                         equ 0x80
CYFISNP_LV_IRQ_EN:                                      equ 0x40
CYFISNP_PMU_SEN:                                        equ 0x20
CYFISNP_PFET_OFF:                                       equ 0x10
CYFISNP_LV_IRQ_TH_MSK:                                  equ 0x0c
CYFISNP_PMU_OUTV_MSK:                                   equ 0x03

; LV_IRQ_TH values
CYFISNP_LV_IRQ_TH_1P8_V:                                equ 0x0C
CYFISNP_LV_IRQ_TH_2P0_V:                                equ 0x08
CYFISNP_LV_IRQ_TH_2P2_V:                                equ 0x04
CYFISNP_LV_IRQ_TH_PMU_OUTV:                             equ 0x00

; PMU_OUTV values
CYFISNP_PMU_OUTV_2P4:                                   equ 0x03
CYFISNP_PMU_OUTV_2P5:                                   equ 0x02
CYFISNP_PMU_OUTV_2P6:                                   equ 0x01
CYFISNP_PMU_OUTV_2P7:                                   equ 0x00


; -------------------------------
; Crystal Control register
; -------------------------------
CYFISNP_XTAL_CTRL_ADR:                                  equ 0x0c
CYFISNP_XTAL_CTRL_RST:                                  equ 0x04

; single flag bits & multi-bit-field masks
CYFISNP_XOUT_FNC_MSK:                                   equ 0xc0
CYFISNP_XS_IRQ_EN:                                      equ 0x20
CYFISNP_XOUT_FREQ_MSK:                                  equ 0x07

; XOUT_FNC values
CYFISNP_XOUT_FNC_XOUT_FREQ:                             equ 0x00
CYFISNP_XOUT_FNC_PA_N:                                  equ 0x40
CYFISNP_XOUT_FNC_RAD_STREAM:                            equ 0x80
CYFISNP_XOUT_FNC_GPIO:                                  equ 0xC0

; XOUT_FREQ values
CYFISNP_XOUT_FREQ_12MHZ:                                equ 0x00
CYFISNP_XOUT_FREQ_6MHZ:                                 equ 0x01
CYFISNP_XOUT_FREQ_3MHZ:                                 equ 0x02
CYFISNP_XOUT_FREQ_1P5MHZ:                               equ 0x03
CYFISNP_XOUT_FREQ_P75MHZ:                               equ 0x04

; -------------------------------
; Analog Control register
; -------------------------------
CYFISNP_ANALOG_CTRL_ADR:                                equ 0x39
CYFISNP_ALLSLOW:                                        equ 0x01

; -------------------------------
; I/O Configuration register
; -------------------------------
CYFISNP_IO_CFG_ADR:                                     equ 0x0d
CYFISNP_IO_CFG_RST:                                     equ 0x00
CYFISNP_IO_CFG_MSK:                                     equ 0xff

; single flag bits & multi-bit-field masks
CYFISNP_IRQ_OD:                                         equ 0x80
CYFISNP_IRQ_POL:                                        equ 0x40
CYFISNP_MISO_OD:                                        equ 0x20
CYFISNP_XOUT_OD:                                        equ 0x10
CYFISNP_PACTL_OD:                                       equ 0x08
CYFISNP_PACTL_GPIO:                                     equ 0x04
CYFISNP_SPI_3_PIN:                                      equ 0x02
CYFISNP_IRQ_GPIO:                                       equ 0x01


; -------------------------------
; GPIO Control register
; -------------------------------
CYFISNP_GPIO_CTRL_ADR:                                  equ 0x0e
CYFISNP_GPIO_CTRL_RST:                                  equ 0x00
CYFISNP_GPIO_CTRL_MSK:                                  equ 0xf0

; single flag bits & multi-bit-field masks
CYFISNP_XOUT_OP:                                        equ 0x80
CYFISNP_MISO_OP:                                        equ 0x40
CYFISNP_PACTL_OP:                                       equ 0x20
CYFISNP_IRQ_OP:                                         equ 0x10
CYFISNP_XOUT_IP:                                        equ 0x08
CYFISNP_MISO_IP:                                        equ 0x04
CYFISNP_PACTL_IP:                                       equ 0x02
CYFISNP_IRQ_IP:                                         equ 0x01


; -------------------------------
; Transaction Configuration register
; -------------------------------
CYFISNP_XACT_CFG_ADR:                                   equ 0x0f
CYFISNP_XACT_CFG_RST:                                   equ 0x80

; single flag bits & multi-bit-field masks
CYFISNP_ACK_EN:                                         equ 0x80
CYFISNP_FRC_END_STATE:                                  equ 0x20
CYFISNP_END_STATE_MSK:                                  equ 0x1c
CYFISNP_ACK_TO_MSK:                                     equ 0x03

; END_STATE field values
CYFISNP_END_STATE_SLEEP:                                equ 0x00
CYFISNP_END_STATE_IDLE:                                 equ 0x04
CYFISNP_END_STATE_TXSYNTH:                              equ 0x08
CYFISNP_END_STATE_RXSYNTH:                              equ 0x0C
CYFISNP_END_STATE_RX:                                   equ 0x10

; ACK_TO field values
CYFISNP_ACK_TO_4X:                                      equ 0x00
CYFISNP_ACK_TO_8X:                                      equ 0x01
CYFISNP_ACK_TO_12X:                                     equ 0x02
CYFISNP_ACK_TO_15X:                                     equ 0x03


; -------------------------------
; Framing Configuration register
; -------------------------------
CYFISNP_FRAMING_CFG_ADR:                                equ 0x10
CYFISNP_FRAMING_CFG_RST:                                equ 0xa5

; single flag bits & multi-bit-field masks
CYFISNP_SOP_EN:                                         equ 0x80
CYFISNP_SOP_LEN:                                        equ 0x40
CYFISNP_LEN_EN:                                         equ 0x20
CYFISNP_SOP_THRESH_MSK:                                 equ 0x1f


; -------------------------------
; Data Threshold 32 register
; -------------------------------
CYFISNP_DATA32_THOLD_ADR:                               equ 0x11
CYFISNP_DAT32_THRESH_RST:                               equ 0x04
CYFISNP_DAT32_THRESH_MSK:                               equ 0x0f


; -------------------------------
; Data Threshold 64 register
; -------------------------------
CYFISNP_DATA64_THOLD_ADR:                               equ 0x12
CYFISNP_DAT64_THRESH_RST:                               equ 0x0a
CYFISNP_DAT64_THRESH_MSK:                               equ 0x1f


; -------------------------------
; RSSI register
; -------------------------------
CYFISNP_RSSI_ADR:                                       equ 0x13
CYFISNP_RSSI_RST:                                       equ 0x20

; single flag bits & multi-bit-field masks
CYFISNP_SOP_RSSI:                                       equ 0x80
CYFISNP_LNA_STATE:                                      equ 0x20
CYFISNP_RSSI_LVL_MSK:                                   equ 0x1f


; -------------------------------
; EOP Control register
; -------------------------------
CYFISNP_EOP_CTRL_ADR:                                   equ 0x14
CYFISNP_EOP_CTRL_RST:                                   equ 0xa4

; single flag bits & multi-bit-field masks
CYFISNP_HINT_EN:                                        equ 0x80
CYFISNP_HINT_EOP_MSK:                                   equ 0x70
CYFISNP_EOP_MSK:                                        equ 0x0f


; -------------------------------
; CRC Seed registers
; -------------------------------
CYFISNP_CRC_SEED_LSB_ADR:                               equ 0x15
CYFISNP_CRC_SEED_MSB_ADR:                               equ 0x16
CYFISNP_CRC_SEED_LSB_RST:                               equ 0x00
CYFISNP_CRC_SEED_MSB_RST:                               equ 0x00

; CRC related values
; USB CRC-16
CYFISNP_CRC_POLY_MSB:                                   equ 0x80
CYFISNP_CRC_POLY_LSB:                                   equ 0x05
CYFISNP_CRC_RESI_MSB:                                   equ 0x80
CYFISNP_CRC_RESI_LSB:                                   equ 0x0d


; -------------------------------
; TX CRC Calculated registers
; -------------------------------
CYFISNP_TX_CRC_LSB_ADR:                                 equ 0x17
CYFISNP_TX_CRC_MSB_ADR:                                 equ 0x18


; -------------------------------
; RX CRC Field registers
; -------------------------------
CYFISNP_RX_CRC_LSB_ADR:                                 equ 0x19
CYFISNP_RX_CRC_MSB_ADR:                                 equ 0x1a
CYFISNP_RX_CRC_LSB_RST:                                 equ 0xff
CYFISNP_RX_CRC_MSB_RST:                                 equ 0xff


; -------------------------------
; Synth Offset registers
; -------------------------------
CYFISNP_TX_OFFSET_LSB_ADR:                              equ 0x1b
CYFISNP_TX_OFFSET_MSB_ADR:                              equ 0x1c
CYFISNP_TX_OFFSET_LSB_RST:                              equ 0x00
CYFISNP_TX_OFFSET_MSB_RST:                              equ 0x00

; single flag bits & multi-bit-field masks
CYFISNP_STRIM_MSB_MSK:                                  equ 0x0f
CYFISNP_STRIM_LSB_MSK:                                  equ 0xff


; -------------------------------
; Mode Override register
; -------------------------------
CYFISNP_MODE_OVERRIDE_ADR:                              equ 0x1d
CYFISNP_MODE_OVERRIDE_RST:                              equ 0x00

CYFISNP_FRC_AWAKE:                                      equ 0x03
CYFISNP_FRC_AWAKE_OFF_1:                                equ 0x01
CYFISNP_FRC_AWAKE_OFF_2:                                equ 0x00

; single flag bits & multi-bit-field masks
CYFISNP_DIS_AUTO_SEN:                                   equ 0x80
CYFISNP_SEN_TXRXB:                                      equ 0x40
CYFISNP_FRC_SEN:                                        equ 0x20
CYFISNP_FRC_AWAKE_MSK:                                  equ 0x18
CYFISNP_MODE_OVRD_FRC_AWAKE:                            equ 0x18
CYFISNP_MODE_OVRD_FRC_AWAKE_OFF_1:                      equ 0x08
CYFISNP_MODE_OVRD_FRC_AWAKE_OFF_2:                      equ 0x00
CYFISNP_RST:                                            equ 0x01
CYFISNP_FRC_PA:                                         equ 0x02


; -------------------------------
; RX Override register
; -------------------------------
CYFISNP_RX_OVERRIDE_ADR:                                equ 0x1e
CYFISNP_RX_OVERRIDE_RST:                                equ 0x00

; single flag bits & multi-bit-field masks
CYFISNP_ACK_RX:                                         equ 0x80
CYFISNP_EXTEND_RX_TX:                                   equ 0x40
CYFISNP_MAN_RXACK:                                      equ 0x20
CYFISNP_FRC_RXDR:                                       equ 0x10
CYFISNP_DIS_CRC0:                                       equ 0x08
CYFISNP_DIS_RXCRC:                                      equ 0x04
CYFISNP_ACE:                                            equ 0x02


; -------------------------------
; TX Override register
; -------------------------------
CYFISNP_TX_OVERRIDE_ADR:                                equ 0x1f
CYFISNP_TX_OVERRIDE_RST:                                equ 0x00

; single flag bits & multi-bit-field masks
CYFISNP_ACK_TX_SEN:                                     equ 0x80
CYFISNP_FRC_PREAMBLE:                                   equ 0x40
CYFISNP_DIS_TX_RETRANS:                                 equ 0x20
CYFISNP_MAN_TXACK:                                      equ 0x10
CYFISNP_OVRRD_ACK:                                      equ 0x08
CYFISNP_DIS_TXCRC:                                      equ 0x04
CYFISNP_CO:                                             equ 0x02
CYFISNP_TXINV:                                          equ 0x01


;------------------------------------------------------------------------------
;      File Function Detail
;------------------------------------------------------------------------------

; -------------------------------
; TX Buffer - 16 bytes
; -------------------------------
CYFISNP_TX_BUFFER_ADR:                                  equ 0x20


; -------------------------------
; RX Buffer - 16 bytes
; -------------------------------
CYFISNP_RX_BUFFER_ADR:                                  equ 0x21


; -------------------------------
; Framing Code - 8 bytes
; -------------------------------
CYFISNP_SOP_CODE_ADR:                                   equ 0x22

; CODESTORE_REG_SOF_RST        64'h17_ff_9e_21_36_90_c7_82
CYFISNP_CODESTORE_BYTE7_SOF_RST:                        equ 0x17
CYFISNP_CODESTORE_BYTE6_SOF_RST:                        equ 0xff
CYFISNP_CODESTORE_BYTE5_SOF_RST:                        equ 0x9e
CYFISNP_CODESTORE_BYTE4_SOF_RST:                        equ 0x21
CYFISNP_CODESTORE_BYTE3_SOF_RST:                        equ 0x36
CYFISNP_CODESTORE_BYTE2_SOF_RST:                        equ 0x90
CYFISNP_CODESTORE_BYTE1_SOF_RST:                        equ 0xc7
CYFISNP_CODESTORE_BYTE0_SOF_RST:                        equ 0x82


; -------------------------------
; Data Code - 16 bytes
; -------------------------------
CYFISNP_DATA_CODE_ADR:                                  equ 0x23

; CODESTORE_REG_DCODE0_RST            64'h01_2B_F1_DB_01_32_BE_6F
CYFISNP_CODESTORE_BYTE7_DCODE0_RST:                     equ 0x01
CYFISNP_CODESTORE_BYTE6_DCODE0_RST:                     equ 0x2b
CYFISNP_CODESTORE_BYTE5_DCODE0_RST:                     equ 0xf1
CYFISNP_CODESTORE_BYTE4_DCODE0_RST:                     equ 0xdb
CYFISNP_CODESTORE_BYTE3_DCODE0_RST:                     equ 0x01
CYFISNP_CODESTORE_BYTE2_DCODE0_RST:                     equ 0x32
CYFISNP_CODESTORE_BYTE1_DCODE0_RST:                     equ 0xbe
CYFISNP_CODESTORE_BYTE0_DCODE0_RST:                     equ 0x6f

; CODESTORE_REG_DCODE1_RST            64'h02_F9_93_97_02_FA_5C_E3
CYFISNP_CODESTORE_BYTE7_DCODE1_RST:                     equ 0x02
CYFISNP_CODESTORE_BYTE6_DCODE1_RST:                     equ 0xf9
CYFISNP_CODESTORE_BYTE5_DCODE1_RST:                     equ 0x93
CYFISNP_CODESTORE_BYTE4_DCODE1_RST:                     equ 0x97
CYFISNP_CODESTORE_BYTE3_DCODE1_RST:                     equ 0x02
CYFISNP_CODESTORE_BYTE2_DCODE1_RST:                     equ 0xfa
CYFISNP_CODESTORE_BYTE1_DCODE1_RST:                     equ 0x5c
CYFISNP_CODESTORE_BYTE0_DCODE1_RST:                     equ 0xe3


; -------------------------------
; Preamble - 3 bytes
; -------------------------------
CYFISNP_PREAMBLE_ADR:                                   equ 0x24

CYFISNP_PREAMBLE_CODE_MSB_RST:                          equ 0x33
CYFISNP_PREAMBLE_CODE_LSB_RST:                          equ 0x33
CYFISNP_PREAMBLE_LEN_RST:                               equ 0x02


; -------------------------------
; Laser Fuses - 8 bytes (2 hidden)
; -------------------------------
CYFISNP_MFG_ID_ADR:                                     equ 0x25


; -------------------------------
; XTAL Startup Delay
; -------------------------------
CYFISNP_XTAL_CFG_ADR:                                   equ 0x26
CYFISNP_XTAL_CFG_RST:                                   equ 0x00

; -------------------------------
; Clock Override
; -------------------------------
CYFISNP_CLK_OVERRIDE_ADR:                               equ 0x27
CYFISNP_CLK_OVERRIDE_RST:                               equ 0x00

CYFISNP_RXF:                                            equ 0x02


; -------------------------------
; Clock Enable
; -------------------------------
CYFISNP_CLK_EN_ADR:                                     equ 0x28
CYFISNP_CLK_EN_RST:                                     equ 0x00

CYFISNP_RXF:                                            equ 0x02


; -------------------------------
; Receiver Abort
; -------------------------------
CYFISNP_RX_ABORT_ADR:                                   equ 0x29
CYFISNP_RX_ABORT_RST:                                   equ 0x00

CYFISNP_ABORT_EN:                                       equ 0x20


; -------------------------------
; Auto Calibration Time
; -------------------------------
CYFISNP_AUTO_CAL_TIME_ADR:                              equ 0x32
CYFISNP_AUTO_CAL_TIME_RST:                              equ 0x0C

CYFISNP_AUTO_CAL_TIME_MAX:                              equ 0x3C


; -------------------------------
; Auto Calibration Offset
; -------------------------------
CYFISNP_AUTO_CAL_OFFSET_ADR:                            equ 0x35
CYFISNP_AUTO_CAL_OFFSET_RST:                            equ 0x00

CYFISNP_AUTO_CAL_OFFSET_MINUS_4:                        equ 0x14


; ############################################################################
; END OF CYFISPI.inc
; ############################################################################
