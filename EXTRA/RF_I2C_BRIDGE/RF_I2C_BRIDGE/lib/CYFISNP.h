//*****************************************************************************
//*****************************************************************************
//  FILENAME: CYFISNP.h
//  Version: 2.00, Updated on 2015/3/4 at 22:21:20
//  Generated by PSoC Designer 5.4.3191
//
//  DESCRIPTION: CYFISPI User Module header file
//-----------------------------------------------------------------------------
//  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#include "m8c.h"

#ifndef INC_CYFISPI_H
#define INC_CYFISPI_H

//--------------------------------------
// Type Declarations
//--------------------------------------
typedef unsigned char RADIO_FRAME_CONFIG;
typedef unsigned char RADIO_TX_STATUS;
typedef unsigned char RADIO_STATE;
//----------------------------------------------------------------------------
//
// XACT_CONFIG defines the states the radio hardware can automatically
//  got to after performing an operation and whether the radio acks
//  automatically.
typedef unsigned char XACT_CONFIG;
//----------------------------------------------------------------------------
//
// TX_CONFIG defines the data and SOP length and encoding for transmit data
//  and also the TX power.
typedef unsigned char TX_CONFIG;
typedef unsigned char RADIO_RX_STATUS;

typedef unsigned char RADIO_LENGTH;
typedef unsigned char RADIO_REG_ADDR;
typedef void *RADIO_BUFFER_PTR;
typedef const char *RADIO_CONST_PTR;
typedef unsigned char RADIO_RSSI;


#endif // INC_CYFISPI_H

#ifndef CYFISNP_h
#define CYFISNP_h


// Defaults for TX_CFG_REG
#define CYFISNP_DEF_DATA_RATE		0x8
#define CYFISNP_DEF_TX_POWER		0x7

// Defaults for XACT_CFG_REG
#define CYFISNP_DEF_END_STATE		0x0
#define CYFISNP_DEF_ACK_ENABLE		0x80
#define CYFISNP_DEF_ACK_TIMEOUT	0x1

// Defaults for FRAMING_CFG_REG
#define CYFISNP_DEF_SOP_EN			0x80
#define CYFISNP_DEF_SOP_LEN		0x0
#define CYFISNP_DEF_LEN_EN			0x20

#if (CYFISNP_DEF_SOP_LEN)
	#define CYFISNP_DEF_SOP_TSH		0x0E
#else
	#define CYFISNP_DEF_SOP_TSH		0x04
#endif

// Default Thresholds
#define CYFISNP_DEF_32_THOLD		0x05
#define CYFISNP_DEF_64_THOLD		0x0E

#define CYFISNP_DEF_PREAMBLE_CNT	0x2


//  @PSoC_UserCode_NumPnCodes@ (Do not change this line.)

//  Following two lines selects SOP code set to use in CYFISNP_SetSopPnCode function
//  You must assign the same values to CYFISNP_SOP_SET_x in CYFISNP.inc file
//  for proper User Module operation!

#define CYFISNP_SOP_SET_A 1
#define CYFISNP_SOP_SET_B 0

//  @PSoC_UserCode_END@ (Do not change this line.)

#if (CYFISNP_SOP_SET_A & CYFISNP_SOP_SET_B)
    #define CYFISNP_NUM_PN_CODES 20
#else
    #define CYFISNP_NUM_PN_CODES 10
#endif

#define CYFISNP_ARCH_TYPE_PSOC     1
#define CYFISNP_ARCH_TYPE_ENCORE   0
#define CYFISNP_ARCH_TYPE_C20066  0
#define CYFISNP_ARCH_TYPE_TMA300   0

#define CYFISNP_IRQ_MODE_DDB_IRQ   0
#define CYFISNP_IRQ_MODE_GPIO_IRQ  0
#define CYFISNP_POLLING            1

#define CYFISNP_SPI_MODE_SDIO      0
#define CYFISNP_SPIM_API_EXPOSED   0
#define CYFISNP_IRQ_MOSI_MUXED     0

#define CYFISNP_FAST_SS_ACTUATION  1

#define CYFISNP_SOP_EN             0x80
#define CYFISNP_SOP_LEN            0x40
#define CYFISNP_RADIO_LEN_EN       0x20
#define CYFISNP_SOP_THRESH_MSK     0x1F

#define CYFISNP_RADIO_XS           0x80
#define CYFISNP_RADIO_LV           0x40
#define CYFISNP_TXE                0x01

//----------------------------------------------------------------------------
//
// SPI Interface definitions:
//
#define CYFISNP_mSPI_ADDRESS       0x3F
#define CYFISNP_bSPI_WRITE         0x80
#define CYFISNP_bSPI_AUTO_INC      0x40

#define  CYFISNP_SPIM_RX_OVERRUN_ERROR  0x40      // Overrun error in received data
#define  CYFISNP_SPIM_TX_BUFFER_EMPTY   0x10      // TX Buffer register is ready for next data byte
#define  CYFISNP_SPIM_RX_BUFFER_FULL    0x08      // RX Buffer register has received current data
#define  CYFISNP_SPIM_SPI_COMPLETE      0x20      // SPI Tx/Rx cycle has completed
//----------------------------------------------------------------------------
//
// RADIO_STATE uses many of the same bits as the RX_IRQ_STATUS_ADR register.
// We add in a couple of our own.
//
#define CYFISNP_IDLE       0x00
#define CYFISNP_RX         0x80
#define CYFISNP_TX         0x20
#define CYFISNP_SOP        CYFISNP_SOPDET_IRQ
#define CYFISNP_DATA       CYFISNP_RXB1_IRQ
#define CYFISNP_COMPLETE   CYFISNP_RXC_IRQ
#define CYFISNP_ERROR      CYFISNP_RXE_IRQ

//----------------------------------------------------------------------------
//
// RADIO_RX_STATUS
//
#define CYFISNP_RX_ACK             0x80
#define CYFISNP_RX_MISS            0x40
#define CYFISNP_RX_OF              0x20
#define CYFISNP_RX_CRC0            0x10
#define CYFISNP_RADIO_BAD_CRC      0x08
#define CYFISNP_RADIO_DATCODE_LEN  0x04
#define CYFISNP_RADIO_8DR          0x01
#define CYFISNP_RADIO_GFSK         0x00

//--------------------------------------
// API Function Declarations
//--------------------------------------
#if (CYFISNP_ARCH_TYPE_ENCORE) // Workaround. PD50 does not generate Port addr.
  #define CYFISNP_nSS_Data_ADDR PRT2DR
  #define CYFISNP_IRQ_Data_ADDR PRT2DR
#endif

#if (0x18 && 0x17)
	#if (CYFISNP_FAST_SS_ACTUATION)
		#define CYFISNP_RADIO_SELECT { CYFISNP_nSS_Data_ADDR &= ~CYFISNP_nSS_MASK; }
		#define CYFISNP_RADIO_DESELECT { CYFISNP_nSS_Data_ADDR |= CYFISNP_nSS_MASK; }
	#else
		#if (CYFISNP_nSS_IS_PPSOC_FN)
			#define CYFISNP_RADIO_SELECT { FN_0_Data_SHADE &= ~CYFISNP_nSS_MASK; CYFISNP_nSS_Data_ADDR = FN_0_Data_SHADE; }
			#define CYFISNP_RADIO_DESELECT { FN_0_Data_SHADE |= CYFISNP_nSS_MASK; CYFISNP_nSS_Data_ADDR = FN_0_Data_SHADE; }
		#else
			#define CYFISNP_RADIO_SELECT { Port_2_Data_SHADE &= ~CYFISNP_nSS_MASK; CYFISNP_nSS_Data_ADDR = Port_2_Data_SHADE; }
			#define CYFISNP_RADIO_DESELECT { Port_2_Data_SHADE |= CYFISNP_nSS_MASK; CYFISNP_nSS_Data_ADDR = Port_2_Data_SHADE; }
		#endif
	#endif
#else
		// Workaround. This should allow compilation with default UM parameters
		#define CYFISNP_nSS_Data_ADDR PRT0DR
		#define CYFISNP_nSS_MASK      0
		#define CYFISNP_RADIO_SELECT {}
		#define CYFISNP_RADIO_DESELECT {}
#endif
//
// All these functions are fastcall16.
//
#pragma fastcall16 CYFISNP_Start
#pragma fastcall16 CYFISNP_Stop
#pragma fastcall16 CYFISNP_EnableInt
#pragma fastcall16 CYFISNP_DisableInt
#pragma fastcall16 CYFISNP_Reset
#pragma fastcall16 CYFISNP_Read
#pragma fastcall16 CYFISNP_Write
#pragma fastcall16 CYFISNP_SetPtr
#pragma fastcall16 CYFISNP_SetLength
#pragma fastcall16 CYFISNP_FileRead
#pragma fastcall16 CYFISNP_FileWrite
#pragma fastcall16 CYFISNP_BurstRead
#pragma fastcall16 CYFISNP_BurstWrite
#pragma fastcall16 CYFISNP_SetFrequency
#pragma fastcall16 CYFISNP_SetChannel
#pragma fastcall16 CYFISNP_GetFrequency
#pragma fastcall16 CYFISNP_GetChannel
#pragma fastcall16 CYFISNP_SetTxConfig
#pragma fastcall16 CYFISNP_GetTxConfig
#pragma fastcall16 CYFISNP_SetXactConfig
#pragma fastcall16 CYFISNP_GetXactConfig
#pragma fastcall16 CYFISNP_SetFrameConfig
#pragma fastcall16 CYFISNP_GetFrameConfig
#pragma fastcall16 CYFISNP_SetThreshold32
#pragma fastcall16 CYFISNP_GetThreshold32
#pragma fastcall16 CYFISNP_SetThreshold64
#pragma fastcall16 CYFISNP_GetThreshold64
#pragma fastcall16 CYFISNP_SetPreambleCount
#pragma fastcall16 CYFISNP_GetPreambleCount
#pragma fastcall16 CYFISNP_SetPreamblePattern
#pragma fastcall16 CYFISNP_GetPreamblePattern
#pragma fastcall16 CYFISNP_SetSopPnCode
#pragma fastcall16 CYFISNP_SetConstDataPnCode
#pragma fastcall16 CYFISNP_SetConstSopPnCode
#pragma fastcall16 CYFISNP_SetCrcSeed
#pragma fastcall16 CYFISNP_GetCrcSeed
#pragma fastcall16 CYFISNP_GetRssi
#pragma fastcall16 CYFISNP_Init
#pragma fastcall16 CYFISNP_BlockingTransmit
#pragma fastcall16 CYFISNP_StartTransmit
#pragma fastcall16 CYFISNP_StartReceive
#pragma fastcall16 CYFISNP_GetTransmitState
#pragma fastcall16 CYFISNP_GetReceiveState
#pragma fastcall16 CYFISNP_GetReceiveStatus
#pragma fastcall16 CYFISNP_EndTransmit
#pragma fastcall16 CYFISNP_EndReceive
#pragma fastcall16 CYFISNP_Abort
#pragma fastcall16 CYFISNP_GetFuses
#pragma fastcall16 CYFISNP_Poll
#pragma fastcall16 CYFISNP_Interrupt
#pragma fastcall16 CYFISNP_ForceState

// Internal low-level functions
#pragma fastcall16 CYFISNP_RestartTransmit
#pragma fastcall16 CYFISNP_GetReceiveStateIsr
#pragma fastcall16 CYFISNP_GetTransmitStateIsr

#if (CYFISNP_SPIM_API_EXPOSED)
    #if (CYFISNP_ARCH_TYPE_PSOC)
        #pragma fastcall16  CYFISNP_SendTxData
        #pragma fastcall16  CYFISNP_bReadRxData
        #pragma fastcall16  CYFISNP_bReadStatus
    #endif
    #if (CYFISNP_ARCH_TYPE_ENCORE)
        #pragma fastcall16  CYFISNP_SetMOSI
        #pragma fastcall16  CYFISNP_SetMISO
        #pragma fastcall16  CYFISNP_bIO
    #endif
    #if (CYFISNP_ARCH_TYPE_C20066)
        // !!!TODO!!!
    #endif
#endif

//
// Low level SPI access routines.
//
extern void CYFISNP_Reset      (void);
extern BYTE CYFISNP_Read       (RADIO_REG_ADDR regAddr);
extern void CYFISNP_Write      (RADIO_REG_ADDR regAddr, BYTE value);
extern void CYFISNP_SetPtr     (RADIO_BUFFER_PTR ramPtr);
extern void CYFISNP_SetLength  (BYTE len);
extern void CYFISNP_FileRead   (RADIO_REG_ADDR regAddr, RADIO_LENGTH len);
extern void CYFISNP_FileWrite  (RADIO_REG_ADDR regAddr, RADIO_LENGTH len);
extern void CYFISNP_BurstRead  (RADIO_REG_ADDR regAddr, RADIO_LENGTH len);
extern void CYFISNP_BurstWrite (RADIO_REG_ADDR regAddr, RADIO_LENGTH len);

//
// Configuration access routines.
//
extern void CYFISNP_SetFrequency       (BYTE frequency);
extern void CYFISNP_SetChannel         (BYTE channel);
extern BYTE CYFISNP_GetFrequency       (void);
extern BYTE CYFISNP_GetChannel         (void);
extern void CYFISNP_SetTxConfig        (TX_CONFIG config);
extern TX_CONFIG CYFISNP_GetTxConfig   (void);
extern void CYFISNP_SetXactConfig      (XACT_CONFIG config);
extern void CYFISNP_ForceState         (XACT_CONFIG endStateBitsOnly);
extern XACT_CONFIG CYFISNP_GetXactConfig(void);
extern void CYFISNP_SetFrameConfig     (RADIO_FRAME_CONFIG config);
extern RADIO_FRAME_CONFIG CYFISNP_GetFrameConfig(void);
extern void CYFISNP_SetThreshold32     (BYTE threshold);
extern BYTE CYFISNP_GetThreshold32     (void);
extern void CYFISNP_SetThreshold64     (BYTE threshold);
extern BYTE CYFISNP_GetThreshold64     (void);
extern void CYFISNP_SetPreambleCount   (BYTE count);
extern BYTE CYFISNP_GetPreambleCount   (void);
extern void CYFISNP_SetPreamblePattern (WORD pattern);
extern WORD CYFISNP_GetPreamblePattern (void);
extern void CYFISNP_SetSopPnCode       (BYTE patternNum);
extern void CYFISNP_SetConstDataPnCode (const BYTE *patternAddr);
extern void CYFISNP_SetConstSopPnCode  (const BYTE *patternAddr);
extern void CYFISNP_SetCrcSeed         (WORD crcSeed);
extern WORD CYFISNP_GetCrcSeed         (void);
extern RADIO_RSSI CYFISNP_GetRssi      (void);
extern void CYFISNP_GetFuses           (void);

//
// Synch and asynch transmit and receive routines.
//
extern void CYFISNP_Init(XACT_CONFIG defaultXactState, TX_CONFIG defaultTxState);
extern void CYFISNP_StartTransmit          (BYTE retryCount, RADIO_LENGTH len);
extern RADIO_STATE CYFISNP_BlockingTransmit(BYTE retryCount, RADIO_LENGTH len);
extern void CYFISNP_StartReceive               (void);
extern RADIO_STATE CYFISNP_GetTransmitState    (void);
extern RADIO_STATE CYFISNP_GetReceiveState     (void);
extern RADIO_RX_STATUS CYFISNP_GetReceiveStatus(void);
extern void CYFISNP_EndTransmit                (void);
extern RADIO_LENGTH CYFISNP_EndReceive         (void);
extern RADIO_LENGTH CYFISNP_Abort              (void);
extern RADIO_STATE CYFISNP_Poll                (void);
extern RADIO_STATE CYFISNP_Interrupt           (void);

//
// Return value for successful RadioAbort() complete. Otherwise return value
//  is the length of the packet received (without error).
//
#define CYFISNP_ABORT_SUCCESS 0xFF

extern volatile RADIO_STATE CYFISNP_State;
extern BYTE  CYFISNP_Start(void);
extern void  CYFISNP_Stop(void);
extern void  CYFISNP_EnableInt(void);
extern void  CYFISNP_DisableInt(void);

#if (CYFISNP_SPIM_API_EXPOSED)
    #if (CYFISNP_ARCH_TYPE_PSOC)
        extern void  CYFISNP_SendTxData(BYTE bTxData);
        extern BYTE  CYFISNP_bReadRxData(void);
        extern BYTE  CYFISNP_bReadStatus(void);
    #endif
    #if (CYFISNP_ARCH_TYPE_ENCORE)
        extern void  CYFISNP_SetMOSI(BYTE bPin);
        extern void  CYFISNP_SetMISO(BYTE bPin);
        extern BYTE  CYFISNP_bIO(BYTE bTXData);
    #endif
    #if (CYFISNP_ARCH_TYPE_C20066)
        // !!!TODO!!!
    #endif
#endif

// Internal low-level functions
extern RADIO_STATE CYFISNP_RestartTransmit(void);
extern RADIO_STATE CYFISNP_GetReceiveStateIsr(void);
extern RADIO_STATE CYFISNP_GetTransmitStateIsr(void);




//----------------------------------------------------------------------------
//
// CYFISPI User Module PHY layer registers definitions
//

// -------------------------------
// Channel register
// -------------------------------
#define CYFISNP_CHANNEL_ADR                                       0x00
#define CYFISNP_CHANNEL_RST                                       0x48
#define CYFISNP_CHANNEL_MSK                                       0x7F

#define CYFISNP_CHANNEL_MAX                                       0x62
#define CYFISNP_CHANNEL_MIN                                       0x00
#define CYFISNP_CHANNEL_2P498_GHZ                                 0x62
#define CYFISNP_CHANNEL_2P4_GHZ                                   0x00


// -------------------------------
// TX Length register
// -------------------------------
#define CYFISNP_TX_LENGTH_ADR                                     0x01
#define CYFISNP_TX_LENGTH_RST                                     0x00
#define CYFISNP_TX_LENGTH_MSK                                     0xFF


// -------------------------------
// TX Control register
// -------------------------------
#define CYFISNP_TX_CTRL_ADR                                       0x02
#define CYFISNP_TX_CTRL_RST                                       0x03

// See TX_IRQ for remaining bit position definitions

// TX_CTRL bit masks
#define CYFISNP_TX_GO                                             0x80
#define CYFISNP_TX_CLR                                            0x40


// -------------------------------
// TX Configuration register
// -------------------------------
#define CYFISNP_TX_CFG_ADR                                        0x03
#define CYFISNP_TX_CFG_RST                                        0x05

// separate bit field masks
#define CYFISNP_TX_DATCODE_LEN_MSK                                0x20
#define CYFISNP_TX_DATMODE_MSK                                    0x18
#define CYFISNP_PA_VAL_MSK                                        0x07

// DATCODE_LEN register masks
#define CYFISNP_DATCODE_LEN_64                                    0x20
#define CYFISNP_DATCODE_LEN_32                                    0x00

// DATMODE register masks
#define CYFISNP_DATMODE_1MBPS                                     0x00
#define CYFISNP_DATMODE_8DR                                       0x08

// PA_SET register masks
#define CYFISNP_PA_N30_DBM                                        0x00
#define CYFISNP_PA_N25_DBM                                        0x01
#define CYFISNP_PA_N20_DBM                                        0x02
#define CYFISNP_PA_N15_DBM                                        0x03
#define CYFISNP_PA_N10_DBM                                        0x04
#define CYFISNP_PA_N5_DBM                                         0x05
#define CYFISNP_PA_0_DBM                                          0x06
#define CYFISNP_PA_4_DBM                                          0x07


// -------------------------------
// TX IRQ Status register
// -------------------------------
#define CYFISNP_TX_IRQ_STATUS_ADR                                 0x04

// TX_IRQ bit masks
#define CYFISNP_XS_IRQ                                            0x80
#define CYFISNP_LV_IRQ                                            0x40
#define CYFISNP_TXB15_IRQ                                         0x20
#define CYFISNP_TXB8_IRQ                                          0x10
#define CYFISNP_TXB0_IRQ                                          0x08
#define CYFISNP_TXBERR_IRQ                                        0x04
#define CYFISNP_TXC_IRQ                                           0x02
#define CYFISNP_TXE_IRQ                                           0x01


// -------------------------------
// RX Control register
// -------------------------------
#define CYFISNP_RX_CTRL_ADR                                       0x05
#define CYFISNP_RX_CTRL_RST                                       0x07

// See RX_IRQ register for bit positions definitions also used for this register

// RX_CTRL bit masks
#define CYFISNP_RX_GO                                             0x80


// -------------------------------
// RX Configuration register
// -------------------------------
#define CYFISNP_RX_CFG_ADR                                        0x06
#define CYFISNP_RX_CFG_RST                                        0x92

#define CYFISNP_AUTO_AGC_EN                                       0x80
#define CYFISNP_LNA_EN                                            0x40
#define CYFISNP_ATT_EN                                            0x20
#define CYFISNP_HI                                                0x10
#define CYFISNP_LO                                                0x00
#define CYFISNP_FASTTURN_EN                                       0x08
#define CYFISNP_RXOW_EN                                           0x02
#define CYFISNP_VLD_EN                                            0x01


// -------------------------------
// RX IRQ register
// -------------------------------
#define CYFISNP_RX_IRQ_STATUS_ADR                                 0x07
// There is no default value for this register.

// RX_IRQ bit masks
#define CYFISNP_RXOW_IRQ                                          0x80
#define CYFISNP_SOPDET_IRQ                                        0x40
#define CYFISNP_RXB16_IRQ                                         0x20
#define CYFISNP_RXB8_IRQ                                          0x10
#define CYFISNP_RXB1_IRQ                                          0x08
#define CYFISNP_RXBERR_IRQ                                        0x04
#define CYFISNP_RXC_IRQ                                           0x02
#define CYFISNP_RXE_IRQ                                           0x01


// -------------------------------
// RX Status register
// -------------------------------
#define CYFISNP_RX_STATUS_ADR                                     0x08
// There is no default value for this register.

// single flag bits & multi-bit-field masks
#define CYFISNP_RX_ACK                                            0x80
#define CYFISNP_RX_PKTERR                                         0x40
#define CYFISNP_RX_EOPERR                                         0x20
#define CYFISNP_RX_CRC0                                           0x10
#define CYFISNP_RX_BAD_CRC                                        0x08
#define CYFISNP_RX_DATCODE_LEN                                    0x04
#define CYFISNP_RX_DATMODE_MSK                                    0x03


// -------------------------------
// RX Count register
// -------------------------------
#define CYFISNP_RX_COUNT_ADR                                      0x09
#define CYFISNP_RX_COUNT_RST                                      0x00
#define CYFISNP_RX_COUNT_MSK                                      0xFF


// -------------------------------
// RX Length Field register
// -------------------------------
#define CYFISNP_RX_LENGTH_ADR                                     0x0A
#define CYFISNP_RX_LENGTH_RST                                     0x00
#define CYFISNP_RX_LENGTH_MSK                                     0xFF


// -------------------------------
// Power Control register
// -------------------------------
#define CYFISNP_PWR_CTRL_ADR                                      0x0B
#define CYFISNP_PWR_CTRL_RST                                      0xA0

// single flag bits & multi-bit-field masks
#define CYFISNP_PMU_EN                                            0x80
#define CYFISNP_LV_IRQ_EN                                         0x40
#define CYFISNP_PMU_SEN                                           0x20 // DEPRECIATED
#define CYFISNP_PMU_MODE_FORCE                                    0x20
#define CYFISNP_PFET_OFF                                          0x10
#define CYFISNP_LV_IRQ_TH_MSK                                     0x0C
#define CYFISNP_PMU_OUTV_MSK                                      0x03

// LV_IRQ_TH values
#define CYFISNP_LV_IRQ_TH_1P8_V                                   0x0C
#define CYFISNP_LV_IRQ_TH_2P0_V                                   0x08
#define CYFISNP_LV_IRQ_TH_2P2_V                                   0x04
#define CYFISNP_LV_IRQ_TH_PMU_OUTV                                0x00

// PMU_OUTV values
#define CYFISNP_PMU_OUTV_2P4                                      0x03
#define CYFISNP_PMU_OUTV_2P5                                      0x02
#define CYFISNP_PMU_OUTV_2P6                                      0x01
#define CYFISNP_PMU_OUTV_2P7                                      0x00


// -------------------------------
// Crystal Control register
// -------------------------------
#define CYFISNP_XTAL_CTRL_ADR                                     0x0C
#define CYFISNP_XTAL_CTRL_RST                                     0x04

// single flag bits & multi-bit-field masks
#define CYFISNP_XOUT_FNC_MSK                                      0xC0
#define CYFISNP_XS_IRQ_EN                                         0x20
#define CYFISNP_XOUT_FREQ_MSK                                     0x07

// XOUT_FNC values
#define CYFISNP_XOUT_FNC_XOUT_FREQ                                0x00
#define CYFISNP_XOUT_FNC_PA_N                                     0x40
#define CYFISNP_XOUT_FNC_RAD_STREAM                               0x80
#define CYFISNP_XOUT_FNC_GPIO                                     0xC0

// XOUT_FREQ values
#define CYFISNP_XOUT_FREQ_12MHZ                                   0x00
#define CYFISNP_XOUT_FREQ_6MHZ                                    0x01
#define CYFISNP_XOUT_FREQ_3MHZ                                    0x02
#define CYFISNP_XOUT_FREQ_1P5MHZ                                  0x03
#define CYFISNP_XOUT_FREQ_P75MHZ                                  0x04

// -------------------------------
// Analog Control register
// -------------------------------
#define CYFISNP_ANALOG_CTRL_ADR                                   0x39
#define CYFISNP_ALLSLOW                                           0x01


// -------------------------------
// I/O Configuration register
// -------------------------------
#define CYFISNP_IO_CFG_ADR                                        0x0D
#define CYFISNP_IO_CFG_RST                                        0x00
#define CYFISNP_IO_CFG_MSK                                        0xFF

// single flag bits & multi-bit-field masks
#define CYFISNP_IRQ_OD                                            0x80
#define CYFISNP_IRQ_POL                                           0x40
#define CYFISNP_MISO_OD                                           0x20
#define CYFISNP_XOUT_OD                                           0x10
#define CYFISNP_PACTL_OD                                          0x08
#define CYFISNP_PACTL_GPIO                                        0x04
#define CYFISNP_SPI_3_PIN                                         0x02
#define CYFISNP_IRQ_GPIO                                          0x01


// -------------------------------
// GPIO Control register
// -------------------------------
#define CYFISNP_GPIO_CTRL_ADR                                     0x0E
#define CYFISNP_GPIO_CTRL_RST                                     0x00
#define CYFISNP_GPIO_CTRL_MSK                                     0xF0

// single flag bits & multi-bit-field masks
#define CYFISNP_XOUT_OP                                           0x80
#define CYFISNP_MISO_OP                                           0x40
#define CYFISNP_PACTL_OP                                          0x20
#define CYFISNP_IRQ_OP                                            0x10
#define CYFISNP_XOUT_IP                                           0x08
#define CYFISNP_MISO_IP                                           0x04
#define CYFISNP_PACTL_IP                                          0x02
#define CYFISNP_IRQ_IP                                            0x01


// -------------------------------
// Transaction Configuration register
// -------------------------------
#define CYFISNP_XACT_CFG_ADR                                      0x0F
#define CYFISNP_XACT_CFG_RST                                      0x80

// single flag bits & multi-bit-field masks
#define CYFISNP_ACK_EN                                            0x80
#define CYFISNP_FRC_END_STATE                                     0x20
#define CYFISNP_END_STATE_MSK                                     0x1C
#define CYFISNP_ACK_TO_MSK                                        0x03

// END_STATE field values
#define CYFISNP_END_STATE_SLEEP                                   0x00
#define CYFISNP_END_STATE_IDLE                                    0x04
#define CYFISNP_END_STATE_TXSYNTH                                 0x08
#define CYFISNP_END_STATE_RXSYNTH                                 0x0C
#define CYFISNP_END_STATE_RX                                      0x10

// ACK_TO field values
#define CYFISNP_ACK_TO_4X                                         0x00
#define CYFISNP_ACK_TO_8X                                         0x01
#define CYFISNP_ACK_TO_12X                                        0x02
#define CYFISNP_ACK_TO_15X                                        0x03


// -------------------------------
// Framing Configuration register
// -------------------------------
#define CYFISNP_FRAMING_CFG_ADR                                   0x10
#define CYFISNP_FRAMING_CFG_RST                                   0xA5

// single flag bits & multi-bit-field masks
#define CYFISNP_SOP_EN                                            0x80
#define CYFISNP_SOP_LEN                                           0x40
#define CYFISNP_LEN_EN                                            0x20
#define CYFISNP_SOP_THRESH_MSK                                    0x1F


// -------------------------------
// Data Threshold 32 register
// -------------------------------
#define CYFISNP_DATA32_THOLD_ADR                                  0x11
#define CYFISNP_DAT32_THRESH_RST                                  0x04
#define CYFISNP_DAT32_THRESH_MSK                                  0x0F


// -------------------------------
// Data Threshold 64 register
// -------------------------------
#define CYFISNP_DATA64_THOLD_ADR                                  0x12
#define CYFISNP_DAT64_THRESH_RST                                  0x0A
#define CYFISNP_DAT64_THRESH_MSK                                  0x1F


// -------------------------------
// RSSI register
// -------------------------------
#define CYFISNP_RSSI_ADR                                          0x13
#define CYFISNP_RSSI_RST                                          0x20

// single flag bits & multi-bit-field masks
#define CYFISNP_SOP_RSSI                                          0x80
#define CYFISNP_LNA_STATE                                         0x20
#define CYFISNP_RSSI_LVL_MSK                                      0x1F


// -------------------------------
// EOP Control register
// -------------------------------
#define CYFISNP_EOP_CTRL_ADR                                      0x14
#define CYFISNP_EOP_CTRL_RST                                      0xA4

// single flag bits & multi-bit-field masks
#define CYFISNP_HINT_EN                                           0x80
#define CYFISNP_HINT_EOP_MSK                                      0x70
#define CYFISNP_EOP_MSK                                           0x0F


// -------------------------------
// CRC Seed registers
// -------------------------------
#define CYFISNP_CRC_SEED_LSB_ADR                                  0x15
#define CYFISNP_CRC_SEED_MSB_ADR                                  0x16
#define CYFISNP_CRC_SEED_LSB_RST                                  0x00
#define CYFISNP_CRC_SEED_MSB_RST                                  0x00

// CRC related values
// USB CRC-16
#define CYFISNP_CRC_POLY_MSB                                      0x80
#define CYFISNP_CRC_POLY_LSB                                      0x05
#define CYFISNP_CRC_RESI_MSB                                      0x80
#define CYFISNP_CRC_RESI_LSB                                      0x0D


// -------------------------------
// TX CRC Calculated registers
// -------------------------------
#define CYFISNP_TX_CRC_LSB_ADR                                    0x17
#define CYFISNP_TX_CRC_MSB_ADR                                    0x18


// -------------------------------
// RX CRC Field registers
// -------------------------------
#define CYFISNP_RX_CRC_LSB_ADR                                    0x19
#define CYFISNP_RX_CRC_MSB_ADR                                    0x1A
#define CYFISNP_RX_CRC_LSB_RST                                    0xFF
#define CYFISNP_RX_CRC_MSB_RST                                    0xFF


// -------------------------------
// Synth Offset registers
// -------------------------------
#define CYFISNP_TX_OFFSET_LSB_ADR                                 0x1B
#define CYFISNP_TX_OFFSET_MSB_ADR                                 0x1C
#define CYFISNP_TX_OFFSET_LSB_RST                                 0x00
#define CYFISNP_TX_OFFSET_MSB_RST                                 0x00

// single flag bits & multi-bit-field masks
#define CYFISNP_STRIM_MSB_MSK                                     0x0F
#define CYFISNP_STRIM_LSB_MSK                                     0xFF


// -------------------------------
// Mode Override register
// -------------------------------
#define CYFISNP_MODE_OVERRIDE_ADR                                 0x1D
#define CYFISNP_MODE_OVERRIDE_RST                                 0x00

#define CYFISNP_FRC_AWAKE                                         0x03
#define CYFISNP_FRC_AWAKE_OFF_1                                   0x01
#define CYFISNP_FRC_AWAKE_OFF_2                                   0x00

// single flag bits & multi-bit-field masks
#define CYFISNP_DIS_AUTO_SEN                                      0x80
#define CYFISNP_SEN_TXRXB                                         0x40
#define CYFISNP_FRC_SEN                                           0x20
#define CYFISNP_FRC_AWAKE_MSK                                     0x18
#define CYFISNP_MODE_OVRD_FRC_AWAKE                               0x18
#define CYFISNP_MODE_OVRD_FRC_AWAKE_OFF_1                         0x08
#define CYFISNP_MODE_OVRD_FRC_AWAKE_OFF_2                         0x00
#define CYFISNP_RST                                               0x01
#define CYFISNP_FRC_PA                                            0x02


// -------------------------------
// RX Override register
// -------------------------------
#define CYFISNP_RX_OVERRIDE_ADR                                   0x1E
#define CYFISNP_RX_OVERRIDE_RST                                   0x00

// single flag bits & multi-bit-field masks
#define CYFISNP_ACK_RX                                            0x80
#define CYFISNP_EXTEND_RX_TX                                      0x40
#define CYFISNP_MAN_RXACK                                         0x20
#define CYFISNP_FRC_RXDR                                          0x10
#define CYFISNP_DIS_CRC0                                          0x08
#define CYFISNP_DIS_RXCRC                                         0x04
#define CYFISNP_ACE                                               0x02


// -------------------------------
// TX Override register
// -------------------------------
#define CYFISNP_TX_OVERRIDE_ADR                                   0x1F
#define CYFISNP_TX_OVERRIDE_RST                                   0x00

// single flag bits & multi-bit-field masks
#define CYFISNP_ACK_TX_SEN                                        0x80
#define CYFISNP_FRC_PREAMBLE                                      0x40
#define CYFISNP_DIS_TX_RETRANS                                    0x20
#define CYFISNP_MAN_TXACK                                         0x10
#define CYFISNP_OVRRD_ACK                                         0x08
#define CYFISNP_DIS_TXCRC                                         0x04
#define CYFISNP_CO                                                0x02
#define CYFISNP_TXINV                                             0x01


//------------------------------------------------------------------------------
//      File Function Detail
//------------------------------------------------------------------------------

// -------------------------------
// TX Buffer - 16 bytes
// -------------------------------
#define CYFISNP_TX_BUFFER_ADR                                     0x20


// -------------------------------
// RX Buffer - 16 bytes
// -------------------------------
#define CYFISNP_RX_BUFFER_ADR                                     0x21


// -------------------------------
// Framing Code - 8 bytes
// -------------------------------
#define CYFISNP_SOP_CODE_ADR                                      0x22

// CODESTORE_REG_SOF_RST        64'h17_ff_9e_21_36_90_c7_82
#define CYFISNP_CODESTORE_BYTE7_SOF_RST                           0x17
#define CYFISNP_CODESTORE_BYTE6_SOF_RST                           0xFF
#define CYFISNP_CODESTORE_BYTE5_SOF_RST                           0x9E
#define CYFISNP_CODESTORE_BYTE4_SOF_RST                           0x21
#define CYFISNP_CODESTORE_BYTE3_SOF_RST                           0x36
#define CYFISNP_CODESTORE_BYTE2_SOF_RST                           0x90
#define CYFISNP_CODESTORE_BYTE1_SOF_RST                           0xC7
#define CYFISNP_CODESTORE_BYTE0_SOF_RST                           0x82


// -------------------------------
// Data Code - 16 bytes
// -------------------------------
#define CYFISNP_DATA_CODE_ADR                                     0x23

// CODESTORE_REG_DCODE0_RST            64'h01_2B_F1_DB_01_32_BE_6F
#define CYFISNP_CODESTORE_BYTE7_DCODE0_RST                        0x01
#define CYFISNP_CODESTORE_BYTE6_DCODE0_RST                        0x2B
#define CYFISNP_CODESTORE_BYTE5_DCODE0_RST                        0xF1
#define CYFISNP_CODESTORE_BYTE4_DCODE0_RST                        0xDB
#define CYFISNP_CODESTORE_BYTE3_DCODE0_RST                        0x01
#define CYFISNP_CODESTORE_BYTE2_DCODE0_RST                        0x32
#define CYFISNP_CODESTORE_BYTE1_DCODE0_RST                        0xBE
#define CYFISNP_CODESTORE_BYTE0_DCODE0_RST                        0x6F

// CODESTORE_REG_DCODE1_RST            64'h02_F9_93_97_02_FA_5C_E3
#define CYFISNP_CODESTORE_BYTE7_DCODE1_RST                        0x02
#define CYFISNP_CODESTORE_BYTE6_DCODE1_RST                        0xF9
#define CYFISNP_CODESTORE_BYTE5_DCODE1_RST                        0x93
#define CYFISNP_CODESTORE_BYTE4_DCODE1_RST                        0x97
#define CYFISNP_CODESTORE_BYTE3_DCODE1_RST                        0x02
#define CYFISNP_CODESTORE_BYTE2_DCODE1_RST                        0xFA
#define CYFISNP_CODESTORE_BYTE1_DCODE1_RST                        0x5C
#define CYFISNP_CODESTORE_BYTE0_DCODE1_RST                        0xE3


// -------------------------------
// Preamble - 3 bytes
// -------------------------------
#define CYFISNP_PREAMBLE_ADR                                      0x24

#define CYFISNP_PREAMBLE_CODE_MSB_RST                             0x33
#define CYFISNP_PREAMBLE_CODE_LSB_RST                             0x33
#define CYFISNP_PREAMBLE_LEN_RST                                  0x02


// -------------------------------
// Laser Fuses - 8 bytes (2 hidden)
// -------------------------------
#define CYFISNP_MFG_ID_ADR                                        0x25


// -------------------------------
// XTAL Startup Delay
// -------------------------------
#define CYFISNP_XTAL_CFG_ADR                                      0x26
#define CYFISNP_XTAL_CFG_RST                                      0x00

// -------------------------------
// Clock Override
// -------------------------------
#define CYFISNP_CLK_OVERRIDE_ADR                                  0x27
#define CYFISNP_CLK_OVERRIDE_RST                                  0x00

#define CYFISNP_RXF                                               0x02


// -------------------------------
// Clock Enable
// -------------------------------
#define CYFISNP_CLK_EN_ADR                                        0x28
#define CYFISNP_CLK_EN_RST                                        0x00

#define CYFISNP_RXF                                               0x02


// -------------------------------
// Receiver Abort
// -------------------------------
#define CYFISNP_RX_ABORT_ADR                                      0x29
#define CYFISNP_RX_ABORT_RST                                      0x00

#define CYFISNP_ABORT_EN                                          0x20


// -------------------------------
// Auto Calibration Time
// -------------------------------
#define CYFISNP_AUTO_CAL_TIME_ADR                                 0x32
#define CYFISNP_AUTO_CAL_TIME_RST                                 0x0C

#define CYFISNP_AUTO_CAL_TIME_MAX                                 0x3C


// -------------------------------
// Auto Calibration Offset
// -------------------------------
#define CYFISNP_AUTO_CAL_OFFSET_ADR                               0x35
#define CYFISNP_AUTO_CAL_OFFSET_RST                               0x00

#define CYFISNP_AUTO_CAL_OFFSET_MINUS_4                           0x14
#endif // CYFISNP_h
