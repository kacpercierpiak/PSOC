FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C21x34 microcontroller devices.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0068) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0069) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0070) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0071) ; bytes on the stack which are otherwise required for the return address. If
                                        (0072) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0073) ; release, the C compiler automatically places an infinite loop at the end
                                        (0074) ; of main, rather than a return instruction.)
                                        (0075) ;
                                        (0076) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0077) 
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ; Interrupt Vector Table
                                        (0081) ;-----------------------------------------------------------------------------
                                        (0082) ;
                                        (0083) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0084) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0085) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0086) ; vector jump targets are modified automatically according to the user
                                        (0087) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0088) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0089) ; configuration files. If you need to hard code a vector, update the
                                        (0090) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0091) ; of this file.
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) 
                                        (0094)     AREA TOP (ROM, ABS, CON)
                                        (0095) 
                                        (0096)     org   0                        ;Reset Interrupt Vector
                                        (0097) IF	(TOOLCHAIN & HITECH)
                                        (0098) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0099) ELSE
0000: 80 67    JMP   0x0068             (0100)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0101) ENDIF
                                        (0102)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0103)     ;---------------------------------------------------
                                        (0104)     ; Insert your custom code below this banner
                                        (0105)     ;---------------------------------------------------
                                        (0106) 
                                        (0107)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0108)     halt                           ;Stop execution if power falls too low
                                        (0109) 
                                        (0110)     org   08h                      ;Analog Column 0 Interrupt Vector
0008: 7D 03 97 LJMP  _CSD_CMP0_ISR      (0111)     ljmp	_CSD_CMP0_ISR
000B: 7E       RETI                     (0112)     reti
                                        (0113) 
                                        (0114)     org   0Ch                      ;Analog Column 1 Interrupt Vector
000C: 7D 03 95 LJMP  _CSD_CMP_ISR       (0115)     ljmp	_CSD_CMP_ISR
000F: 7E       RETI                     (0116)     reti
                                        (0117) 
                                        (0118)     org   18h                      ;VC3 Interrupt Vector
                                        (0119)     // call	void_handler
0018: 7E       RETI                     (0120)     reti
                                        (0121) 
                                        (0122)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0123)     // call	void_handler
001C: 7E       RETI                     (0124)     reti
                                        (0125) 
                                        (0126)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 03 92 LJMP  _CSD_CNT_ISR       (0127)     ljmp	_CSD_CNT_ISR
0023: 7E       RETI                     (0128)     reti
                                        (0129) 
                                        (0130)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0131)     // call	void_handler
0024: 7E       RETI                     (0132)     reti
                                        (0133) 
                                        (0134)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0135)     // call	void_handler
0028: 7E       RETI                     (0136)     reti
                                        (0137) 
                                        (0138)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0139)     // call	void_handler
002C: 7E       RETI                     (0140)     reti
                                        (0141) 
                                        (0142)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0143)     // call	void_handler
0060: 7E       RETI                     (0144)     reti
                                        (0145) 
                                        (0146)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0147)     // call	void_handler
0064: 7E       RETI                     (0148)     reti
0068: 71 10    OR    F,0x10             
                                        (0149)     ;---------------------------------------------------
                                        (0150)     ; Insert your custom code above this banner
                                        (0151)     ;---------------------------------------------------
                                        (0152)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0153) 
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  Start of Execution.
                                        (0156) ;-----------------------------------------------------------------------------
                                        (0157) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0158) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0159) ;
                                        (0160) 
                                        (0161) IF	(TOOLCHAIN & HITECH)
                                        (0162)  	AREA PD_startup(CODE, REL, CON)
                                        (0163) ELSE
                                        (0164)     org 68h
                                        (0165) ENDIF
                                        (0166) __Start:
                                        (0167) 
                                        (0168)     ; initialize SMP values for voltage stabilization, if required,
                                        (0169)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0170)     ; least for now. 
                                        (0171)     ;
                                        (0172)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0173)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0174)     M8C_SetBank0
                                        (0175) 
                                        (0176) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0177) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0178)     M8C_EnableWatchDog
                                        (0179) ENDIF
                                        (0180) 
0072: 41 FE FB AND   REG[0xFE],0xFB     (0181)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0182) 
                                        (0183)     ;---------------------------
                                        (0184)     ; Set up the Temporary stack
                                        (0185)     ;---------------------------
                                        (0186)     ; A temporary stack is set up for the SSC instructions.
                                        (0187)     ; The real stack start will be assigned later.
                                        (0188)     ;
                                        (0189) _stack_start:          equ 80h
0075: 50 80    MOV   A,0x80             (0190)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0191)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0192) 
                                        (0193)     ;------------------------
                                        (0194)     ; Set Power-related Trim 
                                        (0195)     ;------------------------
                                        (0196)     
                                        (0197) M8C_ClearWDTAndSleep
                                        (0198) 
                                        (0199) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0200)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0201)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0202)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V
                                        (0203)  ENDIF
                                        (0204) ENDIF ; 5.0 V Operation
                                        (0205) 
                                        (0206) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0207)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0208)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0209)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V
                                        (0210)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0211)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V
                                        (0212)  ENDIF
                                        (0213) ENDIF ; 3.3 Volt Operation
                                        (0214) 
                                        (0215) IF ( POWER_SETTING & POWER_SET_2V7_12MHZ)      ; *** 2.7 Volts / 12MHZ operation ***
                                        (0216)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0217)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_12MHZ, SSCTBL2_TRIM_BGR_2V
                                        (0218) ENDIF ; *** 2.7 Volts / 12MHZ operation ***
                                        (0219) 
                                        (0220) IF ( POWER_SETTING & POWER_SET_2V7_6MHZ)       ; *** 2.7 Volts /  6MHZ operation ***
                                        (0221)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0222)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_6MHZ,  SSCTBL2_TRIM_BGR_2V
                                        (0223) ENDIF ; *** 2.7 Volts /  6MHZ operation ***
                                        (0224) 
007B: 55 F8 00 MOV   [CSD_waSnsResult+205],0x0(0225)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [CSD_waSnsResult+206],0x0(0226)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0227) 
                                        (0228)     ;---------------------------------------
                                        (0229)     ; Initialize Crystal Oscillator and PLL
                                        (0230)     ;---------------------------------------
                                        (0231) IF ( POWER_SETTING & POWER_SET_2V7)       ; *** 2.7 Volts  ***
                                        (0232)     M8C_SetBank1
                                        (0233)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_3MHz)
                                        (0234)     M8C_SetBank0
                                        (0235)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0236) 
                                        (0237) ELSE 	 ;*** all other voltages OK for 12Mhz ***
                                        (0238)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0239)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
008B: 62 D1 01 MOV   REG[0xD1],0x1      
                                        (0240)     M8C_SetBank0
                                        (0241)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0242) 
                                        (0243) ENDIF
                                        (0244) 
                                        (0245) 	;-------------------------------------------------------
                                        (0246)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0247)     ;-------------------------------------------------------
                                        (0248) 
                                        (0249)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0250) 
                                        (0251) IF (SYSCLK_SOURCE)
                                        (0252)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0253) ENDIF
                                        (0254)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0255) 
                                        (0256) IF	(TOOLCHAIN & HITECH)
                                        (0257)     ;---------------------------------------------
                                        (0258)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0259)     ;---------------------------------------------
                                        (0260) 	global		__Lstackps
                                        (0261) 	mov     a,low __Lstackps
                                        (0262) 	swap    a,sp
                                        (0263) 
                                        (0264) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0265)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0266)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0267)     RAM_SETPAGE_CUR 0
                                        (0268)     RAM_SETPAGE_MVW 0
                                        (0269)     RAM_SETPAGE_MVR 0
                                        (0270)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0271)       or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0272)     ELSE
                                        (0273)       or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0274)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0275) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0276) ELSE
                                        (0277)     ;---------------------------------------------
                                        (0278)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0279)     ;---------------------------------------------
                                        (0280) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0281)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
008E: 50 00    MOV   A,0x0              (0282)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
0090: 4E       SWAP  SP,A               (0283)     swap  A, SP
0091: 62 D3 01 MOV   REG[0xD3],0x1      
0094: 62 D0 00 MOV   REG[0xD0],0x0      
0097: 62 D5 00 MOV   REG[0xD5],0x0      
009A: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0284)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0285)     RAM_SETPAGE_CUR 0
                                        (0286)     RAM_SETPAGE_MVW 0
                                        (0287)     RAM_SETPAGE_MVR 0
                                        (0288) 
                                        (0289)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
009D: 71 C0    OR    F,0xC0             (0290)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0291)   ELSE
                                        (0292)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0293)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0294) ELSE
                                        (0295)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0296)     swap  SP, A
                                        (0297) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0298) ENDIF ;	TOOLCHAIN
                                        (0299) 
                                        (0300)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0301)     ;---------------------------------------------------
                                        (0302)     ; Insert your custom code below this banner
                                        (0303)     ;---------------------------------------------------
                                        (0304) 
                                        (0305)     ;---------------------------------------------------
                                        (0306)     ; Insert your custom code above this banner
                                        (0307)     ;---------------------------------------------------
                                        (0308)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0309) 
                                        (0310)     ;-------------------------
                                        (0311)     ; Load Base Configuration
                                        (0312)     ;-------------------------
                                        (0313)     ; Load global parameter settings and load the user modules in the
                                        (0314)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0315)     ; to minimize start up time; (2) We may still need to play with the
                                        (0316)     ; Sleep Timer.
                                        (0317)     ;
009F: 7C 02 73 LCALL 0x0273             (0318)     lcall LoadConfigInit
                                        (0319) 
                                        (0320)     ;-----------------------------------
                                        (0321)     ; Initialize C Run-Time Environment
                                        (0322)     ;-----------------------------------
                                        (0323) IF ( C_LANGUAGE_SUPPORT )
                                        (0324) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0325)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0326)     mov  [__r0],<__bss_start
                                        (0327) BssLoop:
                                        (0328)     cmp  [__r0],<__bss_end
                                        (0329)     jz   BssDone
                                        (0330)     mvi  [__r0],A
                                        (0331)     jmp  BssLoop
                                        (0332) BssDone:
                                        (0333)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0334)     mov  X,<__idata_start
                                        (0335)     mov  [__r0],<__data_start
                                        (0336) IDataLoop:
                                        (0337)     cmp  [__r0],<__data_end
                                        (0338)     jz   C_RTE_Done
                                        (0339)     push A
                                        (0340)     romx
                                        (0341)     mvi  [__r0],A
                                        (0342)     pop  A
                                        (0343)     inc  X
                                        (0344)     adc  A,0
                                        (0345)     jmp  IDataLoop
                                        (0346) 
                                        (0347) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0348) 
                                        (0349) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00A2: 62 D0 00 MOV   REG[0xD0],0x0      (0350)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0351)                                        ; to use the Virtual Register page.
                                        (0352) 
                                        (0353)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0354)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0355)     ; text segment and may have been relocated by the Code Compressor.
                                        (0356)     ;
00A5: 50 01    MOV   A,0x1              (0357)     mov   A, >__pXIData                ; Get the address of the flash
00A7: 57 EC    MOV   X,0xEC             (0358)     mov   X, <__pXIData                ;   pointer to the xidata area.
00A9: 08       PUSH  A                  (0359)     push  A
00AA: 28       ROMX                     (0360)     romx                               ; get the MSB of xidata's address
00AB: 53 1B    MOV   [__r0],A           (0361)     mov   [__r0], A
00AD: 18       POP   A                  (0362)     pop   A
00AE: 75       INC   X                  (0363)     inc   X
00AF: 09 00    ADC   A,0x0              (0364)     adc   A, 0
00B1: 28       ROMX                     (0365)     romx                               ; get the LSB of xidata's address
00B2: 4B       SWAP  A,X                (0366)     swap  A, X
00B3: 51 1B    MOV   A,[__r0]           (0367)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0368)                                        ;   XIData structure list in flash
00B5: 80 04    JMP   0x00BA             (0369)     jmp   .AccessStruct
                                        (0370) 
                                        (0371)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0372)     ; values of C variables. Each structure contains 3 member elements.
                                        (0373)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0374)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0375)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0376)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0377)     ; value in the second member element, an unsigned byte:
                                        (0378)     ; (1) If the value of the second element is non-zero, it represents
                                        (0379)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0380)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0381)     ; the bytes are copied to the block of RAM.
                                        (0382)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0383)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0384)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0385) 
                                        (0386) .AccessNextStructLoop:
00B7: 75       INC   X                  (0387)     inc   X                            ; pXIData++
00B8: 09 00    ADC   A,0x0              (0388)     adc   A, 0
00BA: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0389) .AccessStruct:                         ; Entry point for first block
                                        (0390)     ;
                                        (0391)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0392)     ;
                                        (0393)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00BD: 08       PUSH  A                  (0394)     push  A
00BE: 28       ROMX                     (0395)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00BF: 60 D5    MOV   REG[0xD5],A        (0396)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00C1: 74       INC   A                  (0397)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00C2: A0 4B    JZ    0x010E             (0398)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00C4: 18       POP   A                  (0399)     pop   A                            ; restore pXIData to [A,X]
00C5: 75       INC   X                  (0400)     inc   X                            ; pXIData++
00C6: 09 00    ADC   A,0x0              (0401)     adc   A, 0
00C8: 08       PUSH  A                  (0402)     push  A
00C9: 28       ROMX                     (0403)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00CA: 53 1B    MOV   [__r0],A           (0404)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00CC: 18       POP   A                  (0405)     pop   A                            ; restore pXIData to [A,X]
00CD: 75       INC   X                  (0406)     inc   X                            ; pXIData++ (point to size)
00CE: 09 00    ADC   A,0x0              (0407)     adc   A, 0
00D0: 08       PUSH  A                  (0408)     push  A
00D1: 28       ROMX                     (0409)     romx                               ; Get the size (CPU.A <- *pXIData)
00D2: A0 1C    JZ    0x00EF             (0410)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00D4: 53 1A    MOV   [__r1],A           (0411)     mov   [__r1], A                    ;             else downcount in __r1
00D6: 18       POP   A                  (0412)     pop   A                            ; restore pXIData to [A,X]
                                        (0413) 
                                        (0414) .CopyNextByteLoop:
                                        (0415)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0416)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0417)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0418)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0419)     ;
00D7: 75       INC   X                  (0420)     inc   X                            ; pXIData++ (point to next data byte)
00D8: 09 00    ADC   A,0x0              (0421)     adc   A, 0
00DA: 08       PUSH  A                  (0422)     push  A
00DB: 28       ROMX                     (0423)     romx                               ; Get the data value (CPU.A <- *pXIData)
00DC: 3F 1B    MVI   [__r0],A           (0424)     mvi   [__r0], A                    ; Transfer the data to RAM
00DE: 47 1B FF TST   [__r0],0xFF        (0425)     tst   [__r0], 0xff                 ; Check for page crossing
00E1: B0 06    JNZ   0x00E8             (0426)     jnz   .CopyLoopTail                ;   No crossing, keep going
00E3: 5D D5    MOV   A,REG[0xD5]        (0427)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00E5: 74       INC   A                  (0428)     inc   A
00E6: 60 D5    MOV   REG[0xD5],A        (0429)     mov   reg[ MVW_PP], A
                                        (0430) .CopyLoopTail:
00E8: 18       POP   A                  (0431)     pop   A                            ; restore pXIData to [A,X]
00E9: 7A 1A    DEC   [__r1]             (0432)     dec   [__r1]                       ; End of this array in flash?
00EB: BF EB    JNZ   0x00D7             (0433)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
00ED: 8F C9    JMP   0x00B7             (0434)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0435) 
                                        (0436) .ClearRAMBlockToZero:
00EF: 18       POP   A                  (0437)     pop   A                            ; restore pXIData to [A,X]
00F0: 75       INC   X                  (0438)     inc   X                            ; pXIData++ (point to next data byte)
00F1: 09 00    ADC   A,0x0              (0439)     adc   A, 0
00F3: 08       PUSH  A                  (0440)     push  A
00F4: 28       ROMX                     (0441)     romx                               ; Get the run length (CPU.A <- *pXIData)
00F5: 53 1A    MOV   [__r1],A           (0442)     mov   [__r1], A                    ; Initialize downcounter
00F7: 50 00    MOV   A,0x0              (0443)     mov   A, 0                         ; Initialize source data
                                        (0444) 
                                        (0445) .ClearRAMBlockLoop:
                                        (0446)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0447)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0448)     ;
00F9: 3F 1B    MVI   [__r0],A           (0449)     mvi   [__r0], A                    ; Clear a byte
00FB: 47 1B FF TST   [__r0],0xFF        (0450)     tst   [__r0], 0xff                 ; Check for page crossing
00FE: B0 08    JNZ   0x0107             (0451)     jnz   .ClearLoopTail               ;   No crossing, keep going
0100: 5D D5    MOV   A,REG[0xD5]        (0452)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0102: 74       INC   A                  (0453)     inc   A
0103: 60 D5    MOV   REG[0xD5],A        (0454)     mov   reg[ MVW_PP], A
0105: 50 00    MOV   A,0x0              (0455)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0456) .ClearLoopTail:
0107: 7A 1A    DEC   [__r1]             (0457)     dec   [__r1]                       ; Was this the last byte?
0109: BF EF    JNZ   0x00F9             (0458)     jnz   .ClearRAMBlockLoop           ;   No,  continue
010B: 18       POP   A                  (0459)     pop   A                            ;   Yes, restore pXIData to [A,X] and
010C: 8F AA    JMP   0x00B7             (0460)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0461) 
                                        (0462) .C_RTE_WrapUp:
010E: 18       POP   A                  (0463)     pop   A                            ; balance stack
010F: 71 10    OR    F,0x10             
                                        (0464) 
                                        (0465) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0466) 
                                        (0467) C_RTE_Done:
                                        (0468) 
                                        (0469) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0470) 
                                        (0471)     ;-------------------------------
                                        (0472)     ; Voltage Stabilization for SMP
                                        (0473)     ;-------------------------------
                                        (0474) 
                                        (0475) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0476) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0477)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0478)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0479)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0480)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0481)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0482)     M8C_SetBank1
                                        (0483)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0484)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0485)     M8C_SetBank0
                                        (0486)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0487)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0488) .WaitFor2ms:
                                        (0489)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0490)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0491) ENDIF ; SMP is operational
                                        (0492) ENDIF ; 5.0V Operation
                                        (0493) 
                                        (0494)     ;-------------------------------
                                        (0495)     ; Set Power-On Reset (POR) Level
                                        (0496)     ;-------------------------------
                                        (0497)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0498)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0499)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0500)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0501)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0502) 
                                        (0503)     M8C_SetBank1
                                        (0504) 
                                        (0505) IF (POWER_SETTING & POWER_SET_2V7)             ; 2.7V Operation?
                                        (0506)                                                ;  Yes, lowest trip already set
                                        (0507) ELSE                                           ;   No, must adjust POR...
                                        (0508) IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
                                        (0509)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, change to midpoint trip
                                        (0510) ELSE
                                        (0511) IF (POWER_SETTING & POWER_SET_5V0)             ; 5.0V Operation?
                                        (0512)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)       ; and Slow Mode?
                                        (0513)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, set to midpoint trip
                                        (0514)  ELSE                                          ;    No, fast mode
                                        (0515)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
0111: 43 E3 10 OR    REG[0xE3],0x10     (0516)     or   reg[VLT_CR], VLT_CR_POR_MID           ;         No, change to midpoint trip
0114: 70 EF    AND   F,0xEF             
                                        (0517)   ELSE ; 24HMz                                 ;
                                        (0518)     or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
                                        (0519)   ENDIF ; 24MHz
                                        (0520)  ENDIF ; Slow Mode
                                        (0521) ENDIF ; 5.0V Operation
                                        (0522) ENDIF ; 3.3V Operation
                                        (0523) ENDIF ; 2.7V Operation
                                        (0524) 
                                        (0525)     M8C_SetBank0
                                        (0526) 
                                        (0527)     ;----------------------------
                                        (0528)     ; Wrap up and invoke "main"
                                        (0529)     ;----------------------------
                                        (0530) 
                                        (0531)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0532)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0533)     ;
0116: 62 E0 00 MOV   REG[0xE0],0x0      (0534)     mov  reg[INT_MSK0],0
0119: 71 10    OR    F,0x10             
                                        (0535) 
                                        (0536)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0537)     ;
                                        (0538)     M8C_SetBank1
011B: 62 E0 00 MOV   REG[0xE0],0x0      (0539)     mov  reg[OSC_CR0],(SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
011E: 70 EF    AND   F,0xEF             
                                        (0540)     M8C_SetBank0
                                        (0541) 
                                        (0542)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0543)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0544)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0545)     ;
0120: 62 E2 00 MOV   REG[0xE2],0x0      (0546)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0547)                                    ; have been set during the boot process.
                                        (0548) IF	(TOOLCHAIN & HITECH)
                                        (0549) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0550) ELSE
                                        (0551) IF ENABLE_LJMP_TO_MAIN
                                        (0552)     ljmp  _main                    ; goto main (no return)
                                        (0553) ELSE
0123: 7C 0B 9F LCALL _main              (0554)     lcall _main                    ; call main
                                        (0555) .Exit:
0126: 8F FF    JMP   0x0126             (0556)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0557) ENDIF
                                        (0558) ENDIF ; TOOLCHAIN
                                        (0559) 
                                        (0560)     ;---------------------------------
                                        (0561)     ; Library Access to Global Parms
                                        (0562)     ;---------------------------------
                                        (0563)     ;
                                        (0564)  bGetPowerSetting:
                                        (0565) _bGetPowerSetting:
                                        (0566)     ; Returns value of POWER_SETTING in the A register.
                                        (0567)     ; No inputs. No Side Effects.
                                        (0568)     ;
                                        (0569) IF (POWER_SETTING & POWER_SET_2V7)
                                        (0570)     mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
                                        (0571) ELSE
0128: 50 10    MOV   A,0x10             (0572)     mov   A, POWER_SETTING          ; Supply voltage and internal main osc
                                        (0573) ENDIF
012A: 7F       RET                      (0574)     ret
                                        (0575) 
                                        (0576) IF	(TOOLCHAIN & HITECH)
                                        (0577) ELSE
                                        (0578)     ;---------------------------------
                                        (0579)     ; Order Critical RAM & ROM AREAs
                                        (0580)     ;---------------------------------
                                        (0581)     ;  'TOP' is all that has been defined so far...
                                        (0582) 
                                        (0583)     ;  ROM AREAs for C CONST, static & global items
                                        (0584)     ;
                                        (0585)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0586)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0587) __idata_start:
                                        (0588) 
                                        (0589)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0590) __func_lit_start:
                                        (0591) 
                                        (0592) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0593)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0594)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0595)     ; relocated by the code compressor, but the text area may shrink and
                                        (0596)     ; that moves xidata around.
                                        (0597)     ;
                                        (0598) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0599) ENDIF
                                        (0600) 
                                        (0601)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0602)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0603) 
                                        (0604)     ; CODE segment for general use
                                        (0605)     ;
                                        (0606)     AREA text (ROM, REL, CON)
                                        (0607) __text_start:
                                        (0608) 
                                        (0609)     ; RAM area usage
                                        (0610)     ;
                                        (0611)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0612) __data_start:
                                        (0613) 
                                        (0614)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0615)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0616)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0617) __bss_start:
                                        (0618) ENDIF ; TOOLCHAIN
                                        (0619) ; end of file boot.asm
FILE: D:\Studia\PSOC\Proxy\Proxy\Proxy\ledcontrol.c
(0001) #include "LEDControl.h" // Dodanie naglowka bilbioteki
(0002) #include <m8c.h>        // Biblioteka zawierająca typy danych, stale etc.
(0003) #include "PSoCAPI.h"    // Biblioteka zaweriajace funkcje dla peryferiów
(0004) 
(0005) //Definiowanie stalej dla maksymalnej wartosci interwalu
(0006) #define IntervalLimit 80
(0007) 
(0008) //Deklaracja stalych dla kolorow diod
(0009) enum LED{NONE, BLUE, GREEN,RED};
(0010) 
(0011) 
(0012) //Inicjalizacja wartosci czestotliwosci migania diod
(0013) LEDControl_RT = 50;
(0014) LEDControl_BT = 50;
(0015) LEDControl_GT = 50;
(0016) 
(0017) /// <summary>
(0018) /// Funkcja inicjalizująca diody
(0019) /// </summary>
(0020) /// <remarks> 
(0021) /// <para>[nazwa modulu]_Start() - w praktyce to samo dzialanie co _Stop, inicjalizuje modul oraz 
(0022) /// wylacza wybrana diode niezależnie od stanu ustawionego w module</para>
(0023) /// <para>LED_RED_On() - wlacza diode czerwona</para>
(0024) /// </remarks>
(0025) void LEDControl_INIT(void)
(0026) {
(0027)   LED_BLUE_Start(); 
__UserModules_end|_LEDControl_INIT|__text_start|_LEDControl_INIT:
    0842: 10       PUSH  X
    0843: 7C 03 59 LCALL LED_BLUE_Stop|_LED_BLUE_Off|LED_BLUE_Start|LED_BLUE_Off|_LED_BLUE_Stop|_LED_BLUE_Start
(0028)   LED_GREEN_Start();
    0846: 7C 03 1C LCALL _LED_GREEN_Off|_LED_GREEN_Stop|LED_GREEN_Stop|LED_GREEN_Off|_LED_GREEN_Start|LED_GREEN_Start
(0029)   LED_RED_Start();
    0849: 7C 02 DF LCALL LED_RED_Start|LED_RED_Off|_LED_RED_Stop|_LED_RED_Off|LED_RED_Stop|_LED_RED_Start
(0030)   LED_RED_On();
    084C: 7C 02 DB LCALL _LED_RED_On
    084F: 20       POP   X
    0850: 7F       RET   
(0031) }
(0032) 
(0033) /// <summary>
(0034) /// Funkcja służy do bezpośredniego sterowania diodami.
(0035) /// </summary>
(0036) /// <remarks>
(0037) /// <para>Funkcja przyjmuje 3 paramatry TRUE/FALSE. TRUE wlacza dioda, FALSE wylacza</para>
(0038) /// <para>[nazwa modulu]_On() wlaczenie diody</para>
(0039) /// <para>[nazwa modulu]_Off() wylaczenie diody</para>
(0040) /// </remarks>
(0041) /// <param name="red">Dioda czerwona</param>
(0042) /// <param name="green">Dioda zielona</param>
(0043) /// <param name="blue">Dioda niebieska</param>
(0044) 
(0045) void LEDControl_ChangeState(BOOL red,BOOL green,BOOL blue)
(0046) {
_LEDControl_ChangeState:
  blue                 --> X-6
  green                --> X-5
  red                  --> X-4
    0851: 10       PUSH  X
    0852: 4F       MOV   X,SP
(0047) 	red ? LED_RED_On() : LED_RED_Off();
    0853: 3D FC 00 CMP   [X-4],0x0
    0856: A0 08    JZ    0x085F
    0858: 10       PUSH  X
    0859: 7C 02 DB LCALL _LED_RED_On
    085C: 20       POP   X
    085D: 80 06    JMP   0x0864
    085F: 10       PUSH  X
    0860: 7C 02 DF LCALL LED_RED_Start|LED_RED_Off|_LED_RED_Stop|_LED_RED_Off|LED_RED_Stop|_LED_RED_Start
    0863: 20       POP   X
(0048) 	green ? LED_GREEN_On() : LED_GREEN_Off();
    0864: 3D FB 00 CMP   [X-5],0x0
    0867: A0 08    JZ    0x0870
    0869: 10       PUSH  X
    086A: 7C 03 18 LCALL _LED_GREEN_On
    086D: 20       POP   X
    086E: 80 06    JMP   0x0875
    0870: 10       PUSH  X
    0871: 7C 03 1C LCALL _LED_GREEN_Off|_LED_GREEN_Stop|LED_GREEN_Stop|LED_GREEN_Off|_LED_GREEN_Start|LED_GREEN_Start
    0874: 20       POP   X
(0049) 	blue ? LED_BLUE_On() : LED_BLUE_Off();
    0875: 3D FA 00 CMP   [X-6],0x0
    0878: A0 08    JZ    0x0881
    087A: 10       PUSH  X
    087B: 7C 03 55 LCALL _LED_BLUE_On
    087E: 20       POP   X
    087F: 80 06    JMP   0x0886
    0881: 10       PUSH  X
    0882: 7C 03 59 LCALL LED_BLUE_Stop|_LED_BLUE_Off|LED_BLUE_Start|LED_BLUE_Off|_LED_BLUE_Stop|_LED_BLUE_Start
    0885: 20       POP   X
    0886: 20       POP   X
    0887: 7F       RET   
(0050) }
(0051) 
(0052) /// <summary>
(0053) /// Funkcja zmienia aktualnie swiecaca diode oraz zwraca jej numer
(0054) /// </summary>
(0055) /// <returns>
(0056) /// Zwraca wartość 0,1,2 lub 3, zgodna z ENUM[BLUE,GREEN,RED] oraz wykorzystuje funkcje <c>LEDControl_ChangeState()</c>
(0057) /// </returns>
(0058) /// <param name="led">Zmienna do której przekazujemy aktualnie aktywną diode ENUM[BLUE,GREEN,RED]</param>
(0059) /// <param name="isASC">Jesli isASC: TRUE - kolejność od lewej do prawej, False - kolejność od prawej do lewej</param>
(0060) BYTE LEDControl_ChangeStateSwitch(BYTE led ,BOOL isASC)
(0061) {
_LEDControl_ChangeStateSwitch:
  isASC                --> X-5
  led                  --> X-4
    0888: 10       PUSH  X
    0889: 4F       MOV   X,SP
    088A: 38 0A    ADD   SP,0xA
(0062)   switch (led)
    088C: 52 FC    MOV   A,[X-4]
    088E: 54 01    MOV   [X+1],A
    0890: 56 00 00 MOV   [X+0],0x0
    0893: 3D 00 00 CMP   [X+0],0x0
    0896: B0 06    JNZ   0x089D
    0898: 3D 01 00 CMP   [X+1],0x0
    089B: A0 21    JZ    0x08BD
    089D: 3D 00 00 CMP   [X+0],0x0
    08A0: B0 06    JNZ   0x08A7
    08A2: 3D 01 01 CMP   [X+1],0x1
    08A5: A0 85    JZ    0x092B
    08A7: 3D 00 00 CMP   [X+0],0x0
    08AA: B0 06    JNZ   0x08B1
    08AC: 3D 01 02 CMP   [X+1],0x2
    08AF: A0 44    JZ    0x08F4
    08B1: 3D 00 00 CMP   [X+0],0x0
    08B4: B0 06    JNZ   0x08BB
    08B6: 3D 01 03 CMP   [X+1],0x3
    08B9: A0 AA    JZ    0x0964
    08BB: 80 E1    JMP   0x099D
(0063)   {
(0064)     case 0:
(0065)       isASC ? LEDControl_ChangeState(TRUE,FALSE,FALSE) : LEDControl_ChangeState(FALSE,FALSE,TRUE);
    08BD: 3D FB 00 CMP   [X-5],0x0
    08C0: A0 0E    JZ    0x08CF
    08C2: 50 00    MOV   A,0x0
    08C4: 08       PUSH  A
    08C5: 08       PUSH  A
    08C6: 50 01    MOV   A,0x1
    08C8: 08       PUSH  A
    08C9: 9F 86    CALL  _LEDControl_ChangeState
    08CB: 38 FD    ADD   SP,0xFD
    08CD: 80 0C    JMP   0x08DA
    08CF: 50 01    MOV   A,0x1
    08D1: 08       PUSH  A
    08D2: 50 00    MOV   A,0x0
    08D4: 08       PUSH  A
    08D5: 08       PUSH  A
    08D6: 9F 79    CALL  _LEDControl_ChangeState
    08D8: 38 FD    ADD   SP,0xFD
(0066) 	  return isASC ? RED : BLUE;
    08DA: 3D FB 00 CMP   [X-5],0x0
    08DD: A0 09    JZ    0x08E7
    08DF: 56 03 03 MOV   [X+3],0x3
    08E2: 56 02 00 MOV   [X+2],0x0
    08E5: 80 07    JMP   0x08ED
    08E7: 56 03 01 MOV   [X+3],0x1
    08EA: 56 02 00 MOV   [X+2],0x0
    08ED: 62 D0 00 MOV   REG[0xD0],0x0
    08F0: 52 03    MOV   A,[X+3]
    08F2: 80 AF    JMP   0x09A2
(0067)       break;
(0068)     case GREEN:
(0069) 	  isASC ? LEDControl_ChangeState(FALSE,FALSE,TRUE) : LEDControl_ChangeState(TRUE,FALSE,FALSE);
    08F4: 3D FB 00 CMP   [X-5],0x0
    08F7: A0 0E    JZ    0x0906
    08F9: 50 01    MOV   A,0x1
    08FB: 08       PUSH  A
    08FC: 50 00    MOV   A,0x0
    08FE: 08       PUSH  A
    08FF: 08       PUSH  A
    0900: 9F 4F    CALL  _LEDControl_ChangeState
    0902: 38 FD    ADD   SP,0xFD
    0904: 80 0C    JMP   0x0911
    0906: 50 00    MOV   A,0x0
    0908: 08       PUSH  A
    0909: 08       PUSH  A
    090A: 50 01    MOV   A,0x1
    090C: 08       PUSH  A
    090D: 9F 42    CALL  _LEDControl_ChangeState
    090F: 38 FD    ADD   SP,0xFD
(0070)       return isASC ? BLUE : RED;      
    0911: 3D FB 00 CMP   [X-5],0x0
    0914: A0 09    JZ    0x091E
    0916: 56 05 01 MOV   [X+5],0x1
    0919: 56 04 00 MOV   [X+4],0x0
    091C: 80 07    JMP   0x0924
    091E: 56 05 03 MOV   [X+5],0x3
    0921: 56 04 00 MOV   [X+4],0x0
    0924: 62 D0 00 MOV   REG[0xD0],0x0
    0927: 52 05    MOV   A,[X+5]
    0929: 80 78    JMP   0x09A2
(0071)       break;
(0072)     case BLUE:
(0073) 	  isASC ? LEDControl_ChangeState(TRUE,FALSE,FALSE) : LEDControl_ChangeState(FALSE,TRUE,FALSE);
    092B: 3D FB 00 CMP   [X-5],0x0
    092E: A0 0E    JZ    0x093D
    0930: 50 00    MOV   A,0x0
    0932: 08       PUSH  A
    0933: 08       PUSH  A
    0934: 50 01    MOV   A,0x1
    0936: 08       PUSH  A
    0937: 9F 18    CALL  _LEDControl_ChangeState
    0939: 38 FD    ADD   SP,0xFD
    093B: 80 0E    JMP   0x094A
    093D: 50 00    MOV   A,0x0
    093F: 08       PUSH  A
    0940: 50 01    MOV   A,0x1
    0942: 08       PUSH  A
    0943: 50 00    MOV   A,0x0
    0945: 08       PUSH  A
    0946: 9F 09    CALL  _LEDControl_ChangeState
    0948: 38 FD    ADD   SP,0xFD
(0074)       return isASC ? RED : GREEN;		
    094A: 3D FB 00 CMP   [X-5],0x0
    094D: A0 09    JZ    0x0957
    094F: 56 07 03 MOV   [X+7],0x3
    0952: 56 06 00 MOV   [X+6],0x0
    0955: 80 07    JMP   0x095D
    0957: 56 07 02 MOV   [X+7],0x2
    095A: 56 06 00 MOV   [X+6],0x0
    095D: 62 D0 00 MOV   REG[0xD0],0x0
    0960: 52 07    MOV   A,[X+7]
    0962: 80 3F    JMP   0x09A2
(0075)       break;
(0076)     case RED:
(0077) 	  isASC ? LEDControl_ChangeState(FALSE,TRUE,FALSE) : LEDControl_ChangeState(FALSE,FALSE,TRUE);
    0964: 3D FB 00 CMP   [X-5],0x0
    0967: A0 10    JZ    0x0978
    0969: 50 00    MOV   A,0x0
    096B: 08       PUSH  A
    096C: 50 01    MOV   A,0x1
    096E: 08       PUSH  A
    096F: 50 00    MOV   A,0x0
    0971: 08       PUSH  A
    0972: 9E DD    CALL  _LEDControl_ChangeState
    0974: 38 FD    ADD   SP,0xFD
    0976: 80 0C    JMP   0x0983
    0978: 50 01    MOV   A,0x1
    097A: 08       PUSH  A
    097B: 50 00    MOV   A,0x0
    097D: 08       PUSH  A
    097E: 08       PUSH  A
    097F: 9E D0    CALL  _LEDControl_ChangeState
    0981: 38 FD    ADD   SP,0xFD
(0078)       return isASC ? GREEN : BLUE;
    0983: 3D FB 00 CMP   [X-5],0x0
    0986: A0 09    JZ    0x0990
    0988: 56 09 02 MOV   [X+9],0x2
    098B: 56 08 00 MOV   [X+8],0x0
    098E: 80 07    JMP   0x0996
    0990: 56 09 01 MOV   [X+9],0x1
    0993: 56 08 00 MOV   [X+8],0x0
    0996: 62 D0 00 MOV   REG[0xD0],0x0
    0999: 52 09    MOV   A,[X+9]
    099B: 80 06    JMP   0x09A2
(0079)       break;
(0080)     default:
(0081)       return 0;
    099D: 62 D0 00 MOV   REG[0xD0],0x0
    09A0: 50 00    MOV   A,0x0
(0082)       break;
    09A2: 38 F6    ADD   SP,0xF6
    09A4: 20       POP   X
    09A5: 7F       RET   
(0083)   }      
(0084) }
(0085) 
(0086) /// <summary>
(0087) /// Funkcja waliduje wartosc czestotliwosci migania diody
(0088) /// </summary>
(0089) /// <remarks>
(0090) /// <para>Funkcja dodaje liczbe addValue która może być ujemna do wartosci podanej w pierwszym parametrze</para>
(0091) /// </remarks>
(0092) /// <returns>
(0093) /// <para>Jeśli wartość jest mniejsza od 0 to zwraca zero w przeciwnym wypadku</para>
(0094) /// <para>Jeśli wartość jest wieksza od stalej <c>IntervalLimit</c> to zwraca wartosc <c>IntervalLimit</c></para>
(0095) /// <para>W przeciwnym wypadku zwraca obliczona wartosc</para>
(0096) /// </returns>
(0097) /// <param name="sourceValue">Wartosc modyfikowana</param>
(0098) /// <param name="addValue">Wartosc o ktora bedzie modyfikowana wartosc zrodlowa</param>
(0099) int LEDControl_ValueValidation(int sourceValue, int addValue)
(0100) {
_LEDControl_ValueValidation:
  addValue             --> X-7
  sourceValue          --> X-5
    09A6: 10       PUSH  X
    09A7: 4F       MOV   X,SP
    09A8: 38 04    ADD   SP,0x4
(0101)   sourceValue += addValue;
    09AA: 52 FA    MOV   A,[X-6]
    09AC: 05 FC    ADD   [X-4],A
    09AE: 52 F9    MOV   A,[X-7]
    09B0: 0D FB    ADC   [X-5],A
(0102)   sourceValue = sourceValue < 0 ? 0 : sourceValue > IntervalLimit ? IntervalLimit : sourceValue;
    09B2: 52 FC    MOV   A,[X-4]
    09B4: 11 00    SUB   A,0x0
    09B6: 52 FB    MOV   A,[X-5]
    09B8: 31 80    XOR   A,0x80
    09BA: 19 80    SBB   A,0x80
    09BC: D0 09    JNC   0x09C6
    09BE: 56 01 00 MOV   [X+1],0x0
    09C1: 56 00 00 MOV   [X+0],0x0
    09C4: 80 2C    JMP   0x09F1
    09C6: 50 50    MOV   A,0x50
    09C8: 13 FC    SUB   A,[X-4]
    09CA: 52 FB    MOV   A,[X-5]
    09CC: 31 80    XOR   A,0x80
    09CE: 62 D0 00 MOV   REG[0xD0],0x0
    09D1: 53 19    MOV   [__rX],A
    09D3: 50 80    MOV   A,0x80
    09D5: 1A 19    SBB   A,[__rX]
    09D7: D0 09    JNC   0x09E1
    09D9: 56 03 50 MOV   [X+3],0x50
    09DC: 56 02 00 MOV   [X+2],0x0
    09DF: 80 09    JMP   0x09E9
    09E1: 52 FC    MOV   A,[X-4]
    09E3: 54 03    MOV   [X+3],A
    09E5: 52 FB    MOV   A,[X-5]
    09E7: 54 02    MOV   [X+2],A
    09E9: 52 03    MOV   A,[X+3]
    09EB: 54 01    MOV   [X+1],A
    09ED: 52 02    MOV   A,[X+2]
    09EF: 54 00    MOV   [X+0],A
    09F1: 52 01    MOV   A,[X+1]
    09F3: 54 FC    MOV   [X-4],A
    09F5: 52 00    MOV   A,[X+0]
    09F7: 54 FB    MOV   [X-5],A
(0103)   return sourceValue;
    09F9: 62 D0 00 MOV   REG[0xD0],0x0
    09FC: 52 FC    MOV   A,[X-4]
    09FE: 53 1A    MOV   [__r1],A
    0A00: 52 FB    MOV   A,[X-5]
    0A02: 53 1B    MOV   [__r0],A
    0A04: 38 FC    ADD   SP,0xFC
    0A06: 20       POP   X
    0A07: 7F       RET   
(0104) }
(0105) 
(0106) /// <summary>
(0107) /// Funkcja zmienia wartosc czestotliwosc migania diody
(0108) /// </summary>
(0109) /// <remarks>
(0110) /// <para>Funkcja dodaje liczbe addValue która może być ujemna do wartosci podanej w pierwszym parametrze</para>
(0111) /// </remarks>
(0112) /// <param name="led">Wartość 0,1,2 lub 3, zgodna z ENUM[BLUE,GREEN,RED] do zmiany czestotliwosci</param>
(0113) /// <param name="value">Wartosc zmiany czestotliwosci</param>
(0114) /// <param name="isAdd">Zmienna Bool determinuje zwiekszanie lub zmniejszanie czestotliowosci</param>
(0115) void LEDControl_ChangeFrequency(BYTE led,int value,BYTE isAdd)
(0116) {
_LEDControl_ChangeFrequency:
  isAdd                --> X-7
  value                --> X-6
  led                  --> X-4
    0A08: 10       PUSH  X
    0A09: 4F       MOV   X,SP
    0A0A: 38 04    ADD   SP,0x4
(0117)   value = isAdd ? value : value * -1;	
    0A0C: 3D F9 00 CMP   [X-7],0x0
    0A0F: A0 0B    JZ    0x0A1B
    0A11: 52 FB    MOV   A,[X-5]
    0A13: 54 01    MOV   [X+1],A
    0A15: 52 FA    MOV   A,[X-6]
    0A17: 54 00    MOV   [X+0],A
    0A19: 80 1B    JMP   0x0A35
    0A1B: 52 FA    MOV   A,[X-6]
    0A1D: 08       PUSH  A
    0A1E: 52 FB    MOV   A,[X-5]
    0A20: 08       PUSH  A
    0A21: 50 FF    MOV   A,0xFF
    0A23: 08       PUSH  A
    0A24: 08       PUSH  A
    0A25: 62 D0 00 MOV   REG[0xD0],0x0
    0A28: 7C 0C 00 LCALL 0x0C00
    0A2B: 38 FC    ADD   SP,0xFC
    0A2D: 51 19    MOV   A,[__rX]
    0A2F: 54 01    MOV   [X+1],A
    0A31: 51 18    MOV   A,[__rY]
    0A33: 54 00    MOV   [X+0],A
    0A35: 52 01    MOV   A,[X+1]
    0A37: 54 FB    MOV   [X-5],A
    0A39: 52 00    MOV   A,[X+0]
    0A3B: 54 FA    MOV   [X-6],A
(0118)   switch (led)
    0A3D: 52 FC    MOV   A,[X-4]
    0A3F: 54 03    MOV   [X+3],A
    0A41: 56 02 00 MOV   [X+2],0x0
    0A44: 3D 02 00 CMP   [X+2],0x0
    0A47: B0 06    JNZ   0x0A4E
    0A49: 3D 03 01 CMP   [X+3],0x1
    0A4C: A0 3C    JZ    0x0A89
    0A4E: 3D 02 00 CMP   [X+2],0x0
    0A51: B0 06    JNZ   0x0A58
    0A53: 3D 03 02 CMP   [X+3],0x2
    0A56: A0 57    JZ    0x0AAE
    0A58: 3D 02 00 CMP   [X+2],0x0
    0A5B: B0 06    JNZ   0x0A62
    0A5D: 3D 03 03 CMP   [X+3],0x3
    0A60: A0 03    JZ    0x0A64
    0A62: 80 6E    JMP   0x0AD1
(0119)   {
(0120)     case RED:
(0121)       LEDControl_RT = LEDControl_ValueValidation(LEDControl_RT, value);
    0A64: 52 FA    MOV   A,[X-6]
    0A66: 08       PUSH  A
    0A67: 52 FB    MOV   A,[X-5]
    0A69: 08       PUSH  A
    0A6A: 62 D0 00 MOV   REG[0xD0],0x0
    0A6D: 51 25    MOV   A,[LEDControl_RT]
    0A6F: 08       PUSH  A
    0A70: 51 26    MOV   A,[LEDControl_RT+1]
    0A72: 08       PUSH  A
    0A73: 9F 31    CALL  _LEDControl_ValueValidation
    0A75: 38 FC    ADD   SP,0xFC
    0A77: 62 D0 00 MOV   REG[0xD0],0x0
    0A7A: 51 1A    MOV   A,[__r1]
    0A7C: 08       PUSH  A
    0A7D: 51 1B    MOV   A,[__r0]
    0A7F: 62 D0 00 MOV   REG[0xD0],0x0
    0A82: 53 25    MOV   [LEDControl_RT],A
    0A84: 18       POP   A
    0A85: 53 26    MOV   [LEDControl_RT+1],A
(0122)       break;
    0A87: 80 49    JMP   0x0AD1
(0123)     case BLUE:
(0124) 	  LEDControl_BT = LEDControl_ValueValidation(LEDControl_BT, value);
    0A89: 52 FA    MOV   A,[X-6]
    0A8B: 08       PUSH  A
    0A8C: 52 FB    MOV   A,[X-5]
    0A8E: 08       PUSH  A
    0A8F: 62 D0 00 MOV   REG[0xD0],0x0
    0A92: 51 27    MOV   A,[LEDControl_BT]
    0A94: 08       PUSH  A
    0A95: 51 28    MOV   A,[LEDControl_BT+1]
    0A97: 08       PUSH  A
    0A98: 9F 0C    CALL  _LEDControl_ValueValidation
    0A9A: 38 FC    ADD   SP,0xFC
    0A9C: 62 D0 00 MOV   REG[0xD0],0x0
    0A9F: 51 1A    MOV   A,[__r1]
    0AA1: 08       PUSH  A
    0AA2: 51 1B    MOV   A,[__r0]
    0AA4: 62 D0 00 MOV   REG[0xD0],0x0
    0AA7: 53 27    MOV   [LEDControl_BT],A
    0AA9: 18       POP   A
    0AAA: 53 28    MOV   [LEDControl_BT+1],A
(0125)       break;
    0AAC: 80 24    JMP   0x0AD1
(0126)     case GREEN:
(0127) 	  LEDControl_GT = LEDControl_ValueValidation(LEDControl_GT, value);
    0AAE: 52 FA    MOV   A,[X-6]
    0AB0: 08       PUSH  A
    0AB1: 52 FB    MOV   A,[X-5]
    0AB3: 08       PUSH  A
    0AB4: 62 D0 00 MOV   REG[0xD0],0x0
    0AB7: 51 29    MOV   A,[LEDControl_GT]
    0AB9: 08       PUSH  A
    0ABA: 51 2A    MOV   A,[LEDControl_GT+1]
    0ABC: 08       PUSH  A
    0ABD: 9E E7    CALL  _LEDControl_ValueValidation
    0ABF: 38 FC    ADD   SP,0xFC
    0AC1: 62 D0 00 MOV   REG[0xD0],0x0
    0AC4: 51 1A    MOV   A,[__r1]
    0AC6: 08       PUSH  A
    0AC7: 51 1B    MOV   A,[__r0]
    0AC9: 62 D0 00 MOV   REG[0xD0],0x0
    0ACC: 53 29    MOV   [LEDControl_GT],A
    0ACE: 18       POP   A
    0ACF: 53 2A    MOV   [LEDControl_GT+1],A
(0128)       break;
(0129)     default:
(0130)       break; 
    0AD1: 38 FC    ADD   SP,0xFC
    0AD3: 20       POP   X
    0AD4: 7F       RET   
(0131)   }
(0132) }
(0133) 
(0134) /// <summary>
(0135) /// Funkcja zmieniajaca stan diod w zaleznosci od licznika cykli petli
(0136) /// </summary>
(0137) /// <remarks>
(0138) /// <para>Funkcja powinna byc umieszczona w petli, a jej licznik powinien byc przekazany jako parametr</para>
(0139) /// <para>Gdy limit cykli LEDControl_RT,LEDControl_GT,LEDControl_BT zostanie osiagniety nastepuje zmiana stanu diody</para>
(0140) /// <para>Rownoczesnie nastepuje wyzerowanie licznika petli i zwrocenie jego wartosci</para>
(0141) /// </remarks>
(0142) /// <param name="led">Wartość 0,1,2 lub 3, zgodna z ENUM[BLUE,GREEN,RED]</param>
(0143) /// <param name="blinkLoop">Licznik petli</param>
(0144) int LEDControl_Blink(BYTE led, int blinkLoop)
(0145) {
_LEDControl_Blink:
  blinkLoop            --> X-6
  led                  --> X-4
    0AD5: 10       PUSH  X
    0AD6: 4F       MOV   X,SP
    0AD7: 38 02    ADD   SP,0x2
(0146)   switch (led)
    0AD9: 52 FC    MOV   A,[X-4]
    0ADB: 54 01    MOV   [X+1],A
    0ADD: 56 00 00 MOV   [X+0],0x0
    0AE0: 3D 00 00 CMP   [X+0],0x0
    0AE3: B0 06    JNZ   0x0AEA
    0AE5: 3D 01 01 CMP   [X+1],0x1
    0AE8: A0 47    JZ    0x0B30
    0AEA: 3D 00 00 CMP   [X+0],0x0
    0AED: B0 06    JNZ   0x0AF4
    0AEF: 3D 01 02 CMP   [X+1],0x2
    0AF2: A0 6D    JZ    0x0B60
    0AF4: 3D 00 00 CMP   [X+0],0x0
    0AF7: B0 06    JNZ   0x0AFE
    0AF9: 3D 01 03 CMP   [X+1],0x3
    0AFC: A0 03    JZ    0x0B00
    0AFE: 80 91    JMP   0x0B90
(0147)   {
(0148)     case RED:
(0149)       if (blinkLoop>=LEDControl_RT)
    0B00: 62 D0 00 MOV   REG[0xD0],0x0
    0B03: 52 FB    MOV   A,[X-5]
    0B05: 12 26    SUB   A,[LEDControl_RT+1]
    0B07: 51 25    MOV   A,[LEDControl_RT]
    0B09: 31 80    XOR   A,0x80
    0B0B: 62 D0 00 MOV   REG[0xD0],0x0
    0B0E: 53 19    MOV   [__rX],A
    0B10: 52 FA    MOV   A,[X-6]
    0B12: 31 80    XOR   A,0x80
    0B14: 1A 19    SBB   A,[__rX]
    0B16: C0 0C    JC    0x0B23
(0150)         {
(0151)           LED_RED_Invert();
    0B18: 10       PUSH  X
    0B19: 7C 02 F9 LCALL _LED_RED_Invert
    0B1C: 20       POP   X
(0152)           blinkLoop = 0;
    0B1D: 56 FB 00 MOV   [X-5],0x0
    0B20: 56 FA 00 MOV   [X-6],0x0
(0153)         }
(0154)         return blinkLoop;
    0B23: 62 D0 00 MOV   REG[0xD0],0x0
    0B26: 52 FB    MOV   A,[X-5]
    0B28: 53 1A    MOV   [__r1],A
    0B2A: 52 FA    MOV   A,[X-6]
    0B2C: 53 1B    MOV   [__r0],A
    0B2E: 80 6C    JMP   0x0B9B
(0155)         break;
(0156)     case BLUE:
(0157)       if (blinkLoop>=LEDControl_BT)
    0B30: 62 D0 00 MOV   REG[0xD0],0x0
    0B33: 52 FB    MOV   A,[X-5]
    0B35: 12 28    SUB   A,[LEDControl_BT+1]
    0B37: 51 27    MOV   A,[LEDControl_BT]
    0B39: 31 80    XOR   A,0x80
    0B3B: 62 D0 00 MOV   REG[0xD0],0x0
    0B3E: 53 19    MOV   [__rX],A
    0B40: 52 FA    MOV   A,[X-6]
    0B42: 31 80    XOR   A,0x80
    0B44: 1A 19    SBB   A,[__rX]
    0B46: C0 0C    JC    0x0B53
(0158)       {
(0159)         LED_BLUE_Invert();
    0B48: 10       PUSH  X
    0B49: 7C 03 73 LCALL _LED_BLUE_Invert
    0B4C: 20       POP   X
(0160)         blinkLoop = 0;
    0B4D: 56 FB 00 MOV   [X-5],0x0
    0B50: 56 FA 00 MOV   [X-6],0x0
(0161)       }
(0162)       return blinkLoop;
    0B53: 62 D0 00 MOV   REG[0xD0],0x0
    0B56: 52 FB    MOV   A,[X-5]
    0B58: 53 1A    MOV   [__r1],A
    0B5A: 52 FA    MOV   A,[X-6]
    0B5C: 53 1B    MOV   [__r0],A
    0B5E: 80 3C    JMP   0x0B9B
(0163)       break;
(0164)     case GREEN:
(0165)       if (blinkLoop>=LEDControl_GT)
    0B60: 62 D0 00 MOV   REG[0xD0],0x0
    0B63: 52 FB    MOV   A,[X-5]
    0B65: 12 2A    SUB   A,[LEDControl_GT+1]
    0B67: 51 29    MOV   A,[LEDControl_GT]
    0B69: 31 80    XOR   A,0x80
    0B6B: 62 D0 00 MOV   REG[0xD0],0x0
    0B6E: 53 19    MOV   [__rX],A
    0B70: 52 FA    MOV   A,[X-6]
    0B72: 31 80    XOR   A,0x80
    0B74: 1A 19    SBB   A,[__rX]
    0B76: C0 0C    JC    0x0B83
(0166)       {
(0167)         LED_GREEN_Invert();
    0B78: 10       PUSH  X
    0B79: 7C 03 36 LCALL _LED_GREEN_Invert
    0B7C: 20       POP   X
(0168)         blinkLoop = 0;
    0B7D: 56 FB 00 MOV   [X-5],0x0
    0B80: 56 FA 00 MOV   [X-6],0x0
(0169)       }
(0170)       return blinkLoop;
    0B83: 62 D0 00 MOV   REG[0xD0],0x0
    0B86: 52 FB    MOV   A,[X-5]
    0B88: 53 1A    MOV   [__r1],A
    0B8A: 52 FA    MOV   A,[X-6]
    0B8C: 53 1B    MOV   [__r0],A
    0B8E: 80 0C    JMP   0x0B9B
(0171)       break;
(0172)     default:
(0173)       return blinkLoop;
    0B90: 62 D0 00 MOV   REG[0xD0],0x0
    0B93: 52 FB    MOV   A,[X-5]
    0B95: 53 1A    MOV   [__r1],A
    0B97: 52 FA    MOV   A,[X-6]
    0B99: 53 1B    MOV   [__r0],A
(0174)       break; 
    0B9B: 38 FE    ADD   SP,0xFE
(0175)   }
(0176) }FILE: D:\Studia\PSOC\Proxy\Proxy\Proxy\main.c
(0001) #include <m8c.h> // Biblioteka zawierająca typy danych, stałe etc.        
(0002) #include "PSoCAPI.h" // Biblioteka zawierające funkcje PSoC    
(0003) #include "LEDControl.h" // Biblioteka do obsługi diod LED
(0004) #include "ProxyControl.h" // Biblioteka obsługujaca czujni zbliżeniowy
(0005) 
(0006) void main(void)
(0007) {	
_main:
  blinkLoop            --> X+0
    0B9F: 10       PUSH  X
    0BA0: 4F       MOV   X,SP
    0BA1: 38 02    ADD   SP,0x2
(0008)   int blinkLoop=0;
    0BA3: 56 01 00 MOV   [X+1],0x0
    0BA6: 56 00 00 MOV   [X+0],0x0
(0009)   // Inicjalizacja przerwań globalnych, 
(0010)   // konieczne dla ADC
(0011)   M8C_EnableGInt ; 
    0BA9: 71 01    OR    F,0x1
(0012) 	
(0013)   // Inicjalizacja biblioteki do
(0014)   // obsługi diod Led
(0015)   LEDControl_INIT();
    0BAB: 7C 08 42 LCALL __UserModules_end|_LEDControl_INIT|__text_start|_LEDControl_INIT
(0016) 	
(0017)   // Inicjalizacja biblioteki do
(0018)   // obsługi diod czujnika zbliżeniowego	
(0019)   ProxyControl_INIT();
    0BAE: 7C 0B E2 LCALL _ProxyControl_INIT
    0BB1: 80 29    JMP   0x0BDB
(0020) 	
(0021)   while(1) 
(0022)   {	
(0023) 	// Jeśli wykryto obiekt wlaczona dioda niebieskie 
(0024) 	// w przeciwnym wypadku czerwona 
(0025) 	ProxyControl_Proxy()? LEDControl_ChangeStateSwitch(2,TRUE): 
    0BB3: 7C 0B F1 LCALL _ProxyControl_Proxy
    0BB6: 62 D0 00 MOV   REG[0xD0],0x0
    0BB9: 39 00    CMP   A,0x0
    0BBB: A0 13    JZ    0x0BCF
    0BBD: 50 01    MOV   A,0x1
    0BBF: 08       PUSH  A
    0BC0: 50 02    MOV   A,0x2
    0BC2: 08       PUSH  A
    0BC3: 7C 08 88 LCALL _LEDControl_ChangeStateSwitch
    0BC6: 38 FE    ADD   SP,0xFE
    0BC8: 62 D0 00 MOV   REG[0xD0],0x0
    0BCB: 53 1B    MOV   [__r0],A
    0BCD: 80 0D    JMP   0x0BDB
    0BCF: 50 01    MOV   A,0x1
    0BD1: 08       PUSH  A
    0BD2: 08       PUSH  A
    0BD3: 7C 08 88 LCALL _LEDControl_ChangeStateSwitch
    0BD6: 38 FE    ADD   SP,0xFE
    0BD8: 62 D0 00 MOV   REG[0xD0],0x0
(0026) 	LEDControl_ChangeStateSwitch(1,TRUE);
(0027)   }
    0BDB: 8F D7    JMP   0x0BB3
(0028) }
FILE: D:\Studia\PSOC\Proxy\Proxy\Proxy\proxycontrol.c
(0001) #include "ProxyControl.h" // Dodanie naglowka bilbioteki
(0002) #include <m8c.h> // Biblioteka zawierająca typy danych, stale etc.
(0003) #include "PSoCAPI.h" // Biblioteka zaweriajace funkcje dla peryferiów    
(0004) 
(0005) void ProxyControl_INIT(void)
(0006) {
(0007)   CSD_Start();   
_ProxyControl_INIT:
    0BE2: 10       PUSH  X
    0BE3: 7C 06 00 LCALL _CSD_Start
(0008)   CSD_ScanAllSensors();   
    0BE6: 7C 07 FF LCALL _CSD_ScanAllSensors
(0009)   CSD_InitializeBaselines();   
    0BE9: 7C 05 50 LCALL _CSD_InitializeBaselines
(0010)   CSD_SetDefaultFingerThresholds();
    0BEC: 7C 05 3B LCALL _CSD_SetDefaultFingerThresholds
    0BEF: 20       POP   X
    0BF0: 7F       RET   
(0011) }
(0012) BOOL ProxyControl_Proxy(void)
(0013) {
(0014)   CSD_ScanAllSensors();
_ProxyControl_Proxy:
    0BF1: 10       PUSH  X
    0BF2: 7C 07 FF LCALL _CSD_ScanAllSensors
(0015)   CSD_UpdateAllBaselines();
    0BF5: 7C 05 B6 LCALL _CSD_UpdateAllBaselines
(0016)   return CSD_bIsAnySensorActive();
    0BF8: 7C 05 9D LCALL _CSD_bIsAnySensorActive
    0BFB: 20       POP   X
    0BFC: 62 D0 00 MOV   REG[0xD0],0x0
    0BFF: 7F       RET   
