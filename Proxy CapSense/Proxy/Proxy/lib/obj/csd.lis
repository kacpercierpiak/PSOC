 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           ;;  FILENAME: CSD.asm
 0000           ;;  Version: 2.00, Updated on 2015/3/4 at 22:23:59
 0000           ;;  Generated by PSoC Designer 5.4.3191
 0000           ;;
 0000           ;;  DESCRIPTION: CS‚ User Module software implementation file.
 0000           ;;-----------------------------------------------------------------------------
 0000           ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           
 00C0           FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
 0000           FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
 0040           FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
 0080           FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
 00C0           FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
 0000           FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
 0040           FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
 0080           FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
 00C0           FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
 0010           FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
 0008           FLAG_SUPER:        equ 08h     ; Supervisor Mode
 0004           FLAG_CARRY:        equ 04h     ; Carry Condition Flag
 0002           FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
 0001           FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0061           AMUX_CFG:      equ 61h          ; Analog MUX Configuration
 0030           AMUX_CFG_INTCAP:       equ 30h    ;
 000E           AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
 0001           AMUX_CFG_EN:		  	  equ 01h	 ;
 0000           
 0000           ; old declarations DO NOT USE
 0061           AMUXCFG:      equ 61h          ; Analog MUX Configuration
 0030           AMUXCFG_INTCAP:       equ 30h    ;
 000E           AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
 0001           AMUXCFG_EN:		  	  equ 01h	 ;
 0000           
 0062           PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
 0038           PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
 0006           PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
 0001           PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0020           CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
 0010           CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
 0000           
 0068           ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
 0080           ADC0_CR_CMPST:        equ 80h    ;
 0040           ADC0_CR_LOREN:        equ 40h    ;
 0020           ADC0_CR_SHEN:         equ 20h    ;
 0008           ADC0_CR_CBSRC:        equ 08h    ;
 0004           ADC0_CR_ADCM:         equ 04h    ;
 0001           ADC0_CR_EN:	          equ 01h    ;
 0000           
 0069           ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
 0080           ADC1_CR_CMPST:        equ 80h    ;
 0040           ADC1_CR_LOREN:        equ 40h    ;
 0020           ADC1_CR_SHEN:         equ 20h    ;
 0008           ADC1_CR_CBSRC:        equ 08h    ;
 0004           ADC1_CR_ADCM:         equ 04h    ;
 0001           ADC1_CR_EN:	          equ 01h    ;
 0000           
 0000           ; Continuous Time PSoC block Type E Row 0 Col 0
 0072           ACE00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACE00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type E Row 0 Col 1
 0076           ACE01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACE01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType E Row 1 Col 0
 0080           ASE10CR0:     equ 80h          ; Control register 0                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType E Row 1 Col 1
 0084           ASE11CR0:     equ 84h          ; Control register 0                       (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global General Purpose Data Registers
 0000           ;-----------------------------------------------
 006C           TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
 006D           TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
 006E           TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
 006F           TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Ram Page Pointers
 0000           ;-----------------------------------------------
 00D0           CUR_PP:      equ 0D0h           ; Current   Page Pointer
 00D1           STK_PP:      equ 0D1h           ; Stack     Page Pointer
 00D3           IDX_PP:      equ 0D3h           ; Index     Page Pointer
 00D4           MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
 00D5           MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Control Registers
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FD           DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0018           CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
 0003           CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
 0000           
 0003           CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 000F           AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
 0000           
 0064           CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
 0080           CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
 0040           CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
 0030           CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
 0008           CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
 0004           CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
 0003           CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 000F           AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 006B           CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
 0040           CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
 0030           CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
 0004           CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
 0003           CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Analog Mux Bus Port Enable Bits
 0000           ;------------------------------------------------
 00D8           MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
 00D9           MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
 00DA           MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
 00DB           MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0008           VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E5           ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
 00E6           ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
 0000           
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
 0000           
 00FA           FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
 0003           FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
 0000           
 00FD           DAC_CR:       equ 0FDh          ; Analog Mux DAC Control Register
 0008           DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
 0006           DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
 0001           DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0001           SYSTEM_STACK_PAGE: equ 1   
 0000           SYSTEM_STACK_BASE_ADDR: equ 0h   
 0001           SYSTEM_LARGE_MEMORY_MODEL: equ 1   
 0000           SYSTEM_SMALL_MEMORY_MODEL: equ 0   
 0001           IMAGECRAFT: equ 1   
 0002           HITECH: equ 2   
 0001           TOOLCHAIN: equ IMAGECRAFT   
 0001           SYSTEM_TOOLS: equ 1   
 0001           SYSTEM_IDXPG_TRACKS_STK_PP: equ 1   
 0000           SYSTEM_IDXPG_TRACKS_IDX_PP: equ 0   
 0000           SYSTEM_MULTIPAGE_STACK: equ 0 
 0000           
 0000           
 0000           ;  ******* Function Class Definitions *******
 0000           ;
 0000           ;  These definitions are used to describe RAM access patterns. They provide
 0000           ;  documentation and they control prologue and epilogue macros that perform
 0000           ;  the necessary housekeeping functions for large memory model devices like
 0000           ;  the CY8C21030.
 0000           
 0001           RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
 0002           RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
 0004           RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
 0008           RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
 0000           
 0000           ; ******* Hi Tech Specific *******
 0000           ; Turn on the expansion of all macros by default
                IF (TOOLCHAIN & HITECH)
                OPT EXPAND
                ENDIF
                ;  ******* Page Pointer Manipulation Macros *******
                ;
                ;  Most of the following macros are conditionally compiled so they only
                ;  produce code if the large memory model is selected.
                
                   ;-----------------------------------------------
                   ;  Set Stack Page Macro
                   ;-----------------------------------------------
                   ;
                   ;  DESC: Modify STK_PP in the large or small memory Models.
                   ;
                   ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
                   ;        which stack operations like PUSH and POP store and retrieve their
                   ;        data
                   ;
                   ;  COST: 8 instruction cycles (in LMM only)
                
 0000              macro RAM_SETPAGE_STK( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[STK_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_CUR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[CUR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[IDX_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVW( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVW_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX2STK
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 IF ( SYSTEM_MULTIPAGE_STACK )
 0000                    mov   A, reg[STK_PP]
 0000                    mov   reg[IDX_PP], A
 0000                 ELSE
 0000                    RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
 0000                 ENDIF
 0000              ENDIF
 0000              macro RAM_CHANGE_PAGE_MODE( MODE )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0000                 or    F,  FLAG_PGMODE_MASK & @MODE
 0000              ENDIF
 0000              macro RAM_SET_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_RESTORE_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_STACKPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 or   F, FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_INDEXPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and  F, ~FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_PROLOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                    RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                    RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro RAM_EPILOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro REG_PRESERVE( IOReg )
 0000              mov   A, reg[ @IOReg ]
 0000              push  A
 0000              macro REG_RESTORE( IOReg )
 0000              pop   A
 0000              mov   reg[ @IOReg ], A
 0000              macro ISR_PRESERVE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_PRESERVE CUR_PP
 0000                 REG_PRESERVE IDX_PP
 0000                 REG_PRESERVE MVR_PP
 0000                 REG_PRESERVE MVW_PP
 0000              ENDIF
 0000              macro ISR_RESTORE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_RESTORE MVW_PP
 0000                 REG_RESTORE MVR_PP
 0000                 REG_RESTORE IDX_PP
 0000                 REG_RESTORE CUR_PP
 0000              ENDIF
 0000           macro PRESERVE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_PRESERVE_PAGE_POINTERS
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             MOV A, [__r0]
 0000             PUSH A
 0000             MOV A, [__r1]
 0000             PUSH A
 0000             MOV A, [__r2]
 0000             PUSH A
 0000             MOV A, [__r3]
 0000             PUSH A
 0000             MOV A, [__r4]
 0000             PUSH A
 0000             MOV A, [__r5]
 0000             PUSH A
 0000             MOV A, [__r6]
 0000             PUSH A
 0000             MOV A, [__r7]
 0000             PUSH A
 0000             MOV A, [__r8]
 0000             PUSH A
 0000             MOV A, [__r9]
 0000             PUSH A
 0000             MOV A, [__r10]
 0000             PUSH A
 0000             MOV A, [__r11]
 0000             PUSH A
 0000             MOV A, [__rX]
 0000             PUSH A
 0000             MOV A, [__rY]
 0000             PUSH A
 0000             MOV A, [__rZ]
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               MOV REG[CUR_PP], 0
 0000             ENDIF
 0000           ENDIF
 0000           macro RESTORE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             POP A
 0000             MOV [__rZ], A
 0000             POP A
 0000             MOV [__rY], A
 0000             POP A
 0000             MOV [__rX], A
 0000             POP A
 0000             MOV [__r11], A
 0000             POP A
 0000             MOV [__r10], A
 0000             POP A
 0000             MOV [__r9], A
 0000             POP A
 0000             MOV [__r8], A
 0000             POP A
 0000             MOV [__r7], A
 0000             POP A
 0000             MOV [__r6], A
 0000             POP A
 0000             MOV [__r5], A
 0000             POP A
 0000             MOV [__r4], A
 0000             POP A
 0000             MOV [__r3], A
 0000             POP A
 0000             MOV [__r2], A
 0000             POP A
 0000             MOV [__r1], A
 0000             POP A
 0000             MOV [__r0], A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_RESTORE_PAGE_POINTERS
 0000               AND F, FLAG_PGMODE_0
 0000             ENDIF
 0000             POP A
 0000           ENDIF
 0000           CPU_CLOCK:				equ	0h	;CPU clock value
 0007           CPU_CLOCK_MASK:			equ	7h	;CPU clock mask
 0000           CPU_CLOCK_JUST:			equ	0h	;CPU clock value justified
 0000           SLEEP_TIMER:			equ	0h	;Sleep Timer value
 0018           SLEEP_TIMER_MASK:		equ	18h	;Sleep Timer mask
 0000           SLEEP_TIMER_JUST:		equ	0h	;Sleep Timer value justified
 0001           SWITCH_MODE_PUMP:		equ	1h	;Switch Mode Pump setting
 0080           SWITCH_MODE_PUMP_MASK:	equ	80h	;Switch Mode Pump mask
 0080           SWITCH_MODE_PUMP_JUST:	equ	80h	;Switch Mode Pump justified
 0000           LVD_TBEN:               equ 0   ; Low Voltage Throttle-back enable value
 0008           LVD_TBEN_MASK:          equ 8  ; Low Voltage Throttle-back enable mask
 0000           LVD_TBEN_JUST:          equ 0  ; Low Voltage Throttle-back enable justified
 0007           TRIP_VOLTAGE:			equ	7h   ;Trip Voltage value
 0007           TRIP_VOLTAGE_MASK:      equ 7h  ;Trip Voltage mask
 0007           TRIP_VOLTAGE_JUST:      equ 7h  ;Trip Voltage justified
 0000                                         
 0010           POWER_SETTING:			equ	10h
 0010           POWER_SET_5V0:          equ 10h  ; MASK for 5.0V operation, fast and slow 
 0010           POWER_SET_5V0_24MHZ:    equ 10h  ; Power Setting value for 5.0V fast      
 0011           POWER_SET_5V0_6MHZ:     equ 11h  ; Power Setting value for 5.0V slow      
 0008           POWER_SET_3V3:          equ 08h  ; MASK for 3.3V operation, fast and slow 
 0008           POWER_SET_3V3_24MHZ:    equ 08h	 ; Power Setting value for 3.3V fast      
 0009           POWER_SET_3V3_6MHZ:     equ 09h	 ; Power Setting value for 3.3V slow      
 0006           POWER_SET_2V7:          equ 06h  ; MASK for 2.7V operation, fast and slow
 0004           POWER_SET_2V7_12MHZ:    equ 04h	 ; MASK for 2.7V, 12MHZ operation
 0002           POWER_SET_2V7_6MHZ:     equ 02h	 ; MASK for 2.7V,  6MHZ operation
 0001           POWER_SET_SLOW_IMO:     equ 01h  ; MASK for slow Internal Main Oscillator (IMO) 
 0000           
 0000           COMM_RX_PRESENT:		equ	0	;1 = TRUE
 0000           WATCHDOG_ENABLE:		equ 0	;Watchdog Enable 1 = Enable
 0000           
 000F           CLOCK_DIV_VC1:			equ	fh	;VC1 clock divider
 00F0           CLOCK_DIV_VC1_MASK:		equ	f0h	;VC1 clock divider mask
 00F0           CLOCK_DIV_VC1_JUST:		equ	f0h	;VC1 clock divider justified
 000F           CLOCK_DIV_VC2:			equ	fh	;VC2 clock divider
 000F           CLOCK_DIV_VC2_MASK:		equ	fh	;VC2 clock divider mask
 000F           CLOCK_DIV_VC2_JUST:		equ	fh	;VC2 clock divider justified
 0002           CLOCK_INPUT_VC3:		equ	2h	;VC3 clock source
 0003           CLOCK_INPUT_VC3_MASK:	equ	3h	;VC3 clock source mask
 0002           CLOCK_INPUT_VC3_JUST:	equ	2h	;VC3 clock source justified
 00FF           CLOCK_DIV_VC3:			equ	ffh	;VC3 clock divider
 00FF           CLOCK_DIV_VC3_MASK:		equ	ffh	;VC3 clock divider mask
 00FF           CLOCK_DIV_VC3_JUST:		equ	ffh	;VC3 clock divider justified
 0000           SYSCLK_SOURCE:				equ	0h ;SysClk Source setting
 0004           SYSCLK_SOURCE_MASK:			equ	4h ;SysClk Source setting mask
 0000           SYSCLK_SOURCE_JUST:			equ	0h ;SysClk Source setting justified
 0000           SYSCLK_2_DISABLE:				equ	0h	;SysClk*2 Disable setting
 0001           SYSCLK_2_DISABLE_MASK:			equ	1h	;SysClk*2 Disable setting mask
 0000           SYSCLK_2_DISABLE_JUST:			equ	0h	;SysClk*2 Disable setting justified
 0000           ;
 0000           ; register initial values
 0000           ;
 0000           ANALOG_IO_CONTROL:		equ 0h	;Analog IO Control register (ABF_CR)
 0004           PORT_0_GLOBAL_SELECT:	equ 4h	;Port 0 global select register (PRT0GS)
 0004           PORT_0_DRIVE_0:			equ 4h	;Port 0 drive mode 0 register (PRT0DM0)
 00FB           PORT_0_DRIVE_1:			equ fbh	;Port 0 drive mode 1 register (PRT0DM1)
 00FB           PORT_0_DRIVE_2:			equ fbh	;Port 0 drive mode 2 register (PRT0DM2)
 0000           PORT_0_INTENABLE:		equ 0h	;Port 0 interrupt enable register (PRT0IE)
 0000           PORT_0_INTCTRL_0:		equ 0h	;Port 0 interrupt control 0 register (PRT0IC0)
 0000           PORT_0_INTCTRL_1:		equ 0h	;Port 0 interrupt control 1 register (PRT0IC1)
 0002           PORT_1_GLOBAL_SELECT:	equ 2h	;Port 1 global select register (PRT1GS)
 001E           PORT_1_DRIVE_0:			equ 1eh	;Port 1 drive mode 0 register (PRT1DM0)
 00E1           PORT_1_DRIVE_1:			equ e1h	;Port 1 drive mode 1 register (PRT1DM1)
 00E1           PORT_1_DRIVE_2:			equ e1h	;Port 1 drive mode 2 register (PRT1DM2)
 0000           PORT_1_INTENABLE:		equ 0h	;Port 1 interrupt enable register (PRT1IE)
 0000           PORT_1_INTCTRL_0:		equ 0h	;Port 1 interrupt control 0 register (PRT1IC0)
 0000           PORT_1_INTCTRL_1:		equ 0h	;Port 1 interrupt control 1 register (PRT1IC1)
 0000           PORT_2_GLOBAL_SELECT:	equ 0h	;Port 2 global select register (PRT2GS)
 0000           PORT_2_DRIVE_0:			equ 0h	;Port 2 drive mode 0 register (PRT2DM0)
 00FF           PORT_2_DRIVE_1:			equ ffh	;Port 2 drive mode 1 register (PRT2DM1)
 00FF           PORT_2_DRIVE_2:			equ ffh	;Port 2 drive mode 2 register (PRT2DM2)
 0000           PORT_2_INTENABLE:		equ 0h	;Port 2 interrupt enable register (PRT2IE)
 0000           PORT_2_INTCTRL_0:		equ 0h	;Port 2 interrupt control 0 register (PRT2IC0)
 0000           PORT_2_INTCTRL_1:		equ 0h	;Port 2 interrupt control 1 register (PRT2IC1)
 0002           PORT_3_GLOBAL_SELECT:	equ 2h	;Port 3 global select register (PRT3GS)
 0002           PORT_3_DRIVE_0:			equ 2h	;Port 3 drive mode 0 register (PRT3DM0)
 000F           PORT_3_DRIVE_1:			equ fh	;Port 3 drive mode 1 register (PRT3DM1)
 000F           PORT_3_DRIVE_2:			equ fh	;Port 3 drive mode 2 register (PRT3DM2)
 0000           PORT_3_INTENABLE:		equ 0h	;Port 3 interrupt enable register (PRT3IE)
 0000           PORT_3_INTCTRL_0:		equ 0h	;Port 3 interrupt control 0 register (PRT3IC0)
 0000           PORT_3_INTCTRL_1:		equ 0h	;Port 3 interrupt control 1 register (PRT3IC1)
 0000           
 0000           ; end of file GlobalParams.inc
 0001           CSD_WIZARD_PROCESSED:                      equ 1
                IF CSD_WIZARD_PROCESSED^1
                "Wizard_was_not_called_after_place_rename_configuration_change_or_update_Open_Chip_Editor_open_Wizard_press_OK_button_and_generate_project"
                ENDIF
                
 0000           CSD_WITH_PWM:                          equ 0h
 0000           CSD_REF_VALUE:                         equ 0x0
 0000           
 0002           CSD_RB_PIN_MASK:                       equ 0x02
 000C           CSD_RB_PORT_DR:                        equ PRT3DR
 000C           CSD_RB_PORT_DM0:                       equ PRT3DM0
 000D           CSD_RB_PORT_DM1:                       equ PRT3DM1
 000F           CSD_RB_PORT_DM2:                       equ PRT3DM2
 0000           
 0001           CSD_FEEDBACK_PIN:                      equ 0x1
 0000           CSD_FEEDBACK_P1_1:                     equ 0x00
 0001           CSD_FEEDBACK_P3_1:                     equ 0x01
 0002           CSD_FEEDBACK_P1_5:                     equ 0x02
 0004           CSD_FEEDBACK_P1_4:                     equ 0x04
 0008           CSD_FEEDBACK_P1_0:                     equ 0x08
 0010           CSD_FEEDBACK_P3_0:                     equ 0x10
 0000           
 0001           CSD_CAPACITOR_PIN:                     equ 1
 0001           CSD_CAPACITOR_P0_1:                    equ 1
 0002           CSD_CAPACITOR_P0_3:                    equ 2
 0000           
 0001           CSD_AUTORESET:                         equ 1
 0000           
 0000           ;--------------------------------------------------
 0000           ; Constants for Scan Speed values
 0000           ;--------------------------------------------------
 0000           CSD_ULTRA_FAST_SPEED:                  equ 0x00
 0001           CSD_FAST_SPEED:                        equ 0x01
 0002           CSD_NORMAL_SPEED:                      equ 0x02
 0003           CSD_SLOW_SPEED:                        equ 0x03
 0000           
 0000           ;--------------------------------------------------
 0000           ; Constants for Resolution values
 0000           ;--------------------------------------------------
 0009           CSD_MIN_RESOLUTION:                    equ 9
 0009           CSD_9_BIT_RESOLUTION:                  equ 9
 000A           CSD_10_BIT_RESOLUTION:                 equ 10
 000B           CSD_11_BIT_RESOLUTION:                 equ 11
 000C           CSD_12_BIT_RESOLUTION:                 equ 12
 000D           CSD_13_BIT_RESOLUTION:                 equ 13
 000E           CSD_14_BIT_RESOLUTION:                 equ 14
 000F           CSD_15_BIT_RESOLUTION:                 equ 15
 0010           CSD_16_BIT_RESOLUTION:                 equ 16
 0010           CSD_MAX_RESOLUTION:                    equ 16
 0000           
 0000           ;--------------------------------------------------
 0000           ; Constants for CSD API's
 0000           ;--------------------------------------------------
 0000           
 0001           CSD_ButtonCount:                       equ 1h
 0000           CSD_SliderCount:                       equ 0h  + 0h
 0001           CSD_TotalSensorCount:                  equ 1h
 0000           
 0001           CSD_BUTTONS_EXIST:                     equ 1h
 0000           CSD_SLIDERS_EXIST:                     equ 0h | 0h
 0000           
 0000           CSD_HYSTERESIS:                                  equ 0h
 0003           CSD_Debounce:                                    equ 3h
 0032           CSD_LowBaselineReset:                            equ 32h
 0000           
 000A           CSD_FINGER_THRESHOLD:                            equ ah
 0014           CSD_NOISE_THRESHOLD:                             equ 14h
 0014           CSD_NEGATIVE_NOISE_THRESHOLD:                    equ 14h
 00C8           CSD_BASELINE_UPDATE_THRESHOLD:                   equ c8h
 0000           
 0000           CSD_DiplexUsed:                        equ 0
 0000           
 0000           ;--------------------------------------------------
 0000           ; Registers Address Constants for CSD
 0000           ;--------------------------------------------------
 0000           
 0020           CSD_CNT_FUNC_REG:                      equ 20h              ; CNT Function Reg
 0021           CSD_CNT_IN_REG:                        equ 21h              ; CNT Input Reg
 0022           CSD_CNT_OUT_REG:                       equ 22h              ; CNT Output Reg
 0020           CSD_CNT_COUNTER_REG:                   equ 20h              ; CNT Counter Reg
 0021           CSD_CNT_PERIOD_REG:                    equ 21h              ; CNT Period Reg
 0022           CSD_CNT_COMPARE_REG:                   equ 22h              ; CNT Compare Reg
 0023           CSD_CNT_CONTROL_REG:                   equ 23h              ; CNT Control Reg
 0000           
 0024           CSD_PRS_FUNC_LSB_REG:                  equ 24h              ; PRS LSB Function Reg
 0025           CSD_PRS_IN_LSB_REG:                    equ 25h              ; PRS LSB Input Reg
 0026           CSD_PRS_OUT_LSB_REG:                   equ 26h              ; PRS LSB Output Reg
 0027           CSD_PRS_CONTROL_LSB_REG:               equ 27h              ; PRS LSB Control Reg
 0024           CSD_PRS_SHIFT_LSB_REG:                 equ 24h              ; PRS LSB Shift Reg
 0025           CSD_PRS_POLY_LSB_REG:                  equ 25h              ; PRS LSB Polynomial Reg
 0026           CSD_PRS_SEED_LSB_REG:                  equ 26h              ; PRS LSB Seed Reg
 0000           
 0028           CSD_PRS_FUNC_MSB_REG:                  equ 28h              ; PRS MSB Function Reg
 0029           CSD_PRS_IN_MSB_REG:                    equ 29h              ; PRS MSB Input Reg
 002A           CSD_PRS_OUT_MSB_REG:                   equ 2ah              ; PRS MSB Output Reg
 002B           CSD_PRS_CONTROL_MSB_REG:               equ 2bh              ; PRS MSB Control Reg
 0028           CSD_PRS_SHIFT_MSB_REG:                 equ 28h              ; PRS MSB Shift Reg
 0029           CSD_PRS_POLY_MSB_REG:                  equ 29h              ; PRS MSB Polynimial Reg
 002A           CSD_PRS_SEED_MSB_REG:                  equ 2ah              ; PRS MSB Seed Reg
 0000           
 0076           CSD_ACE_CONTROL1_REG:                  equ 76h              ; CMP Control Reg
 0077           CSD_ACE_CONTROL2_REG:                  equ 77h              ; CMP Control Reg
 0000           
 0084           CSD_ASE_CONTROL_REG:                   equ 84h              ; CMP_REF Conrol Reg
 00E6           CSD_ADC_TRIM_REG:                      equ e6h              ; ADC Trim Register
 0069           CSD_ADC_CONTROL_REG:                   equ 69h              ; ADC Control Reg
 0000           
 0061           CSD_AMUX_CFG_REG:                      equ AMUX_CFG        ; Analog Mux Configuration Register
 0000           
 0000           DR_OFFSET:                             equ 00h
 0000           DM0_OFFSET:                            equ 00h              ; Bank 1
 0001           DM1_OFFSET:                            equ 01h              ; Bank 1
 0003           DM2_OFFSET:                            equ 03h              ; Bank 0
 00D8           MUX_OFFSET:                            equ MUX_CR0          ; Bank 1
 0000           
 0000           ;--------------------------------------------------
 0000           ; CSD Macro 'Functions'
 0000           ;--------------------------------------------------
 0000           
 0000           macro CSD_Counter_Start_M
 0000              or    reg[CSD_CNT_CONTROL_REG],  CSD_CNT_CONTROL_REG_START_BIT
 0000           macro CSD_Counter_Stop_M
 0000              and   reg[CSD_CNT_CONTROL_REG], ~CSD_CNT_CONTROL_REG_START_BIT
 0000           macro CSD_Counter_EnableInt_M
 0000              M8C_EnableIntMask CSD_CNT_INT_REG, CSD_CNT_INT_MASK
 0000           macro CSD_Counter_DisableInt_M
 0000              M8C_DisableIntMask CSD_CNT_INT_REG, CSD_CNT_INT_MASK
 00E0           CSD_CMP_CMPIntReg:                     equ  0e0h
 0004           CSD_CMP_CMPIntMask:                    equ  04h
 0000           
 0000           CSD_CMP_OFF:                           equ  0
 0001           CSD_CMP_ON:                            equ  1
 0000           
 0000           ;--------------------------------------------------
 0000           ; Constants for CSD_Counter API's.
 0000           ;--------------------------------------------------
 0000           
 0001           CSD_CNT_CONTROL_REG_START_BIT:         equ 0x01             ; Control register start bit
 00E1           CSD_CNT_INT_REG:                       equ 0x0e1
 0001           CSD_CNT_INT_MASK:                      equ 0x01
 0000           
 0000           ;--------------------------------------------------
 0000           ; Constants for CSD_Counter user defined values
 0000           ;--------------------------------------------------
 0000           
 00FF           CSD_CNT_PERIOD:                        equ 0xff
 0000           CSD_CNT_COMPARE_VALUE:                 equ 0x00
 0000           
 0000           ; end of file CSD.inc
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global Labels
 0000           ;-----------------------------------------------
 0000           
 0000           ; Exported functions
                export _CSD_Start
                export  CSD_Start
                export _CSD_Stop
                export  CSD_Stop
                export _CSD_Resume
                export  CSD_Resume
                export _CSD_SetScanMode
                export  CSD_SetScanMode
                export _CSD_ClearSensors
                export  CSD_ClearSensors
                export _CSD_wReadSensor
                export  CSD_wReadSensor
                export _CSD_wGetPortPin
                export  CSD_wGetPortPin
                export _CSD_EnableSensor
                export  CSD_EnableSensor
                export _CSD_DisableSensor
                export  CSD_DisableSensor
                export _CSD_ScanSensor
                export  CSD_ScanSensor
                export _CSD_ScanAllSensors
                export  CSD_ScanAllSensors
                export _CSD_SetRefValue
                export  CSD_SetRefValue
                
                ; Exported variables
                export  CSD_bSensorNum
                export _CSD_bSensorNum
                export  CSD_waSnsResult
                export _CSD_waSnsResult
                export  CSD_wADC_Result
                export _CSD_wADC_Result
                
                export  CSD_bADCStatus
                export _CSD_bADCStatus
                export  CSD_MaxADCValueMSB
                
                ; Exported tables
                export  CSD_VC1_Table
                
                AREA bss
                
                ;@PSoC_UserCode_INIT@ (Do not change this line.)
                ;---------------------------------------------------
                ; Insert your custom declarations below this banner
                ;---------------------------------------------------
                
                ;------------------------
                ; User Includes
                ;------------------------
                
                
                ;------------------------
                ; User Constant Definitions
                ;------------------------
                
                
                ;------------------------
                ; User Variable Allocation
                ;------------------------
                
                
                ;---------------------------------------------------
                ; Insert your custom declarations above this banner
                ;---------------------------------------------------
                ;@PSoC_UserCode_END@ (Do not change this line.)
                
                
                ;-----------------------------------------------
                ; Variable Allocation
                ;-----------------------------------------------
                AREA bss
 0000           _CSD_waSnsResult:                               ; Current raw results
 0000            CSD_waSnsResult:                       BLK  (2*CSD_TotalSensorCount)
 0002           
                AREA InterruptRAM (RAM, REL, CON)
                
 0000            CSD_MaxADCValueMSB:                    BLK 1
 0001           
 0001            CSD_wADC_Result:
 0001           _CSD_wADC_Result:                       BLK 2
 0003           
 0003            CSD_bADCStatus:
 0003           _CSD_bADCStatus:                        BLK 1
 0004           
 0004            CSD_bScanTime:                         BLK 1
 0005           
 0005            CSD_bRefValue:                         BLK 1
 0006           
 0006            CSD_bBitMask:                          BLK  1  ; Temp bitmask byte
 0007           _CSD_bSensorNum:                                ; Current sensor to scan
 0007            CSD_bSensorNum:                        BLK  1
 0008           
                AREA UserModules (ROM, REL, CON)
                
 0001           LSB:  equ  1
 0000           MSB:  equ  0
 0000           
 0000           ;@PSoC_UserCode_BODY1@ (Do not change this line.)
 0000           
                IF (CPU_CLOCK_JUST - OSC_CR0_CPU_24MHz)
 0014             CSD_DELAY:   equ     20
                ELSE
                  CSD_DELAY:   equ     40
                ENDIF
                
                ;---------------------------------
                ; Tables for Scan Speed and Resolution
                ;---------------------------------
 0000           .LITERAL
 0000           
 0000           CSD_VC1_Table:
 0000 07173777    DB    0x07, 0x17, 0x37, 0x77
 0004           
 0004           CSD_VC3_Table:
 0004 0F1F3F7FFFFFFFFF   DB    0x0F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF
 000C           
 000C           CSD_PWM_Table:                                     ; Dedicated PWM settings
 000C 1A1A1A1A1A222A32   DB    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x22, 0x2A, 0x32
 0014           
                IF (CSD_WITH_PWM)
                ELSE
 0014           CSD_PRS_Poly_Table:
 0014 011003FC03FC07C80D3413C83DAE3DAE3DAE3DAE3DAE   DW    0x0110, 0x03FC, 0x03FC, 0x07C8, 0x0D34, 0x13C8, 0x3DAE, 0x3DAE, 0x3DAE, 0x3DAE, 0x3DAE  ;  PRS16 polynomials table
 002A           
 002A           CSD_PRS_Seed_Table:
 002A 00200040004000800100020004000400040004000400   DW    0x0020, 0x0040, 0x0040, 0x0080, 0x0100, 0x0200, 0x0400, 0x0400, 0x0400, 0x0400, 0x0400  ;  PRS16 seed values table
                ENDIF
                
 0040           .ENDLITERAL
 0040           
 00B8           CSD_PRS8_Poly:     equ     0xB8;
 0040           
 0040           ;@PSoC_UserCode_END@ (Do not change this line.)
 0040           
 0040           
 0040           .SECTION
 0040           ;-----------------------------------------------------------------------------
 0040           ;  FUNCTION NAME: CSD_Start(void)
 0040           ;
 0040           ;  DESCRIPTION:
 0040           ;  Connects external cap; sets up comparator
 0040           ;  disables all possible analog mux bus
 0040           ;  connections; shunts all sensor pins to ground.
 0040           ;
 0040           ;-----------------------------------------------------------------------------
 0040           ;
 0040           ;  ARGUMENTS:
 0040           ;    None
 0040           ;
 0040           ;  RETURNS:      None.
 0040           ;  SIDE EFFECTS:
 0040           ;    The A and X registers may be modified by this or future implementations
 0040           ;    of this function.  The same is true for all RAM page pointer registers in
 0040           ;    the Large Memory Model.  When necessary, it is the calling function's
 0040           ;    responsibility to perserve their values across calls to fastcall16
 0040           ;    functions.
 0040           ;
 0040            CSD_Start:
 0040           _CSD_Start:
 0040           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0040 70BF            and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0042 62D000          mov reg[CUR_PP], 0
                   ENDIF
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0045 62D300          mov reg[IDX_PP], >CSD_baSnsOnMask
                   ENDIF
 0048 5700         mov   X, (CSD_TotalSensorCount-1)/8
 004A           .NullingCycle:
 004A 560000       mov   [X + <CSD_baSnsOnMask], 0
 004D 79           dec   X
 004E DFFB         jnc   .NullingCycle
 0050           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0050 62D300          mov reg[IDX_PP], >CSD_baLowBaselineReset
                   ENDIF
 0053 5700         mov   X, (CSD_TotalSensorCount-1)
 0055           .InitCycle:
 0055 560003       mov   [X + CSD_baSnsDebounce], CSD_Debounce
 0058 560032       mov   [X + <CSD_baLowBaselineReset], CSD_LowBaselineReset
 005B 79           dec   X
 005C DFF8         jnc   .InitCycle
 005E           
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 005E 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0060 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 0062 550014       mov   [CSD_bNoiseThreshold], CSD_NOISE_THRESHOLD
 0065 550014       mov   [CSD_bNegativeNoiseThreshold], CSD_NEGATIVE_NOISE_THRESHOLD
 0068 5500C8       mov   [CSD_bBaselineUpdateThreshold], CSD_BASELINE_UPDATE_THRESHOLD
 006B 550000       mov   [CSD_bHysteresis], CSD_HYSTERESIS
 006E 550003       mov   [CSD_bDebounce], CSD_Debounce
 0071 550032       mov   [CSD_bLowBaselineReset], CSD_LowBaselineReset
 0074 550500       mov   [CSD_bRefValue], CSD_REF_VALUE
 0077           
 0077 5003         mov   A, 3
 0079 5710         mov   X, 0x10
 007B 9005         call  CSD_SetScanMode
 007D           
 007D 90DE         call  CSD_Resume
 007F 90B1         call  CSD_ClearSensors                             ; Loop through all sensors and deactivates them
 0081           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0081 7F           ret
 0082           .ENDSECTION
 0082           
 0082           .SECTION
 0082           ;-----------------------------------------------------------------------------
 0082           ;  FUNCTION NAME: CSD_SetScanMode
 0082           ;
 0082           ;  DESCRIPTION:
 0082           ;  Set clocking (VC1, VC2, VC3 etc)  accordig to required Scan Speed and Resolution
 0082           ;  INPUT:
 0082           ;  A - BYTE bSpeed  - scan speed code from 0 to 3
 0082           ;  X - BYTE bResolution - resolution [9..14]
 0082           ;
 0082           ;  RETURNS:      None.
 0082           ;  SIDE EFFECTS:
 0082           ;    Uses CSD_wADC_Result variable as temporary registers
 0082           ;
 0082           ;-----------------------------------------------------------------------------
 0082           _CSD_SetScanMode:
 0082            CSD_SetScanMode:
 0082           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0082 62D000          mov reg[CUR_PP], 0
                   ENDIF
 0085 3904         cmp   A, CSD_SLOW_SPEED + 1          ; if (bSpeed > SLOW_SPEED)  bSpeed = SLOW_SPEED
 0087 C003         jc    .SpeedOk
 0089 5003         mov   A, CSD_SLOW_SPEED
 008B           .SpeedOk:
 008B 5301         mov   [CSD_wADC_Result], A           ; _wADC_Result := bSpeed
 008D 4B           swap  A, X                                        ; A := bResolution
 008E 3911         cmp   A, CSD_MAX_RESOLUTION + 1      ; if (bResolution > MAX_RESOLUTION)  bResolution = MAX_RESOLUTION
 0090 C003         jc    .ResolutionOk
 0092 5010         mov   A, CSD_MAX_RESOLUTION
 0094           .ResolutionOk:
 0094           
 0094 5302         mov   [CSD_wADC_Result+1], A         ; _wADC_Result+1 := bResolution
 0096           
 0096 160209       sub   [CSD_wADC_Result+1], CSD_MIN_RESOLUTION   ; Remove offset - now Resolution code is from 0
 0099           
 0099 70EF          and   F, ~FLAG_XIO_MASK
 009B           
                IF (CSD_WITH_PWM)
                   and   reg[CSD_PRS_CONTROL_REG], ~0x01    ; stop the PRS8
                   mov   reg[CSD_PRS_SEED_REG], 0x01        ; Seed := 1
                   mov   reg[CSD_PRS_POLY_REG], CSD_PRS8_Poly
                   or    reg[CSD_PRS_CONTROL_REG], 0x01     ; start the PRS8
                
                ELSE
 009B 4127FE       and   reg[CSD_PRS_CONTROL_LSB_REG], ~0x01    ;stop the PRS16
 009E 622601       mov   reg[CSD_PRS_SEED_LSB_REG], 0x01        ; Seed := 1
 00A1 622A00       mov   reg[CSD_PRS_SEED_MSB_REG], 0x00
 00A4           
 00A4 5102         mov   A, [CSD_wADC_Result+1]                 ; A := (bResolution-9)
 00A6 0201         add   A, [CSD_wADC_Result]
 00A8 64           asl   A                                           ; A := byte offset in PRS Poly table
 00A9 5304         mov   [CSD_bScanTime], A
 00AB 74           inc   A
 00AC FF66         index CSD_PRS_Poly_Table             ; A := LSB poly
 00AE 6025         mov   reg[CSD_PRS_POLY_LSB_REG], A
 00B0 5104         mov   A, [CSD_bScanTime]
 00B2 FF60         index CSD_PRS_Poly_Table             ; A := MSB poly
 00B4 6029         mov   reg[CSD_PRS_POLY_MSB_REG], A
 00B6           
 00B6 432701       or    reg[CSD_PRS_CONTROL_LSB_REG], 0x01    ;start the PRS16
                ENDIF
                
 00B9 5102         mov   A, [CSD_wADC_Result+1]         ; A := bResolution
 00BB FF4F         index CSD_PWM_Table
 00BD 6062         mov   reg[PWM_CR], A
 00BF           
 00BF 7110          or    F, FLAG_XIO_MASK
 00C1           
 00C1 62DE02       mov   reg[OSC_CR4], 0x02                          ; Set VC2 as clock source for VC3
 00C4 5102         mov   A, [CSD_wADC_Result+1]         ; A := bResolution
 00C6 FF3C         index CSD_VC3_Table
 00C8 60DF         mov   reg[OSC_CR3], A                             ; Set VC3
 00CA           
 00CA 5101         mov   A, [CSD_wADC_Result]           ; A := bSpeed
 00CC FF32         index CSD_VC1_Table
 00CE 60E1         mov   reg[OSC_CR1], A
 00D0           
 00D0 5101         mov   A, [CSD_wADC_Result]           ; A := bSpeed
 00D2 B009         jnz   .NotUltraFast
 00D4           
 00D4 626B44       mov   reg[CLK_CR3], 0x44                          ; column clock by SysCLK direct
 00D7 4322C0       or    reg[CSD_CNT_OUT_REG], 0xC0     ; Use SysCLK direct
 00DA 800A         jmp   .Continue
 00DC           
 00DC           .NotUltraFast:
 00DC 626B00       mov   reg[CLK_CR3], 0x00                          ; Set VC1 as column clock source
 00DF 432240       or    reg[CSD_CNT_OUT_REG], 0x40     ; Sync to SysClk
 00E2 41227F       and   reg[CSD_CNT_OUT_REG], ~0x80
 00E5           
 00E5           .Continue:
 00E5 70EF          and   F, ~FLAG_XIO_MASK
 00E7           
 00E7 5102         mov   A, [CSD_wADC_Result+1] ; A = (bResolution-9)
 00E9 F007         index CSD_Max_ADC_Value_MSB_Table
 00EB 5300         mov   [CSD_MaxADCValueMSB], A ; Store MSB of max Raw data value   
 00ED              
 00ED 5105         mov   A, [CSD_bRefValue]
 00EF 9009         call  CSD_SetRefValue
 00F1           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 00F1 7F           ret
 00F2           
 00F2           .ENDSECTION
 00F2           
 00F2           ;---------------------------------
 00F2           ; Table for MSB of Max Raw data Values
 00F2           ;---------------------------------
 00F2           .LITERAL
 00F2           CSD_Max_ADC_Value_MSB_Table:
 00F2 0103070F1F3F7FFF   DB    0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF
 00FA           
 00FA           .ENDLITERAL
 00FA           
 00FA           .SECTION
 00FA           ;-----------------------------------------------------------------------------
 00FA           ;  FUNCTION NAME: CSD_SetRefValue
 00FA           ;
 00FA           ;  DESCRIPTION:
 00FA           ;  Set reference voltage by adjusting compare value for PRS or PWM
 00FA           ;  INPUT:
 00FA           ;  A - BYTE bRefValue  - Ref voltage code from 0 to 8
 00FA           ;                        0 -> Ref = 1/4 * Vcc
 00FA           ;                        8 -> Ref = 3/4 * Vcc
 00FA           ;
 00FA           ;  RETURNS:      None.
 00FA           ;  SIDE EFFECTS:
 00FA           ;    Uses CSD_wADC_Result and CSD_bADCStatus
 00FA           ;           variables as temporary registers
 00FA           ;
 00FA           ;-----------------------------------------------------------------------------
 00FA           _CSD_SetRefValue:
 00FA            CSD_SetRefValue:
 00FA           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00FA 62D000          mov reg[CUR_PP], 0
                   ENDIF
                
 00FD 3909         cmp   A, 9
 00FF C003         jc    .ValueOk
 0101 5008         mov   A, 8
 0103           .ValueOk:
 0103 5305         mov   [CSD_bRefValue], A
 0105 0104         add   A, 4
 0107 5303         mov   [CSD_bADCStatus], A
 0109           
                IF (CSD_WITH_PWM)
                   mov   [CSD_wADC_Result + LSB], CSD_PWM_PERIOD
                   mov   [CSD_wADC_Result + MSB], 0
                   inc   [CSD_wADC_Result + LSB]
                   adc   [CSD_wADC_Result + MSB], 0
                
                   mov   X, [CSD_wADC_Result + LSB]
                   mov   A, [CSD_wADC_Result + MSB]
                
                .L0:
                   dec   [CSD_bADCStatus]
                   jz    .Ready
                   swap  A, X
                   add   [CSD_wADC_Result + LSB], A
                   swap  A, X
                   adc   [CSD_wADC_Result + MSB], A
                   jmp   .L0
                .Ready:
                
                   mov   A, 4
                .L1:
                   asr   [CSD_wADC_Result + MSB]
                   rrc   [CSD_wADC_Result + LSB]
                   dec   A
                   jnz   .L1
                
                   mov   A, [CSD_wADC_Result + LSB]
                   jz    .L2
                   dec   A
                .L2:
                   mov   reg[CSD_PWM_COMPARE_REG], A
                ELSE
 0109 5104         mov   A, [CSD_bScanTime]
 010B 74           inc   A
 010C FF1C         index CSD_PRS_Seed_Table             ; A := LSB seed
 010E 5302         mov   [CSD_wADC_Result + LSB], A
 0110 5C           mov   X, A                                        ; V := LSB seed
 0111 5104         mov   A, [CSD_bScanTime]
 0113 FF15         index CSD_PRS_Seed_Table             ; A := MSB seed
 0115 5301         mov   [CSD_wADC_Result + MSB], A
 0117           
 0117           .L0:
 0117 7A03         dec   [CSD_bADCStatus]
 0119 A009         jz    .Ready
 011B 4B           swap  A, X
 011C 0402         add   [CSD_wADC_Result + LSB], A
 011E 4B           swap  A, X
 011F 0C01         adc   [CSD_wADC_Result + MSB], A
 0121 8FF5         jmp   .L0
 0123           .Ready:
 0123 4127FE       and   reg[CSD_PRS_CONTROL_LSB_REG], ~0x01    ;stop the PRS16
 0126 5102         mov   A, [CSD_wADC_Result + LSB]
 0128 6026         mov   reg[CSD_PRS_SEED_LSB_REG], A
 012A 5101         mov   A, [CSD_wADC_Result + MSB]
 012C 602A         mov   reg[CSD_PRS_SEED_MSB_REG], A
 012E 432701       or    reg[CSD_PRS_CONTROL_LSB_REG], 0x01    ;start the PRS16
                ENDIF
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0131 7F           ret
 0132           .ENDSECTION
 0132           
 0132           .SECTION
 0132           ;-----------------------------------------------------------------------------
 0132           ;  FUNCTION NAME: CSD_ClearSensors(void)
 0132           ;
 0132           ;  DESCRIPTION:
 0132           ;    Clears all sensor connections to the analog mux bus and shunts all sensor
 0132           ;    pins to ground.
 0132           ;
 0132           ;-----------------------------------------------------------------------------
 0132           ;
 0132           ;  ARGUMENTS:    None.
 0132           ;  RETURNS:      None
 0132           ;  SIDE EFFECTS:
 0132           ;    The A and X registers may be modified by this or future implementations
 0132           ;    of this function.  The same is true for all RAM page pointer registers in
 0132           ;    the Large Memory Model.  When necessary, it is the calling function's
 0132           ;    responsibility to perserve their values across calls to fastcall16
 0132           ;    functions.
 0132           ;
 0132            CSD_ClearSensors:
 0132           _CSD_ClearSensors:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0132 5000         mov   A, (CSD_TotalSensorCount - 1)
 0134           .InitLoop:                                              ; Loop through all sensors and deactivate
 0134 08           push  A
 0135 904E         call  CSD_wGetPortPin
 0137 9083         call  CSD_DisableSensor
 0139 18           pop   A
 013A 78           dec   A
 013B DFF8         jnc   .InitLoop
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 013D 7F           ret
 013E           .ENDSECTION
 013E           
 013E           .SECTION
 013E           ;-----------------------------------------------------------------------------
 013E           ;  FUNCTION NAME: CSD_Stop(void)
 013E           ;
 013E           ;  DESCRIPTION:
 013E           ;  Disables RO interrupt; disables the relaxation oscillator circuitry;
 013E           ;  clears scan active flag; disables all sensors and shunts them to ground.
 013E           ;
 013E           ;-----------------------------------------------------------------------------
 013E           ;
 013E           ;  ARGUMENTS:    None.
 013E           ;  RETURNS:      Nothing.
 013E           ;  SIDE EFFECTS:
 013E           ;    The A and X registers may be modified by this or future implementations
 013E           ;    of this function.  The same is true for all RAM page pointer registers in
 013E           ;    the Large Memory Model.  When necessary, it is the calling function's
 013E           ;    responsibility to perserve their values across calls to fastcall16
 013E           ;    functions.
 013E           ;
 013E            CSD_Stop:
 013E           _CSD_Stop:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 013E 7110          or    F, FLAG_XIO_MASK
 0140 626600       mov   reg[AMD_CR1], 0x00          ; Disable Analog modulator
 0143           
                IF  (1 & CSD_FEEDBACK_P1_5)
                   and   reg[CMP_GO_EN], ~0x80       ; Disconnect CMP bus from GOO
                ELSE
                 IF  (CSD_FEEDBACK_PIN & CSD_FEEDBACK_P1_4)
                   and   reg[CMP_GO_EN], ~0x0A      ;GOO4 is driven by Comparator_0 output after single sync
                    and   F, ~FLAG_XIO_MASK
                   mov   reg[ACE00CR2], ~0x03       ; ACE00 enable
                 ELSE 
                  IF  (CSD_FEEDBACK_PIN & (CSD_FEEDBACK_P1_0 | CSD_FEEDBACK_P3_0))
                   and   reg[CMP_GO_EN], ~0x06      ;GOO0 is driven by Comparator_0 output after single sync
                    and   F, ~FLAG_XIO_MASK
                   mov   reg[ACE00CR2], ~0x03       ; ACE00 enable
                  ELSE
 0143 4164BF       and   reg[CMP_GO_EN], ~0x40
                  ENDIF
                 ENDIF  
                ENDIF
                
 0146 70EF          and   F, ~FLAG_XIO_MASK
 0148 4169DF       and   reg[ADC1_CR], ~0x20          ; Sample and Hold Disable.
 014B           
 014B           
                IF (CSD_WITH_PWM)
                   and   reg[CSD_PWM_CONTROL_REG], ~0x01                             ; Stop PWM
                   and   reg[CSD_PRS_CONTROL_REG], ~0x01                             ; stop the PRS8
                ELSE
 014B 4127FE       and   reg[CSD_PRS_CONTROL_LSB_REG], ~0x01                         ; Stop the PRS16
                ENDIF
                
 014E 9FE2         call  CSD_ClearSensors                                            ; Loop through all keys and deactivate
 0150 4177FC       and   reg[CSD_ACE_CONTROL2_REG], ~0x03                            ; Stop analog comparator
 0153 626100       mov   reg[CSD_AMUX_CFG_REG], 0                                            ; Disable external cap
 0156           
 0156 62E600       mov   reg[DEC_CR0], 0x00                                          ; Disable dedicated PWM gating the Comp0
 0159 4164FE       and   reg[CMP_CR0], ~0x01                                         ; Disable dedicated PWM as the interrupt source
 015C           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 015C 7F           ret
 015D           .ENDSECTION
 015D           
 015D           .SECTION
 015D           ;-----------------------------------------------------------------------------
 015D           ;  FUNCTION NAME: CSD_Resume(void)
 015D           ;
 015D           ;  DESCRIPTION:
 015D           ;
 015D           ;    Resumes CSD operation after Stop() call
 015D           ;-----------------------------------------------------------------------------
 015D           ;
 015D           ;  ARGUMENTS:    None.
 015D           ;  RETURNS:      Nothing.
 015D           ;  SIDE EFFECTS:
 015D           ;    The A and X registers may be modified by this or future implementations
 015D           ;    of this function.  The same is true for all RAM page pointer registers in
 015D           ;    the Large Memory Model.  When necessary, it is the calling function's
 015D           ;    responsibility to perserve their values across calls to fastcall16
 015D           ;    functions.
 015D           ;
 015D            CSD_Resume:
 015D           _CSD_Resume:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 015D 437703       or    reg[CSD_ACE_CONTROL2_REG], 0x03  ; Start analog comparator
 0160           
                IF (CSD_CAPACITOR_PIN & CSD_CAPACITOR_P0_1)
 0160 436117       or    reg[CSD_AMUX_CFG_REG], 0x17      ; Capacitor on P0.1  and muxbus clocked from Row0Broadcast
 0163 5700         mov   X, 00h                  ; Wizard bug workaround: connect modulator capacitor manually
 0165 5002         mov   A, 02h
 0167 9025         call  CSD_EnableSensor
                ELSE
                   or    reg[CSD_AMUX_CFG_REG], 0x27      ; Capacitor on P0.3  and muxbus clocked from Row0Broadcast
                   mov   X, 00h                  ; Wizard bug workaround: connect modulator capacitor manually
                   mov   A, 08h
                   call  CSD_EnableSensor
                ENDIF
                
 0169 7110          or    F, FLAG_XIO_MASK
 016B 626602       mov   reg[AMD_CR1], 0x02         ; Analog modulator from GOE0
 016E 437640       or    reg[ACE01CR1], 0x40        ; Enable CompBus for CMP
                IF  (CSD_FEEDBACK_PIN & CSD_FEEDBACK_P1_5)
                   mov   reg[CMP_GO_EN], 0x80      ; CMP_Bus 1 -> GOO5
                ELSE
                 IF  (CSD_FEEDBACK_PIN & CSD_FEEDBACK_P1_4)
                   mov   reg[CMP_GO_EN], 0x0A      ;GOO4 is driven by Comparator_0 output after single sync
                    and   F, ~FLAG_XIO_MASK
                   mov   reg[ACE00CR2], 0x03       ; ACE00 enable
                 ELSE 
                  IF  (CSD_FEEDBACK_PIN & (CSD_FEEDBACK_P1_0 | CSD_FEEDBACK_P3_0))
                   mov   reg[CMP_GO_EN], 0x06      ;GOO0 is driven by Comparator_0 output after single sync
                    and   F, ~FLAG_XIO_MASK
                   mov   reg[ACE00CR2], 0x03       ; ACE00 enable
                  ELSE  
 0171 626440       mov   reg[CMP_GO_EN], 0x40      ; CMP_Bus 1 -> GOO1 
                  ENDIF
                 ENDIF
                ENDIF
 0174 70EF          and   F, ~FLAG_XIO_MASK
 0176              
 0176 436920       or    reg[ADC1_CR], 0x20      ; Sample and Hold Enable.
 0179 62E610       mov   reg[DEC_CR0], 0x10      ; The dedicated PWM gates the Comp0
 017C 436401       or    reg[CMP_CR0], 0x01      ; Sets dedicated PWM as the interrupt source
 017F              
                IF (CSD_WITH_PWM)
                   or    reg[CSD_PRS_CONTROL_REG], 0x01                              ; Start the PRS8
                   mov   reg[CSD_PWM_PERIOD_REG], CSD_PWM_PERIOD ; Set PWM period  
                   or    reg[CSD_PWM_CONTROL_REG], 0x01                              ; Start the PWM
                ELSE
 017F 432701       or    reg[CSD_PRS_CONTROL_LSB_REG], 0x01                          ; Start the PRS16
                ENDIF
                   
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0182 7F           ret
 0183           .ENDSECTION
 0183           
                IF (CSD_TotalSensorCount)
 0183           .LITERAL
                ENDIF
 0183            CSD_Sensor_Table2:
 0183           _CSD_Sensor_Table2:
 0183 0201              dw      0x0201  // Port 2 Bit 0
 0185           
                IF (CSD_TotalSensorCount)
 0185           .ENDLITERAL
                ENDIF
                
 0185           .SECTION
 0185           ;-----------------------------------------------------------------------------
 0185           ;  FUNCTION NAME: CSD_wGetPortPin(BYTE bSensor)
 0185           ;
 0185           ;  DESCRIPTION:
 0185           ;      Returns the port and pin mask from a given key number.  This function
 0185           ;      uses the table CSD_Sensor_Table to retreive this
 0185           ;      information.
 0185           ;-----------------------------------------------------------------------------
 0185           ;
 0185           ;  ARGUMENTS:
 0185           ;        A => Sensor Number  ( 0 to n )
 0185           ;  RETURNS:
 0185           ;        A  <=  Sensor Bitmap
 0185           ;        X  <=  Port Number
 0185           ;
 0185           ;  SIDE EFFECTS:
 0185           ;    The A and X registers may be modified by this or future implementations
 0185           ;    of this function.  The same is true for all RAM page pointer registers in
 0185           ;    the Large Memory Model.  When necessary, it is the calling function's
 0185           ;    responsibility to perserve their values across calls to fastcall16
 0185           ;    functions.
 0185           ;
 0185            CSD_wGetPortPin:
 0185           _CSD_wGetPortPin:
 0185           
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0185 64           asl   A                                       ; multiply key by 2 since table is 2 bytes per key
 0186 5C           mov   X,A                                     ; Copy index*2 in x for next value
 0187 FFFA         index CSD_Sensor_Table2                       ; A contains the port value
 0189 4B           swap  A,X                                     ; Place port value in X and index*2 in A
 018A 74           inc   A                                       ; Advance to next value (bitMask)
 018B FFF6         index CSD_Sensor_Table2                       ; A contains bitMask, X has port number
 018D           
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 018D 7F           ret
 018E           
 018E           .ENDSECTION
 018E           
 018E           
 018E           .SECTION
 018E           ;-----------------------------------------------------------------------------
 018E           ;  FUNCTION NAME: CSD_EnableSensor(BYTE bSensorMask, BYTE bPort)
 018E           ;
 018E           ;  DESCRIPTION:
 018E           ;    Configures sensor to be an input to be measure duirng next measurement
 018E           ;    cycle.  This function does not clear the last sensor.
 018E           ;    Place key port in Analog Hi-Z mode and enables the correct mux input.
 018E           ;-----------------------------------------------------------------------------
 018E           ;
 018E           ;  ARGUMENTS:
 018E           ;          X =>  Port Number for given key
 018E           ;          A =>  Bit mask for given sensor
 018E           ;
 018E           ;  RETURNS:      none
 018E           ;
 018E           ;  SIDE EFFECTS:
 018E           ;    The A and X registers may be modified by this or future implementations
 018E           ;    of this function.  The same is true for all RAM page pointer registers in
 018E           ;    the Large Memory Model.  When necessary, it is the calling function's
 018E           ;    responsibility to perserve their values across calls to fastcall16
 018E           ;    functions.
 018E           ;
 018E           
 018E            CSD_EnableSensor:
 018E           _CSD_EnableSensor:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 018E 62D000          mov reg[CUR_PP], 0
                   ENDIF
                                                                 ; Setup Mux for sensor
 0191 5306         mov   [CSD_bBitMask],A                        ; Store bit mask in temp location
 0193 10           push  X
 0194 5B           mov   A,X                                     ; Multiply port number by four for registor addresses
 0195 64           asl   A
 0196 64           asl   A
 0197 5C           mov   X,A                                     ; Restore Port address in X
 0198                                                            ; Set mode do 110  (Hi-Z Analog)
 0198 5E03         mov   A,reg[X+DM2_OFFSET]                     ; Set DM2 to 1
 019A 2A06         or    A,[CSD_bBitMask]
 019C 6103         mov   reg[X+DM2_OFFSET],A
 019E 7110          or    F, FLAG_XIO_MASK
 01A0 5E01         mov   A,reg[X+DM1_OFFSET]                     ; Set DM1 to 1
 01A2 2A06         or    A,[CSD_bBitMask]
 01A4 6101         mov   reg[X+DM1_OFFSET],A
 01A6 3606FF       xor   [CSD_bBitMask],FFh                      ; Invert bitmask
 01A9 5E00         mov   A,reg[X+DM0_OFFSET]                     ; Clear DM0 bit to 0
 01AB 2206         and   A,[CSD_bBitMask]
 01AD 6100         mov   reg[X+DM0_OFFSET],A
 01AF           
 01AF 20           pop   X
 01B0 3606FF       xor   [CSD_bBitMask],FFh                      ; Invert bitmask
 01B3 5ED8         mov   A,reg[X+MUX_OFFSET]
 01B5 2A06         or    A,[CSD_bBitMask]
 01B7 61D8         mov   reg[X+MUX_OFFSET],A
 01B9 70EF          and   F, ~FLAG_XIO_MASK
 01BB           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01BB 7F           ret
 01BC           .ENDSECTION
 01BC           
 01BC           .SECTION
 01BC           ;-----------------------------------------------------------------------------
 01BC           ;  FUNCTION NAME: CSD_DisableSensor(BYTE bMask, BYTE bPort)
 01BC           ;
 01BC           ;  DESCRIPTION:
 01BC           ;    Disconnects the desired sensor from the analog mux bus and shunts to
 01BC           ;    ground.
 01BC           ;-----------------------------------------------------------------------------
 01BC           ;
 01BC           ;  ARGUMENTS:
 01BC           ;          X =>  Port Number for given key
 01BC           ;          A =>  Bit mask for given sensor
 01BC           ;
 01BC           ;  RETURNS:      none
 01BC           ;
 01BC           ;  SIDE EFFECTS:
 01BC           ;    The A and X registers may be modified by this or future implementations
 01BC           ;    of this function.  The same is true for all RAM page pointer registers in
 01BC           ;    the Large Memory Model.  When necessary, it is the calling function's
 01BC           ;    responsibility to perserve their values across calls to fastcall16
 01BC           ;    functions.
 01BC           ;
 01BC            CSD_DisableSensor:
 01BC           _CSD_DisableSensor:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 01BC 62D000          mov reg[CUR_PP], 0
                   ENDIF
                                                                 ; Disconnect sensor from mux
 01BF 73           cpl  A                                        ; Invert bitmask
 01C0 5306         mov  [CSD_bBitMask],A                         ; Store bit mask in temp location
 01C2 7110          or    F, FLAG_XIO_MASK
 01C4 5ED8         mov  A,reg[X+MUX_OFFSET]
 01C6 2206         and  A,[CSD_bBitMask]
 01C8 61D8         mov  reg[X+MUX_OFFSET],A
 01CA 70EF          and   F, ~FLAG_XIO_MASK
 01CC           
 01CC 5B           mov  A,X                                      ; Multiply port number by for for registor addresses
 01CD 64           asl  A
 01CE 64           asl  A
 01CF 5C           mov  X,A                                      ; Restore Port address in X
 01D0                                                            ; Set mode do 001  (Digital Strong)
 01D0 5E03         mov  A,reg[X+DM2_OFFSET]                      ; Set DM2 to 0
 01D2 2206         and  A,[CSD_bBitMask]
 01D4 6103         mov  reg[X+DM2_OFFSET],A
 01D6           
 01D6 7110          or    F, FLAG_XIO_MASK
 01D8 5E01         mov  A,reg[X+DM1_OFFSET]                      ; Set DM1 to 0
 01DA 2206         and  A,[CSD_bBitMask]
 01DC 6101         mov  reg[X+DM1_OFFSET],A
 01DE           
 01DE 3606FF       xor  [CSD_bBitMask],FFh                       ; Invert bitmask back to normal
 01E1 5E00         mov  A,reg[X+DM0_OFFSET]                      ; Set DM0 bit to 1
 01E3 2A06         or   A,[CSD_bBitMask]
 01E5 6100         mov  reg[X+DM0_OFFSET],A
 01E7 70EF          and   F, ~FLAG_XIO_MASK
 01E9           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01E9 7F           ret
 01EA           .ENDSECTION
 01EA           
 01EA           .SECTION
 01EA           ;-----------------------------------------------------------------------------
 01EA           ;  FUNCTION NAME: CSD_ScanSensor(BYTE bStrtIdx)
 01EA           ;
 01EA           ;  DESCRIPTION:
 01EA           ;  Uses the CapSense switching circuitry to charge to the starting voltage.
 01EA           ;  Then a fixed slope ramp is used to measure the starting voltage with a
 01EA           ;  16 bit timer.
 01EA           ;
 01EA           ;-----------------------------------------------------------------------------
 01EA           ;
 01EA           ;  ARGUMENTS:
 01EA           ;      A  => Sensor Index
 01EA           ;
 01EA           ;  RETURNS:      None
 01EA           ;  SIDE EFFECTS:
 01EA           ;    The A and X registers may be modified by this or future implementations
 01EA           ;    of this function.  The same is true for all RAM page pointer registers in
 01EA           ;    the Large Memory Model.  When necessary, it is the calling function's
 01EA           ;    responsibility to perserve their values across calls to fastcall16
 01EA           ;    functions.
 01EA           ;
 01EA            CSD_ScanSensor:
 01EA           _CSD_ScanSensor:
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 01EA 70BF            and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 01EC 62D000          mov reg[CUR_PP], 0
                   ENDIF
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 01EF 70BF            and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                
 01F1 5307         mov   [CSD_bSensorNum], A
 01F3 9F90         call  CSD_wGetPortPin
 01F5 9F97         call  CSD_EnableSensor
 01F7           
 01F7 9060         call  CSD_Precharge   
 01F9              
 01F9 70EF          and   F, ~FLAG_XIO_MASK
 01FB           
 01FB 62DAFD       mov   reg[INT_CLR0], ~INT_MSK0_ACOLUMN_0;
 01FE 43E002        or    reg[INT_MSK0], INT_MSK0_ACOLUMN_0               ; enable specified interrupt enable bit
 0201           
 0201 62DBFE       mov   reg[INT_CLR1], ~CSD_CNT_INT_MASK
 0204 6221FF       mov   reg[CSD_CNT_PERIOD_REG], 0xFF
 0207 43E101        or    reg[CSD_CNT_INT_REG], CSD_CNT_INT_MASK               ; enable specified interrupt enable bit
 020A           
 020A 5000         mov   A, 0
 020C 5303         mov   [CSD_bADCStatus], A
 020E 5301         mov   [CSD_wADC_Result+MSB], A
 0210 5302         mov   [CSD_wADC_Result+LSB], A
 0212           
 0212 432301       or    reg[CSD_CNT_CONTROL_REG],  CSD_CNT_CONTROL_REG_START_BIT
 0215 436201       or    reg[PWM_CR], 0x01                       ; Start Dedicated PWM
 0218           
 0218           .L1:
 0218 5103         mov   A, [CSD_bADCStatus]
 021A AFFD         jz    .L1
 021C           
 021C 41E0FD        and   reg[INT_MSK0], ~INT_MSK0_ACOLUMN_0              ; disable specified interrupt enable bit
 021F           
 021F 41E1FE        and   reg[CSD_CNT_INT_REG], ~CSD_CNT_INT_MASK              ; disable specified interrupt enable bit
 0222 4123FE       and   reg[CSD_CNT_CONTROL_REG], ~CSD_CNT_CONTROL_REG_START_BIT
 0225           
 0225 5107         mov   A, [CSD_bSensorNum]
 0227 64           asl   A                                       ; Multiply by two since results are INTs
 0228 5C           mov   X, A
 0229           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0229 62D300          mov reg[IDX_PP], >CSD_waSnsResult
                   ENDIF
 022C 5102         mov   A, [CSD_wADC_Result + LSB]
 022E 5401         mov   [X+(CSD_waSnsResult+LSB)], A
 0230 5101         mov   A, [CSD_wADC_Result + MSB]
 0232 5400         mov   [X+(CSD_waSnsResult+MSB)], A
 0234           
 0234 5107         mov   A, [CSD_bSensorNum]
 0236 9F4D         call  CSD_wGetPortPin
 0238 9F82         call  CSD_DisableSensor
 023A           
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 023A 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 023C 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 023E 7F           ret
 023F           
 023F           .ENDSECTION
 023F           
 023F           .SECTION
 023F           ;-----------------------------------------------------------------------------
 023F           ;  FUNCTION NAME: CSD_ScanAllSensors(void)
 023F           ;
 023F           ;  DESCRIPTION:
 023F           ;    Scans all sensors to find their raw count values
 023F           ;
 023F           ;-----------------------------------------------------------------------------
 023F           ;
 023F           ;  ARGUMENTS:    None.
 023F           ;  RETURNS:      None
 023F           ;  SIDE EFFECTS:
 023F           ;    The A and X registers may be modified by this or future implementations
 023F           ;    of this function.  The same is true for all RAM page pointer registers in
 023F           ;    the Large Memory Model.  When necessary, it is the calling function's
 023F           ;    responsibility to perserve their values across calls to fastcall16
 023F           ;    functions.
 023F           ;
 023F            CSD_ScanAllSensors:
 023F           _CSD_ScanAllSensors:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 023F 5000         mov   A, (CSD_TotalSensorCount - 1)                ; Check if key value in range.
 0241           .ScanLoop:                                            ; Loop through all sensors and scan
 0241 08           push  A
 0242 9FA6         call  CSD_ScanSensor
 0244 18           pop   A
 0245 78           dec   A
 0246 DFFA         jnc   .ScanLoop
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0248 7F           ret
 0249           .ENDSECTION
 0249           
 0249           .SECTION
 0249           ;-----------------------------------------------------------------------------
 0249           ;  FUNCTION NAME: CSD_wReadSensor(BYTE bSensor)
 0249           ;
 0249           ;  DESCRIPTION:
 0249           ;     Returns the sensor scan value in A (LSB) and X (MSB)
 0249           ;-----------------------------------------------------------------------------
 0249           ;
 0249           ;  ARGUMENTS:
 0249           ;    A = Sensor number
 0249           ;  RETURNS:
 0249           ;    Scan value of sensor LSB in A and MSB in X
 0249           ;  SIDE EFFECTS:
 0249           ;    The A and X registers may be modified by this or future implementations
 0249           ;    of this function.  The same is true for all RAM page pointer registers in
 0249           ;    the Large Memory Model.  When necessary, it is the calling function's
 0249           ;    responsibility to preserve their values across calls to fastcall16
 0249           ;    functions.
 0249           ;
 0249            CSD_wReadSensor:
 0249           _CSD_wReadSensor:
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0249 70BF            and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 024B 62D300          mov reg[IDX_PP], >CSD_waSnsResult
                   ENDIF
 024E 64           asl   A                                            ; Multiply by two since results are INTs
 024F 5C           mov   X,A
 0250 5201         mov   A,[X+(CSD_waSnsResult+LSB)]
 0252 5900         mov   X,[X+(CSD_waSnsResult+MSB)]
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0254 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0256 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0258 7F           ret
 0259           .ENDSECTION
 0259           
 0259           .SECTION
 0259           ;-----------------------------------------------------------------------------
 0259           ;  FUNCTION NAME: CSD_Precharge()
 0259           ;
 0259           ;  DESCRIPTION:
 0259           ;   Discharge the Cmod by driving the cmod pin to strong low. 
 0259           ;   After then charge the Cmod by configuring 
 0259           ;   dive mode of Rb to Strong. A delay of 100us will ensure that Cmod will
 0259           ;   reach the Vref level.
 0259           ;-----------------------------------------------------------------------------
 0259           ;
 0259           ;  ARGUMENTS:
 0259           ;    None
 0259           ;  RETURNS:
 0259           ;   None
 0259           ;
 0259           ;  SIDE EFFECTS:
 0259           ;    The A and X registers may be modified by this or future implementations
 0259           ;    of this function.  The same is true for all RAM page pointer registers in
 0259           ;    the Large Memory Model.  When necessary, it is the calling function's
 0259           ;    responsibility to preserve their values across calls to fastcall16
 0259           ;    functions.
 0259           ;
 0259            CSD_Precharge:
 0259           _CSD_Precharge:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0259 62D000          mov reg[CUR_PP], 0
                   ENDIF
                
 025C 7110          or    F, FLAG_XIO_MASK
                IF (CSD_CAPACITOR_PIN & CSD_CAPACITOR_P0_1); Change CMOD to GND
 025E 430002       or    reg[PRT0DM0], 02h   
 0261 4100FD       and   reg[PRT0DM0], ~02h
                ELSE
                   or    reg[PRT0DM0], 08h   
                   and   reg[PRT0DM0], ~08h       
                ENDIF
                
 0264 430C02       or    reg[CSD_RB_PORT_DM0], CSD_RB_PIN_MASK          ; Change Drive Mode to Strong
 0267 410DFD       and   reg[CSD_RB_PORT_DM1], ~CSD_RB_PIN_MASK
 026A 70EF          and   F, ~FLAG_XIO_MASK
 026C 410FFD       and   reg[CSD_RB_PORT_DM2], ~CSD_RB_PIN_MASK
 026F              
 026F 5714         mov   X, CSD_DELAY
 0271           .Pause:
 0271 79           dec   X
 0272 BFFE         jnz   .Pause                                                 ; Delay of 100us
 0274           
 0274 7110          or    F, FLAG_XIO_MASK
 0276 430C02       or    reg[CSD_RB_PORT_DM0], CSD_RB_PIN_MASK       ; Change Drive mode to Open- Drain low
 0279 430D02       or    reg[CSD_RB_PORT_DM1], CSD_RB_PIN_MASK
 027C 70EF          and   F, ~FLAG_XIO_MASK
 027E 430F02       or    reg[CSD_RB_PORT_DM2], CSD_RB_PIN_MASK
 0281              
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0281 7F           ret
 0282           .ENDSECTION   
