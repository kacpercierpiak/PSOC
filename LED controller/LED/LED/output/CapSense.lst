FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C21x34 microcontroller devices.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0068) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0069) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0070) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0071) ; bytes on the stack which are otherwise required for the return address. If
                                        (0072) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0073) ; release, the C compiler automatically places an infinite loop at the end
                                        (0074) ; of main, rather than a return instruction.)
                                        (0075) ;
                                        (0076) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0077) 
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ; Interrupt Vector Table
                                        (0081) ;-----------------------------------------------------------------------------
                                        (0082) ;
                                        (0083) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0084) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0085) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0086) ; vector jump targets are modified automatically according to the user
                                        (0087) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0088) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0089) ; configuration files. If you need to hard code a vector, update the
                                        (0090) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0091) ; of this file.
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) 
                                        (0094)     AREA TOP (ROM, ABS, CON)
                                        (0095) 
                                        (0096)     org   0                        ;Reset Interrupt Vector
                                        (0097) IF	(TOOLCHAIN & HITECH)
                                        (0098) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0099) ELSE
0000: 80 67    JMP   0x0068             (0100)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0101) ENDIF
                                        (0102)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0103)     ;---------------------------------------------------
                                        (0104)     ; Insert your custom code below this banner
                                        (0105)     ;---------------------------------------------------
                                        (0106) 
                                        (0107)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0108)     halt                           ;Stop execution if power falls too low
                                        (0109) 
                                        (0110)     org   08h                      ;Analog Column 0 Interrupt Vector
0008: 7D 04 9A LJMP  _CSD_CMP0_ISR      (0111)     ljmp	_CSD_CMP0_ISR
000B: 7E       RETI                     (0112)     reti
                                        (0113) 
                                        (0114)     org   0Ch                      ;Analog Column 1 Interrupt Vector
000C: 7D 04 98 LJMP  _CSD_CMP_ISR       (0115)     ljmp	_CSD_CMP_ISR
000F: 7E       RETI                     (0116)     reti
                                        (0117) 
                                        (0118)     org   18h                      ;VC3 Interrupt Vector
                                        (0119)     // call	void_handler
0018: 7E       RETI                     (0120)     reti
                                        (0121) 
                                        (0122)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0123)     // call	void_handler
001C: 7E       RETI                     (0124)     reti
                                        (0125) 
                                        (0126)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 04 95 LJMP  _CSD_CNT_ISR       (0127)     ljmp	_CSD_CNT_ISR
0023: 7E       RETI                     (0128)     reti
                                        (0129) 
                                        (0130)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0131)     // call	void_handler
0024: 7E       RETI                     (0132)     reti
                                        (0133) 
                                        (0134)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0135)     // call	void_handler
0028: 7E       RETI                     (0136)     reti
                                        (0137) 
                                        (0138)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0139)     // call	void_handler
002C: 7E       RETI                     (0140)     reti
                                        (0141) 
                                        (0142)     org   60h                      ;PSoC I2C Interrupt Vector
0060: 7D 03 92 LJMP  _EzI2Cs_ISR        (0143)     ljmp	_EzI2Cs_ISR
0063: 7E       RETI                     (0144)     reti
                                        (0145) 
                                        (0146)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0147)     // call	void_handler
0064: 7E       RETI                     (0148)     reti
0068: 71 10    OR    F,0x10             
                                        (0149)     ;---------------------------------------------------
                                        (0150)     ; Insert your custom code above this banner
                                        (0151)     ;---------------------------------------------------
                                        (0152)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0153) 
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  Start of Execution.
                                        (0156) ;-----------------------------------------------------------------------------
                                        (0157) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0158) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0159) ;
                                        (0160) 
                                        (0161) IF	(TOOLCHAIN & HITECH)
                                        (0162)  	AREA PD_startup(CODE, REL, CON)
                                        (0163) ELSE
                                        (0164)     org 68h
                                        (0165) ENDIF
                                        (0166) __Start:
                                        (0167) 
                                        (0168)     ; initialize SMP values for voltage stabilization, if required,
                                        (0169)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0170)     ; least for now. 
                                        (0171)     ;
                                        (0172)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0173)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0174)     M8C_SetBank0
                                        (0175) 
                                        (0176) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0177) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0178)     M8C_EnableWatchDog
                                        (0179) ENDIF
                                        (0180) 
0072: 41 FE FB AND   REG[0xFE],0xFB     (0181)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0182) 
                                        (0183)     ;---------------------------
                                        (0184)     ; Set up the Temporary stack
                                        (0185)     ;---------------------------
                                        (0186)     ; A temporary stack is set up for the SSC instructions.
                                        (0187)     ; The real stack start will be assigned later.
                                        (0188)     ;
                                        (0189) _stack_start:          equ 80h
0075: 50 80    MOV   A,0x80             (0190)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0191)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0192) 
                                        (0193)     ;------------------------
                                        (0194)     ; Set Power-related Trim 
                                        (0195)     ;------------------------
                                        (0196)     
                                        (0197) M8C_ClearWDTAndSleep
                                        (0198) 
                                        (0199) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0200)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0201)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0202)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V
                                        (0203)  ENDIF
                                        (0204) ENDIF ; 5.0 V Operation
                                        (0205) 
                                        (0206) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0207)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0208)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0209)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V
                                        (0210)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0211)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V
                                        (0212)  ENDIF
                                        (0213) ENDIF ; 3.3 Volt Operation
                                        (0214) 
                                        (0215) IF ( POWER_SETTING & POWER_SET_2V7_12MHZ)      ; *** 2.7 Volts / 12MHZ operation ***
                                        (0216)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0217)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_12MHZ, SSCTBL2_TRIM_BGR_2V
                                        (0218) ENDIF ; *** 2.7 Volts / 12MHZ operation ***
                                        (0219) 
                                        (0220) IF ( POWER_SETTING & POWER_SET_2V7_6MHZ)       ; *** 2.7 Volts /  6MHZ operation ***
                                        (0221)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0222)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_6MHZ,  SSCTBL2_TRIM_BGR_2V
                                        (0223) ENDIF ; *** 2.7 Volts /  6MHZ operation ***
                                        (0224) 
007B: 55 F8 00 MOV   [CapSensPush+76],0x0(0225)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [CapSensPush+77],0x0(0226)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0227) 
                                        (0228)     ;---------------------------------------
                                        (0229)     ; Initialize Crystal Oscillator and PLL
                                        (0230)     ;---------------------------------------
                                        (0231) IF ( POWER_SETTING & POWER_SET_2V7)       ; *** 2.7 Volts  ***
                                        (0232)     M8C_SetBank1
                                        (0233)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_3MHz)
                                        (0234)     M8C_SetBank0
                                        (0235)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0236) 
                                        (0237) ELSE 	 ;*** all other voltages OK for 12Mhz ***
                                        (0238)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0239)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
008B: 62 D1 01 MOV   REG[0xD1],0x1      
                                        (0240)     M8C_SetBank0
                                        (0241)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0242) 
                                        (0243) ENDIF
                                        (0244) 
                                        (0245) 	;-------------------------------------------------------
                                        (0246)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0247)     ;-------------------------------------------------------
                                        (0248) 
                                        (0249)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0250) 
                                        (0251) IF (SYSCLK_SOURCE)
                                        (0252)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0253) ENDIF
                                        (0254)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0255) 
                                        (0256) IF	(TOOLCHAIN & HITECH)
                                        (0257)     ;---------------------------------------------
                                        (0258)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0259)     ;---------------------------------------------
                                        (0260) 	global		__Lstackps
                                        (0261) 	mov     a,low __Lstackps
                                        (0262) 	swap    a,sp
                                        (0263) 
                                        (0264) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0265)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0266)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0267)     RAM_SETPAGE_CUR 0
                                        (0268)     RAM_SETPAGE_MVW 0
                                        (0269)     RAM_SETPAGE_MVR 0
                                        (0270)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0271)       or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0272)     ELSE
                                        (0273)       or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0274)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0275) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0276) ELSE
                                        (0277)     ;---------------------------------------------
                                        (0278)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0279)     ;---------------------------------------------
                                        (0280) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0281)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
008E: 50 00    MOV   A,0x0              (0282)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
0090: 4E       SWAP  SP,A               (0283)     swap  A, SP
0091: 62 D3 01 MOV   REG[0xD3],0x1      
0094: 62 D0 00 MOV   REG[0xD0],0x0      
0097: 62 D5 00 MOV   REG[0xD5],0x0      
009A: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0284)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0285)     RAM_SETPAGE_CUR 0
                                        (0286)     RAM_SETPAGE_MVW 0
                                        (0287)     RAM_SETPAGE_MVR 0
                                        (0288) 
                                        (0289)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
009D: 71 C0    OR    F,0xC0             (0290)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0291)   ELSE
                                        (0292)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0293)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0294) ELSE
                                        (0295)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0296)     swap  SP, A
                                        (0297) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0298) ENDIF ;	TOOLCHAIN
                                        (0299) 
                                        (0300)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0301)     ;---------------------------------------------------
                                        (0302)     ; Insert your custom code below this banner
                                        (0303)     ;---------------------------------------------------
                                        (0304) 
                                        (0305)     ;---------------------------------------------------
                                        (0306)     ; Insert your custom code above this banner
                                        (0307)     ;---------------------------------------------------
                                        (0308)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0309) 
                                        (0310)     ;-------------------------
                                        (0311)     ; Load Base Configuration
                                        (0312)     ;-------------------------
                                        (0313)     ; Load global parameter settings and load the user modules in the
                                        (0314)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0315)     ; to minimize start up time; (2) We may still need to play with the
                                        (0316)     ; Sleep Timer.
                                        (0317)     ;
009F: 7C 02 73 LCALL 0x0273             (0318)     lcall LoadConfigInit
                                        (0319) 
                                        (0320)     ;-----------------------------------
                                        (0321)     ; Initialize C Run-Time Environment
                                        (0322)     ;-----------------------------------
                                        (0323) IF ( C_LANGUAGE_SUPPORT )
                                        (0324) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0325)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0326)     mov  [__r0],<__bss_start
                                        (0327) BssLoop:
                                        (0328)     cmp  [__r0],<__bss_end
                                        (0329)     jz   BssDone
                                        (0330)     mvi  [__r0],A
                                        (0331)     jmp  BssLoop
                                        (0332) BssDone:
                                        (0333)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0334)     mov  X,<__idata_start
                                        (0335)     mov  [__r0],<__data_start
                                        (0336) IDataLoop:
                                        (0337)     cmp  [__r0],<__data_end
                                        (0338)     jz   C_RTE_Done
                                        (0339)     push A
                                        (0340)     romx
                                        (0341)     mvi  [__r0],A
                                        (0342)     pop  A
                                        (0343)     inc  X
                                        (0344)     adc  A,0
                                        (0345)     jmp  IDataLoop
                                        (0346) 
                                        (0347) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0348) 
                                        (0349) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00A2: 62 D0 00 MOV   REG[0xD0],0x0      (0350)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0351)                                        ; to use the Virtual Register page.
                                        (0352) 
                                        (0353)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0354)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0355)     ; text segment and may have been relocated by the Code Compressor.
                                        (0356)     ;
00A5: 50 01    MOV   A,0x1              (0357)     mov   A, >__pXIData                ; Get the address of the flash
00A7: 57 EC    MOV   X,0xEC             (0358)     mov   X, <__pXIData                ;   pointer to the xidata area.
00A9: 08       PUSH  A                  (0359)     push  A
00AA: 28       ROMX                     (0360)     romx                               ; get the MSB of xidata's address
00AB: 53 97    MOV   [__r0],A           (0361)     mov   [__r0], A
00AD: 18       POP   A                  (0362)     pop   A
00AE: 75       INC   X                  (0363)     inc   X
00AF: 09 00    ADC   A,0x0              (0364)     adc   A, 0
00B1: 28       ROMX                     (0365)     romx                               ; get the LSB of xidata's address
00B2: 4B       SWAP  A,X                (0366)     swap  A, X
00B3: 51 97    MOV   A,[__r0]           (0367)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0368)                                        ;   XIData structure list in flash
00B5: 80 04    JMP   0x00BA             (0369)     jmp   .AccessStruct
                                        (0370) 
                                        (0371)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0372)     ; values of C variables. Each structure contains 3 member elements.
                                        (0373)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0374)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0375)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0376)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0377)     ; value in the second member element, an unsigned byte:
                                        (0378)     ; (1) If the value of the second element is non-zero, it represents
                                        (0379)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0380)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0381)     ; the bytes are copied to the block of RAM.
                                        (0382)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0383)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0384)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0385) 
                                        (0386) .AccessNextStructLoop:
00B7: 75       INC   X                  (0387)     inc   X                            ; pXIData++
00B8: 09 00    ADC   A,0x0              (0388)     adc   A, 0
00BA: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0389) .AccessStruct:                         ; Entry point for first block
                                        (0390)     ;
                                        (0391)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0392)     ;
                                        (0393)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00BD: 08       PUSH  A                  (0394)     push  A
00BE: 28       ROMX                     (0395)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00BF: 60 D5    MOV   REG[0xD5],A        (0396)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00C1: 74       INC   A                  (0397)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00C2: A0 4B    JZ    0x010E             (0398)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00C4: 18       POP   A                  (0399)     pop   A                            ; restore pXIData to [A,X]
00C5: 75       INC   X                  (0400)     inc   X                            ; pXIData++
00C6: 09 00    ADC   A,0x0              (0401)     adc   A, 0
00C8: 08       PUSH  A                  (0402)     push  A
00C9: 28       ROMX                     (0403)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00CA: 53 97    MOV   [__r0],A           (0404)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00CC: 18       POP   A                  (0405)     pop   A                            ; restore pXIData to [A,X]
00CD: 75       INC   X                  (0406)     inc   X                            ; pXIData++ (point to size)
00CE: 09 00    ADC   A,0x0              (0407)     adc   A, 0
00D0: 08       PUSH  A                  (0408)     push  A
00D1: 28       ROMX                     (0409)     romx                               ; Get the size (CPU.A <- *pXIData)
00D2: A0 1C    JZ    0x00EF             (0410)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00D4: 53 96    MOV   [__r1],A           (0411)     mov   [__r1], A                    ;             else downcount in __r1
00D6: 18       POP   A                  (0412)     pop   A                            ; restore pXIData to [A,X]
                                        (0413) 
                                        (0414) .CopyNextByteLoop:
                                        (0415)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0416)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0417)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0418)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0419)     ;
00D7: 75       INC   X                  (0420)     inc   X                            ; pXIData++ (point to next data byte)
00D8: 09 00    ADC   A,0x0              (0421)     adc   A, 0
00DA: 08       PUSH  A                  (0422)     push  A
00DB: 28       ROMX                     (0423)     romx                               ; Get the data value (CPU.A <- *pXIData)
00DC: 3F 97    MVI   [__r0],A           (0424)     mvi   [__r0], A                    ; Transfer the data to RAM
00DE: 47 97 FF TST   [__r0],0xFF        (0425)     tst   [__r0], 0xff                 ; Check for page crossing
00E1: B0 06    JNZ   0x00E8             (0426)     jnz   .CopyLoopTail                ;   No crossing, keep going
00E3: 5D D5    MOV   A,REG[0xD5]        (0427)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00E5: 74       INC   A                  (0428)     inc   A
00E6: 60 D5    MOV   REG[0xD5],A        (0429)     mov   reg[ MVW_PP], A
                                        (0430) .CopyLoopTail:
00E8: 18       POP   A                  (0431)     pop   A                            ; restore pXIData to [A,X]
00E9: 7A 96    DEC   [__r1]             (0432)     dec   [__r1]                       ; End of this array in flash?
00EB: BF EB    JNZ   0x00D7             (0433)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
00ED: 8F C9    JMP   0x00B7             (0434)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0435) 
                                        (0436) .ClearRAMBlockToZero:
00EF: 18       POP   A                  (0437)     pop   A                            ; restore pXIData to [A,X]
00F0: 75       INC   X                  (0438)     inc   X                            ; pXIData++ (point to next data byte)
00F1: 09 00    ADC   A,0x0              (0439)     adc   A, 0
00F3: 08       PUSH  A                  (0440)     push  A
00F4: 28       ROMX                     (0441)     romx                               ; Get the run length (CPU.A <- *pXIData)
00F5: 53 96    MOV   [__r1],A           (0442)     mov   [__r1], A                    ; Initialize downcounter
00F7: 50 00    MOV   A,0x0              (0443)     mov   A, 0                         ; Initialize source data
                                        (0444) 
                                        (0445) .ClearRAMBlockLoop:
                                        (0446)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0447)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0448)     ;
00F9: 3F 97    MVI   [__r0],A           (0449)     mvi   [__r0], A                    ; Clear a byte
00FB: 47 97 FF TST   [__r0],0xFF        (0450)     tst   [__r0], 0xff                 ; Check for page crossing
00FE: B0 08    JNZ   0x0107             (0451)     jnz   .ClearLoopTail               ;   No crossing, keep going
0100: 5D D5    MOV   A,REG[0xD5]        (0452)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0102: 74       INC   A                  (0453)     inc   A
0103: 60 D5    MOV   REG[0xD5],A        (0454)     mov   reg[ MVW_PP], A
0105: 50 00    MOV   A,0x0              (0455)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0456) .ClearLoopTail:
0107: 7A 96    DEC   [__r1]             (0457)     dec   [__r1]                       ; Was this the last byte?
0109: BF EF    JNZ   0x00F9             (0458)     jnz   .ClearRAMBlockLoop           ;   No,  continue
010B: 18       POP   A                  (0459)     pop   A                            ;   Yes, restore pXIData to [A,X] and
010C: 8F AA    JMP   0x00B7             (0460)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0461) 
                                        (0462) .C_RTE_WrapUp:
010E: 18       POP   A                  (0463)     pop   A                            ; balance stack
010F: 71 10    OR    F,0x10             
                                        (0464) 
                                        (0465) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0466) 
                                        (0467) C_RTE_Done:
                                        (0468) 
                                        (0469) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0470) 
                                        (0471)     ;-------------------------------
                                        (0472)     ; Voltage Stabilization for SMP
                                        (0473)     ;-------------------------------
                                        (0474) 
                                        (0475) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0476) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0477)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0478)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0479)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0480)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0481)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0482)     M8C_SetBank1
                                        (0483)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0484)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0485)     M8C_SetBank0
                                        (0486)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0487)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0488) .WaitFor2ms:
                                        (0489)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0490)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0491) ENDIF ; SMP is operational
                                        (0492) ENDIF ; 5.0V Operation
                                        (0493) 
                                        (0494)     ;-------------------------------
                                        (0495)     ; Set Power-On Reset (POR) Level
                                        (0496)     ;-------------------------------
                                        (0497)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0498)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0499)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0500)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0501)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0502) 
                                        (0503)     M8C_SetBank1
                                        (0504) 
                                        (0505) IF (POWER_SETTING & POWER_SET_2V7)             ; 2.7V Operation?
                                        (0506)                                                ;  Yes, lowest trip already set
                                        (0507) ELSE                                           ;   No, must adjust POR...
                                        (0508) IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
                                        (0509)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, change to midpoint trip
                                        (0510) ELSE
                                        (0511) IF (POWER_SETTING & POWER_SET_5V0)             ; 5.0V Operation?
                                        (0512)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)       ; and Slow Mode?
                                        (0513)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, set to midpoint trip
                                        (0514)  ELSE                                          ;    No, fast mode
                                        (0515)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
0111: 43 E3 10 OR    REG[0xE3],0x10     (0516)     or   reg[VLT_CR], VLT_CR_POR_MID           ;         No, change to midpoint trip
0114: 70 EF    AND   F,0xEF             
                                        (0517)   ELSE ; 24HMz                                 ;
                                        (0518)     or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
                                        (0519)   ENDIF ; 24MHz
                                        (0520)  ENDIF ; Slow Mode
                                        (0521) ENDIF ; 5.0V Operation
                                        (0522) ENDIF ; 3.3V Operation
                                        (0523) ENDIF ; 2.7V Operation
                                        (0524) 
                                        (0525)     M8C_SetBank0
                                        (0526) 
                                        (0527)     ;----------------------------
                                        (0528)     ; Wrap up and invoke "main"
                                        (0529)     ;----------------------------
                                        (0530) 
                                        (0531)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0532)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0533)     ;
0116: 62 E0 00 MOV   REG[0xE0],0x0      (0534)     mov  reg[INT_MSK0],0
0119: 71 10    OR    F,0x10             
                                        (0535) 
                                        (0536)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0537)     ;
                                        (0538)     M8C_SetBank1
011B: 62 E0 00 MOV   REG[0xE0],0x0      (0539)     mov  reg[OSC_CR0],(SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
011E: 70 EF    AND   F,0xEF             
                                        (0540)     M8C_SetBank0
                                        (0541) 
                                        (0542)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0543)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0544)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0545)     ;
0120: 62 E2 00 MOV   REG[0xE2],0x0      (0546)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0547)                                    ; have been set during the boot process.
                                        (0548) IF	(TOOLCHAIN & HITECH)
                                        (0549) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0550) ELSE
                                        (0551) IF ENABLE_LJMP_TO_MAIN
                                        (0552)     ljmp  _main                    ; goto main (no return)
                                        (0553) ELSE
0123: 7C 13 EB LCALL _main              (0554)     lcall _main                    ; call main
                                        (0555) .Exit:
0126: 8F FF    JMP   0x0126             (0556)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0557) ENDIF
                                        (0558) ENDIF ; TOOLCHAIN
                                        (0559) 
                                        (0560)     ;---------------------------------
                                        (0561)     ; Library Access to Global Parms
                                        (0562)     ;---------------------------------
                                        (0563)     ;
                                        (0564)  bGetPowerSetting:
                                        (0565) _bGetPowerSetting:
                                        (0566)     ; Returns value of POWER_SETTING in the A register.
                                        (0567)     ; No inputs. No Side Effects.
                                        (0568)     ;
                                        (0569) IF (POWER_SETTING & POWER_SET_2V7)
                                        (0570)     mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
                                        (0571) ELSE
0128: 50 10    MOV   A,0x10             (0572)     mov   A, POWER_SETTING          ; Supply voltage and internal main osc
                                        (0573) ENDIF
012A: 7F       RET                      (0574)     ret
                                        (0575) 
                                        (0576) IF	(TOOLCHAIN & HITECH)
                                        (0577) ELSE
                                        (0578)     ;---------------------------------
                                        (0579)     ; Order Critical RAM & ROM AREAs
                                        (0580)     ;---------------------------------
                                        (0581)     ;  'TOP' is all that has been defined so far...
                                        (0582) 
                                        (0583)     ;  ROM AREAs for C CONST, static & global items
                                        (0584)     ;
                                        (0585)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0586)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0587) __idata_start:
                                        (0588) 
                                        (0589)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0590) __func_lit_start:
                                        (0591) 
                                        (0592) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0593)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0594)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0595)     ; relocated by the code compressor, but the text area may shrink and
                                        (0596)     ; that moves xidata around.
                                        (0597)     ;
                                        (0598) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0599) ENDIF
                                        (0600) 
                                        (0601)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0602)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0603) 
                                        (0604)     ; CODE segment for general use
                                        (0605)     ;
                                        (0606)     AREA text (ROM, REL, CON)
                                        (0607) __text_start:
                                        (0608) 
                                        (0609)     ; RAM area usage
                                        (0610)     ;
                                        (0611)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0612) __data_start:
                                        (0613) 
                                        (0614)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0615)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0616)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0617) __bss_start:
                                        (0618) ENDIF ; TOOLCHAIN
                                        (0619) ; end of file boot.asm
FILE: D:\Studia\PSOC\CapSense\CapSense\CapSense\capsensecontrol.c
(0001) #include "CapSenseControl.h"
(0002) #include <m8c.h>        
(0003) #include "PSoCAPI.h"    
(0004) #include <stdlib.h>
(0005) 
(0006) #define Interval 50
(0007) #define POS		 1
(0008) 
(0009) CapSenseControl_DataStruct CapSenseControl_Data;
(0010) CapSenseControl_ScanStruct CapSenseControl_Scan;
(0011) BOOL CapSensPush;
(0012) int fingerposition;
(0013) int loopQty; 
(0014) 
(0015) void CapSenseControl_INIT(void)
(0016) {
(0017)     CSD_Start();   
__UserModules_end|__text_start|_CapSenseControl_INIT|_CapSenseControl_INIT:
    0E71: 10       PUSH  X
    0E72: 7C 0C 21 LCALL _CSD_Start
(0018) 	CSD_ScanAllSensors();   
    0E75: 7C 0E 2E LCALL _CSD_ScanAllSensors
(0019) 	CSD_InitializeBaselines();   
    0E78: 7C 06 53 LCALL _CSD_InitializeBaselines
(0020) 	CSD_SetDefaultFingerThresholds();
    0E7B: 7C 06 3E LCALL _CSD_SetDefaultFingerThresholds
    0E7E: 20       POP   X
(0021) 	CapSenseControl_Data.led = 3;
    0E7F: 62 D0 00 MOV   REG[0xD0],0x0
    0E82: 55 A6 03 MOV   [CapSenseControl_Data],0x3
(0022) 	CapSenseControl_Scan.action=0;
    0E85: 62 D0 00 MOV   REG[0xD0],0x0
    0E88: 55 A4 00 MOV   [CapSenseControl_Scan],0x0
(0023) 	CapSenseControl_Scan.value=0;
    0E8B: 55 A5 00 MOV   [CapSenseControl_Scan+1],0x0
(0024) 	CapSensPush=FALSE;
    0E8E: 62 D0 00 MOV   REG[0xD0],0x0
    0E91: 55 AC 00 MOV   [CapSensPush],0x0
(0025) 	loopQty=0;
    0E94: 62 D0 00 MOV   REG[0xD0],0x0
    0E97: 55 9F 00 MOV   [loopQty+1],0x0
    0E9A: 55 9E 00 MOV   [loopQty],0x0
(0026) 	fingerposition=0;
    0E9D: 62 D0 00 MOV   REG[0xD0],0x0
    0EA0: 55 A1 00 MOV   [fingerposition+1],0x0
    0EA3: 55 A0 00 MOV   [fingerposition],0x0
    0EA6: 7F       RET   
(0027) }
(0028) 
(0029) void CapSenseControl_GetNewBlinkFreq(void)
(0030) {
(0031) 	fingerposition = CSD_wGetCentroidPos(POS); 
_CapSenseControl_GetNewBlinkFreq:
    0EA7: 10       PUSH  X
    0EA8: 50 01    MOV   A,0x1
    0EAA: 7C 06 C3 LCALL _CSD_wGetCentroidPos
    0EAD: 62 D0 00 MOV   REG[0xD0],0x0
    0EB0: 5A 97    MOV   [__r0],X
    0EB2: 20       POP   X
    0EB3: 08       PUSH  A
    0EB4: 51 97    MOV   A,[__r0]
    0EB6: 62 D0 00 MOV   REG[0xD0],0x0
    0EB9: 53 A0    MOV   [fingerposition],A
    0EBB: 18       POP   A
    0EBC: 53 A1    MOV   [fingerposition+1],A
(0032) 	if (!CapSensPush && CapSenseControl_Data.sliderPos==0)
    0EBE: 62 D0 00 MOV   REG[0xD0],0x0
    0EC1: 3C AC 00 CMP   [CapSensPush],0x0
    0EC4: B0 19    JNZ   0x0EDE
    0EC6: 62 D0 00 MOV   REG[0xD0],0x0
    0EC9: 3C A7 00 CMP   [CapSenseControl_Data+1],0x0
    0ECC: B0 11    JNZ   0x0EDE
(0033) 	{
(0034) 		CapSenseControl_Data.sliderPos = (BYTE) fingerposition;
    0ECE: 62 D0 00 MOV   REG[0xD0],0x0
    0ED1: 51 A1    MOV   A,[fingerposition+1]
    0ED3: 62 D0 00 MOV   REG[0xD0],0x0
    0ED6: 53 A7    MOV   [CapSenseControl_Data+1],A
(0035) 		CapSensPush = TRUE;
    0ED8: 62 D0 00 MOV   REG[0xD0],0x0
    0EDB: 55 AC 01 MOV   [CapSensPush],0x1
(0036) 	}
(0037) 			
(0038) 	if ( abs(CapSenseControl_Data.sliderPos-fingerposition) >=10)
    0EDE: 62 D0 00 MOV   REG[0xD0],0x0
    0EE1: 51 A7    MOV   A,[CapSenseControl_Data+1]
    0EE3: 62 D0 00 MOV   REG[0xD0],0x0
    0EE6: 53 96    MOV   [__r1],A
    0EE8: 55 97 00 MOV   [__r0],0x0
    0EEB: 62 D0 00 MOV   REG[0xD0],0x0
    0EEE: 51 A1    MOV   A,[fingerposition+1]
    0EF0: 62 D0 00 MOV   REG[0xD0],0x0
    0EF3: 14 96    SUB   [__r1],A
    0EF5: 62 D0 00 MOV   REG[0xD0],0x0
    0EF8: 51 A0    MOV   A,[fingerposition]
    0EFA: 62 D0 00 MOV   REG[0xD0],0x0
    0EFD: 1C 97    SBB   [__r0],A
    0EFF: 51 97    MOV   A,[__r0]
    0F01: 08       PUSH  A
    0F02: 51 96    MOV   A,[__r1]
    0F04: 08       PUSH  A
    0F05: 7C 15 49 LCALL _abs
    0F08: 38 FE    ADD   SP,0xFE
    0F0A: 62 D0 00 MOV   REG[0xD0],0x0
    0F0D: 51 96    MOV   A,[__r1]
    0F0F: 11 0A    SUB   A,0xA
    0F11: 51 97    MOV   A,[__r0]
    0F13: 31 80    XOR   A,0x80
    0F15: 19 80    SBB   A,0x80
    0F17: C1 07    JC    0x101F
(0039) 	{
(0040) 		if (CapSenseControl_Data.sliderPos-fingerposition>0 )
    0F19: 62 D0 00 MOV   REG[0xD0],0x0
    0F1C: 51 A7    MOV   A,[CapSenseControl_Data+1]
    0F1E: 62 D0 00 MOV   REG[0xD0],0x0
    0F21: 53 96    MOV   [__r1],A
    0F23: 55 97 00 MOV   [__r0],0x0
    0F26: 62 D0 00 MOV   REG[0xD0],0x0
    0F29: 51 A1    MOV   A,[fingerposition+1]
    0F2B: 62 D0 00 MOV   REG[0xD0],0x0
    0F2E: 14 96    SUB   [__r1],A
    0F30: 62 D0 00 MOV   REG[0xD0],0x0
    0F33: 51 A0    MOV   A,[fingerposition]
    0F35: 62 D0 00 MOV   REG[0xD0],0x0
    0F38: 1C 97    SBB   [__r0],A
    0F3A: 50 00    MOV   A,0x0
    0F3C: 12 96    SUB   A,[__r1]
    0F3E: 51 97    MOV   A,[__r0]
    0F40: 31 80    XOR   A,0x80
    0F42: 53 93    MOV   [__rX],A
    0F44: 50 80    MOV   A,0x80
    0F46: 1A 93    SBB   A,[__rX]
    0F48: D0 52    JNC   0x0F9B
(0041) 		{					
(0042) 			CapSenseControl_Scan.action = 1;
    0F4A: 62 D0 00 MOV   REG[0xD0],0x0
    0F4D: 55 A4 01 MOV   [CapSenseControl_Scan],0x1
(0043) 			CapSenseControl_Scan.value = abs(CapSenseControl_Data.sliderPos-fingerposition)/Interval;								
    0F50: 62 D0 00 MOV   REG[0xD0],0x0
    0F53: 51 A7    MOV   A,[CapSenseControl_Data+1]
    0F55: 62 D0 00 MOV   REG[0xD0],0x0
    0F58: 53 96    MOV   [__r1],A
    0F5A: 55 97 00 MOV   [__r0],0x0
    0F5D: 62 D0 00 MOV   REG[0xD0],0x0
    0F60: 51 A1    MOV   A,[fingerposition+1]
    0F62: 62 D0 00 MOV   REG[0xD0],0x0
    0F65: 14 96    SUB   [__r1],A
    0F67: 62 D0 00 MOV   REG[0xD0],0x0
    0F6A: 51 A0    MOV   A,[fingerposition]
    0F6C: 62 D0 00 MOV   REG[0xD0],0x0
    0F6F: 1C 97    SBB   [__r0],A
    0F71: 51 97    MOV   A,[__r0]
    0F73: 08       PUSH  A
    0F74: 51 96    MOV   A,[__r1]
    0F76: 08       PUSH  A
    0F77: 7C 15 49 LCALL _abs
    0F7A: 38 FE    ADD   SP,0xFE
    0F7C: 62 D0 00 MOV   REG[0xD0],0x0
    0F7F: 50 00    MOV   A,0x0
    0F81: 08       PUSH  A
    0F82: 50 32    MOV   A,0x32
    0F84: 08       PUSH  A
    0F85: 51 97    MOV   A,[__r0]
    0F87: 08       PUSH  A
    0F88: 51 96    MOV   A,[__r1]
    0F8A: 08       PUSH  A
    0F8B: 7C 14 C2 LCALL 0x14C2
    0F8E: 18       POP   A
    0F8F: 53 96    MOV   [__r1],A
    0F91: 18       POP   A
    0F92: 38 FE    ADD   SP,0xFE
    0F94: 51 96    MOV   A,[__r1]
    0F96: 62 D0 00 MOV   REG[0xD0],0x0
    0F99: 53 A5    MOV   [CapSenseControl_Scan+1],A
(0044) 		}
(0045) 		if (CapSenseControl_Data.sliderPos-fingerposition<0 )
    0F9B: 62 D0 00 MOV   REG[0xD0],0x0
    0F9E: 51 A7    MOV   A,[CapSenseControl_Data+1]
    0FA0: 62 D0 00 MOV   REG[0xD0],0x0
    0FA3: 53 96    MOV   [__r1],A
    0FA5: 55 97 00 MOV   [__r0],0x0
    0FA8: 62 D0 00 MOV   REG[0xD0],0x0
    0FAB: 51 A1    MOV   A,[fingerposition+1]
    0FAD: 62 D0 00 MOV   REG[0xD0],0x0
    0FB0: 14 96    SUB   [__r1],A
    0FB2: 62 D0 00 MOV   REG[0xD0],0x0
    0FB5: 51 A0    MOV   A,[fingerposition]
    0FB7: 62 D0 00 MOV   REG[0xD0],0x0
    0FBA: 1C 97    SBB   [__r0],A
    0FBC: 51 96    MOV   A,[__r1]
    0FBE: 11 00    SUB   A,0x0
    0FC0: 51 97    MOV   A,[__r0]
    0FC2: 31 80    XOR   A,0x80
    0FC4: 19 80    SBB   A,0x80
    0FC6: D0 52    JNC   0x1019
(0046) 		{
(0047) 			CapSenseControl_Scan.action = 2;
    0FC8: 62 D0 00 MOV   REG[0xD0],0x0
    0FCB: 55 A4 02 MOV   [CapSenseControl_Scan],0x2
(0048) 			CapSenseControl_Scan.value = abs(CapSenseControl_Data.sliderPos-fingerposition)/Interval;
    0FCE: 62 D0 00 MOV   REG[0xD0],0x0
    0FD1: 51 A7    MOV   A,[CapSenseControl_Data+1]
    0FD3: 62 D0 00 MOV   REG[0xD0],0x0
    0FD6: 53 96    MOV   [__r1],A
    0FD8: 55 97 00 MOV   [__r0],0x0
    0FDB: 62 D0 00 MOV   REG[0xD0],0x0
    0FDE: 51 A1    MOV   A,[fingerposition+1]
    0FE0: 62 D0 00 MOV   REG[0xD0],0x0
    0FE3: 14 96    SUB   [__r1],A
    0FE5: 62 D0 00 MOV   REG[0xD0],0x0
    0FE8: 51 A0    MOV   A,[fingerposition]
    0FEA: 62 D0 00 MOV   REG[0xD0],0x0
    0FED: 1C 97    SBB   [__r0],A
    0FEF: 51 97    MOV   A,[__r0]
    0FF1: 08       PUSH  A
    0FF2: 51 96    MOV   A,[__r1]
    0FF4: 08       PUSH  A
    0FF5: 7C 15 49 LCALL _abs
    0FF8: 38 FE    ADD   SP,0xFE
    0FFA: 62 D0 00 MOV   REG[0xD0],0x0
    0FFD: 50 00    MOV   A,0x0
    0FFF: 08       PUSH  A
    1000: 50 32    MOV   A,0x32
    1002: 08       PUSH  A
    1003: 51 97    MOV   A,[__r0]
    1005: 08       PUSH  A
    1006: 51 96    MOV   A,[__r1]
    1008: 08       PUSH  A
    1009: 7C 14 C2 LCALL 0x14C2
    100C: 18       POP   A
    100D: 53 96    MOV   [__r1],A
    100F: 18       POP   A
    1010: 38 FE    ADD   SP,0xFE
    1012: 51 96    MOV   A,[__r1]
    1014: 62 D0 00 MOV   REG[0xD0],0x0
    1017: 53 A5    MOV   [CapSenseControl_Scan+1],A
(0049) 		}
(0050) 		CapSensPush = FALSE;
    1019: 62 D0 00 MOV   REG[0xD0],0x0
    101C: 55 AC 00 MOV   [CapSensPush],0x0
(0051) 	}	
    101F: 7F       RET   
(0052) }
(0053) 
(0054) void CapSenseControl_ChangeActiveLED(void)
(0055) {
(0056) 	loopQty++;
_CapSenseControl_ChangeActiveLED:
    1020: 62 D0 00 MOV   REG[0xD0],0x0
    1023: 76 9F    INC   [loopQty+1]
    1025: 0E 9E 00 ADC   [loopQty],0x0
(0057) 	if (loopQty>=10)
    1028: 51 9F    MOV   A,[loopQty+1]
    102A: 11 0A    SUB   A,0xA
    102C: 51 9E    MOV   A,[loopQty]
    102E: 31 80    XOR   A,0x80
    1030: 19 80    SBB   A,0x80
    1032: C0 5E    JC    0x1091
(0058) 	{			
(0059) 		if (CapSensPush)
    1034: 62 D0 00 MOV   REG[0xD0],0x0
    1037: 3C AC 00 CMP   [CapSensPush],0x0
    103A: A0 41    JZ    0x107C
(0060) 		{
(0061) 			if(fingerposition < 50 && fingerposition >=0)
    103C: 62 D0 00 MOV   REG[0xD0],0x0
    103F: 51 A1    MOV   A,[fingerposition+1]
    1041: 11 32    SUB   A,0x32
    1043: 51 A0    MOV   A,[fingerposition]
    1045: 31 80    XOR   A,0x80
    1047: 19 80    SBB   A,0x80
    1049: D0 22    JNC   0x106C
    104B: 62 D0 00 MOV   REG[0xD0],0x0
    104E: 51 A1    MOV   A,[fingerposition+1]
    1050: 11 00    SUB   A,0x0
    1052: 51 A0    MOV   A,[fingerposition]
    1054: 31 80    XOR   A,0x80
    1056: 19 80    SBB   A,0x80
    1058: C0 13    JC    0x106C
(0062) 			{
(0063) 				CapSenseControl_Scan.action = 3;
    105A: 62 D0 00 MOV   REG[0xD0],0x0
    105D: 55 A4 03 MOV   [CapSenseControl_Scan],0x3
(0064) 				CapSenseControl_Scan.value = CapSenseControl_Data.led;						
    1060: 62 D0 00 MOV   REG[0xD0],0x0
    1063: 51 A6    MOV   A,[CapSenseControl_Data]
    1065: 62 D0 00 MOV   REG[0xD0],0x0
    1068: 53 A5    MOV   [CapSenseControl_Scan+1],A
(0065) 			}
    106A: 80 11    JMP   0x107C
(0066) 			else
(0067) 			{
(0068) 			CapSenseControl_Scan.action = 4;
    106C: 62 D0 00 MOV   REG[0xD0],0x0
    106F: 55 A4 04 MOV   [CapSenseControl_Scan],0x4
(0069) 			CapSenseControl_Scan.value = CapSenseControl_Data.led;						
    1072: 62 D0 00 MOV   REG[0xD0],0x0
    1075: 51 A6    MOV   A,[CapSenseControl_Data]
    1077: 62 D0 00 MOV   REG[0xD0],0x0
    107A: 53 A5    MOV   [CapSenseControl_Scan+1],A
(0070) 			}
(0071) 		}																
(0072) 		loopQty=0;
    107C: 62 D0 00 MOV   REG[0xD0],0x0
    107F: 55 9F 00 MOV   [loopQty+1],0x0
    1082: 55 9E 00 MOV   [loopQty],0x0
(0073) 		CapSensPush = FALSE;
    1085: 62 D0 00 MOV   REG[0xD0],0x0
    1088: 55 AC 00 MOV   [CapSensPush],0x0
(0074) 		CapSenseControl_Data.sliderPos = 0;
    108B: 62 D0 00 MOV   REG[0xD0],0x0
    108E: 55 A7 00 MOV   [CapSenseControl_Data+1],0x0
(0075) 	}
    1091: 7F       RET   
(0076) }
(0077) 
(0078) CapSenseControl_ScanStruct CapSenseControl_DoScan(void)
(0079) {	
_CapSenseControl_DoScan:
    1092: 10       PUSH  X
    1093: 4F       MOV   X,SP
(0080) 	CapSenseControl_Scan.action=0;
    1094: 62 D0 00 MOV   REG[0xD0],0x0
    1097: 55 A4 00 MOV   [CapSenseControl_Scan],0x0
(0081) 	CapSenseControl_Scan.value=0;
    109A: 55 A5 00 MOV   [CapSenseControl_Scan+1],0x0
(0082) 	CSD_ScanAllSensors(); 
    109D: 10       PUSH  X
    109E: 7C 0E 2E LCALL _CSD_ScanAllSensors
(0083) 	CSD_UpdateAllBaselines();
    10A1: 7C 06 B9 LCALL _CSD_UpdateAllBaselines
(0084) 	
(0085) 	if(CSD_bIsAnySensorActive())
    10A4: 7C 06 A0 LCALL _CSD_bIsAnySensorActive
    10A7: 20       POP   X
    10A8: 62 D0 00 MOV   REG[0xD0],0x0
    10AB: 39 00    CMP   A,0x0
    10AD: A0 05    JZ    0x10B3
(0086) 		{
(0087) 			CapSenseControl_GetNewBlinkFreq();			
    10AF: 9D F6    CALL  _CapSenseControl_GetNewBlinkFreq
(0088) 		}
    10B1: 80 03    JMP   0x10B5
(0089) 		else
(0090) 		{
(0091) 			CapSenseControl_ChangeActiveLED();
    10B3: 9F 6B    CALL  _CapSenseControl_ChangeActiveLED
(0092) 		}
(0093) 	return CapSenseControl_Scan;
    10B5: 62 D0 00 MOV   REG[0xD0],0x0
    10B8: 55 96 A4 MOV   [__r1],0xA4
    10BB: 55 97 00 MOV   [__r0],0x0
    10BE: 52 FC    MOV   A,[X-4]
    10C0: 53 94    MOV   [__r3],A
    10C2: 52 FB    MOV   A,[X-5]
    10C4: 53 95    MOV   [__r2],A
    10C6: 51 97    MOV   A,[__r0]
    10C8: 60 D4    MOV   REG[0xD4],A
    10CA: 51 95    MOV   A,[__r2]
    10CC: 60 D5    MOV   REG[0xD5],A
    10CE: 3E 96    MVI   A,[__r1]
    10D0: 3F 94    MVI   [__r3],A
    10D2: 3E 96    MVI   A,[__r1]
    10D4: 3F 94    MVI   [__r3],A
    10D6: 20       POP   X
    10D7: 7F       RET   
FILE: D:\Studia\PSOC\CapSense\CapSense\CapSense\ledcontrol.c
(0001) #include "LEDControl.h"
(0002) #include <m8c.h>        
(0003) #include "PSoCAPI.h"    
(0004) #include <stdlib.h>
(0005) 
(0006) #define Interval 50
(0007) #define IntervalLimit 80
(0008) #define BLUE	1
(0009) #define GREEN	2
(0010) #define RED		3
(0011) 
(0012) 
(0013) 	int LEDControl_RT = 50;
(0014) 	int LEDControl_BT = 50;
(0015) 	int LEDControl_GT = 50;
(0016) void LEDControl_INIT(void)
(0017) {
(0018) 	LED_BLUE_Start();
_LEDControl_INIT:
    10D8: 10       PUSH  X
    10D9: 7C 03 59 LCALL _LED_BLUE_Off|_LED_BLUE_Start|LED_BLUE_Start|_LED_BLUE_Stop|LED_BLUE_Stop|LED_BLUE_Off
(0019) 	LED_GREEN_Start();
    10DC: 7C 03 1C LCALL _LED_GREEN_Stop|_LED_GREEN_Off|LED_GREEN_Start|LED_GREEN_Off|LED_GREEN_Stop|_LED_GREEN_Start
(0020) 	LED_RED_Start();
    10DF: 7C 02 DF LCALL _LED_RED_Off|LED_RED_Stop|_LED_RED_Stop|_LED_RED_Start|LED_RED_Start
(0021)     LED_RED_On();
    10E2: 7C 02 DB LCALL _LED_RED_On
    10E5: 20       POP   X
    10E6: 7F       RET   
(0022) }
(0023) void LEDControl_ChangeState(BOOL red,BOOL green,BOOL blue)
(0024) {
_LEDControl_ChangeState:
  blue                 --> X-6
  green                --> X-5
  red                  --> X-4
    10E7: 10       PUSH  X
    10E8: 4F       MOV   X,SP
(0025) 	if (red)
    10E9: 3D FC 00 CMP   [X-4],0x0
    10EC: A0 08    JZ    0x10F5
(0026) 		LED_RED_On();
    10EE: 10       PUSH  X
    10EF: 7C 02 DB LCALL _LED_RED_On
    10F2: 20       POP   X
    10F3: 80 06    JMP   0x10FA
(0027) 	else
(0028) 		LED_RED_Off();
    10F5: 10       PUSH  X
    10F6: 7C 02 DF LCALL _LED_RED_Off|LED_RED_Stop|_LED_RED_Stop|_LED_RED_Start|LED_RED_Start
    10F9: 20       POP   X
(0029) 	if (green)
    10FA: 3D FB 00 CMP   [X-5],0x0
    10FD: A0 08    JZ    0x1106
(0030) 		LED_GREEN_On();
    10FF: 10       PUSH  X
    1100: 7C 03 18 LCALL _LED_GREEN_On
    1103: 20       POP   X
    1104: 80 06    JMP   0x110B
(0031) 	else
(0032) 		LED_GREEN_Off();
    1106: 10       PUSH  X
    1107: 7C 03 1C LCALL _LED_GREEN_Stop|_LED_GREEN_Off|LED_GREEN_Start|LED_GREEN_Off|LED_GREEN_Stop|_LED_GREEN_Start
    110A: 20       POP   X
(0033) 	if (blue)
    110B: 3D FA 00 CMP   [X-6],0x0
    110E: A0 08    JZ    0x1117
(0034) 		LED_BLUE_On();
    1110: 10       PUSH  X
    1111: 7C 03 55 LCALL _LED_BLUE_On
    1114: 20       POP   X
    1115: 80 06    JMP   0x111C
(0035) 	else
(0036) 		LED_BLUE_Off();
    1117: 10       PUSH  X
    1118: 7C 03 59 LCALL _LED_BLUE_Off|_LED_BLUE_Start|LED_BLUE_Start|_LED_BLUE_Stop|LED_BLUE_Stop|LED_BLUE_Off
    111B: 20       POP   X
    111C: 20       POP   X
    111D: 7F       RET   
(0037) }
(0038) BYTE LEDControl_ChangeStateSwitch(BYTE led ,BOOL isASC)
(0039) {
_LEDControl_ChangeStateSwitch:
  isASC                --> X-5
  led                  --> X-4
    111E: 10       PUSH  X
    111F: 4F       MOV   X,SP
    1120: 38 02    ADD   SP,0x2
(0040) 	
(0041) 	switch (led)
    1122: 52 FC    MOV   A,[X-4]
    1124: 54 01    MOV   [X+1],A
    1126: 56 00 00 MOV   [X+0],0x0
    1129: 3D 00 00 CMP   [X+0],0x0
    112C: B0 06    JNZ   0x1133
    112E: 3D 01 00 CMP   [X+1],0x0
    1131: A0 21    JZ    0x1153
    1133: 3D 00 00 CMP   [X+0],0x0
    1136: B0 06    JNZ   0x113D
    1138: 3D 01 01 CMP   [X+1],0x1
    113B: A0 69    JZ    0x11A5
    113D: 3D 00 00 CMP   [X+0],0x0
    1140: B0 06    JNZ   0x1147
    1142: 3D 01 02 CMP   [X+1],0x2
    1145: A0 36    JZ    0x117C
    1147: 3D 00 00 CMP   [X+0],0x0
    114A: B0 06    JNZ   0x1151
    114C: 3D 01 03 CMP   [X+1],0x3
    114F: A0 80    JZ    0x11D0
    1151: 80 A9    JMP   0x11FB
(0042) 				{
(0043) 					case 0:
(0044) 						if(isASC)
    1153: 3D FB 00 CMP   [X-5],0x0
    1156: A0 13    JZ    0x116A
(0045) 						{
(0046) 						LEDControl_ChangeState(TRUE,FALSE,FALSE);	
    1158: 50 00    MOV   A,0x0
    115A: 08       PUSH  A
    115B: 08       PUSH  A
    115C: 50 01    MOV   A,0x1
    115E: 08       PUSH  A
    115F: 9F 86    CALL  _LEDControl_ChangeState
    1161: 38 FD    ADD   SP,0xFD
(0047) 						return RED;
    1163: 62 D0 00 MOV   REG[0xD0],0x0
    1166: 50 03    MOV   A,0x3
    1168: 80 97    JMP   0x1200
(0048) 						}
(0049) 						else 
(0050) 						{
(0051) 						LEDControl_ChangeState(FALSE,FALSE,TRUE);	
    116A: 50 01    MOV   A,0x1
    116C: 08       PUSH  A
    116D: 50 00    MOV   A,0x0
    116F: 08       PUSH  A
    1170: 08       PUSH  A
    1171: 9F 74    CALL  _LEDControl_ChangeState
    1173: 38 FD    ADD   SP,0xFD
(0052) 						return BLUE;
    1175: 62 D0 00 MOV   REG[0xD0],0x0
    1178: 50 01    MOV   A,0x1
    117A: 80 85    JMP   0x1200
(0053) 						}
(0054) 						break;
(0055) 					case GREEN:
(0056) 						if(isASC)
    117C: 3D FB 00 CMP   [X-5],0x0
    117F: A0 13    JZ    0x1193
(0057) 						{
(0058) 						LEDControl_ChangeState(FALSE,FALSE,TRUE);			
    1181: 50 01    MOV   A,0x1
    1183: 08       PUSH  A
    1184: 50 00    MOV   A,0x0
    1186: 08       PUSH  A
    1187: 08       PUSH  A
    1188: 9F 5D    CALL  _LEDControl_ChangeState
    118A: 38 FD    ADD   SP,0xFD
(0059) 						return BLUE;
    118C: 62 D0 00 MOV   REG[0xD0],0x0
    118F: 50 01    MOV   A,0x1
    1191: 80 6E    JMP   0x1200
(0060) 						}
(0061) 						else 
(0062) 						{
(0063) 						LEDControl_ChangeState(TRUE,FALSE,FALSE);	
    1193: 50 00    MOV   A,0x0
    1195: 08       PUSH  A
    1196: 08       PUSH  A
    1197: 50 01    MOV   A,0x1
    1199: 08       PUSH  A
    119A: 9F 4B    CALL  _LEDControl_ChangeState
    119C: 38 FD    ADD   SP,0xFD
(0064) 						return RED;
    119E: 62 D0 00 MOV   REG[0xD0],0x0
    11A1: 50 03    MOV   A,0x3
    11A3: 80 5C    JMP   0x1200
(0065) 						}
(0066) 						break;
(0067) 					case BLUE:
(0068) 						if(isASC)
    11A5: 3D FB 00 CMP   [X-5],0x0
    11A8: A0 13    JZ    0x11BC
(0069) 						{
(0070) 						LEDControl_ChangeState(TRUE,FALSE,FALSE);		
    11AA: 50 00    MOV   A,0x0
    11AC: 08       PUSH  A
    11AD: 08       PUSH  A
    11AE: 50 01    MOV   A,0x1
    11B0: 08       PUSH  A
    11B1: 9F 34    CALL  _LEDControl_ChangeState
    11B3: 38 FD    ADD   SP,0xFD
(0071) 						return RED;
    11B5: 62 D0 00 MOV   REG[0xD0],0x0
    11B8: 50 03    MOV   A,0x3
    11BA: 80 45    JMP   0x1200
(0072) 						}
(0073) 						else 
(0074) 						{
(0075) 						LEDControl_ChangeState(FALSE,TRUE,FALSE);	
    11BC: 50 00    MOV   A,0x0
    11BE: 08       PUSH  A
    11BF: 50 01    MOV   A,0x1
    11C1: 08       PUSH  A
    11C2: 50 00    MOV   A,0x0
    11C4: 08       PUSH  A
    11C5: 9F 20    CALL  _LEDControl_ChangeState
    11C7: 38 FD    ADD   SP,0xFD
(0076) 						return GREEN;
    11C9: 62 D0 00 MOV   REG[0xD0],0x0
    11CC: 50 02    MOV   A,0x2
    11CE: 80 31    JMP   0x1200
(0077) 						}
(0078) 						break;
(0079) 					case RED:
(0080) 						if(isASC)
    11D0: 3D FB 00 CMP   [X-5],0x0
    11D3: A0 15    JZ    0x11E9
(0081) 						{
(0082) 						LEDControl_ChangeState(FALSE,TRUE,FALSE);			
    11D5: 50 00    MOV   A,0x0
    11D7: 08       PUSH  A
    11D8: 50 01    MOV   A,0x1
    11DA: 08       PUSH  A
    11DB: 50 00    MOV   A,0x0
    11DD: 08       PUSH  A
    11DE: 9F 07    CALL  _LEDControl_ChangeState
    11E0: 38 FD    ADD   SP,0xFD
(0083) 						return GREEN;
    11E2: 62 D0 00 MOV   REG[0xD0],0x0
    11E5: 50 02    MOV   A,0x2
    11E7: 80 18    JMP   0x1200
(0084) 						}
(0085) 						else 
(0086) 						{
(0087) 						LEDControl_ChangeState(FALSE,FALSE,TRUE);	
    11E9: 50 01    MOV   A,0x1
    11EB: 08       PUSH  A
    11EC: 50 00    MOV   A,0x0
    11EE: 08       PUSH  A
    11EF: 08       PUSH  A
    11F0: 9E F5    CALL  _LEDControl_ChangeState
    11F2: 38 FD    ADD   SP,0xFD
(0088) 						return BLUE;
    11F4: 62 D0 00 MOV   REG[0xD0],0x0
    11F7: 50 01    MOV   A,0x1
    11F9: 80 06    JMP   0x1200
(0089) 						}
(0090) 						break;
(0091) 					default:
(0092) 						return 0;
    11FB: 62 D0 00 MOV   REG[0xD0],0x0
    11FE: 50 00    MOV   A,0x0
(0093) 						break;
    1200: 38 FE    ADD   SP,0xFE
    1202: 20       POP   X
    1203: 7F       RET   
(0094) 				}
(0095) 			
(0096) }
(0097) void LEDControl_ChangeFrequency(BYTE led,int value,BYTE isAdd)
(0098) {
_LEDControl_ChangeFrequency:
  isAdd                --> X-7
  value                --> X-6
  led                  --> X-4
    1204: 10       PUSH  X
    1205: 4F       MOV   X,SP
    1206: 38 02    ADD   SP,0x2
(0099) 	switch (led)
    1208: 52 FC    MOV   A,[X-4]
    120A: 54 01    MOV   [X+1],A
    120C: 56 00 00 MOV   [X+0],0x0
    120F: 3D 00 00 CMP   [X+0],0x0
    1212: B0 06    JNZ   0x1219
    1214: 3D 01 01 CMP   [X+1],0x1
    1217: A0 67    JZ    0x127F
    1219: 3D 00 00 CMP   [X+0],0x0
    121C: B0 06    JNZ   0x1223
    121E: 3D 01 02 CMP   [X+1],0x2
    1221: A0 AD    JZ    0x12CF
    1223: 3D 00 00 CMP   [X+0],0x0
    1226: B0 06    JNZ   0x122D
    1228: 3D 01 03 CMP   [X+1],0x3
    122B: A0 03    JZ    0x122F
    122D: 80 EF    JMP   0x131D
(0100) 		{
(0101) 			case RED:
(0102) 				if (isAdd)
    122F: 3D F9 00 CMP   [X-7],0x0
    1232: A0 2A    JZ    0x125D
(0103) 				{
(0104) 					LEDControl_RT=LEDControl_RT+value;
    1234: 62 D0 00 MOV   REG[0xD0],0x0
    1237: 52 FB    MOV   A,[X-5]
    1239: 04 A9    ADD   [LEDControl_RT+1],A
    123B: 52 FA    MOV   A,[X-6]
    123D: 0C A8    ADC   [LEDControl_RT],A
(0105) 					if(LEDControl_RT>IntervalLimit)
    123F: 50 50    MOV   A,0x50
    1241: 12 A9    SUB   A,[LEDControl_RT+1]
    1243: 51 A8    MOV   A,[LEDControl_RT]
    1245: 31 80    XOR   A,0x80
    1247: 62 D0 00 MOV   REG[0xD0],0x0
    124A: 53 93    MOV   [__rX],A
    124C: 50 80    MOV   A,0x80
    124E: 1A 93    SBB   A,[__rX]
    1250: D0 CC    JNC   0x131D
(0106) 					LEDControl_RT=IntervalLimit;
    1252: 62 D0 00 MOV   REG[0xD0],0x0
    1255: 55 A9 50 MOV   [LEDControl_RT+1],0x50
    1258: 55 A8 00 MOV   [LEDControl_RT],0x0
(0107) 				}
    125B: 80 C1    JMP   0x131D
(0108) 				else 
(0109) 				{
(0110) 					LEDControl_RT=LEDControl_RT-value;	
    125D: 62 D0 00 MOV   REG[0xD0],0x0
    1260: 52 FB    MOV   A,[X-5]
    1262: 14 A9    SUB   [LEDControl_RT+1],A
    1264: 52 FA    MOV   A,[X-6]
    1266: 1C A8    SBB   [LEDControl_RT],A
(0111) 					if(LEDControl_RT<0)
    1268: 51 A9    MOV   A,[LEDControl_RT+1]
    126A: 11 00    SUB   A,0x0
    126C: 51 A8    MOV   A,[LEDControl_RT]
    126E: 31 80    XOR   A,0x80
    1270: 19 80    SBB   A,0x80
    1272: D0 AA    JNC   0x131D
(0112) 						LEDControl_RT=0;
    1274: 62 D0 00 MOV   REG[0xD0],0x0
    1277: 55 A9 00 MOV   [LEDControl_RT+1],0x0
    127A: 55 A8 00 MOV   [LEDControl_RT],0x0
(0113) 				}
(0114) 				break;
    127D: 80 9F    JMP   0x131D
(0115) 			case BLUE:
(0116) 				if (isAdd)
    127F: 3D F9 00 CMP   [X-7],0x0
    1282: A0 2A    JZ    0x12AD
(0117) 				{
(0118) 					LEDControl_BT=LEDControl_BT+value;
    1284: 62 D0 00 MOV   REG[0xD0],0x0
    1287: 52 FB    MOV   A,[X-5]
    1289: 04 A3    ADD   [LEDControl_BT+1],A
    128B: 52 FA    MOV   A,[X-6]
    128D: 0C A2    ADC   [LEDControl_BT],A
(0119) 					if(LEDControl_BT>IntervalLimit)
    128F: 50 50    MOV   A,0x50
    1291: 12 A3    SUB   A,[LEDControl_BT+1]
    1293: 51 A2    MOV   A,[LEDControl_BT]
    1295: 31 80    XOR   A,0x80
    1297: 62 D0 00 MOV   REG[0xD0],0x0
    129A: 53 93    MOV   [__rX],A
    129C: 50 80    MOV   A,0x80
    129E: 1A 93    SBB   A,[__rX]
    12A0: D0 7C    JNC   0x131D
(0120) 					LEDControl_BT=IntervalLimit;
    12A2: 62 D0 00 MOV   REG[0xD0],0x0
    12A5: 55 A3 50 MOV   [LEDControl_BT+1],0x50
    12A8: 55 A2 00 MOV   [LEDControl_BT],0x0
(0121) 				}
    12AB: 80 71    JMP   0x131D
(0122) 				else 
(0123) 				{
(0124) 					LEDControl_BT=LEDControl_BT-value;	
    12AD: 62 D0 00 MOV   REG[0xD0],0x0
    12B0: 52 FB    MOV   A,[X-5]
    12B2: 14 A3    SUB   [LEDControl_BT+1],A
    12B4: 52 FA    MOV   A,[X-6]
    12B6: 1C A2    SBB   [LEDControl_BT],A
(0125) 					if(LEDControl_BT<0)
    12B8: 51 A3    MOV   A,[LEDControl_BT+1]
    12BA: 11 00    SUB   A,0x0
    12BC: 51 A2    MOV   A,[LEDControl_BT]
    12BE: 31 80    XOR   A,0x80
    12C0: 19 80    SBB   A,0x80
    12C2: D0 5A    JNC   0x131D
(0126) 					LEDControl_BT=0;
    12C4: 62 D0 00 MOV   REG[0xD0],0x0
    12C7: 55 A3 00 MOV   [LEDControl_BT+1],0x0
    12CA: 55 A2 00 MOV   [LEDControl_BT],0x0
(0127) 				}
(0128) 				break;
    12CD: 80 4F    JMP   0x131D
(0129) 			case GREEN:
(0130) 				if (isAdd)
    12CF: 3D F9 00 CMP   [X-7],0x0
    12D2: A0 2A    JZ    0x12FD
(0131) 				{
(0132) 					LEDControl_GT=LEDControl_GT+value;
    12D4: 62 D0 00 MOV   REG[0xD0],0x0
    12D7: 52 FB    MOV   A,[X-5]
    12D9: 04 AB    ADD   [LEDControl_GT+1],A
    12DB: 52 FA    MOV   A,[X-6]
    12DD: 0C AA    ADC   [LEDControl_GT],A
(0133) 					if(LEDControl_GT>IntervalLimit)
    12DF: 50 50    MOV   A,0x50
    12E1: 12 AB    SUB   A,[LEDControl_GT+1]
    12E3: 51 AA    MOV   A,[LEDControl_GT]
    12E5: 31 80    XOR   A,0x80
    12E7: 62 D0 00 MOV   REG[0xD0],0x0
    12EA: 53 93    MOV   [__rX],A
    12EC: 50 80    MOV   A,0x80
    12EE: 1A 93    SBB   A,[__rX]
    12F0: D0 2C    JNC   0x131D
(0134) 					LEDControl_GT=IntervalLimit;
    12F2: 62 D0 00 MOV   REG[0xD0],0x0
    12F5: 55 AB 50 MOV   [LEDControl_GT+1],0x50
    12F8: 55 AA 00 MOV   [LEDControl_GT],0x0
(0135) 				}
    12FB: 80 21    JMP   0x131D
(0136) 				else 
(0137) 				{
(0138) 					LEDControl_GT=LEDControl_GT-value;	
    12FD: 62 D0 00 MOV   REG[0xD0],0x0
    1300: 52 FB    MOV   A,[X-5]
    1302: 14 AB    SUB   [LEDControl_GT+1],A
    1304: 52 FA    MOV   A,[X-6]
    1306: 1C AA    SBB   [LEDControl_GT],A
(0139) 					if(LEDControl_GT<0)
    1308: 51 AB    MOV   A,[LEDControl_GT+1]
    130A: 11 00    SUB   A,0x0
    130C: 51 AA    MOV   A,[LEDControl_GT]
    130E: 31 80    XOR   A,0x80
    1310: 19 80    SBB   A,0x80
    1312: D0 0A    JNC   0x131D
(0140) 					LEDControl_GT=0;
    1314: 62 D0 00 MOV   REG[0xD0],0x0
    1317: 55 AB 00 MOV   [LEDControl_GT+1],0x0
    131A: 55 AA 00 MOV   [LEDControl_GT],0x0
(0141) 				}
(0142) 				break;
(0143) 			default:
(0144) 				break; 
    131D: 38 FE    ADD   SP,0xFE
    131F: 20       POP   X
    1320: 7F       RET   
(0145) 		}
(0146) }
(0147) int LEDControl_Blink(BYTE led, int blinkLoop)
(0148) {
_LEDControl_Blink:
  blinkLoop            --> X-6
  led                  --> X-4
    1321: 10       PUSH  X
    1322: 4F       MOV   X,SP
    1323: 38 02    ADD   SP,0x2
(0149) 	switch (led)
    1325: 52 FC    MOV   A,[X-4]
    1327: 54 01    MOV   [X+1],A
    1329: 56 00 00 MOV   [X+0],0x0
    132C: 3D 00 00 CMP   [X+0],0x0
    132F: B0 06    JNZ   0x1336
    1331: 3D 01 01 CMP   [X+1],0x1
    1334: A0 47    JZ    0x137C
    1336: 3D 00 00 CMP   [X+0],0x0
    1339: B0 06    JNZ   0x1340
    133B: 3D 01 02 CMP   [X+1],0x2
    133E: A0 6D    JZ    0x13AC
    1340: 3D 00 00 CMP   [X+0],0x0
    1343: B0 06    JNZ   0x134A
    1345: 3D 01 03 CMP   [X+1],0x3
    1348: A0 03    JZ    0x134C
    134A: 80 91    JMP   0x13DC
(0150) 		{
(0151) 			case RED:
(0152) 				if (blinkLoop>=LEDControl_RT)
    134C: 62 D0 00 MOV   REG[0xD0],0x0
    134F: 52 FB    MOV   A,[X-5]
    1351: 12 A9    SUB   A,[LEDControl_RT+1]
    1353: 51 A8    MOV   A,[LEDControl_RT]
    1355: 31 80    XOR   A,0x80
    1357: 62 D0 00 MOV   REG[0xD0],0x0
    135A: 53 93    MOV   [__rX],A
    135C: 52 FA    MOV   A,[X-6]
    135E: 31 80    XOR   A,0x80
    1360: 1A 93    SBB   A,[__rX]
    1362: C0 0C    JC    0x136F
(0153) 				{
(0154) 					LED_RED_Invert();
    1364: 10       PUSH  X
    1365: 7C 02 F9 LCALL _LED_RED_Invert
    1368: 20       POP   X
(0155) 					blinkLoop = 0;
    1369: 56 FB 00 MOV   [X-5],0x0
    136C: 56 FA 00 MOV   [X-6],0x0
(0156) 				}
(0157) 				return blinkLoop;
    136F: 62 D0 00 MOV   REG[0xD0],0x0
    1372: 52 FB    MOV   A,[X-5]
    1374: 53 96    MOV   [__r1],A
    1376: 52 FA    MOV   A,[X-6]
    1378: 53 97    MOV   [__r0],A
    137A: 80 6C    JMP   0x13E7
(0158) 				break;
(0159) 			case BLUE:
(0160) 				if (blinkLoop>=LEDControl_BT)
    137C: 62 D0 00 MOV   REG[0xD0],0x0
    137F: 52 FB    MOV   A,[X-5]
    1381: 12 A3    SUB   A,[LEDControl_BT+1]
    1383: 51 A2    MOV   A,[LEDControl_BT]
    1385: 31 80    XOR   A,0x80
    1387: 62 D0 00 MOV   REG[0xD0],0x0
    138A: 53 93    MOV   [__rX],A
    138C: 52 FA    MOV   A,[X-6]
    138E: 31 80    XOR   A,0x80
    1390: 1A 93    SBB   A,[__rX]
    1392: C0 0C    JC    0x139F
(0161) 				{
(0162) 					LED_BLUE_Invert();
    1394: 10       PUSH  X
    1395: 7C 03 73 LCALL _LED_BLUE_Invert
    1398: 20       POP   X
(0163) 					blinkLoop = 0;
    1399: 56 FB 00 MOV   [X-5],0x0
    139C: 56 FA 00 MOV   [X-6],0x0
(0164) 				}
(0165) 				return blinkLoop;
    139F: 62 D0 00 MOV   REG[0xD0],0x0
    13A2: 52 FB    MOV   A,[X-5]
    13A4: 53 96    MOV   [__r1],A
    13A6: 52 FA    MOV   A,[X-6]
    13A8: 53 97    MOV   [__r0],A
    13AA: 80 3C    JMP   0x13E7
(0166) 				break;
(0167) 			case GREEN:
(0168) 				if (blinkLoop>=LEDControl_GT)
    13AC: 62 D0 00 MOV   REG[0xD0],0x0
    13AF: 52 FB    MOV   A,[X-5]
    13B1: 12 AB    SUB   A,[LEDControl_GT+1]
    13B3: 51 AA    MOV   A,[LEDControl_GT]
    13B5: 31 80    XOR   A,0x80
    13B7: 62 D0 00 MOV   REG[0xD0],0x0
    13BA: 53 93    MOV   [__rX],A
    13BC: 52 FA    MOV   A,[X-6]
    13BE: 31 80    XOR   A,0x80
    13C0: 1A 93    SBB   A,[__rX]
    13C2: C0 0C    JC    0x13CF
(0169) 				{
(0170) 					LED_GREEN_Invert();
    13C4: 10       PUSH  X
    13C5: 7C 03 36 LCALL _LED_GREEN_Invert
    13C8: 20       POP   X
(0171) 					blinkLoop = 0;
    13C9: 56 FB 00 MOV   [X-5],0x0
    13CC: 56 FA 00 MOV   [X-6],0x0
(0172) 				}
(0173) 				return blinkLoop;
    13CF: 62 D0 00 MOV   REG[0xD0],0x0
    13D2: 52 FB    MOV   A,[X-5]
    13D4: 53 96    MOV   [__r1],A
    13D6: 52 FA    MOV   A,[X-6]
    13D8: 53 97    MOV   [__r0],A
    13DA: 80 0C    JMP   0x13E7
(0174) 				break;
(0175) 			default:
(0176) 			return blinkLoop;
    13DC: 62 D0 00 MOV   REG[0xD0],0x0
    13DF: 52 FB    MOV   A,[X-5]
    13E1: 53 96    MOV   [__r1],A
    13E3: 52 FA    MOV   A,[X-6]
    13E5: 53 97    MOV   [__r0],A
(0177) 				break; 
    13E7: 38 FE    ADD   SP,0xFE
(0178) 		}
(0179) }
FILE: D:\Studia\PSOC\CapSense\CapSense\CapSense\main.c
(0001) #include <m8c.h>        
(0002) #include "PSoCAPI.h"    
(0003) #include "LEDControl.h"
(0004) #include "CapSenseControl.h"
(0005) 
(0006) void main(void)
(0007) {	
_main:
  CSC_SRS              --> X+2
  blinkLoop            --> X+0
    13EB: 10       PUSH  X
    13EC: 4F       MOV   X,SP
    13ED: 38 06    ADD   SP,0x6
(0008) 	int blinkLoop=0;	 		
    13EF: 56 01 00 MOV   [X+1],0x0
    13F2: 56 00 00 MOV   [X+0],0x0
(0009) 	M8C_EnableGInt ; 
    13F5: 71 01    OR    F,0x1
(0010) 	LEDControl_INIT();
    13F7: 7C 10 D8 LCALL _LEDControl_INIT
(0011) 	CapSenseControl_INIT();
    13FA: 7C 0E 71 LCALL __UserModules_end|__text_start|_CapSenseControl_INIT|_CapSenseControl_INIT
    13FD: 80 BD    JMP   0x14BB
(0012) 	while(1)
(0013) 	{	
(0014) 		CapSenseControl_ScanStruct CSC_SRS;
(0015) 		
(0016) 		blinkLoop++;
    13FF: 77 01    INC   [X+1]
    1401: 0F 00 00 ADC   [X+0],0x0
(0017) 		blinkLoop=LEDControl_Blink(CapSenseControl_Data.led,blinkLoop);
    1404: 52 00    MOV   A,[X+0]
    1406: 08       PUSH  A
    1407: 52 01    MOV   A,[X+1]
    1409: 08       PUSH  A
    140A: 62 D0 00 MOV   REG[0xD0],0x0
    140D: 51 A6    MOV   A,[CapSenseControl_Data]
    140F: 08       PUSH  A
    1410: 7C 13 21 LCALL _LEDControl_Blink
    1413: 62 D0 00 MOV   REG[0xD0],0x0
    1416: 51 96    MOV   A,[__r1]
    1418: 54 01    MOV   [X+1],A
    141A: 51 97    MOV   A,[__r0]
    141C: 54 00    MOV   [X+0],A
(0018) 		
(0019) 		CSC_SRS = CapSenseControl_DoScan();
    141E: 5A 96    MOV   [__r1],X
    1420: 06 96 02 ADD   [__r1],0x2
    1423: 50 01    MOV   A,0x1
    1425: 08       PUSH  A
    1426: 51 96    MOV   A,[__r1]
    1428: 08       PUSH  A
    1429: 7C 10 92 LCALL _CapSenseControl_DoScan
    142C: 38 FB    ADD   SP,0xFB
(0020) 		switch (CSC_SRS.action)
    142E: 52 02    MOV   A,[X+2]
    1430: 54 05    MOV   [X+5],A
    1432: 56 04 00 MOV   [X+4],0x0
    1435: 3D 04 00 CMP   [X+4],0x0
    1438: B0 06    JNZ   0x143F
    143A: 3D 05 01 CMP   [X+5],0x1
    143D: A0 21    JZ    0x145F
    143F: 3D 04 00 CMP   [X+4],0x0
    1442: B0 06    JNZ   0x1449
    1444: 3D 05 02 CMP   [X+5],0x2
    1447: A0 34    JZ    0x147C
    1449: 3D 04 00 CMP   [X+4],0x0
    144C: B0 06    JNZ   0x1453
    144E: 3D 05 03 CMP   [X+5],0x3
    1451: A0 47    JZ    0x1499
    1453: 3D 04 00 CMP   [X+4],0x0
    1456: B0 06    JNZ   0x145D
    1458: 3D 05 04 CMP   [X+5],0x4
    145B: A0 4F    JZ    0x14AB
    145D: 80 5D    JMP   0x14BB
(0021) 		{
(0022) 			case 1:
(0023) 				LEDControl_ChangeFrequency(CapSenseControl_Data.led,CSC_SRS.value,FALSE);	
    145F: 50 00    MOV   A,0x0
    1461: 08       PUSH  A
    1462: 62 D0 00 MOV   REG[0xD0],0x0
    1465: 52 03    MOV   A,[X+3]
    1467: 53 96    MOV   [__r1],A
    1469: 50 00    MOV   A,0x0
    146B: 08       PUSH  A
    146C: 51 96    MOV   A,[__r1]
    146E: 08       PUSH  A
    146F: 62 D0 00 MOV   REG[0xD0],0x0
    1472: 51 A6    MOV   A,[CapSenseControl_Data]
    1474: 08       PUSH  A
    1475: 7C 12 04 LCALL _LEDControl_ChangeFrequency
    1478: 38 FC    ADD   SP,0xFC
(0024) 				break;
    147A: 80 40    JMP   0x14BB
(0025) 			case 2:
(0026) 				LEDControl_ChangeFrequency(CapSenseControl_Data.led,CSC_SRS.value,TRUE);
    147C: 50 01    MOV   A,0x1
    147E: 08       PUSH  A
    147F: 62 D0 00 MOV   REG[0xD0],0x0
    1482: 52 03    MOV   A,[X+3]
    1484: 53 96    MOV   [__r1],A
    1486: 50 00    MOV   A,0x0
    1488: 08       PUSH  A
    1489: 51 96    MOV   A,[__r1]
    148B: 08       PUSH  A
    148C: 62 D0 00 MOV   REG[0xD0],0x0
    148F: 51 A6    MOV   A,[CapSenseControl_Data]
    1491: 08       PUSH  A
    1492: 7C 12 04 LCALL _LEDControl_ChangeFrequency
    1495: 38 FC    ADD   SP,0xFC
(0027) 				break;
    1497: 80 23    JMP   0x14BB
(0028) 			case 3:		
(0029) 				CapSenseControl_Data.led = LEDControl_ChangeStateSwitch(CSC_SRS.value,TRUE);
    1499: 50 01    MOV   A,0x1
    149B: 08       PUSH  A
    149C: 52 03    MOV   A,[X+3]
    149E: 08       PUSH  A
    149F: 7C 11 1E LCALL _LEDControl_ChangeStateSwitch
    14A2: 38 FE    ADD   SP,0xFE
    14A4: 62 D0 00 MOV   REG[0xD0],0x0
    14A7: 53 A6    MOV   [CapSenseControl_Data],A
(0030) 				break;
    14A9: 80 11    JMP   0x14BB
(0031) 			case 4:		
(0032) 				CapSenseControl_Data.led = LEDControl_ChangeStateSwitch(CSC_SRS.value,FALSE);
    14AB: 50 00    MOV   A,0x0
    14AD: 08       PUSH  A
    14AE: 52 03    MOV   A,[X+3]
    14B0: 08       PUSH  A
    14B1: 7C 11 1E LCALL _LEDControl_ChangeStateSwitch
    14B4: 38 FE    ADD   SP,0xFE
    14B6: 62 D0 00 MOV   REG[0xD0],0x0
    14B9: 53 A6    MOV   [CapSenseControl_Data],A
(0033) 				break;
(0034) 			default:
(0035) 				break; 
(0036) 		}	
(0037) 	}
    14BB: 8F 43    JMP   0x13FF
(0038) }
    14BD: 38 FA    ADD   SP,0xFA
    14BF: 20       POP   X
    14C0: 8F FF    JMP   0x14C0
_abs:
    1549: 10       PUSH  X
    154A: 4F       MOV   X,SP
    154B: 38 02    ADD   SP,0x2
    154D: 52 FC    MOV   A,[X-4]
    154F: 11 00    SUB   A,0x0
    1551: 52 FB    MOV   A,[X-5]
    1553: 31 80    XOR   A,0x80
    1555: 19 80    SBB   A,0x80
    1557: C0 0B    JC    0x1563
    1559: 52 FC    MOV   A,[X-4]
    155B: 54 01    MOV   [X+1],A
    155D: 52 FB    MOV   A,[X-5]
    155F: 54 00    MOV   [X+0],A
    1561: 80 0F    JMP   0x1571
    1563: 52 FC    MOV   A,[X-4]
    1565: 73       CPL   A
    1566: 11 FF    SUB   A,0xFF
    1568: 54 01    MOV   [X+1],A
    156A: 52 FB    MOV   A,[X-5]
    156C: 73       CPL   A
    156D: 19 FF    SBB   A,0xFF
    156F: 54 00    MOV   [X+0],A
    1571: 62 D0 00 MOV   REG[0xD0],0x0
    1574: 52 01    MOV   A,[X+1]
    1576: 53 96    MOV   [__r1],A
    1578: 52 00    MOV   A,[X+0]
    157A: 53 97    MOV   [__r0],A
    157C: 38 FE    ADD   SP,0xFE
    157E: 20       POP   X
    157F: 7F       RET   
