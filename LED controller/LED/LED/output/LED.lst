FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C21x34 microcontroller devices.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0068) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0069) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0070) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0071) ; bytes on the stack which are otherwise required for the return address. If
                                        (0072) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0073) ; release, the C compiler automatically places an infinite loop at the end
                                        (0074) ; of main, rather than a return instruction.)
                                        (0075) ;
                                        (0076) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0077) 
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ; Interrupt Vector Table
                                        (0081) ;-----------------------------------------------------------------------------
                                        (0082) ;
                                        (0083) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0084) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0085) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0086) ; vector jump targets are modified automatically according to the user
                                        (0087) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0088) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0089) ; configuration files. If you need to hard code a vector, update the
                                        (0090) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0091) ; of this file.
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) 
                                        (0094)     AREA TOP (ROM, ABS, CON)
                                        (0095) 
                                        (0096)     org   0                        ;Reset Interrupt Vector
                                        (0097) IF	(TOOLCHAIN & HITECH)
                                        (0098) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0099) ELSE
0000: 80 67    JMP   0x0068             (0100)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0101) ENDIF
                                        (0102)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0103)     ;---------------------------------------------------
                                        (0104)     ; Insert your custom code below this banner
                                        (0105)     ;---------------------------------------------------
                                        (0106) 
                                        (0107)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0108)     halt                           ;Stop execution if power falls too low
                                        (0109) 
                                        (0110)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0111)     // call	void_handler
0008: 7E       RETI                     (0112)     reti
                                        (0113) 
                                        (0114)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0115)     // call	void_handler
000C: 7E       RETI                     (0116)     reti
                                        (0117) 
                                        (0118)     org   18h                      ;VC3 Interrupt Vector
                                        (0119)     // call	void_handler
0018: 7E       RETI                     (0120)     reti
                                        (0121) 
                                        (0122)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0123)     // call	void_handler
001C: 7E       RETI                     (0124)     reti
                                        (0125) 
                                        (0126)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0127)     // call	void_handler
0020: 7E       RETI                     (0128)     reti
                                        (0129) 
                                        (0130)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0131)     // call	void_handler
0024: 7E       RETI                     (0132)     reti
                                        (0133) 
                                        (0134)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0135)     // call	void_handler
0028: 7E       RETI                     (0136)     reti
                                        (0137) 
                                        (0138)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0139)     // call	void_handler
002C: 7E       RETI                     (0140)     reti
                                        (0141) 
                                        (0142)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0143)     // call	void_handler
0060: 7E       RETI                     (0144)     reti
                                        (0145) 
                                        (0146)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0147)     // call	void_handler
0064: 7E       RETI                     (0148)     reti
0068: 71 10    OR    F,0x10             
                                        (0149)     ;---------------------------------------------------
                                        (0150)     ; Insert your custom code above this banner
                                        (0151)     ;---------------------------------------------------
                                        (0152)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0153) 
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  Start of Execution.
                                        (0156) ;-----------------------------------------------------------------------------
                                        (0157) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0158) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0159) ;
                                        (0160) 
                                        (0161) IF	(TOOLCHAIN & HITECH)
                                        (0162)  	AREA PD_startup(CODE, REL, CON)
                                        (0163) ELSE
                                        (0164)     org 68h
                                        (0165) ENDIF
                                        (0166) __Start:
                                        (0167) 
                                        (0168)     ; initialize SMP values for voltage stabilization, if required,
                                        (0169)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0170)     ; least for now. 
                                        (0171)     ;
                                        (0172)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0173)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0174)     M8C_SetBank0
                                        (0175) 
                                        (0176) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0177) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0178)     M8C_EnableWatchDog
                                        (0179) ENDIF
                                        (0180) 
0072: 41 FE FB AND   REG[0xFE],0xFB     (0181)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0182) 
                                        (0183)     ;---------------------------
                                        (0184)     ; Set up the Temporary stack
                                        (0185)     ;---------------------------
                                        (0186)     ; A temporary stack is set up for the SSC instructions.
                                        (0187)     ; The real stack start will be assigned later.
                                        (0188)     ;
                                        (0189) _stack_start:          equ 80h
0075: 50 80    MOV   A,0x80             (0190)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0191)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0192) 
                                        (0193)     ;------------------------
                                        (0194)     ; Set Power-related Trim 
                                        (0195)     ;------------------------
                                        (0196)     
                                        (0197) M8C_ClearWDTAndSleep
                                        (0198) 
                                        (0199) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0200)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0201)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0202)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V
                                        (0203)  ENDIF
                                        (0204) ENDIF ; 5.0 V Operation
                                        (0205) 
                                        (0206) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0207)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0208)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0209)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V
                                        (0210)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0211)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V
                                        (0212)  ENDIF
                                        (0213) ENDIF ; 3.3 Volt Operation
                                        (0214) 
                                        (0215) IF ( POWER_SETTING & POWER_SET_2V7_12MHZ)      ; *** 2.7 Volts / 12MHZ operation ***
                                        (0216)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0217)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_12MHZ, SSCTBL2_TRIM_BGR_2V
                                        (0218) ENDIF ; *** 2.7 Volts / 12MHZ operation ***
                                        (0219) 
                                        (0220) IF ( POWER_SETTING & POWER_SET_2V7_6MHZ)       ; *** 2.7 Volts /  6MHZ operation ***
                                        (0221)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0222)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_6MHZ,  SSCTBL2_TRIM_BGR_2V
                                        (0223) ENDIF ; *** 2.7 Volts /  6MHZ operation ***
                                        (0224) 
007B: 55 F8 00 MOV   [LEDControl_RT+238],0x0(0225)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [LEDControl_RT+239],0x0(0226)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0227) 
                                        (0228)     ;---------------------------------------
                                        (0229)     ; Initialize Crystal Oscillator and PLL
                                        (0230)     ;---------------------------------------
                                        (0231) IF ( POWER_SETTING & POWER_SET_2V7)       ; *** 2.7 Volts  ***
                                        (0232)     M8C_SetBank1
                                        (0233)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_3MHz)
                                        (0234)     M8C_SetBank0
                                        (0235)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0236) 
                                        (0237) ELSE 	 ;*** all other voltages OK for 12Mhz ***
                                        (0238)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0239)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
008B: 62 D1 01 MOV   REG[0xD1],0x1      
                                        (0240)     M8C_SetBank0
                                        (0241)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0242) 
                                        (0243) ENDIF
                                        (0244) 
                                        (0245) 	;-------------------------------------------------------
                                        (0246)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0247)     ;-------------------------------------------------------
                                        (0248) 
                                        (0249)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0250) 
                                        (0251) IF (SYSCLK_SOURCE)
                                        (0252)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0253) ENDIF
                                        (0254)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0255) 
                                        (0256) IF	(TOOLCHAIN & HITECH)
                                        (0257)     ;---------------------------------------------
                                        (0258)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0259)     ;---------------------------------------------
                                        (0260) 	global		__Lstackps
                                        (0261) 	mov     a,low __Lstackps
                                        (0262) 	swap    a,sp
                                        (0263) 
                                        (0264) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0265)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0266)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0267)     RAM_SETPAGE_CUR 0
                                        (0268)     RAM_SETPAGE_MVW 0
                                        (0269)     RAM_SETPAGE_MVR 0
                                        (0270)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0271)       or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0272)     ELSE
                                        (0273)       or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0274)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0275) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0276) ELSE
                                        (0277)     ;---------------------------------------------
                                        (0278)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0279)     ;---------------------------------------------
                                        (0280) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0281)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
008E: 50 00    MOV   A,0x0              (0282)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
0090: 4E       SWAP  SP,A               (0283)     swap  A, SP
0091: 62 D3 01 MOV   REG[0xD3],0x1      
0094: 62 D0 00 MOV   REG[0xD0],0x0      
0097: 62 D5 00 MOV   REG[0xD5],0x0      
009A: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0284)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0285)     RAM_SETPAGE_CUR 0
                                        (0286)     RAM_SETPAGE_MVW 0
                                        (0287)     RAM_SETPAGE_MVR 0
                                        (0288) 
                                        (0289)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
009D: 71 C0    OR    F,0xC0             (0290)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0291)   ELSE
                                        (0292)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0293)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0294) ELSE
                                        (0295)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0296)     swap  SP, A
                                        (0297) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0298) ENDIF ;	TOOLCHAIN
                                        (0299) 
                                        (0300)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0301)     ;---------------------------------------------------
                                        (0302)     ; Insert your custom code below this banner
                                        (0303)     ;---------------------------------------------------
                                        (0304) 
                                        (0305)     ;---------------------------------------------------
                                        (0306)     ; Insert your custom code above this banner
                                        (0307)     ;---------------------------------------------------
                                        (0308)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0309) 
                                        (0310)     ;-------------------------
                                        (0311)     ; Load Base Configuration
                                        (0312)     ;-------------------------
                                        (0313)     ; Load global parameter settings and load the user modules in the
                                        (0314)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0315)     ; to minimize start up time; (2) We may still need to play with the
                                        (0316)     ; Sleep Timer.
                                        (0317)     ;
009F: 7C 02 3F LCALL 0x023F             (0318)     lcall LoadConfigInit
                                        (0319) 
                                        (0320)     ;-----------------------------------
                                        (0321)     ; Initialize C Run-Time Environment
                                        (0322)     ;-----------------------------------
                                        (0323) IF ( C_LANGUAGE_SUPPORT )
                                        (0324) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0325)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0326)     mov  [__r0],<__bss_start
                                        (0327) BssLoop:
                                        (0328)     cmp  [__r0],<__bss_end
                                        (0329)     jz   BssDone
                                        (0330)     mvi  [__r0],A
                                        (0331)     jmp  BssLoop
                                        (0332) BssDone:
                                        (0333)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0334)     mov  X,<__idata_start
                                        (0335)     mov  [__r0],<__data_start
                                        (0336) IDataLoop:
                                        (0337)     cmp  [__r0],<__data_end
                                        (0338)     jz   C_RTE_Done
                                        (0339)     push A
                                        (0340)     romx
                                        (0341)     mvi  [__r0],A
                                        (0342)     pop  A
                                        (0343)     inc  X
                                        (0344)     adc  A,0
                                        (0345)     jmp  IDataLoop
                                        (0346) 
                                        (0347) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0348) 
                                        (0349) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00A2: 62 D0 00 MOV   REG[0xD0],0x0      (0350)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0351)                                        ; to use the Virtual Register page.
                                        (0352) 
                                        (0353)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0354)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0355)     ; text segment and may have been relocated by the Code Compressor.
                                        (0356)     ;
00A5: 50 01    MOV   A,0x1              (0357)     mov   A, >__pXIData                ; Get the address of the flash
00A7: 57 B8    MOV   X,0xB8             (0358)     mov   X, <__pXIData                ;   pointer to the xidata area.
00A9: 08       PUSH  A                  (0359)     push  A
00AA: 28       ROMX                     (0360)     romx                               ; get the MSB of xidata's address
00AB: 53 05    MOV   [__r0],A           (0361)     mov   [__r0], A
00AD: 18       POP   A                  (0362)     pop   A
00AE: 75       INC   X                  (0363)     inc   X
00AF: 09 00    ADC   A,0x0              (0364)     adc   A, 0
00B1: 28       ROMX                     (0365)     romx                               ; get the LSB of xidata's address
00B2: 4B       SWAP  A,X                (0366)     swap  A, X
00B3: 51 05    MOV   A,[__r0]           (0367)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0368)                                        ;   XIData structure list in flash
00B5: 80 04    JMP   0x00BA             (0369)     jmp   .AccessStruct
                                        (0370) 
                                        (0371)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0372)     ; values of C variables. Each structure contains 3 member elements.
                                        (0373)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0374)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0375)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0376)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0377)     ; value in the second member element, an unsigned byte:
                                        (0378)     ; (1) If the value of the second element is non-zero, it represents
                                        (0379)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0380)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0381)     ; the bytes are copied to the block of RAM.
                                        (0382)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0383)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0384)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0385) 
                                        (0386) .AccessNextStructLoop:
00B7: 75       INC   X                  (0387)     inc   X                            ; pXIData++
00B8: 09 00    ADC   A,0x0              (0388)     adc   A, 0
00BA: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0389) .AccessStruct:                         ; Entry point for first block
                                        (0390)     ;
                                        (0391)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0392)     ;
                                        (0393)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00BD: 08       PUSH  A                  (0394)     push  A
00BE: 28       ROMX                     (0395)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00BF: 60 D5    MOV   REG[0xD5],A        (0396)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00C1: 74       INC   A                  (0397)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00C2: A0 4B    JZ    0x010E             (0398)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00C4: 18       POP   A                  (0399)     pop   A                            ; restore pXIData to [A,X]
00C5: 75       INC   X                  (0400)     inc   X                            ; pXIData++
00C6: 09 00    ADC   A,0x0              (0401)     adc   A, 0
00C8: 08       PUSH  A                  (0402)     push  A
00C9: 28       ROMX                     (0403)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00CA: 53 05    MOV   [__r0],A           (0404)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00CC: 18       POP   A                  (0405)     pop   A                            ; restore pXIData to [A,X]
00CD: 75       INC   X                  (0406)     inc   X                            ; pXIData++ (point to size)
00CE: 09 00    ADC   A,0x0              (0407)     adc   A, 0
00D0: 08       PUSH  A                  (0408)     push  A
00D1: 28       ROMX                     (0409)     romx                               ; Get the size (CPU.A <- *pXIData)
00D2: A0 1C    JZ    0x00EF             (0410)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00D4: 53 04    MOV   [__r1],A           (0411)     mov   [__r1], A                    ;             else downcount in __r1
00D6: 18       POP   A                  (0412)     pop   A                            ; restore pXIData to [A,X]
                                        (0413) 
                                        (0414) .CopyNextByteLoop:
                                        (0415)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0416)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0417)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0418)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0419)     ;
00D7: 75       INC   X                  (0420)     inc   X                            ; pXIData++ (point to next data byte)
00D8: 09 00    ADC   A,0x0              (0421)     adc   A, 0
00DA: 08       PUSH  A                  (0422)     push  A
00DB: 28       ROMX                     (0423)     romx                               ; Get the data value (CPU.A <- *pXIData)
00DC: 3F 05    MVI   [__r0],A           (0424)     mvi   [__r0], A                    ; Transfer the data to RAM
00DE: 47 05 FF TST   [__r0],0xFF        (0425)     tst   [__r0], 0xff                 ; Check for page crossing
00E1: B0 06    JNZ   0x00E8             (0426)     jnz   .CopyLoopTail                ;   No crossing, keep going
00E3: 5D D5    MOV   A,REG[0xD5]        (0427)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00E5: 74       INC   A                  (0428)     inc   A
00E6: 60 D5    MOV   REG[0xD5],A        (0429)     mov   reg[ MVW_PP], A
                                        (0430) .CopyLoopTail:
00E8: 18       POP   A                  (0431)     pop   A                            ; restore pXIData to [A,X]
00E9: 7A 04    DEC   [__r1]             (0432)     dec   [__r1]                       ; End of this array in flash?
00EB: BF EB    JNZ   0x00D7             (0433)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
00ED: 8F C9    JMP   0x00B7             (0434)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0435) 
                                        (0436) .ClearRAMBlockToZero:
00EF: 18       POP   A                  (0437)     pop   A                            ; restore pXIData to [A,X]
00F0: 75       INC   X                  (0438)     inc   X                            ; pXIData++ (point to next data byte)
00F1: 09 00    ADC   A,0x0              (0439)     adc   A, 0
00F3: 08       PUSH  A                  (0440)     push  A
00F4: 28       ROMX                     (0441)     romx                               ; Get the run length (CPU.A <- *pXIData)
00F5: 53 04    MOV   [__r1],A           (0442)     mov   [__r1], A                    ; Initialize downcounter
00F7: 50 00    MOV   A,0x0              (0443)     mov   A, 0                         ; Initialize source data
                                        (0444) 
                                        (0445) .ClearRAMBlockLoop:
                                        (0446)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0447)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0448)     ;
00F9: 3F 05    MVI   [__r0],A           (0449)     mvi   [__r0], A                    ; Clear a byte
00FB: 47 05 FF TST   [__r0],0xFF        (0450)     tst   [__r0], 0xff                 ; Check for page crossing
00FE: B0 08    JNZ   0x0107             (0451)     jnz   .ClearLoopTail               ;   No crossing, keep going
0100: 5D D5    MOV   A,REG[0xD5]        (0452)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0102: 74       INC   A                  (0453)     inc   A
0103: 60 D5    MOV   REG[0xD5],A        (0454)     mov   reg[ MVW_PP], A
0105: 50 00    MOV   A,0x0              (0455)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0456) .ClearLoopTail:
0107: 7A 04    DEC   [__r1]             (0457)     dec   [__r1]                       ; Was this the last byte?
0109: BF EF    JNZ   0x00F9             (0458)     jnz   .ClearRAMBlockLoop           ;   No,  continue
010B: 18       POP   A                  (0459)     pop   A                            ;   Yes, restore pXIData to [A,X] and
010C: 8F AA    JMP   0x00B7             (0460)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0461) 
                                        (0462) .C_RTE_WrapUp:
010E: 18       POP   A                  (0463)     pop   A                            ; balance stack
010F: 71 10    OR    F,0x10             
                                        (0464) 
                                        (0465) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0466) 
                                        (0467) C_RTE_Done:
                                        (0468) 
                                        (0469) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0470) 
                                        (0471)     ;-------------------------------
                                        (0472)     ; Voltage Stabilization for SMP
                                        (0473)     ;-------------------------------
                                        (0474) 
                                        (0475) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0476) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0477)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0478)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0479)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0480)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0481)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0482)     M8C_SetBank1
                                        (0483)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0484)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0485)     M8C_SetBank0
                                        (0486)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0487)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0488) .WaitFor2ms:
                                        (0489)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0490)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0491) ENDIF ; SMP is operational
                                        (0492) ENDIF ; 5.0V Operation
                                        (0493) 
                                        (0494)     ;-------------------------------
                                        (0495)     ; Set Power-On Reset (POR) Level
                                        (0496)     ;-------------------------------
                                        (0497)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0498)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0499)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0500)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0501)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0502) 
                                        (0503)     M8C_SetBank1
                                        (0504) 
                                        (0505) IF (POWER_SETTING & POWER_SET_2V7)             ; 2.7V Operation?
                                        (0506)                                                ;  Yes, lowest trip already set
                                        (0507) ELSE                                           ;   No, must adjust POR...
                                        (0508) IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
                                        (0509)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, change to midpoint trip
                                        (0510) ELSE
                                        (0511) IF (POWER_SETTING & POWER_SET_5V0)             ; 5.0V Operation?
                                        (0512)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)       ; and Slow Mode?
                                        (0513)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, set to midpoint trip
                                        (0514)  ELSE                                          ;    No, fast mode
                                        (0515)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
0111: 43 E3 10 OR    REG[0xE3],0x10     (0516)     or   reg[VLT_CR], VLT_CR_POR_MID           ;         No, change to midpoint trip
0114: 70 EF    AND   F,0xEF             
                                        (0517)   ELSE ; 24HMz                                 ;
                                        (0518)     or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
                                        (0519)   ENDIF ; 24MHz
                                        (0520)  ENDIF ; Slow Mode
                                        (0521) ENDIF ; 5.0V Operation
                                        (0522) ENDIF ; 3.3V Operation
                                        (0523) ENDIF ; 2.7V Operation
                                        (0524) 
                                        (0525)     M8C_SetBank0
                                        (0526) 
                                        (0527)     ;----------------------------
                                        (0528)     ; Wrap up and invoke "main"
                                        (0529)     ;----------------------------
                                        (0530) 
                                        (0531)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0532)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0533)     ;
0116: 62 E0 00 MOV   REG[0xE0],0x0      (0534)     mov  reg[INT_MSK0],0
0119: 71 10    OR    F,0x10             
                                        (0535) 
                                        (0536)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0537)     ;
                                        (0538)     M8C_SetBank1
011B: 62 E0 00 MOV   REG[0xE0],0x0      (0539)     mov  reg[OSC_CR0],(SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
011E: 70 EF    AND   F,0xEF             
                                        (0540)     M8C_SetBank0
                                        (0541) 
                                        (0542)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0543)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0544)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0545)     ;
0120: 62 E2 00 MOV   REG[0xE2],0x0      (0546)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0547)                                    ; have been set during the boot process.
                                        (0548) IF	(TOOLCHAIN & HITECH)
                                        (0549) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0550) ELSE
                                        (0551) IF ENABLE_LJMP_TO_MAIN
                                        (0552)     ljmp  _main                    ; goto main (no return)
                                        (0553) ELSE
0123: 7C 06 B8 LCALL _main              (0554)     lcall _main                    ; call main
                                        (0555) .Exit:
0126: 8F FF    JMP   0x0126             (0556)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0557) ENDIF
                                        (0558) ENDIF ; TOOLCHAIN
                                        (0559) 
                                        (0560)     ;---------------------------------
                                        (0561)     ; Library Access to Global Parms
                                        (0562)     ;---------------------------------
                                        (0563)     ;
                                        (0564)  bGetPowerSetting:
                                        (0565) _bGetPowerSetting:
                                        (0566)     ; Returns value of POWER_SETTING in the A register.
                                        (0567)     ; No inputs. No Side Effects.
                                        (0568)     ;
                                        (0569) IF (POWER_SETTING & POWER_SET_2V7)
                                        (0570)     mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
                                        (0571) ELSE
0128: 50 10    MOV   A,0x10             (0572)     mov   A, POWER_SETTING          ; Supply voltage and internal main osc
                                        (0573) ENDIF
012A: 7F       RET                      (0574)     ret
                                        (0575) 
                                        (0576) IF	(TOOLCHAIN & HITECH)
                                        (0577) ELSE
                                        (0578)     ;---------------------------------
                                        (0579)     ; Order Critical RAM & ROM AREAs
                                        (0580)     ;---------------------------------
                                        (0581)     ;  'TOP' is all that has been defined so far...
                                        (0582) 
                                        (0583)     ;  ROM AREAs for C CONST, static & global items
                                        (0584)     ;
                                        (0585)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0586)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0587) __idata_start:
                                        (0588) 
                                        (0589)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0590) __func_lit_start:
                                        (0591) 
                                        (0592) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0593)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0594)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0595)     ; relocated by the code compressor, but the text area may shrink and
                                        (0596)     ; that moves xidata around.
                                        (0597)     ;
                                        (0598) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0599) ENDIF
                                        (0600) 
                                        (0601)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0602)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0603) 
                                        (0604)     ; CODE segment for general use
                                        (0605)     ;
                                        (0606)     AREA text (ROM, REL, CON)
                                        (0607) __text_start:
                                        (0608) 
                                        (0609)     ; RAM area usage
                                        (0610)     ;
                                        (0611)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0612) __data_start:
                                        (0613) 
                                        (0614)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0615)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0616)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0617) __bss_start:
                                        (0618) ENDIF ; TOOLCHAIN
                                        (0619) ; end of file boot.asm
FILE: D:\Studia\PSOC\LED\LED\LED\ledcontrol.c
(0001) #include "LEDControl.h" // Dodanie naglowka
(0002) #include <m8c.h>        // Biblioteka zawierająca typy danych, stale etc.
(0003) #include "PSoCAPI.h"    // Biblioteka zaweriajace funkcje dla peryferiów
(0004) 
(0005) //Definiowanie stalej dla maksymalnej wartosci interwalu
(0006) #define IntervalLimit 80
(0007) 
(0008) //Definiowanie stalych dla kolorow diod, implementacja enum w C
(0009) #define BLUE   1
(0010) #define GREEN  2
(0011) #define RED    3
(0012) 
(0013) //Inicjalizacja wartosci czestotliwosci migania diod
(0014) LEDControl_RT = 50;
(0015) LEDControl_BT = 50;
(0016) LEDControl_GT = 50;
(0017) 
(0018) /// <summary>
(0019) /// Funkcja inicjalizująca diody
(0020) /// </summary>
(0021) /// <remarks> 
(0022) /// <para>[nazwa modulu]_Start() - w praktyce to samo dzialanie co _Stop, inicjalizuje modul oraz 
(0023) /// wylacza wybrana diode niezależnie od stanu ustawionego w module</para>
(0024) /// <para>LED_RED_On() - wlacza diode czerwona</para>
(0025) /// </remarks>
(0026) void LEDControl_INIT(void)
(0027) {
(0028)   LED_BLUE_Start(); 
__UserModules_end|__text_start|_LEDControl_INIT|_LEDControl_INIT:
    035B: 10       PUSH  X
    035C: 7C 03 22 LCALL _LED_BLUE_Stop|_LED_BLUE_Off|_LED_BLUE_Start|LED_BLUE_Start|LED_BLUE_Off
(0029)   LED_GREEN_Start();
    035F: 7C 02 E5 LCALL _LED_GREEN_Start|LED_GREEN_Stop|_LED_GREEN_Off|_LED_GREEN_Stop|LED_GREEN_Off
(0030)   LED_RED_Start();
    0362: 7C 02 A8 LCALL _LED_RED_Off|LED_RED_Stop|LED_RED_Start|_LED_RED_Stop|_LED_RED_Start
(0031)   LED_RED_On();
    0365: 7C 02 A4 LCALL _LED_RED_On
    0368: 20       POP   X
    0369: 7F       RET   
(0032) }
(0033) 
(0034) /// <summary>
(0035) /// Funkcja służy do bezpośredniego sterowania diodami.
(0036) /// </summary>
(0037) /// <remarks>
(0038) /// <para>Funkcja przyjmuje 3 paramatry TRUE/FALSE. TRUE wlacza dioda, FALSE wylacza</para>
(0039) /// <para>[nazwa modulu]_On() wlaczenie diody</para>
(0040) /// <para>[nazwa modulu]_Off() wylaczenie diody</para>
(0041) /// </remarks>
(0042) /// <param name="red">Dioda czerwona</param>
(0043) /// <param name="green">Dioda zielona</param>
(0044) /// <param name="blue">Dioda niebieska</param>
(0045) 
(0046) void LEDControl_ChangeState(BOOL red,BOOL green,BOOL blue)
(0047) {
_LEDControl_ChangeState:
  blue                 --> X-6
  green                --> X-5
  red                  --> X-4
    036A: 10       PUSH  X
    036B: 4F       MOV   X,SP
(0048)   if (red)
    036C: 3D FC 00 CMP   [X-4],0x0
    036F: A0 08    JZ    0x0378
(0049)     LED_RED_On();
    0371: 10       PUSH  X
    0372: 7C 02 A4 LCALL _LED_RED_On
    0375: 20       POP   X
    0376: 80 06    JMP   0x037D
(0050)   else
(0051)     LED_RED_Off();
    0378: 10       PUSH  X
    0379: 7C 02 A8 LCALL _LED_RED_Off|LED_RED_Stop|LED_RED_Start|_LED_RED_Stop|_LED_RED_Start
    037C: 20       POP   X
(0052)   if (green)
    037D: 3D FB 00 CMP   [X-5],0x0
    0380: A0 08    JZ    0x0389
(0053)     LED_GREEN_On();
    0382: 10       PUSH  X
    0383: 7C 02 E1 LCALL _LED_GREEN_On
    0386: 20       POP   X
    0387: 80 06    JMP   0x038E
(0054)   else
(0055)     LED_GREEN_Off();
    0389: 10       PUSH  X
    038A: 7C 02 E5 LCALL _LED_GREEN_Start|LED_GREEN_Stop|_LED_GREEN_Off|_LED_GREEN_Stop|LED_GREEN_Off
    038D: 20       POP   X
(0056)   if (blue)
    038E: 3D FA 00 CMP   [X-6],0x0
    0391: A0 08    JZ    0x039A
(0057)     LED_BLUE_On();
    0393: 10       PUSH  X
    0394: 7C 03 1E LCALL _LED_BLUE_On
    0397: 20       POP   X
    0398: 80 06    JMP   0x039F
(0058)   else
(0059)     LED_BLUE_Off();
    039A: 10       PUSH  X
    039B: 7C 03 22 LCALL _LED_BLUE_Stop|_LED_BLUE_Off|_LED_BLUE_Start|LED_BLUE_Start|LED_BLUE_Off
    039E: 20       POP   X
    039F: 20       POP   X
    03A0: 7F       RET   
(0060) }
(0061) 
(0062) /// <summary>
(0063) /// Funkcja zmienia aktualnie swiecaca diode oraz zwraca jej numer
(0064) /// </summary>
(0065) /// <returns>
(0066) /// Zwraca wartość 0,1,2 lub 3, zgodna z ENUM[BLUE,GREEN,RED] oraz wykorzystuje funkcje <c>LEDControl_ChangeState()</c>
(0067) /// </returns>
(0068) /// <param name="led">Zmienna do której przekazujemy aktualnie aktywną diode ENUM[BLUE,GREEN,RED]</param>
(0069) /// <param name="isASC">Jesli isASC: TRUE - kolejność od lewej do prawej, False - kolejność od prawej do lewej</param>
(0070) BYTE LEDControl_ChangeStateSwitch(BYTE led ,BOOL isASC)
(0071) {
_LEDControl_ChangeStateSwitch:
  isASC                --> X-5
  led                  --> X-4
    03A1: 10       PUSH  X
    03A2: 4F       MOV   X,SP
    03A3: 38 0A    ADD   SP,0xA
(0072)   switch (led)
    03A5: 52 FC    MOV   A,[X-4]
    03A7: 54 01    MOV   [X+1],A
    03A9: 56 00 00 MOV   [X+0],0x0
    03AC: 3D 00 00 CMP   [X+0],0x0
    03AF: B0 06    JNZ   0x03B6
    03B1: 3D 01 00 CMP   [X+1],0x0
    03B4: A0 21    JZ    0x03D6
    03B6: 3D 00 00 CMP   [X+0],0x0
    03B9: B0 06    JNZ   0x03C0
    03BB: 3D 01 01 CMP   [X+1],0x1
    03BE: A0 85    JZ    0x0444
    03C0: 3D 00 00 CMP   [X+0],0x0
    03C3: B0 06    JNZ   0x03CA
    03C5: 3D 01 02 CMP   [X+1],0x2
    03C8: A0 44    JZ    0x040D
    03CA: 3D 00 00 CMP   [X+0],0x0
    03CD: B0 06    JNZ   0x03D4
    03CF: 3D 01 03 CMP   [X+1],0x3
    03D2: A0 AA    JZ    0x047D
    03D4: 80 E1    JMP   0x04B6
(0073)   {
(0074)     case 0:
(0075)       isASC ? LEDControl_ChangeState(TRUE,FALSE,FALSE) : LEDControl_ChangeState(FALSE,FALSE,TRUE);
    03D6: 3D FB 00 CMP   [X-5],0x0
    03D9: A0 0E    JZ    0x03E8
    03DB: 50 00    MOV   A,0x0
    03DD: 08       PUSH  A
    03DE: 08       PUSH  A
    03DF: 50 01    MOV   A,0x1
    03E1: 08       PUSH  A
    03E2: 9F 86    CALL  _LEDControl_ChangeState
    03E4: 38 FD    ADD   SP,0xFD
    03E6: 80 0C    JMP   0x03F3
    03E8: 50 01    MOV   A,0x1
    03EA: 08       PUSH  A
    03EB: 50 00    MOV   A,0x0
    03ED: 08       PUSH  A
    03EE: 08       PUSH  A
    03EF: 9F 79    CALL  _LEDControl_ChangeState
    03F1: 38 FD    ADD   SP,0xFD
(0076) 	  return isASC ? RED : BLUE;
    03F3: 3D FB 00 CMP   [X-5],0x0
    03F6: A0 09    JZ    0x0400
    03F8: 56 03 03 MOV   [X+3],0x3
    03FB: 56 02 00 MOV   [X+2],0x0
    03FE: 80 07    JMP   0x0406
    0400: 56 03 01 MOV   [X+3],0x1
    0403: 56 02 00 MOV   [X+2],0x0
    0406: 62 D0 00 MOV   REG[0xD0],0x0
    0409: 52 03    MOV   A,[X+3]
    040B: 80 AF    JMP   0x04BB
(0077)       break;
(0078)     case GREEN:
(0079) 	  isASC ? LEDControl_ChangeState(FALSE,FALSE,TRUE) : LEDControl_ChangeState(TRUE,FALSE,FALSE);
    040D: 3D FB 00 CMP   [X-5],0x0
    0410: A0 0E    JZ    0x041F
    0412: 50 01    MOV   A,0x1
    0414: 08       PUSH  A
    0415: 50 00    MOV   A,0x0
    0417: 08       PUSH  A
    0418: 08       PUSH  A
    0419: 9F 4F    CALL  _LEDControl_ChangeState
    041B: 38 FD    ADD   SP,0xFD
    041D: 80 0C    JMP   0x042A
    041F: 50 00    MOV   A,0x0
    0421: 08       PUSH  A
    0422: 08       PUSH  A
    0423: 50 01    MOV   A,0x1
    0425: 08       PUSH  A
    0426: 9F 42    CALL  _LEDControl_ChangeState
    0428: 38 FD    ADD   SP,0xFD
(0080)       return isASC ? BLUE : RED;      
    042A: 3D FB 00 CMP   [X-5],0x0
    042D: A0 09    JZ    0x0437
    042F: 56 05 01 MOV   [X+5],0x1
    0432: 56 04 00 MOV   [X+4],0x0
    0435: 80 07    JMP   0x043D
    0437: 56 05 03 MOV   [X+5],0x3
    043A: 56 04 00 MOV   [X+4],0x0
    043D: 62 D0 00 MOV   REG[0xD0],0x0
    0440: 52 05    MOV   A,[X+5]
    0442: 80 78    JMP   0x04BB
(0081)       break;
(0082)     case BLUE:
(0083) 	  isASC ? LEDControl_ChangeState(TRUE,FALSE,FALSE) : LEDControl_ChangeState(FALSE,TRUE,FALSE);
    0444: 3D FB 00 CMP   [X-5],0x0
    0447: A0 0E    JZ    0x0456
    0449: 50 00    MOV   A,0x0
    044B: 08       PUSH  A
    044C: 08       PUSH  A
    044D: 50 01    MOV   A,0x1
    044F: 08       PUSH  A
    0450: 9F 18    CALL  _LEDControl_ChangeState
    0452: 38 FD    ADD   SP,0xFD
    0454: 80 0E    JMP   0x0463
    0456: 50 00    MOV   A,0x0
    0458: 08       PUSH  A
    0459: 50 01    MOV   A,0x1
    045B: 08       PUSH  A
    045C: 50 00    MOV   A,0x0
    045E: 08       PUSH  A
    045F: 9F 09    CALL  _LEDControl_ChangeState
    0461: 38 FD    ADD   SP,0xFD
(0084)       return isASC ? RED : GREEN;		
    0463: 3D FB 00 CMP   [X-5],0x0
    0466: A0 09    JZ    0x0470
    0468: 56 07 03 MOV   [X+7],0x3
    046B: 56 06 00 MOV   [X+6],0x0
    046E: 80 07    JMP   0x0476
    0470: 56 07 02 MOV   [X+7],0x2
    0473: 56 06 00 MOV   [X+6],0x0
    0476: 62 D0 00 MOV   REG[0xD0],0x0
    0479: 52 07    MOV   A,[X+7]
    047B: 80 3F    JMP   0x04BB
(0085)       break;
(0086)     case RED:
(0087) 	  isASC ? LEDControl_ChangeState(FALSE,TRUE,FALSE) : LEDControl_ChangeState(FALSE,FALSE,TRUE);
    047D: 3D FB 00 CMP   [X-5],0x0
    0480: A0 10    JZ    0x0491
    0482: 50 00    MOV   A,0x0
    0484: 08       PUSH  A
    0485: 50 01    MOV   A,0x1
    0487: 08       PUSH  A
    0488: 50 00    MOV   A,0x0
    048A: 08       PUSH  A
    048B: 9E DD    CALL  _LEDControl_ChangeState
    048D: 38 FD    ADD   SP,0xFD
    048F: 80 0C    JMP   0x049C
    0491: 50 01    MOV   A,0x1
    0493: 08       PUSH  A
    0494: 50 00    MOV   A,0x0
    0496: 08       PUSH  A
    0497: 08       PUSH  A
    0498: 9E D0    CALL  _LEDControl_ChangeState
    049A: 38 FD    ADD   SP,0xFD
(0088)       return isASC ? GREEN : BLUE;
    049C: 3D FB 00 CMP   [X-5],0x0
    049F: A0 09    JZ    0x04A9
    04A1: 56 09 02 MOV   [X+9],0x2
    04A4: 56 08 00 MOV   [X+8],0x0
    04A7: 80 07    JMP   0x04AF
    04A9: 56 09 01 MOV   [X+9],0x1
    04AC: 56 08 00 MOV   [X+8],0x0
    04AF: 62 D0 00 MOV   REG[0xD0],0x0
    04B2: 52 09    MOV   A,[X+9]
    04B4: 80 06    JMP   0x04BB
(0089)       break;
(0090)     default:
(0091)       return 0;
    04B6: 62 D0 00 MOV   REG[0xD0],0x0
    04B9: 50 00    MOV   A,0x0
(0092)       break;
    04BB: 38 F6    ADD   SP,0xF6
    04BD: 20       POP   X
    04BE: 7F       RET   
(0093)   }      
(0094) }
(0095) 
(0096) /// <summary>
(0097) /// Funkcja waliduje wartosc czestotliwosci migania diody
(0098) /// </summary>
(0099) /// <remarks>
(0100) /// <para>Funkcja dodaje liczbe addValue która może być ujemna do wartosci podanej w pierwszym parametrze</para>
(0101) /// </remarks>
(0102) /// <returns>
(0103) /// <para>Jeśli wartość jest mniejsza od 0 to zwraca zero w przeciwnym wypadku</para>
(0104) /// <para>Jeśli wartość jest wieksza od stalej <c>IntervalLimit</c> to zwraca wartosc <c>IntervalLimit</c></para>
(0105) /// <para>W przeciwnym wypadku zwraca obliczona wartosc</para>
(0106) /// </returns>
(0107) /// <param name="sourceValue">Wartosc modyfikowana</param>
(0108) /// <param name="addValue">Wartosc o ktora bedzie modyfikowana wartosc zrodlowa</param>
(0109) int LEDControl_ValueValidation(int sourceValue, int addValue)
(0110) {
_LEDControl_ValueValidation:
  addValue             --> X-7
  sourceValue          --> X-5
    04BF: 10       PUSH  X
    04C0: 4F       MOV   X,SP
    04C1: 38 04    ADD   SP,0x4
(0111)   sourceValue += addValue;
    04C3: 52 FA    MOV   A,[X-6]
    04C5: 05 FC    ADD   [X-4],A
    04C7: 52 F9    MOV   A,[X-7]
    04C9: 0D FB    ADC   [X-5],A
(0112)   sourceValue = sourceValue < 0 ? 0 : sourceValue > IntervalLimit ? IntervalLimit : sourceValue;
    04CB: 52 FC    MOV   A,[X-4]
    04CD: 11 00    SUB   A,0x0
    04CF: 52 FB    MOV   A,[X-5]
    04D1: 31 80    XOR   A,0x80
    04D3: 19 80    SBB   A,0x80
    04D5: D0 09    JNC   0x04DF
    04D7: 56 01 00 MOV   [X+1],0x0
    04DA: 56 00 00 MOV   [X+0],0x0
    04DD: 80 2C    JMP   0x050A
    04DF: 50 50    MOV   A,0x50
    04E1: 13 FC    SUB   A,[X-4]
    04E3: 52 FB    MOV   A,[X-5]
    04E5: 31 80    XOR   A,0x80
    04E7: 62 D0 00 MOV   REG[0xD0],0x0
    04EA: 53 03    MOV   [__rX],A
    04EC: 50 80    MOV   A,0x80
    04EE: 1A 03    SBB   A,[__rX]
    04F0: D0 09    JNC   0x04FA
    04F2: 56 03 50 MOV   [X+3],0x50
    04F5: 56 02 00 MOV   [X+2],0x0
    04F8: 80 09    JMP   0x0502
    04FA: 52 FC    MOV   A,[X-4]
    04FC: 54 03    MOV   [X+3],A
    04FE: 52 FB    MOV   A,[X-5]
    0500: 54 02    MOV   [X+2],A
    0502: 52 03    MOV   A,[X+3]
    0504: 54 01    MOV   [X+1],A
    0506: 52 02    MOV   A,[X+2]
    0508: 54 00    MOV   [X+0],A
    050A: 52 01    MOV   A,[X+1]
    050C: 54 FC    MOV   [X-4],A
    050E: 52 00    MOV   A,[X+0]
    0510: 54 FB    MOV   [X-5],A
(0113)   return sourceValue;
    0512: 62 D0 00 MOV   REG[0xD0],0x0
    0515: 52 FC    MOV   A,[X-4]
    0517: 53 04    MOV   [__r1],A
    0519: 52 FB    MOV   A,[X-5]
    051B: 53 05    MOV   [__r0],A
    051D: 38 FC    ADD   SP,0xFC
    051F: 20       POP   X
    0520: 7F       RET   
(0114) }
(0115) 
(0116) 
(0117) void LEDControl_ChangeFrequency(BYTE led,int value,BYTE isAdd)
(0118) {
_LEDControl_ChangeFrequency:
  isAdd                --> X-7
  value                --> X-6
  led                  --> X-4
    0521: 10       PUSH  X
    0522: 4F       MOV   X,SP
    0523: 38 04    ADD   SP,0x4
(0119)   value = isAdd ? value : value * -1;	
    0525: 3D F9 00 CMP   [X-7],0x0
    0528: A0 0B    JZ    0x0534
    052A: 52 FB    MOV   A,[X-5]
    052C: 54 01    MOV   [X+1],A
    052E: 52 FA    MOV   A,[X-6]
    0530: 54 00    MOV   [X+0],A
    0532: 80 1B    JMP   0x054E
    0534: 52 FA    MOV   A,[X-6]
    0536: 08       PUSH  A
    0537: 52 FB    MOV   A,[X-5]
    0539: 08       PUSH  A
    053A: 50 FF    MOV   A,0xFF
    053C: 08       PUSH  A
    053D: 08       PUSH  A
    053E: 62 D0 00 MOV   REG[0xD0],0x0
    0541: 7C 07 4D LCALL 0x074D
    0544: 38 FC    ADD   SP,0xFC
    0546: 51 03    MOV   A,[__rX]
    0548: 54 01    MOV   [X+1],A
    054A: 51 02    MOV   A,[__rY]
    054C: 54 00    MOV   [X+0],A
    054E: 52 01    MOV   A,[X+1]
    0550: 54 FB    MOV   [X-5],A
    0552: 52 00    MOV   A,[X+0]
    0554: 54 FA    MOV   [X-6],A
(0120)   switch (led)
    0556: 52 FC    MOV   A,[X-4]
    0558: 54 03    MOV   [X+3],A
    055A: 56 02 00 MOV   [X+2],0x0
    055D: 3D 02 00 CMP   [X+2],0x0
    0560: B0 06    JNZ   0x0567
    0562: 3D 03 01 CMP   [X+3],0x1
    0565: A0 3C    JZ    0x05A2
    0567: 3D 02 00 CMP   [X+2],0x0
    056A: B0 06    JNZ   0x0571
    056C: 3D 03 02 CMP   [X+3],0x2
    056F: A0 57    JZ    0x05C7
    0571: 3D 02 00 CMP   [X+2],0x0
    0574: B0 06    JNZ   0x057B
    0576: 3D 03 03 CMP   [X+3],0x3
    0579: A0 03    JZ    0x057D
    057B: 80 6E    JMP   0x05EA
(0121)   {
(0122)     case RED:
(0123)       LEDControl_RT = LEDControl_ValueValidation(LEDControl_RT, value);
    057D: 52 FA    MOV   A,[X-6]
    057F: 08       PUSH  A
    0580: 52 FB    MOV   A,[X-5]
    0582: 08       PUSH  A
    0583: 62 D0 00 MOV   REG[0xD0],0x0
    0586: 51 0A    MOV   A,[LEDControl_RT]
    0588: 08       PUSH  A
    0589: 51 0B    MOV   A,[LEDControl_RT+1]
    058B: 08       PUSH  A
    058C: 9F 31    CALL  _LEDControl_ValueValidation
    058E: 38 FC    ADD   SP,0xFC
    0590: 62 D0 00 MOV   REG[0xD0],0x0
    0593: 51 04    MOV   A,[__r1]
    0595: 08       PUSH  A
    0596: 51 05    MOV   A,[__r0]
    0598: 62 D0 00 MOV   REG[0xD0],0x0
    059B: 53 0A    MOV   [LEDControl_RT],A
    059D: 18       POP   A
    059E: 53 0B    MOV   [LEDControl_RT+1],A
(0124)       break;
    05A0: 80 49    JMP   0x05EA
(0125)     case BLUE:
(0126) 	  LEDControl_BT = LEDControl_ValueValidation(LEDControl_BT, value);
    05A2: 52 FA    MOV   A,[X-6]
    05A4: 08       PUSH  A
    05A5: 52 FB    MOV   A,[X-5]
    05A7: 08       PUSH  A
    05A8: 62 D0 00 MOV   REG[0xD0],0x0
    05AB: 51 06    MOV   A,[LEDControl_BT]
    05AD: 08       PUSH  A
    05AE: 51 07    MOV   A,[LEDControl_BT+1]
    05B0: 08       PUSH  A
    05B1: 9F 0C    CALL  _LEDControl_ValueValidation
    05B3: 38 FC    ADD   SP,0xFC
    05B5: 62 D0 00 MOV   REG[0xD0],0x0
    05B8: 51 04    MOV   A,[__r1]
    05BA: 08       PUSH  A
    05BB: 51 05    MOV   A,[__r0]
    05BD: 62 D0 00 MOV   REG[0xD0],0x0
    05C0: 53 06    MOV   [LEDControl_BT],A
    05C2: 18       POP   A
    05C3: 53 07    MOV   [LEDControl_BT+1],A
(0127)       break;
    05C5: 80 24    JMP   0x05EA
(0128)     case GREEN:
(0129) 	  LEDControl_GT = LEDControl_ValueValidation(LEDControl_GT, value);
    05C7: 52 FA    MOV   A,[X-6]
    05C9: 08       PUSH  A
    05CA: 52 FB    MOV   A,[X-5]
    05CC: 08       PUSH  A
    05CD: 62 D0 00 MOV   REG[0xD0],0x0
    05D0: 51 08    MOV   A,[LEDControl_GT]
    05D2: 08       PUSH  A
    05D3: 51 09    MOV   A,[LEDControl_GT+1]
    05D5: 08       PUSH  A
    05D6: 9E E7    CALL  _LEDControl_ValueValidation
    05D8: 38 FC    ADD   SP,0xFC
    05DA: 62 D0 00 MOV   REG[0xD0],0x0
    05DD: 51 04    MOV   A,[__r1]
    05DF: 08       PUSH  A
    05E0: 51 05    MOV   A,[__r0]
    05E2: 62 D0 00 MOV   REG[0xD0],0x0
    05E5: 53 08    MOV   [LEDControl_GT],A
    05E7: 18       POP   A
    05E8: 53 09    MOV   [LEDControl_GT+1],A
(0130)       break;
(0131)     default:
(0132)       break; 
    05EA: 38 FC    ADD   SP,0xFC
    05EC: 20       POP   X
    05ED: 7F       RET   
(0133)   }
(0134) }
(0135) 
(0136) int LEDControl_Blink(BYTE led, int blinkLoop)
(0137) {
_LEDControl_Blink:
  blinkLoop            --> X-6
  led                  --> X-4
    05EE: 10       PUSH  X
    05EF: 4F       MOV   X,SP
    05F0: 38 02    ADD   SP,0x2
(0138)   switch (led)
    05F2: 52 FC    MOV   A,[X-4]
    05F4: 54 01    MOV   [X+1],A
    05F6: 56 00 00 MOV   [X+0],0x0
    05F9: 3D 00 00 CMP   [X+0],0x0
    05FC: B0 06    JNZ   0x0603
    05FE: 3D 01 01 CMP   [X+1],0x1
    0601: A0 47    JZ    0x0649
    0603: 3D 00 00 CMP   [X+0],0x0
    0606: B0 06    JNZ   0x060D
    0608: 3D 01 02 CMP   [X+1],0x2
    060B: A0 6D    JZ    0x0679
    060D: 3D 00 00 CMP   [X+0],0x0
    0610: B0 06    JNZ   0x0617
    0612: 3D 01 03 CMP   [X+1],0x3
    0615: A0 03    JZ    0x0619
    0617: 80 91    JMP   0x06A9
(0139)   {
(0140)     case RED:
(0141)       if (blinkLoop>=LEDControl_RT)
    0619: 62 D0 00 MOV   REG[0xD0],0x0
    061C: 52 FB    MOV   A,[X-5]
    061E: 12 0B    SUB   A,[LEDControl_RT+1]
    0620: 51 0A    MOV   A,[LEDControl_RT]
    0622: 31 80    XOR   A,0x80
    0624: 62 D0 00 MOV   REG[0xD0],0x0
    0627: 53 03    MOV   [__rX],A
    0629: 52 FA    MOV   A,[X-6]
    062B: 31 80    XOR   A,0x80
    062D: 1A 03    SBB   A,[__rX]
    062F: C0 0C    JC    0x063C
(0142)         {
(0143)           LED_RED_Invert();
    0631: 10       PUSH  X
    0632: 7C 02 C2 LCALL _LED_RED_Invert
    0635: 20       POP   X
(0144)           blinkLoop = 0;
    0636: 56 FB 00 MOV   [X-5],0x0
    0639: 56 FA 00 MOV   [X-6],0x0
(0145)         }
(0146)         return blinkLoop;
    063C: 62 D0 00 MOV   REG[0xD0],0x0
    063F: 52 FB    MOV   A,[X-5]
    0641: 53 04    MOV   [__r1],A
    0643: 52 FA    MOV   A,[X-6]
    0645: 53 05    MOV   [__r0],A
    0647: 80 6C    JMP   0x06B4
(0147)         break;
(0148)     case BLUE:
(0149)       if (blinkLoop>=LEDControl_BT)
    0649: 62 D0 00 MOV   REG[0xD0],0x0
    064C: 52 FB    MOV   A,[X-5]
    064E: 12 07    SUB   A,[LEDControl_BT+1]
    0650: 51 06    MOV   A,[LEDControl_BT]
    0652: 31 80    XOR   A,0x80
    0654: 62 D0 00 MOV   REG[0xD0],0x0
    0657: 53 03    MOV   [__rX],A
    0659: 52 FA    MOV   A,[X-6]
    065B: 31 80    XOR   A,0x80
    065D: 1A 03    SBB   A,[__rX]
    065F: C0 0C    JC    0x066C
(0150)       {
(0151)         LED_BLUE_Invert();
    0661: 10       PUSH  X
    0662: 7C 03 3C LCALL _LED_BLUE_Invert
    0665: 20       POP   X
(0152)         blinkLoop = 0;
    0666: 56 FB 00 MOV   [X-5],0x0
    0669: 56 FA 00 MOV   [X-6],0x0
(0153)       }
(0154)       return blinkLoop;
    066C: 62 D0 00 MOV   REG[0xD0],0x0
    066F: 52 FB    MOV   A,[X-5]
    0671: 53 04    MOV   [__r1],A
    0673: 52 FA    MOV   A,[X-6]
    0675: 53 05    MOV   [__r0],A
    0677: 80 3C    JMP   0x06B4
(0155)       break;
(0156)     case GREEN:
(0157)       if (blinkLoop>=LEDControl_GT)
    0679: 62 D0 00 MOV   REG[0xD0],0x0
    067C: 52 FB    MOV   A,[X-5]
    067E: 12 09    SUB   A,[LEDControl_GT+1]
    0680: 51 08    MOV   A,[LEDControl_GT]
    0682: 31 80    XOR   A,0x80
    0684: 62 D0 00 MOV   REG[0xD0],0x0
    0687: 53 03    MOV   [__rX],A
    0689: 52 FA    MOV   A,[X-6]
    068B: 31 80    XOR   A,0x80
    068D: 1A 03    SBB   A,[__rX]
    068F: C0 0C    JC    0x069C
(0158)       {
(0159)         LED_GREEN_Invert();
    0691: 10       PUSH  X
    0692: 7C 02 FF LCALL _LED_GREEN_Invert
    0695: 20       POP   X
(0160)         blinkLoop = 0;
    0696: 56 FB 00 MOV   [X-5],0x0
    0699: 56 FA 00 MOV   [X-6],0x0
(0161)       }
(0162)       return blinkLoop;
    069C: 62 D0 00 MOV   REG[0xD0],0x0
    069F: 52 FB    MOV   A,[X-5]
    06A1: 53 04    MOV   [__r1],A
    06A3: 52 FA    MOV   A,[X-6]
    06A5: 53 05    MOV   [__r0],A
    06A7: 80 0C    JMP   0x06B4
(0163)       break;
(0164)     default:
(0165)       return blinkLoop;
    06A9: 62 D0 00 MOV   REG[0xD0],0x0
    06AC: 52 FB    MOV   A,[X-5]
    06AE: 53 04    MOV   [__r1],A
    06B0: 52 FA    MOV   A,[X-6]
    06B2: 53 05    MOV   [__r0],A
(0166)       break; 
    06B4: 38 FE    ADD   SP,0xFE
(0167)   }
(0168) }FILE: D:\Studia\PSOC\LED\LED\LED\main.c
(0001) #include <m8c.h>        
(0002) #include "PSoCAPI.h"    
(0003) #include "LEDControl.h" //Biblioteka do obslugi diod LED
(0004) 
(0005) void main(void)
(0006) {	
_main:
  blinkLoopB           --> X+4
  blinkLoopG           --> X+2
  blinkLoopR           --> X+0
    06B8: 10       PUSH  X
    06B9: 4F       MOV   X,SP
    06BA: 38 06    ADD   SP,0x6
(0007)   int blinkLoopR=0;	 
    06BC: 56 01 00 MOV   [X+1],0x0
    06BF: 56 00 00 MOV   [X+0],0x0
(0008)   int blinkLoopG=0;	
    06C2: 56 03 00 MOV   [X+3],0x0
    06C5: 56 02 00 MOV   [X+2],0x0
(0009)   int blinkLoopB=0;		
    06C8: 56 05 00 MOV   [X+5],0x0
    06CB: 56 04 00 MOV   [X+4],0x0
(0010) 
(0011)   LEDControl_INIT();
    06CE: 7C 03 5B LCALL __UserModules_end|__text_start|_LEDControl_INIT|_LEDControl_INIT
(0012) 	
(0013)   LEDControl_RT = 500;
    06D1: 62 D0 00 MOV   REG[0xD0],0x0
    06D4: 55 0B F4 MOV   [LEDControl_RT+1],0xF4
    06D7: 55 0A 01 MOV   [LEDControl_RT],0x1
(0014)   LEDControl_GT = 1000;
    06DA: 62 D0 00 MOV   REG[0xD0],0x0
    06DD: 55 09 E8 MOV   [LEDControl_GT+1],0xE8
    06E0: 55 08 03 MOV   [LEDControl_GT],0x3
(0015)   LEDControl_BT = 1500;
    06E3: 62 D0 00 MOV   REG[0xD0],0x0
    06E6: 55 07 DC MOV   [LEDControl_BT+1],0xDC
    06E9: 55 06 05 MOV   [LEDControl_BT],0x5
    06EC: 80 59    JMP   0x0746
(0016) 
(0017)   while(1)
(0018)   {	
(0019)     blinkLoopR++;
    06EE: 77 01    INC   [X+1]
    06F0: 0F 00 00 ADC   [X+0],0x0
(0020)     blinkLoopR=LEDControl_Blink(3,blinkLoopR);
    06F3: 52 00    MOV   A,[X+0]
    06F5: 08       PUSH  A
    06F6: 52 01    MOV   A,[X+1]
    06F8: 08       PUSH  A
    06F9: 50 03    MOV   A,0x3
    06FB: 08       PUSH  A
    06FC: 7C 05 EE LCALL _LEDControl_Blink
    06FF: 38 FD    ADD   SP,0xFD
    0701: 62 D0 00 MOV   REG[0xD0],0x0
    0704: 51 04    MOV   A,[__r1]
    0706: 54 01    MOV   [X+1],A
    0708: 51 05    MOV   A,[__r0]
    070A: 54 00    MOV   [X+0],A
(0021) 		
(0022)     blinkLoopG++;
    070C: 77 03    INC   [X+3]
    070E: 0F 02 00 ADC   [X+2],0x0
(0023)     blinkLoopG=LEDControl_Blink(2,blinkLoopG);
    0711: 52 02    MOV   A,[X+2]
    0713: 08       PUSH  A
    0714: 52 03    MOV   A,[X+3]
    0716: 08       PUSH  A
    0717: 50 02    MOV   A,0x2
    0719: 08       PUSH  A
    071A: 7C 05 EE LCALL _LEDControl_Blink
    071D: 62 D0 00 MOV   REG[0xD0],0x0
    0720: 51 04    MOV   A,[__r1]
    0722: 54 03    MOV   [X+3],A
    0724: 51 05    MOV   A,[__r0]
    0726: 54 02    MOV   [X+2],A
(0024) 		
(0025)     blinkLoopB++;
    0728: 77 05    INC   [X+5]
    072A: 0F 04 00 ADC   [X+4],0x0
(0026)     blinkLoopB=LEDControl_Blink(1,blinkLoopB);
    072D: 52 04    MOV   A,[X+4]
    072F: 08       PUSH  A
    0730: 52 05    MOV   A,[X+5]
    0732: 08       PUSH  A
    0733: 50 01    MOV   A,0x1
    0735: 08       PUSH  A
    0736: 7C 05 EE LCALL _LEDControl_Blink
    0739: 38 FA    ADD   SP,0xFA
    073B: 62 D0 00 MOV   REG[0xD0],0x0
    073E: 51 04    MOV   A,[__r1]
    0740: 54 05    MOV   [X+5],A
    0742: 51 05    MOV   A,[__r0]
    0744: 54 04    MOV   [X+4],A
(0027)   }
    0746: 8F A7    JMP   0x06EE
(0028) }
    0748: 38 FA    ADD   SP,0xFA
    074A: 20       POP   X
    074B: 8F FF    JMP   0x074B
